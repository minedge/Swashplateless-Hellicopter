
SwashplatelessHeli_noRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800dd80  0800dd80  0001dd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e150  0800e150  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e150  0800e150  0001e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e158  0800e158  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e158  0800e158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e15c  0800e15c  0001e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800e160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004350  20000078  0800e1d8  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200043c8  0800e1d8  000243c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003276d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005630  00000000  00000000  00052815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00057e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d50  00000000  00000000  00059da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dc1  00000000  00000000  0005baf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024d9e  00000000  00000000  0007e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d62e3  00000000  00000000  000a364f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008aec  00000000  00000000  00179988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dd64 	.word	0x0800dd64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800dd64 	.word	0x0800dd64

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <CommandGennerate>:


#include <Controller/AttitudeController.h>


PQR_CMD CommandGennerate(IMU imu_data, RC rc_cmd){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000ef0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	PQR_CMD pqr_cmd;

	pqr_cmd.P_cmd = rc_cmd.d_pi - sin(imu_data.theta*3.141592/180.)*rc_cmd.d_psi;
 8000ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff faf6 	bl	80004e8 <__aeabi_f2d>
 8000efc:	4604      	mov	r4, r0
 8000efe:	460d      	mov	r5, r1
 8000f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff faf0 	bl	80004e8 <__aeabi_f2d>
 8000f08:	a3ad      	add	r3, pc, #692	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb43 	bl	8000598 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	4baa      	ldr	r3, [pc, #680]	; (80011c8 <CommandGennerate+0x2e8>)
 8000f20:	f7ff fc64 	bl	80007ec <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	ec43 2b17 	vmov	d7, r2, r3
 8000f2c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f30:	eef0 0a67 	vmov.f32	s1, s15
 8000f34:	f00a fcec 	bl	800b910 <sin>
 8000f38:	ec59 8b10 	vmov	r8, r9, d0
 8000f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fad2 	bl	80004e8 <__aeabi_f2d>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4640      	mov	r0, r8
 8000f4a:	4649      	mov	r1, r9
 8000f4c:	f7ff fb24 	bl	8000598 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff f966 	bl	8000228 <__aeabi_dsub>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fdf0 	bl	8000b48 <__aeabi_d2f>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60bb      	str	r3, [r7, #8]
	pqr_cmd.Q_cmd = cos(imu_data.pi*3.141592/180.)*rc_cmd.d_theta + cos(imu_data.theta*3.141592/180.)*sin(imu_data.pi*3.141592/180.)*rc_cmd.d_psi;
 8000f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff faba 	bl	80004e8 <__aeabi_f2d>
 8000f74:	a392      	add	r3, pc, #584	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fb0d 	bl	8000598 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b8f      	ldr	r3, [pc, #572]	; (80011c8 <CommandGennerate+0x2e8>)
 8000f8c:	f7ff fc2e 	bl	80007ec <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	ec43 2b17 	vmov	d7, r2, r3
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	f00a fc66 	bl	800b870 <cos>
 8000fa4:	ec55 4b10 	vmov	r4, r5, d0
 8000fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa9c 	bl	80004e8 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f7ff faee 	bl	8000598 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	461d      	mov	r5, r3
 8000fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fa8e 	bl	80004e8 <__aeabi_f2d>
 8000fcc:	a37c      	add	r3, pc, #496	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	f7ff fae1 	bl	8000598 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <CommandGennerate+0x2e8>)
 8000fe4:	f7ff fc02 	bl	80007ec <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	ec43 2b17 	vmov	d7, r2, r3
 8000ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff4:	eef0 0a67 	vmov.f32	s1, s15
 8000ff8:	f00a fc3a 	bl	800b870 <cos>
 8000ffc:	ec59 8b10 	vmov	r8, r9, d0
 8001000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa70 	bl	80004e8 <__aeabi_f2d>
 8001008:	a36d      	add	r3, pc, #436	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f7ff fac3 	bl	8000598 <__aeabi_dmul>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4610      	mov	r0, r2
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <CommandGennerate+0x2e8>)
 8001020:	f7ff fbe4 	bl	80007ec <__aeabi_ddiv>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	ec43 2b17 	vmov	d7, r2, r3
 800102c:	eeb0 0a47 	vmov.f32	s0, s14
 8001030:	eef0 0a67 	vmov.f32	s1, s15
 8001034:	f00a fc6c 	bl	800b910 <sin>
 8001038:	ec53 2b10 	vmov	r2, r3, d0
 800103c:	4640      	mov	r0, r8
 800103e:	4649      	mov	r1, r9
 8001040:	f7ff faaa 	bl	8000598 <__aeabi_dmul>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	4690      	mov	r8, r2
 800104a:	4699      	mov	r9, r3
 800104c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa4a 	bl	80004e8 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4640      	mov	r0, r8
 800105a:	4649      	mov	r1, r9
 800105c:	f7ff fa9c 	bl	8000598 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f8e0 	bl	800022c <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd68 	bl	8000b48 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	60fb      	str	r3, [r7, #12]
	pqr_cmd.R_cmd = cos(imu_data.theta*3.141592/180.)*cos(imu_data.pi*3.141592/180.)*rc_cmd.d_psi - sin(imu_data.pi*3.141592/180.)*rc_cmd.d_theta;
 800107c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa32 	bl	80004e8 <__aeabi_f2d>
 8001084:	a34e      	add	r3, pc, #312	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fa85 	bl	8000598 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <CommandGennerate+0x2e8>)
 800109c:	f7ff fba6 	bl	80007ec <__aeabi_ddiv>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	ec43 2b17 	vmov	d7, r2, r3
 80010a8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ac:	eef0 0a67 	vmov.f32	s1, s15
 80010b0:	f00a fbde 	bl	800b870 <cos>
 80010b4:	ec55 4b10 	vmov	r4, r5, d0
 80010b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa14 	bl	80004e8 <__aeabi_f2d>
 80010c0:	a33f      	add	r3, pc, #252	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa67 	bl	8000598 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <CommandGennerate+0x2e8>)
 80010d8:	f7ff fb88 	bl	80007ec <__aeabi_ddiv>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	ec43 2b17 	vmov	d7, r2, r3
 80010e4:	eeb0 0a47 	vmov.f32	s0, s14
 80010e8:	eef0 0a67 	vmov.f32	s1, s15
 80010ec:	f00a fbc0 	bl	800b870 <cos>
 80010f0:	ec53 2b10 	vmov	r2, r3, d0
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fa4e 	bl	8000598 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4614      	mov	r4, r2
 8001102:	461d      	mov	r5, r3
 8001104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f9ee 	bl	80004e8 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4620      	mov	r0, r4
 8001112:	4629      	mov	r1, r5
 8001114:	f7ff fa40 	bl	8000598 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4614      	mov	r4, r2
 800111e:	461d      	mov	r5, r3
 8001120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f9e0 	bl	80004e8 <__aeabi_f2d>
 8001128:	a325      	add	r3, pc, #148	; (adr r3, 80011c0 <CommandGennerate+0x2e0>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa33 	bl	8000598 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <CommandGennerate+0x2e8>)
 8001140:	f7ff fb54 	bl	80007ec <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f00a fbdc 	bl	800b910 <sin>
 8001158:	ec59 8b10 	vmov	r8, r9, d0
 800115c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9c2 	bl	80004e8 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4640      	mov	r0, r8
 800116a:	4649      	mov	r1, r9
 800116c:	f7ff fa14 	bl	8000598 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f856 	bl	8000228 <__aeabi_dsub>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fce0 	bl	8000b48 <__aeabi_d2f>
 8001188:	4603      	mov	r3, r0
 800118a:	613b      	str	r3, [r7, #16]

	pqr_cmd.pi = rc_cmd.pi;
 800118c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800118e:	617b      	str	r3, [r7, #20]
	pqr_cmd.theta = rc_cmd.theta;
 8001190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001192:	61bb      	str	r3, [r7, #24]
	pqr_cmd.psi = 0;
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]

	return pqr_cmd;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	461d      	mov	r5, r3
 800119e:	f107 0408 	add.w	r4, r7, #8
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011aa:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr
 80011bc:	f3af 8000 	nop.w
 80011c0:	fc8b007a 	.word	0xfc8b007a
 80011c4:	400921fa 	.word	0x400921fa
 80011c8:	40668000 	.word	0x40668000

080011cc <setAmplitudeGain>:
 */


#include <Controller/CyclicPitchController.h>

void setAmplitudeGain(float gain){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
	amplitude_gain = gain;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <setAmplitudeGain+0x1c>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20002e88 	.word	0x20002e88

080011ec <setShiftGain>:
void setShiftGain(float gain){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	ed87 0a01 	vstr	s0, [r7, #4]
	cyclic_shift_gain = gain;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <setShiftGain+0x1c>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20003294 	.word	0x20003294
 800120c:	00000000 	.word	0x00000000

08001210 <setAmplitude>:

float setAmplitude(PWM_CMD pwm_cmd, PQR_CMD pqr_cmd){
 8001210:	b084      	sub	sp, #16
 8001212:	b5b0      	push	{r4, r5, r7, lr}
 8001214:	b088      	sub	sp, #32
 8001216:	af00      	add	r7, sp, #0
 8001218:	eef0 6a40 	vmov.f32	s13, s0
 800121c:	eeb0 7a60 	vmov.f32	s14, s1
 8001220:	eef0 7a41 	vmov.f32	s15, s2
 8001224:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800122c:	edc7 6a01 	vstr	s13, [r7, #4]
 8001230:	ed87 7a02 	vstr	s14, [r7, #8]
 8001234:	edc7 7a03 	vstr	s15, [r7, #12]
	float amplitude_v = sqrt(pow(pqr_cmd.P_cmd, 2) + pow(pqr_cmd.Q_cmd, 2));
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f954 	bl	80004e8 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8001398 <setAmplitude+0x188>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f00a fbee 	bl	800ba2c <pow>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f946 	bl	80004e8 <__aeabi_f2d>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001398 <setAmplitude+0x188>
 8001264:	ec43 2b10 	vmov	d0, r2, r3
 8001268:	f00a fbe0 	bl	800ba2c <pow>
 800126c:	ec53 2b10 	vmov	r2, r3, d0
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7fe ffda 	bl	800022c <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	ec43 2b17 	vmov	d7, r2, r3
 8001280:	eeb0 0a47 	vmov.f32	s0, s14
 8001284:	eef0 0a67 	vmov.f32	s1, s15
 8001288:	f00a fc7e 	bl	800bb88 <sqrt>
 800128c:	ec53 2b10 	vmov	r2, r3, d0
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fc58 	bl	8000b48 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
 800129a:	61fb      	str	r3, [r7, #28]
	float amplitude_a = sqrt(pow(pqr_cmd.pi, 2) + pow(pqr_cmd.theta, 2));
 800129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f922 	bl	80004e8 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001398 <setAmplitude+0x188>
 80012ac:	ec43 2b10 	vmov	d0, r2, r3
 80012b0:	f00a fbbc 	bl	800ba2c <pow>
 80012b4:	ec55 4b10 	vmov	r4, r5, d0
 80012b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f914 	bl	80004e8 <__aeabi_f2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8001398 <setAmplitude+0x188>
 80012c8:	ec43 2b10 	vmov	d0, r2, r3
 80012cc:	f00a fbae 	bl	800ba2c <pow>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
 80012d4:	4620      	mov	r0, r4
 80012d6:	4629      	mov	r1, r5
 80012d8:	f7fe ffa8 	bl	800022c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ec43 2b17 	vmov	d7, r2, r3
 80012e4:	eeb0 0a47 	vmov.f32	s0, s14
 80012e8:	eef0 0a67 	vmov.f32	s1, s15
 80012ec:	f00a fc4c 	bl	800bb88 <sqrt>
 80012f0:	ec53 2b10 	vmov	r2, r3, d0
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc26 	bl	8000b48 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	61bb      	str	r3, [r7, #24]

	float amplitude = (amplitude_v + amplitude_a)/2;
 8001300:	ed97 7a07 	vldr	s14, [r7, #28]
 8001304:	edd7 7a06 	vldr	s15, [r7, #24]
 8001308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800130c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	edc7 7a05 	vstr	s15, [r7, #20]
	amplitude += pow(pwm_cmd.throttle - PWM_MIN, 2) * amplitude_gain;
 8001318:	edd7 7a01 	vldr	s15, [r7, #4]
 800131c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013a0 <setAmplitude+0x190>
 8001320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001324:	ee17 0a90 	vmov	r0, s15
 8001328:	f7ff f8de 	bl	80004e8 <__aeabi_f2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001398 <setAmplitude+0x188>
 8001334:	ec43 2b10 	vmov	d0, r2, r3
 8001338:	f00a fb78 	bl	800ba2c <pow>
 800133c:	ec55 4b10 	vmov	r4, r5, d0
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <setAmplitude+0x194>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f8cf 	bl	80004e8 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff f921 	bl	8000598 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4614      	mov	r4, r2
 800135c:	461d      	mov	r5, r3
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff f8c2 	bl	80004e8 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ff5e 	bl	800022c <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fbe6 	bl	8000b48 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	617b      	str	r3, [r7, #20]

	return amplitude;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	ee07 3a90 	vmov	s15, r3
}
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001392:	b004      	add	sp, #16
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	00000000 	.word	0x00000000
 800139c:	40000000 	.word	0x40000000
 80013a0:	447a0000 	.word	0x447a0000
 80013a4:	20002e88 	.word	0x20002e88

080013a8 <setCyclicShift>:

float setCyclicShift(MOTOR mag_data, PQR_CMD pqr_cmd){
 80013a8:	b084      	sub	sp, #16
 80013aa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	f107 0420 	add.w	r4, r7, #32
 80013b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if((pqr_cmd.Q_cmd > -0.1 && pqr_cmd.Q_cmd < 0.1) && (pqr_cmd.P_cmd > -0.1 && pqr_cmd.P_cmd < 0.1)) // stick zero input margin error
 80013ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f893 	bl	80004e8 <__aeabi_f2d>
 80013c2:	a35a      	add	r3, pc, #360	; (adr r3, 800152c <setCyclicShift+0x184>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff fb76 	bl	8000ab8 <__aeabi_dcmpgt>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d025      	beq.n	800141e <setCyclicShift+0x76>
 80013d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f887 	bl	80004e8 <__aeabi_f2d>
 80013da:	a356      	add	r3, pc, #344	; (adr r3, 8001534 <setCyclicShift+0x18c>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff fb4c 	bl	8000a7c <__aeabi_dcmplt>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d019      	beq.n	800141e <setCyclicShift+0x76>
 80013ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f87b 	bl	80004e8 <__aeabi_f2d>
 80013f2:	a34e      	add	r3, pc, #312	; (adr r3, 800152c <setCyclicShift+0x184>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff fb5e 	bl	8000ab8 <__aeabi_dcmpgt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00d      	beq.n	800141e <setCyclicShift+0x76>
 8001402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f86f 	bl	80004e8 <__aeabi_f2d>
 800140a:	a34a      	add	r3, pc, #296	; (adr r3, 8001534 <setCyclicShift+0x18c>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff fb34 	bl	8000a7c <__aeabi_dcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <setCyclicShift+0x76>
		return -1;
 800141a:	4b43      	ldr	r3, [pc, #268]	; (8001528 <setCyclicShift+0x180>)
 800141c:	e072      	b.n	8001504 <setCyclicShift+0x15c>

	float cmd_mix = pqr_cmd.Q_cmd / sqrt(pow(pqr_cmd.P_cmd, 2) + pow(pqr_cmd.Q_cmd, 2));
 800141e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f861 	bl	80004e8 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
 800142a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f85b 	bl	80004e8 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8001518 <setCyclicShift+0x170>
 800143a:	ec43 2b10 	vmov	d0, r2, r3
 800143e:	f00a faf5 	bl	800ba2c <pow>
 8001442:	ec59 8b10 	vmov	r8, r9, d0
 8001446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f84d 	bl	80004e8 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001518 <setCyclicShift+0x170>
 8001456:	ec43 2b10 	vmov	d0, r2, r3
 800145a:	f00a fae7 	bl	800ba2c <pow>
 800145e:	ec53 2b10 	vmov	r2, r3, d0
 8001462:	4640      	mov	r0, r8
 8001464:	4649      	mov	r1, r9
 8001466:	f7fe fee1 	bl	800022c <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	ec43 2b17 	vmov	d7, r2, r3
 8001472:	eeb0 0a47 	vmov.f32	s0, s14
 8001476:	eef0 0a67 	vmov.f32	s1, s15
 800147a:	f00a fb85 	bl	800bb88 <sqrt>
 800147e:	ec53 2b10 	vmov	r2, r3, d0
 8001482:	4620      	mov	r0, r4
 8001484:	4629      	mov	r1, r5
 8001486:	f7ff f9b1 	bl	80007ec <__aeabi_ddiv>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb59 	bl	8000b48 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	603b      	str	r3, [r7, #0]

	float start_rad = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
	if(pqr_cmd.P_cmd < 0){
 80014a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d518      	bpl.n	80014e0 <setCyclicShift+0x138>
			start_rad = (2*3.141592) - acos(cmd_mix);
 80014ae:	6838      	ldr	r0, [r7, #0]
 80014b0:	f7ff f81a 	bl	80004e8 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f00a fa7c 	bl	800b9b8 <acos>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	a116      	add	r1, pc, #88	; (adr r1, 8001520 <setCyclicShift+0x178>)
 80014c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014ca:	f7fe fead 	bl	8000228 <__aeabi_dsub>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb37 	bl	8000b48 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e010      	b.n	8001502 <setCyclicShift+0x15a>
	}
	else{
			start_rad = acos(cmd_mix);
 80014e0:	6838      	ldr	r0, [r7, #0]
 80014e2:	f7ff f801 	bl	80004e8 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	ec43 2b10 	vmov	d0, r2, r3
 80014ee:	f00a fa63 	bl	800b9b8 <acos>
 80014f2:	ec53 2b10 	vmov	r2, r3, d0
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f7ff fb25 	bl	8000b48 <__aeabi_d2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	607b      	str	r3, [r7, #4]
	}

	return start_rad;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	ee07 3a90 	vmov	s15, r3
}
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001514:	b004      	add	sp, #16
 8001516:	4770      	bx	lr
 8001518:	00000000 	.word	0x00000000
 800151c:	40000000 	.word	0x40000000
 8001520:	fc8b007a 	.word	0xfc8b007a
 8001524:	401921fa 	.word	0x401921fa
 8001528:	bf800000 	.word	0xbf800000
 800152c:	9999999a 	.word	0x9999999a
 8001530:	bfb99999 	.word	0xbfb99999
 8001534:	9999999a 	.word	0x9999999a
 8001538:	3fb99999 	.word	0x3fb99999

0800153c <setPIDGain>:


#include "Controller/PID.h"


void setPIDGain(float Kp, float Ki, float Kd, uint8_t spc){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	ed87 0a03 	vstr	s0, [r7, #12]
 8001546:	edc7 0a02 	vstr	s1, [r7, #8]
 800154a:	ed87 1a01 	vstr	s2, [r7, #4]
 800154e:	4603      	mov	r3, r0
 8001550:	70fb      	strb	r3, [r7, #3]
	switch(spc){
 8001552:	78fb      	ldrb	r3, [r7, #3]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d83f      	bhi.n	80015d8 <setPIDGain+0x9c>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <setPIDGain+0x24>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001575 	.word	0x08001575
 8001564:	08001589 	.word	0x08001589
 8001568:	0800159d 	.word	0x0800159d
 800156c:	080015b1 	.word	0x080015b1
 8001570:	080015c5 	.word	0x080015c5
	case 0:
		P_gain.Kp = Kp;
 8001574:	4a1e      	ldr	r2, [pc, #120]	; (80015f0 <setPIDGain+0xb4>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6013      	str	r3, [r2, #0]
		P_gain.Ki = Ki;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <setPIDGain+0xb4>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	6053      	str	r3, [r2, #4]
		P_gain.Kd = Kd;
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <setPIDGain+0xb4>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6093      	str	r3, [r2, #8]
		break;
 8001586:	e028      	b.n	80015da <setPIDGain+0x9e>
	case 1:
		Q_gain.Kp = Kp;
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <setPIDGain+0xb8>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6013      	str	r3, [r2, #0]
		Q_gain.Ki = Ki;
 800158e:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <setPIDGain+0xb8>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	6053      	str	r3, [r2, #4]
		Q_gain.Kd = Kd;
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <setPIDGain+0xb8>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6093      	str	r3, [r2, #8]
		break;
 800159a:	e01e      	b.n	80015da <setPIDGain+0x9e>
	case 2:
		R_gain.Kp = Kp;
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <setPIDGain+0xbc>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6013      	str	r3, [r2, #0]
		R_gain.Ki = Ki;
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <setPIDGain+0xbc>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	6053      	str	r3, [r2, #4]
		R_gain.Kd = Kd;
 80015a8:	4a13      	ldr	r2, [pc, #76]	; (80015f8 <setPIDGain+0xbc>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6093      	str	r3, [r2, #8]
		break;
 80015ae:	e014      	b.n	80015da <setPIDGain+0x9e>
	case 3:
		pi_gain.Kp = Kp;
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <setPIDGain+0xc0>)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6013      	str	r3, [r2, #0]
		pi_gain.Ki = Ki;
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <setPIDGain+0xc0>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	6053      	str	r3, [r2, #4]
		pi_gain.Kd = Kd;
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <setPIDGain+0xc0>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6093      	str	r3, [r2, #8]
		break;
 80015c2:	e00a      	b.n	80015da <setPIDGain+0x9e>
	case 4:
		theta_gain.Kp = Kp;
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <setPIDGain+0xc4>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6013      	str	r3, [r2, #0]
		theta_gain.Ki = Ki;
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <setPIDGain+0xc4>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	6053      	str	r3, [r2, #4]
		theta_gain.Kd = Kd;
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <setPIDGain+0xc4>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6093      	str	r3, [r2, #8]
		break;
 80015d6:	e000      	b.n	80015da <setPIDGain+0x9e>
	default:
		break;
 80015d8:	bf00      	nop
	}

	start_time = HAL_GetTick();
 80015da:	f002 f965 	bl	80038a8 <HAL_GetTick>
 80015de:	4603      	mov	r3, r0
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <setPIDGain+0xc8>)
 80015e4:	801a      	strh	r2, [r3, #0]
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20003308 	.word	0x20003308
 80015f4:	200032e4 	.word	0x200032e4
 80015f8:	200032d8 	.word	0x200032d8
 80015fc:	200032fc 	.word	0x200032fc
 8001600:	200032b0 	.word	0x200032b0
 8001604:	200032d4 	.word	0x200032d4

08001608 <PIDController>:

PQR_CMD PIDController(PQR_CMD cmd, IMU imu_data){
 8001608:	b084      	sub	sp, #16
 800160a:	b5b0      	push	{r4, r5, r7, lr}
 800160c:	b088      	sub	sp, #32
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	PQR_CMD pid_cmd;
	pid_cmd.P_cmd = 0;
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
	pid_cmd.Q_cmd = 0;
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
	pid_cmd.R_cmd = 0;
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
	pid_cmd.pi = 0;
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
	pid_cmd.theta = 0;
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
	pid_cmd.psi = 0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]

	P_err.pre_error = P_err.error;
 800163e:	4bc8      	ldr	r3, [pc, #800]	; (8001960 <PIDController+0x358>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4ac7      	ldr	r2, [pc, #796]	; (8001960 <PIDController+0x358>)
 8001644:	6053      	str	r3, [r2, #4]
	Q_err.pre_error = Q_err.error;
 8001646:	4bc7      	ldr	r3, [pc, #796]	; (8001964 <PIDController+0x35c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4ac6      	ldr	r2, [pc, #792]	; (8001964 <PIDController+0x35c>)
 800164c:	6053      	str	r3, [r2, #4]
	R_err.pre_error = R_err.error;;
 800164e:	4bc6      	ldr	r3, [pc, #792]	; (8001968 <PIDController+0x360>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4ac5      	ldr	r2, [pc, #788]	; (8001968 <PIDController+0x360>)
 8001654:	6053      	str	r3, [r2, #4]
	pi_err.pre_error = pi_err.error;
 8001656:	4bc5      	ldr	r3, [pc, #788]	; (800196c <PIDController+0x364>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4ac4      	ldr	r2, [pc, #784]	; (800196c <PIDController+0x364>)
 800165c:	6053      	str	r3, [r2, #4]
	theta_err.pre_error = theta_err.error;
 800165e:	4bc4      	ldr	r3, [pc, #784]	; (8001970 <PIDController+0x368>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4ac3      	ldr	r2, [pc, #780]	; (8001970 <PIDController+0x368>)
 8001664:	6053      	str	r3, [r2, #4]

	P_err.error = imu_data.P - cmd.P_cmd;
 8001666:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800166a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	4bbb      	ldr	r3, [pc, #748]	; (8001960 <PIDController+0x358>)
 8001674:	edc3 7a00 	vstr	s15, [r3]
	Q_err.error = imu_data.Q - cmd.Q_cmd;
 8001678:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800167c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001684:	4bb7      	ldr	r3, [pc, #732]	; (8001964 <PIDController+0x35c>)
 8001686:	edc3 7a00 	vstr	s15, [r3]
	R_err.error = imu_data.R - cmd.R_cmd;
 800168a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800168e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001696:	4bb4      	ldr	r3, [pc, #720]	; (8001968 <PIDController+0x360>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
	pi_err.error = imu_data.pi - cmd.pi;
 800169c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80016a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a8:	4bb0      	ldr	r3, [pc, #704]	; (800196c <PIDController+0x364>)
 80016aa:	edc3 7a00 	vstr	s15, [r3]
	theta_err.error = imu_data.theta - cmd.theta;
 80016ae:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80016b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ba:	4bad      	ldr	r3, [pc, #692]	; (8001970 <PIDController+0x368>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]

	P_err.sum_error += P_err.error;
 80016c0:	4ba7      	ldr	r3, [pc, #668]	; (8001960 <PIDController+0x358>)
 80016c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80016c6:	4ba6      	ldr	r3, [pc, #664]	; (8001960 <PIDController+0x358>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d0:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <PIDController+0x358>)
 80016d2:	edc3 7a02 	vstr	s15, [r3, #8]
	Q_err.sum_error += Q_err.error;
 80016d6:	4ba3      	ldr	r3, [pc, #652]	; (8001964 <PIDController+0x35c>)
 80016d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80016dc:	4ba1      	ldr	r3, [pc, #644]	; (8001964 <PIDController+0x35c>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <PIDController+0x35c>)
 80016e8:	edc3 7a02 	vstr	s15, [r3, #8]
	R_err.sum_error += R_err.error;
 80016ec:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <PIDController+0x360>)
 80016ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80016f2:	4b9d      	ldr	r3, [pc, #628]	; (8001968 <PIDController+0x360>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <PIDController+0x360>)
 80016fe:	edc3 7a02 	vstr	s15, [r3, #8]
	pi_err.sum_error += pi_err.error;
 8001702:	4b9a      	ldr	r3, [pc, #616]	; (800196c <PIDController+0x364>)
 8001704:	ed93 7a02 	vldr	s14, [r3, #8]
 8001708:	4b98      	ldr	r3, [pc, #608]	; (800196c <PIDController+0x364>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	4b96      	ldr	r3, [pc, #600]	; (800196c <PIDController+0x364>)
 8001714:	edc3 7a02 	vstr	s15, [r3, #8]
	theta_err.sum_error += theta_err.error;
 8001718:	4b95      	ldr	r3, [pc, #596]	; (8001970 <PIDController+0x368>)
 800171a:	ed93 7a02 	vldr	s14, [r3, #8]
 800171e:	4b94      	ldr	r3, [pc, #592]	; (8001970 <PIDController+0x368>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	4b91      	ldr	r3, [pc, #580]	; (8001970 <PIDController+0x368>)
 800172a:	edc3 7a02 	vstr	s15, [r3, #8]

	loop_time = HAL_GetTick() - start_time;
 800172e:	f002 f8bb 	bl	80038a8 <HAL_GetTick>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b8f      	ldr	r3, [pc, #572]	; (8001974 <PIDController+0x36c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <PIDController+0x370>)
 8001740:	801a      	strh	r2, [r3, #0]
	pid_cmd.P_cmd = P_err.error * P_gain.Kp + P_err.sum_error * P_gain.Ki * loop_time + ((P_err.error-P_err.pre_error) / loop_time) * P_gain.Kd;
 8001742:	4b87      	ldr	r3, [pc, #540]	; (8001960 <PIDController+0x358>)
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	4b8c      	ldr	r3, [pc, #560]	; (800197c <PIDController+0x374>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001752:	4b83      	ldr	r3, [pc, #524]	; (8001960 <PIDController+0x358>)
 8001754:	edd3 6a02 	vldr	s13, [r3, #8]
 8001758:	4b88      	ldr	r3, [pc, #544]	; (800197c <PIDController+0x374>)
 800175a:	edd3 7a01 	vldr	s15, [r3, #4]
 800175e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001762:	4b85      	ldr	r3, [pc, #532]	; (8001978 <PIDController+0x370>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001776:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <PIDController+0x358>)
 8001778:	edd3 6a00 	vldr	s13, [r3]
 800177c:	4b78      	ldr	r3, [pc, #480]	; (8001960 <PIDController+0x358>)
 800177e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001782:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001786:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <PIDController+0x370>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001792:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001796:	4b79      	ldr	r3, [pc, #484]	; (800197c <PIDController+0x374>)
 8001798:	edd3 7a02 	vldr	s15, [r3, #8]
 800179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a4:	edc7 7a02 	vstr	s15, [r7, #8]
	pid_cmd.Q_cmd = Q_err.error * Q_gain.Kp + Q_err.sum_error * Q_gain.Ki * loop_time + ((Q_err.error-Q_err.pre_error) / loop_time) * Q_gain.Kd;
 80017a8:	4b6e      	ldr	r3, [pc, #440]	; (8001964 <PIDController+0x35c>)
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	4b74      	ldr	r3, [pc, #464]	; (8001980 <PIDController+0x378>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <PIDController+0x35c>)
 80017ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80017be:	4b70      	ldr	r3, [pc, #448]	; (8001980 <PIDController+0x378>)
 80017c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017c8:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <PIDController+0x370>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <PIDController+0x35c>)
 80017de:	edd3 6a00 	vldr	s13, [r3]
 80017e2:	4b60      	ldr	r3, [pc, #384]	; (8001964 <PIDController+0x35c>)
 80017e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80017e8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80017ec:	4b62      	ldr	r3, [pc, #392]	; (8001978 <PIDController+0x370>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <PIDController+0x378>)
 80017fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	edc7 7a03 	vstr	s15, [r7, #12]
	pid_cmd.R_cmd = R_err.error * R_gain.Kp + R_err.sum_error * R_gain.Ki * loop_time + ((R_err.error-R_err.pre_error) / loop_time) * R_gain.Kd;
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <PIDController+0x360>)
 8001810:	ed93 7a00 	vldr	s14, [r3]
 8001814:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <PIDController+0x37c>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	4b52      	ldr	r3, [pc, #328]	; (8001968 <PIDController+0x360>)
 8001820:	edd3 6a02 	vldr	s13, [r3, #8]
 8001824:	4b57      	ldr	r3, [pc, #348]	; (8001984 <PIDController+0x37c>)
 8001826:	edd3 7a01 	vldr	s15, [r3, #4]
 800182a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182e:	4b52      	ldr	r3, [pc, #328]	; (8001978 <PIDController+0x370>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <PIDController+0x360>)
 8001844:	edd3 6a00 	vldr	s13, [r3]
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <PIDController+0x360>)
 800184a:	edd3 7a01 	vldr	s15, [r3, #4]
 800184e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <PIDController+0x370>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001862:	4b48      	ldr	r3, [pc, #288]	; (8001984 <PIDController+0x37c>)
 8001864:	edd3 7a02 	vldr	s15, [r3, #8]
 8001868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	edc7 7a04 	vstr	s15, [r7, #16]
	pid_cmd.pi = pi_err.error * pi_gain.Kp + pi_err.sum_error * pi_gain.Ki * loop_time + ((pi_err.error-pi_err.pre_error) / loop_time) * pi_gain.Kd;
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <PIDController+0x364>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	4b43      	ldr	r3, [pc, #268]	; (8001988 <PIDController+0x380>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <PIDController+0x364>)
 8001886:	edd3 6a02 	vldr	s13, [r3, #8]
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <PIDController+0x380>)
 800188c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001890:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <PIDController+0x370>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <PIDController+0x364>)
 80018aa:	edd3 6a00 	vldr	s13, [r3]
 80018ae:	4b2f      	ldr	r3, [pc, #188]	; (800196c <PIDController+0x364>)
 80018b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b4:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <PIDController+0x370>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <PIDController+0x380>)
 80018ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80018ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d6:	edc7 7a05 	vstr	s15, [r7, #20]
	pid_cmd.theta = theta_err.error * theta_gain.Kp + theta_err.sum_error * theta_gain.Ki * loop_time + ((theta_err.error-theta_err.pre_error) / loop_time) * theta_gain.Kd;
 80018da:	4b25      	ldr	r3, [pc, #148]	; (8001970 <PIDController+0x368>)
 80018dc:	ed93 7a00 	vldr	s14, [r3]
 80018e0:	4b2a      	ldr	r3, [pc, #168]	; (800198c <PIDController+0x384>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <PIDController+0x368>)
 80018ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <PIDController+0x384>)
 80018f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <PIDController+0x370>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <PIDController+0x368>)
 8001910:	edd3 6a00 	vldr	s13, [r3]
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <PIDController+0x368>)
 8001916:	edd3 7a01 	vldr	s15, [r3, #4]
 800191a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <PIDController+0x370>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <PIDController+0x384>)
 8001930:	edd3 7a02 	vldr	s15, [r3, #8]
 8001934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	edc7 7a06 	vstr	s15, [r7, #24]
	start_time = HAL_GetTick();
 8001940:	f001 ffb2 	bl	80038a8 <HAL_GetTick>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <PIDController+0x36c>)
 800194a:	801a      	strh	r2, [r3, #0]

	if(pid_cmd.P_cmd > 85) pid_cmd.P_cmd = 85;
 800194c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001950:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001990 <PIDController+0x388>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	dd1c      	ble.n	8001998 <PIDController+0x390>
 800195e:	e019      	b.n	8001994 <PIDController+0x38c>
 8001960:	200032bc 	.word	0x200032bc
 8001964:	200032f0 	.word	0x200032f0
 8001968:	200032a4 	.word	0x200032a4
 800196c:	200032c8 	.word	0x200032c8
 8001970:	20003314 	.word	0x20003314
 8001974:	200032d4 	.word	0x200032d4
 8001978:	200032a0 	.word	0x200032a0
 800197c:	20003308 	.word	0x20003308
 8001980:	200032e4 	.word	0x200032e4
 8001984:	200032d8 	.word	0x200032d8
 8001988:	200032fc 	.word	0x200032fc
 800198c:	200032b0 	.word	0x200032b0
 8001990:	42aa0000 	.word	0x42aa0000
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <PIDController+0x3f4>)
 8001996:	60bb      	str	r3, [r7, #8]
	if(pid_cmd.P_cmd < -85) pid_cmd.P_cmd = -85;
 8001998:	edd7 7a02 	vldr	s15, [r7, #8]
 800199c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001a00 <PIDController+0x3f8>
 80019a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	d501      	bpl.n	80019ae <PIDController+0x3a6>
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <PIDController+0x3fc>)
 80019ac:	60bb      	str	r3, [r7, #8]

	if(pid_cmd.Q_cmd > 85) pid_cmd.Q_cmd = 85;
 80019ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a08 <PIDController+0x400>
 80019b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	dd01      	ble.n	80019c4 <PIDController+0x3bc>
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <PIDController+0x3f4>)
 80019c2:	60fb      	str	r3, [r7, #12]
	if(pid_cmd.Q_cmd < -85) pid_cmd.Q_cmd = -85;
 80019c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a00 <PIDController+0x3f8>
 80019cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d501      	bpl.n	80019da <PIDController+0x3d2>
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <PIDController+0x3fc>)
 80019d8:	60fb      	str	r3, [r7, #12]

	return pid_cmd;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	461d      	mov	r5, r3
 80019de:	f107 0408 	add.w	r4, r7, #8
 80019e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ea:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80019f8:	b004      	add	sp, #16
 80019fa:	4770      	bx	lr
 80019fc:	42aa0000 	.word	0x42aa0000
 8001a00:	c2aa0000 	.word	0xc2aa0000
 8001a04:	c2aa0000 	.word	0xc2aa0000
 8001a08:	42aa0000 	.word	0x42aa0000

08001a0c <map>:
#include "Math/novus_math.h"

float map(float target, float from_min, float from_max, float to_min, float to_max){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a16:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a1a:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a1e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a22:	ed87 2a01 	vstr	s4, [r7, #4]
    float mult = (float)(to_max - to_min) / (float)(from_max - from_min);
 8001a26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a32:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	edc7 7a07 	vstr	s15, [r7, #28]
    target = target - from_min;
 8001a46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	edc7 7a05 	vstr	s15, [r7, #20]
    return to_min + (target * mult);
 8001a56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3724      	adds	r7, #36	; 0x24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <Spektrum_Read>:
/** @J.Yeon
  * @brief  uart로 받은 값을 각 채널별 data 저장
  * @param  struct RC
  * @retval 각 채널별 data(RC)
  */
void Spektrum_Read(){
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
	//uint8_t fade = rc_byte_data[0];
	//uint8_t sys = rc_byte_data[1];

    // 비트연산을 통한 각채널별 data 추출
    for (int index = 1; index <= 7; index++) {
 8001a7e:	2301      	movs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	e032      	b.n	8001aea <Spektrum_Read+0x72>
    	uint16_t bit_data = (rc_byte_data[index * 2] << 8) | rc_byte_data[(index * 2) + 1];
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <Spektrum_Read+0x88>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	3301      	adds	r3, #1
 8001a96:	491a      	ldr	r1, [pc, #104]	; (8001b00 <Spektrum_Read+0x88>)
 8001a98:	5ccb      	ldrb	r3, [r1, r3]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	817b      	strh	r3, [r7, #10]
        uint8_t id = (bit_data & 0x7800) >> 11;
 8001aa2:	897b      	ldrh	r3, [r7, #10]
 8001aa4:	12db      	asrs	r3, r3, #11
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	727b      	strb	r3, [r7, #9]
        uint16_t pos = bit_data & 0x07FF;
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ab4:	80fb      	strh	r3, [r7, #6]
        
        if(pos >= RC_MIN && pos <= RC_MAX){
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8001abc:	d312      	bcc.n	8001ae4 <Spektrum_Read+0x6c>
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f240 62aa 	movw	r2, #1706	; 0x6aa
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d80d      	bhi.n	8001ae4 <Spektrum_Read+0x6c>
            rc.channel[id].id = id;
 8001ac8:	7a7b      	ldrb	r3, [r7, #9]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <Spektrum_Read+0x8c>)
 8001acc:	3306      	adds	r3, #6
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	7a7a      	ldrb	r2, [r7, #9]
 8001ad4:	71da      	strb	r2, [r3, #7]
            rc.channel[id].pos = pos;
 8001ad6:	7a7b      	ldrb	r3, [r7, #9]
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <Spektrum_Read+0x8c>)
 8001ada:	3306      	adds	r3, #6
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	811a      	strh	r2, [r3, #8]
    for (int index = 1; index <= 7; index++) {
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b07      	cmp	r3, #7
 8001aee:	ddc9      	ble.n	8001a84 <Spektrum_Read+0xc>
        }
    }

}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20001a70 	.word	0x20001a70
 8001b04:	20001a20 	.word	0x20001a20

08001b08 <wt931_Init>:
 */


#include "Sensor/WT931.h"

int8_t wt931_Init(I2C_HandleTypeDef* hi2cx){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	wt931_chip_num = addI2CChip(hi2cx, 0x50, 1);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2150      	movs	r1, #80	; 0x50
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb69 	bl	80021ec <addI2CChip>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <wt931_Init+0x24>)
 8001b20:	801a      	strh	r2, [r3, #0]

	if(wt931_chip_num < 0){
		return -1;
	}

	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20002680 	.word	0x20002680

08001b30 <readIMU>:

IMU readIMU(){
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	IMU imu;

	float angle[3] = { 0, };
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]

	angle[0] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_ROLL);
 8001b44:	4b90      	ldr	r3, [pc, #576]	; (8001d88 <readIMU+0x258>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	213d      	movs	r1, #61	; 0x3d
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fb8b 	bl	8002268 <I2C_read2ByteRegister>
 8001b52:	4603      	mov	r3, r0
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	edc7 7a05 	vstr	s15, [r7, #20]
	angle[1] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_PITCH);
 8001b60:	4b89      	ldr	r3, [pc, #548]	; (8001d88 <readIMU+0x258>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	213e      	movs	r1, #62	; 0x3e
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 fb7d 	bl	8002268 <I2C_read2ByteRegister>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	edc7 7a06 	vstr	s15, [r7, #24]
	angle[2] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_YAW);
 8001b7c:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <readIMU+0x258>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	213f      	movs	r1, #63	; 0x3f
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fb6f 	bl	8002268 <I2C_read2ByteRegister>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b94:	edc7 7a07 	vstr	s15, [r7, #28]

#if 1
	imu.pi = angle[0] / 32768 * 180;
 8001b98:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001d8c <readIMU+0x25c>
 8001ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001d90 <readIMU+0x260>
 8001ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bac:	edc7 7a08 	vstr	s15, [r7, #32]
	if(imu.pi > 180) imu.pi -= 360;
 8001bb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bb4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d90 <readIMU+0x260>
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	dd07      	ble.n	8001bd2 <readIMU+0xa2>
 8001bc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bc6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001d94 <readIMU+0x264>
 8001bca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bce:	edc7 7a08 	vstr	s15, [r7, #32]
	imu.theta = angle[1] / 32768 * 180;
 8001bd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bd6:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8001d8c <readIMU+0x25c>
 8001bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bde:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001d90 <readIMU+0x260>
 8001be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(imu.theta > 180) imu.theta -= 360;
 8001bea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bee:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001d90 <readIMU+0x260>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd07      	ble.n	8001c0c <readIMU+0xdc>
 8001bfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c00:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001d94 <readIMU+0x264>
 8001c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	imu.psi = angle[2] / 32768 * 180;
 8001c0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8001d8c <readIMU+0x25c>
 8001c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c18:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d90 <readIMU+0x260>
 8001c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(imu.psi > 180) imu.psi -= 360;
 8001c24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c28:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001d90 <readIMU+0x260>
 8001c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	dd07      	ble.n	8001c46 <readIMU+0x116>
 8001c36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c3a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001d94 <readIMU+0x264>
 8001c3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	imu.theta = temp_theta;
	imu.psi = temp_psi;
#endif

#if 1
	float angular_velocity[3] = { 0, };
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]

	angular_velocity[0] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GX);
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <readIMU+0x258>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2137      	movs	r1, #55	; 0x37
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fb04 	bl	8002268 <I2C_read2ByteRegister>
 8001c60:	4603      	mov	r3, r0
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6a:	edc7 7a02 	vstr	s15, [r7, #8]
	angular_velocity[1] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GY);
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <readIMU+0x258>)
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2138      	movs	r1, #56	; 0x38
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 faf6 	bl	8002268 <I2C_read2ByteRegister>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	edc7 7a03 	vstr	s15, [r7, #12]
	angular_velocity[2] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GZ);
 8001c8a:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <readIMU+0x258>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2139      	movs	r1, #57	; 0x39
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fae8 	bl	8002268 <I2C_read2ByteRegister>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ca2:	edc7 7a04 	vstr	s15, [r7, #16]

	imu.P = angular_velocity[0] / 32768 * 2000;
 8001ca6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001caa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001d8c <readIMU+0x25c>
 8001cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cb2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001d98 <readIMU+0x268>
 8001cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if(imu.P > 2000) imu.P -= 4000;
 8001cbe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cc2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001d98 <readIMU+0x268>
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	dd07      	ble.n	8001ce0 <readIMU+0x1b0>
 8001cd0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cd4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001d9c <readIMU+0x26c>
 8001cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cdc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	imu.Q = angular_velocity[1] / 32768 * 2000;
 8001ce0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ce4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001d8c <readIMU+0x25c>
 8001ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001d98 <readIMU+0x268>
 8001cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if(imu.Q > 2000) imu.Q -= 4000;
 8001cf8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001cfc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001d98 <readIMU+0x268>
 8001d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	dd07      	ble.n	8001d1a <readIMU+0x1ea>
 8001d0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d0e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001d9c <readIMU+0x26c>
 8001d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	imu.R = angular_velocity[2] / 32768 * 2000;
 8001d1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d1e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001d8c <readIMU+0x25c>
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001d98 <readIMU+0x268>
 8001d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d2e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if(imu.R > 2000) imu.R -= 4000;
 8001d32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d36:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001d98 <readIMU+0x268>
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	dd07      	ble.n	8001d54 <readIMU+0x224>
 8001d44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d9c <readIMU+0x26c>
 8001d4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	imu.P = imu.P * -1;
 8001d54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d58:	eef1 7a67 	vneg.f32	s15, s15
 8001d5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	imu.Q = imu.Q * -1;
 8001d60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d64:	eef1 7a67 	vneg.f32	s15, s15
 8001d68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	imu.P = 0;
	imu.Q = 0;
	imu.R = 0;
#endif

	return imu;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	461d      	mov	r5, r3
 8001d70:	f107 0420 	add.w	r4, r7, #32
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	3738      	adds	r7, #56	; 0x38
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bdb0      	pop	{r4, r5, r7, pc}
 8001d88:	20002680 	.word	0x20002680
 8001d8c:	47000000 	.word	0x47000000
 8001d90:	43340000 	.word	0x43340000
 8001d94:	43b40000 	.word	0x43b40000
 8001d98:	44fa0000 	.word	0x44fa0000
 8001d9c:	457a0000 	.word	0x457a0000

08001da0 <as5147_Init>:
  * @param  GPIO_num GPIO pin number
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]

	as5147_chip_num = addSPIChip(hspix, GPIO_port, GPIO_num);
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	461a      	mov	r2, r3
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f000 fa89 	bl	80022cc <addSPIChip>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <as5147_Init+0x48>)
 8001dc0:	801a      	strh	r2, [r3, #0]

	if(as5147_chip_num < 0){
		return -1;
	}

	registerRead(AS5047P_ERRFL);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 f8b2 	bl	8001f2c <registerRead>
	registerRead(AS5047P_ERRFL);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 f8af 	bl	8001f2c <registerRead>

	if(as5147_setZeroPosition() < 0){
 8001dce:	f000 f80d 	bl	8001dec <as5147_setZeroPosition>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da02      	bge.n	8001dde <as5147_Init+0x3e>
		return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	e000      	b.n	8001de0 <as5147_Init+0x40>
	}

	return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20002e84 	.word	0x20002e84

08001dec <as5147_setZeroPosition>:
  * @param  none
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_setZeroPosition(){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
	Frame current_zero_position = { 0, };
 8001df2:	2300      	movs	r3, #0
 8001df4:	813b      	strh	r3, [r7, #8]
	Frame current_position = { 0, };
 8001df6:	2300      	movs	r3, #0
 8001df8:	80bb      	strh	r3, [r7, #4]
	uint16_t zero_position_L = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	81fb      	strh	r3, [r7, #14]
	uint16_t zero_position_M = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	81bb      	strh	r3, [r7, #12]
	int8_t error;

	current_zero_position.raw = registerRead(AS5047P_ZPOSL);
 8001e02:	2017      	movs	r0, #23
 8001e04:	f000 f892 	bl	8001f2c <registerRead>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	813b      	strh	r3, [r7, #8]
	if(current_zero_position.values.data < 0) return -1;

	error = registerWrite(AS5047P_ZPOSL, current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN));
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	2017      	movs	r0, #23
 8001e1e:	f000 f8ad 	bl	8001f7c <registerWrite>
 8001e22:	4603      	mov	r3, r0
 8001e24:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSL, 0x0000);
 8001e26:	2100      	movs	r1, #0
 8001e28:	2017      	movs	r0, #23
 8001e2a:	f000 f8a7 	bl	8001f7c <registerWrite>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	7afb      	ldrb	r3, [r7, #11]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8001e38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <as5147_setZeroPosition+0x5a>
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
 8001e44:	e03c      	b.n	8001ec0 <as5147_setZeroPosition+0xd4>

	current_position.raw = registerRead(AS5047P_ANGLEUNC);
 8001e46:	f643 70fe 	movw	r0, #16382	; 0x3ffe
 8001e4a:	f000 f86f 	bl	8001f2c <registerRead>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80bb      	strh	r3, [r7, #4]
	if(current_position.values.data < 0) return -1;

	zero_position_L = (current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (current_position.values.data & AS5047P_ZPOSL_ZPOSL);
 8001e52:	893b      	ldrh	r3, [r7, #8]
 8001e54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	88bb      	ldrh	r3, [r7, #4]
 8001e64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21b      	sxth	r3, r3
 8001e76:	81fb      	strh	r3, [r7, #14]
	zero_position_M = (current_position.values.data >> 6 ) & AS5047P_ZPOSM_ZPOSM;
 8001e78:	88bb      	ldrh	r3, [r7, #4]
 8001e7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	119b      	asrs	r3, r3, #6
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	81bb      	strh	r3, [r7, #12]

	error = registerWrite(AS5047P_ZPOSL, zero_position_L);
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2017      	movs	r0, #23
 8001e8e:	f000 f875 	bl	8001f7c <registerWrite>
 8001e92:	4603      	mov	r3, r0
 8001e94:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSM, zero_position_M);
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2016      	movs	r0, #22
 8001e9c:	f000 f86e 	bl	8001f7c <registerWrite>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8001eaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <as5147_setZeroPosition+0xcc>
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	e003      	b.n	8001ec0 <as5147_setZeroPosition+0xd4>

	HAL_Delay(1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f001 fd01 	bl	80038c0 <HAL_Delay>

	return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <as5147_readPosition>:
  * @brief  read current position from AS5147
  * @param  none
  * @retval position value without DAEC (0 ~ 360)
  */

float as5147_readPosition(){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
	Frame position = { 0, };
 8001ece:	2300      	movs	r3, #0
 8001ed0:	80bb      	strh	r3, [r7, #4]

	//position.raw = registerRead(AS5047P_ANGLECOM);AS5047P_ANGLEUNC
	//!NOTE::Next line for debug
	position.raw = registerRead(AS5047P_ANGLEUNC);
 8001ed2:	f643 70fe 	movw	r0, #16382	; 0x3ffe
 8001ed6:	f000 f829 	bl	8001f2c <registerRead>
 8001eda:	4603      	mov	r3, r0
 8001edc:	80bb      	strh	r3, [r7, #4]

	return position.values.data / 16384. * 360;
 8001ede:	88bb      	ldrh	r3, [r7, #4]
 8001ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe faec 	bl	80004c4 <__aeabi_i2d>
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <as5147_readPosition+0x5c>)
 8001ef2:	f7fe fc7b 	bl	80007ec <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <as5147_readPosition+0x60>)
 8001f04:	f7fe fb48 	bl	8000598 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7fe fe1a 	bl	8000b48 <__aeabi_d2f>
 8001f14:	4603      	mov	r3, r0
 8001f16:	ee07 3a90 	vmov	s15, r3
}
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40d00000 	.word	0x40d00000
 8001f28:	40768000 	.word	0x40768000

08001f2c <registerRead>:
  * @brief  read register according to register address
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @retval register value in register's address
  */

uint16_t registerRead(uint16_t resgister_address){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
	uint16_t register_data = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	81fb      	strh	r3, [r7, #14]

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_READ);
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f85c 	bl	8001ffc <packCommandFrame>
 8001f44:	4603      	mov	r3, r0
 8001f46:	81bb      	strh	r3, [r7, #12]
	SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <registerRead+0x4c>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fa67 	bl	8002428 <SPI_write2ByteRegister>
	//command = packCommandFrame(AS5047P_NOP, AS5047P_ACCESS_READ);
	//register_data = SPI_readWrite2ByteRegister(&command.raw, as5147_chip_num);

	//register_data = SPI_read2ByteRegister(as5147_chip_num);

	SPI_read2ByteRegister(as5147_chip_num, &register_data);
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <registerRead+0x4c>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f107 020e 	add.w	r2, r7, #14
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fa16 	bl	8002398 <SPI_read2ByteRegister>

	return register_data;
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20002e84 	.word	0x20002e84

08001f7c <registerWrite>:
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @param  data register value based on AS5147 datasheet
  * @retval return 0
  */

int8_t registerWrite(uint16_t resgister_address, uint16_t data){
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	460a      	mov	r2, r1
 8001f86:	80fb      	strh	r3, [r7, #6]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef state;

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_WRITE);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f833 	bl	8001ffc <packCommandFrame>
 8001f96:	4603      	mov	r3, r0
 8001f98:	81bb      	strh	r3, [r7, #12]
	state = SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <registerWrite+0x7c>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 fa3e 	bl	8002428 <SPI_write2ByteRegister>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <registerWrite+0x40>
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e018      	b.n	8001fee <registerWrite+0x72>

	command = packCommandFrame(data, AS5047P_ACCESS_WRITE);
 8001fbc:	88bb      	ldrh	r3, [r7, #4]
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f81b 	bl	8001ffc <packCommandFrame>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	81bb      	strh	r3, [r7, #12]
	state = SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <registerWrite+0x7c>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fa26 	bl	8002428 <SPI_write2ByteRegister>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <registerWrite+0x70>
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e000      	b.n	8001fee <registerWrite+0x72>

	return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20002e84 	.word	0x20002e84

08001ffc <packCommandFrame>:
  * @param  rw intput read or write state
  * @param  data register value based on AS5147 datasheet
  * @retval Frame struct which has data & R/W state & parity Bit 
  */

Frame packCommandFrame(uint16_t data, uint8_t rw){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	460a      	mov	r2, r1
 8002006:	80fb      	strh	r3, [r7, #6]
 8002008:	4613      	mov	r3, r2
 800200a:	717b      	strb	r3, [r7, #5]
	Frame frame = { 0, };
 800200c:	2300      	movs	r3, #0
 800200e:	81bb      	strh	r3, [r7, #12]
	frame.values.data = data & AS5047P_FRAME_DATA;
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002016:	b29a      	uxth	r2, r3
 8002018:	89bb      	ldrh	r3, [r7, #12]
 800201a:	f362 030d 	bfi	r3, r2, #0, #14
 800201e:	81bb      	strh	r3, [r7, #12]
	frame.values.rw = rw;
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	7b7b      	ldrb	r3, [r7, #13]
 800202a:	f362 1386 	bfi	r3, r2, #6, #1
 800202e:	737b      	strb	r3, [r7, #13]
	frame.values.pard = calcParity(frame.raw);
 8002030:	89bb      	ldrh	r3, [r7, #12]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f80d 	bl	8002052 <calcParity>
 8002038:	4603      	mov	r3, r0
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	f362 13c7 	bfi	r3, r2, #7, #1
 8002046:	737b      	strb	r3, [r7, #13]

	return frame;
 8002048:	89bb      	ldrh	r3, [r7, #12]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <calcParity>:
/**
  * @brief calculate parity bit
  * @param  data register value
  * @retval data
  */
uint8_t calcParity(uint16_t data){
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 8;              // example for 8-bir (this line scales it up to 16 bit)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	b29a      	uxth	r2, r3
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4053      	eors	r3, r2
 8002066:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	b29a      	uxth	r2, r3
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	4053      	eors	r3, r2
 8002072:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	b29a      	uxth	r2, r3
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4053      	eors	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	4053      	eors	r3, r2
 800208a:	80fb      	strh	r3, [r7, #6]

	data = data & 0x0001;
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)data;
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	b2db      	uxtb	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	0000      	movs	r0, r0
	...

080020a8 <updatePosition>:



void updatePosition(MOTOR* motor){
 80020a8:	b5b0      	push	{r4, r5, r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	sens_start = HAL_GetTick();

	motor->ang -= motor->offset;
	if(motor->ang < 0)motor->ang += 360;
#else
	motor->pre_ang = motor->rad;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
	sens_time = HAL_GetTick() - sens_start;
 80020b8:	f001 fbf6 	bl	80038a8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b30      	ldr	r3, [pc, #192]	; (8002180 <updatePosition+0xd8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <updatePosition+0xdc>)
 80020c6:	6013      	str	r3, [r2, #0]
	motor->rad = ((as5147_readPosition() * 3.141592) / 180) - motor->offset;
 80020c8:	f7ff fefe 	bl	8001ec8 <as5147_readPosition>
 80020cc:	ee10 3a10 	vmov	r3, s0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa09 	bl	80004e8 <__aeabi_f2d>
 80020d6:	a326      	add	r3, pc, #152	; (adr r3, 8002170 <updatePosition+0xc8>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fa5c 	bl	8000598 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <updatePosition+0xe0>)
 80020ee:	f7fe fb7d 	bl	80007ec <__aeabi_ddiv>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4614      	mov	r4, r2
 80020f8:	461d      	mov	r5, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f9f2 	bl	80004e8 <__aeabi_f2d>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f88c 	bl	8000228 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fd16 	bl	8000b48 <__aeabi_d2f>
 800211c:	4602      	mov	r2, r0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60da      	str	r2, [r3, #12]

	sens_start = HAL_GetTick();
 8002122:	f001 fbc1 	bl	80038a8 <HAL_GetTick>
 8002126:	4603      	mov	r3, r0
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <updatePosition+0xd8>)
 800212a:	6013      	str	r3, [r2, #0]
	if(motor->rad < 0) motor->rad += 6.283184;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002132:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	d400      	bmi.n	800213e <updatePosition+0x96>
#endif
}
 800213c:	e012      	b.n	8002164 <updatePosition+0xbc>
	if(motor->rad < 0) motor->rad += 6.283184;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9d0 	bl	80004e8 <__aeabi_f2d>
 8002148:	a30b      	add	r3, pc, #44	; (adr r3, 8002178 <updatePosition+0xd0>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	f7fe f86d 	bl	800022c <__adddf3>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fcf5 	bl	8000b48 <__aeabi_d2f>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bdb0      	pop	{r4, r5, r7, pc}
 800216c:	f3af 8000 	nop.w
 8002170:	fc8b007a 	.word	0xfc8b007a
 8002174:	400921fa 	.word	0x400921fa
 8002178:	fc8b007a 	.word	0xfc8b007a
 800217c:	401921fa 	.word	0x401921fa
 8002180:	20003290 	.word	0x20003290
 8002184:	2000328c 	.word	0x2000328c
 8002188:	40668000 	.word	0x40668000
 800218c:	00000000 	.word	0x00000000

08002190 <setOffset>:
  * @brief  get offset for select front position
  * @param  none
  * @retval none
  */

void setOffset(MOTOR* motor){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	motor->offset = (as5147_readPosition() * 3.141592) / 180;
 8002198:	f7ff fe96 	bl	8001ec8 <as5147_readPosition>
 800219c:	ee10 3a10 	vmov	r3, s0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9a1 	bl	80004e8 <__aeabi_f2d>
 80021a6:	a30f      	add	r3, pc, #60	; (adr r3, 80021e4 <setOffset+0x54>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f7fe f9f4 	bl	8000598 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <setOffset+0x50>)
 80021be:	f7fe fb15 	bl	80007ec <__aeabi_ddiv>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fcbd 	bl	8000b48 <__aeabi_d2f>
 80021ce:	4602      	mov	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f3af 8000 	nop.w
 80021e0:	40668000 	.word	0x40668000
 80021e4:	fc8b007a 	.word	0xfc8b007a
 80021e8:	400921fa 	.word	0x400921fa

080021ec <addI2CChip>:
  */


/*	chip setting functions*/

uint16_t addI2CChip(I2C_HandleTypeDef* hi2c, uint16_t dev_addr, uint16_t mem_addr_size){
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	803b      	strh	r3, [r7, #0]
	uint8_t chip_num = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73bb      	strb	r3, [r7, #14]
	uint8_t index = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]

	for(index = 0; index < 256; index++){
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
		if(i2c_chip_list[index].dev_addr == 0 || i2c_chip_list[index].hi2c == hi2c){
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <addI2CChip+0x78>)
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <addI2CChip+0x38>
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <addI2CChip+0x78>)
 800221a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	d102      	bne.n	800222a <addI2CChip+0x3e>
			chip_num = index;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	73bb      	strb	r3, [r7, #14]
			break;
 8002228:	e003      	b.n	8002232 <addI2CChip+0x46>
	for(index = 0; index < 256; index++){
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	3301      	adds	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
		if(i2c_chip_list[index].dev_addr == 0 || i2c_chip_list[index].hi2c == hi2c){
 8002230:	e7ea      	b.n	8002208 <addI2CChip+0x1c>
		}
	}

	if(index != 256){
		i2c_chip_list[chip_num].hi2c = hi2c;
 8002232:	7bbb      	ldrb	r3, [r7, #14]
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <addI2CChip+0x78>)
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_chip_list[chip_num].dev_addr = dev_addr;
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <addI2CChip+0x78>)
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	887a      	ldrh	r2, [r7, #2]
 8002246:	809a      	strh	r2, [r3, #4]
		i2c_chip_list[chip_num].mem_addr_size = mem_addr_size;
 8002248:	7bbb      	ldrb	r3, [r7, #14]
 800224a:	4a06      	ldr	r2, [pc, #24]	; (8002264 <addI2CChip+0x78>)
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	883a      	ldrh	r2, [r7, #0]
 8002252:	80da      	strh	r2, [r3, #6]

		return chip_num;
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	b29b      	uxth	r3, r3
	}else{
		return -1;
	}
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20002684 	.word	0x20002684

08002268 <I2C_read2ByteRegister>:

/**
  * @}
  */

uint16_t I2C_read2ByteRegister(uint8_t chip_num, uint16_t mem_addr){
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af04      	add	r7, sp, #16
 800226e:	4603      	mov	r3, r0
 8002270:	460a      	mov	r2, r1
 8002272:	71fb      	strb	r3, [r7, #7]
 8002274:	4613      	mov	r3, r2
 8002276:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[2] = { 0, };
 8002278:	2300      	movs	r3, #0
 800227a:	81bb      	strh	r3, [r7, #12]

	//HAL_I2C_Master_Transmit(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, (uint8_t*)&mem_addr, 1, HAL_TIMEOUT);

	//HAL_I2C_Master_Receive(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, buffer, 2, HAL_TIMEOUT);

	HAL_I2C_Mem_Read(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_TIMEOUT);
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <I2C_read2ByteRegister+0x60>)
 8002280:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <I2C_read2ByteRegister+0x60>)
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4413      	add	r3, r2
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	b299      	uxth	r1, r3
 8002296:	88ba      	ldrh	r2, [r7, #4]
 8002298:	2303      	movs	r3, #3
 800229a:	9302      	str	r3, [sp, #8]
 800229c:	2302      	movs	r3, #2
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	f002 f8a8 	bl	80043fc <HAL_I2C_Mem_Read>

	uint16_t data = buffer[1] <<8 | buffer[0];
 80022ac:	7b7b      	ldrb	r3, [r7, #13]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	7b3b      	ldrb	r3, [r7, #12]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	81fb      	strh	r3, [r7, #14]

	return data;
 80022bc:	89fb      	ldrh	r3, [r7, #14]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20002684 	.word	0x20002684

080022cc <addSPIChip>:
  * @param	GPIO_port GPIO init structure definition
  * @param	GPIO_num GPIO pin number
  * @retval boolean
  * success chip_num, if fail return false
  */
uint16_t addSPIChip(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	4613      	mov	r3, r2
 80022d8:	80fb      	strh	r3, [r7, #6]
	uint8_t chip_num = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	75bb      	strb	r3, [r7, #22]
	uint8_t index = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]

	for(index = 0; index < 256; index++){
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
		if(SPI_chip_list[index].CS_pin == 0 || SPI_chip_list[index].hspi == hspix){
 80022e6:	7dfa      	ldrb	r2, [r7, #23]
 80022e8:	492a      	ldr	r1, [pc, #168]	; (8002394 <addSPIChip+0xc8>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3308      	adds	r3, #8
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <addSPIChip+0x46>
 80022fc:	7dfa      	ldrb	r2, [r7, #23]
 80022fe:	4925      	ldr	r1, [pc, #148]	; (8002394 <addSPIChip+0xc8>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	429a      	cmp	r2, r3
 8002310:	d102      	bne.n	8002318 <addSPIChip+0x4c>
			chip_num = index;
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	75bb      	strb	r3, [r7, #22]
			break;
 8002316:	e003      	b.n	8002320 <addSPIChip+0x54>
	for(index = 0; index < 256; index++){
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	3301      	adds	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
		if(SPI_chip_list[index].CS_pin == 0 || SPI_chip_list[index].hspi == hspix){
 800231e:	e7e2      	b.n	80022e6 <addSPIChip+0x1a>
		}
	}

	if(index != 256){
		SPI_chip_list[chip_num].hspi = hspix;
 8002320:	7dba      	ldrb	r2, [r7, #22]
 8002322:	491c      	ldr	r1, [pc, #112]	; (8002394 <addSPIChip+0xc8>)
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	601a      	str	r2, [r3, #0]
		SPI_chip_list[chip_num].CS_port = GPIO_port;
 8002332:	7dba      	ldrb	r2, [r7, #22]
 8002334:	4917      	ldr	r1, [pc, #92]	; (8002394 <addSPIChip+0xc8>)
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	3304      	adds	r3, #4
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	601a      	str	r2, [r3, #0]
		SPI_chip_list[chip_num].CS_pin = GPIO_num;
 8002346:	7dba      	ldrb	r2, [r7, #22]
 8002348:	4912      	ldr	r1, [pc, #72]	; (8002394 <addSPIChip+0xc8>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3308      	adds	r3, #8
 8002356:	88fa      	ldrh	r2, [r7, #6]
 8002358:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 800235a:	7dba      	ldrb	r2, [r7, #22]
 800235c:	490d      	ldr	r1, [pc, #52]	; (8002394 <addSPIChip+0xc8>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3304      	adds	r3, #4
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	7dba      	ldrb	r2, [r7, #22]
 800236e:	4909      	ldr	r1, [pc, #36]	; (8002394 <addSPIChip+0xc8>)
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3308      	adds	r3, #8
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4619      	mov	r1, r3
 8002382:	f001 ff93 	bl	80042ac <HAL_GPIO_WritePin>

		return chip_num;
 8002386:	7dbb      	ldrb	r3, [r7, #22]
 8002388:	b29b      	uxth	r3, r3
	}else{
		return -1;
	}
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20001a80 	.word	0x20001a80

08002398 <SPI_read2ByteRegister>:
/**
  * @brief  read register value
  * @param  chip_num spi chip number
  * @retval data in register
  */
uint16_t SPI_read2ByteRegister(uint8_t chip_num, uint16_t* pRxData){
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
	//uint8_t pbuffer[2] = { 0, };
	//uint16_t* read_data = (uint16_t*)pbuffer;

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 80023a4:	79fa      	ldrb	r2, [r7, #7]
 80023a6:	491f      	ldr	r1, [pc, #124]	; (8002424 <SPI_read2ByteRegister+0x8c>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3304      	adds	r3, #4
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	491a      	ldr	r1, [pc, #104]	; (8002424 <SPI_read2ByteRegister+0x8c>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3308      	adds	r3, #8
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	f001 ff6e 	bl	80042ac <HAL_GPIO_WritePin>

	HAL_SPI_Receive(SPI_chip_list[chip_num].hspi, (uint8_t*)pRxData, 1, HAL_MAX_DELAY);
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	4914      	ldr	r1, [pc, #80]	; (8002424 <SPI_read2ByteRegister+0x8c>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	2201      	movs	r2, #1
 80023e6:	6839      	ldr	r1, [r7, #0]
 80023e8:	f003 fda5 	bl	8005f36 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	490d      	ldr	r1, [pc, #52]	; (8002424 <SPI_read2ByteRegister+0x8c>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	3304      	adds	r3, #4
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	79fa      	ldrb	r2, [r7, #7]
 8002400:	4908      	ldr	r1, [pc, #32]	; (8002424 <SPI_read2ByteRegister+0x8c>)
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3308      	adds	r3, #8
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4619      	mov	r1, r3
 8002414:	f001 ff4a 	bl	80042ac <HAL_GPIO_WritePin>

	//return *read_data;
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20001a80 	.word	0x20001a80

08002428 <SPI_write2ByteRegister>:
  * @brief  write register value
  * @param	command data what will write in register
  * @param  chip_num spi chip number
  * @retval HAL status
  */
HAL_StatusTypeDef SPI_write2ByteRegister(uint16_t* command, uint8_t chip_num){
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	4920      	ldr	r1, [pc, #128]	; (80024b8 <SPI_write2ByteRegister+0x90>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3304      	adds	r3, #4
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	491b      	ldr	r1, [pc, #108]	; (80024b8 <SPI_write2ByteRegister+0x90>)
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3308      	adds	r3, #8
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	f001 ff26 	bl	80042ac <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Transmit(SPI_chip_list[chip_num].hspi, (uint8_t*)command, 1, HAL_MAX_DELAY);
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	4915      	ldr	r1, [pc, #84]	; (80024b8 <SPI_write2ByteRegister+0x90>)
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
 8002474:	2201      	movs	r2, #1
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f003 fbef 	bl	8005c5a <HAL_SPI_Transmit>
 800247c:	4603      	mov	r3, r0
 800247e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <SPI_write2ByteRegister+0x90>)
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3304      	adds	r3, #4
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	4908      	ldr	r1, [pc, #32]	; (80024b8 <SPI_write2ByteRegister+0x90>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3308      	adds	r3, #8
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	f001 ff00 	bl	80042ac <HAL_GPIO_WritePin>

	return state;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20001a80 	.word	0x20001a80

080024bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024c0:	f001 f9c7 	bl	8003852 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c4:	f000 f90c 	bl	80026e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c8:	f000 fb5a 	bl	8002b80 <MX_GPIO_Init>
  MX_DMA_Init();
 80024cc:	f000 fb2e 	bl	8002b2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80024d0:	f000 fae0 	bl	8002a94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024d4:	f000 f96c 	bl	80027b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80024d8:	f000 f9aa 	bl	8002830 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80024dc:	f000 fa86 	bl	80029ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80024e0:	f000 f9e4 	bl	80028ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ea:	4857      	ldr	r0, [pc, #348]	; (8002648 <main+0x18c>)
 80024ec:	f001 fede 	bl	80042ac <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80024f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024f4:	f001 f9e4 	bl	80038c0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024f8:	2200      	movs	r2, #0
 80024fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fe:	4852      	ldr	r0, [pc, #328]	; (8002648 <main+0x18c>)
 8002500:	f001 fed4 	bl	80042ac <HAL_GPIO_WritePin>

  MAG_check();
 8002504:	f000 fbf8 	bl	8002cf8 <MAG_check>
  RC_check();
 8002508:	f000 fbaa 	bl	8002c60 <RC_check>
  IMU_check();
 800250c:	f000 fbc6 	bl	8002c9c <IMU_check>
  PWM_check();
 8002510:	f000 fc66 	bl	8002de0 <PWM_check>

  pwm_cmd.cyclic_pitch = PWM_MIN;
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <main+0x190>)
 8002516:	4a4e      	ldr	r2, [pc, #312]	; (8002650 <main+0x194>)
 8002518:	609a      	str	r2, [r3, #8]
  pwm_cmd.tail = PWM_MIN;
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <main+0x190>)
 800251c:	4a4c      	ldr	r2, [pc, #304]	; (8002650 <main+0x194>)
 800251e:	605a      	str	r2, [r3, #4]
  pwm_cmd.throttle = PWM_MIN;
 8002520:	4b4a      	ldr	r3, [pc, #296]	; (800264c <main+0x190>)
 8002522:	4a4b      	ldr	r2, [pc, #300]	; (8002650 <main+0x194>)
 8002524:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800252c:	4846      	ldr	r0, [pc, #280]	; (8002648 <main+0x18c>)
 800252e:	f001 febd 	bl	80042ac <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002532:	2100      	movs	r1, #0
 8002534:	4847      	ldr	r0, [pc, #284]	; (8002654 <main+0x198>)
 8002536:	f004 fb1d 	bl	8006b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800253a:	2104      	movs	r1, #4
 800253c:	4845      	ldr	r0, [pc, #276]	; (8002654 <main+0x198>)
 800253e:	f004 fb19 	bl	8006b74 <HAL_TIM_PWM_Start>


  /*======GAIN SET===============================================================================================*/
  setAmplitudeGain(0.0002);
 8002542:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8002658 <main+0x19c>
 8002546:	f7fe fe41 	bl	80011cc <setAmplitudeGain>
  setShiftGain(0.003054325);
 800254a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 800265c <main+0x1a0>
 800254e:	f7fe fe4d 	bl	80011ec <setShiftGain>
  setPIDGain(0.45, 0.007, 0, 0);//0.01//1.05, 0.007, 1.0, 0
 8002552:	2000      	movs	r0, #0
 8002554:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002660 <main+0x1a4>
 8002558:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002664 <main+0x1a8>
 800255c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002668 <main+0x1ac>
 8002560:	f7fe ffec 	bl	800153c <setPIDGain>
  setPIDGain(0.8, 0.0085, 0, 1);//0.0115//1.2, 0.0085, 1.15, 1
 8002564:	2001      	movs	r0, #1
 8002566:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8002660 <main+0x1a4>
 800256a:	eddf 0a40 	vldr	s1, [pc, #256]	; 800266c <main+0x1b0>
 800256e:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002670 <main+0x1b4>
 8002572:	f7fe ffe3 	bl	800153c <setPIDGain>
  setPIDGain(1.15, 0.007, 1.05, 2);
 8002576:	2002      	movs	r0, #2
 8002578:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8002674 <main+0x1b8>
 800257c:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002664 <main+0x1a8>
 8002580:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002678 <main+0x1bc>
 8002584:	f7fe ffda 	bl	800153c <setPIDGain>
  setPIDGain(0.4, 0, 0.95, 3);//0.0115//1.2, 0.0085, 1.15, 1
 8002588:	2003      	movs	r0, #3
 800258a:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800267c <main+0x1c0>
 800258e:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002660 <main+0x1a4>
 8002592:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8002680 <main+0x1c4>
 8002596:	f7fe ffd1 	bl	800153c <setPIDGain>
  setPIDGain(0.4, 0, 0.95, 4);//0.0115//1.2, 0.0085, 1.15, 1
 800259a:	2004      	movs	r0, #4
 800259c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 800267c <main+0x1c0>
 80025a0:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002660 <main+0x1a4>
 80025a4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8002680 <main+0x1c4>
 80025a8:	f7fe ffc8 	bl	800153c <setPIDGain>
  /*=============================================================================================================*/

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025ac:	f006 fb1e 	bl	8008bec <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of IMUQ */
  IMUQHandle = osMessageQueueNew (1, sizeof(IMU), &IMUQ_attributes);
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <main+0x1c8>)
 80025b2:	2118      	movs	r1, #24
 80025b4:	2001      	movs	r0, #1
 80025b6:	f006 fc10 	bl	8008dda <osMessageQueueNew>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a32      	ldr	r2, [pc, #200]	; (8002688 <main+0x1cc>)
 80025be:	6013      	str	r3, [r2, #0]

  /* creation of PWMQ */
  PWMQHandle = osMessageQueueNew (1, sizeof(PWM_CMD), &PWMQ_attributes);
 80025c0:	4a32      	ldr	r2, [pc, #200]	; (800268c <main+0x1d0>)
 80025c2:	210c      	movs	r1, #12
 80025c4:	2001      	movs	r0, #1
 80025c6:	f006 fc08 	bl	8008dda <osMessageQueueNew>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a30      	ldr	r2, [pc, #192]	; (8002690 <main+0x1d4>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* creation of CMDQ */
  CMDQHandle = osMessageQueueNew (1, sizeof(PQR_CMD), &CMDQ_attributes);
 80025d0:	4a30      	ldr	r2, [pc, #192]	; (8002694 <main+0x1d8>)
 80025d2:	2118      	movs	r1, #24
 80025d4:	2001      	movs	r0, #1
 80025d6:	f006 fc00 	bl	8008dda <osMessageQueueNew>
 80025da:	4603      	mov	r3, r0
 80025dc:	4a2e      	ldr	r2, [pc, #184]	; (8002698 <main+0x1dc>)
 80025de:	6013      	str	r3, [r2, #0]

  /* creation of MAGQ */
  MAGQHandle = osMessageQueueNew (1, sizeof(MOTOR), &MAGQ_attributes);
 80025e0:	4a2e      	ldr	r2, [pc, #184]	; (800269c <main+0x1e0>)
 80025e2:	2128      	movs	r1, #40	; 0x28
 80025e4:	2001      	movs	r0, #1
 80025e6:	f006 fbf8 	bl	8008dda <osMessageQueueNew>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a2c      	ldr	r2, [pc, #176]	; (80026a0 <main+0x1e4>)
 80025ee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RC */
  RCHandle = osThreadNew(StartRC, NULL, &RC_attributes);
 80025f0:	4a2c      	ldr	r2, [pc, #176]	; (80026a4 <main+0x1e8>)
 80025f2:	2100      	movs	r1, #0
 80025f4:	482c      	ldr	r0, [pc, #176]	; (80026a8 <main+0x1ec>)
 80025f6:	f006 fb43 	bl	8008c80 <osThreadNew>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <main+0x1f0>)
 80025fe:	6013      	str	r3, [r2, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(StartIMU, NULL, &IMU_attributes);
 8002600:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <main+0x1f4>)
 8002602:	2100      	movs	r1, #0
 8002604:	482b      	ldr	r0, [pc, #172]	; (80026b4 <main+0x1f8>)
 8002606:	f006 fb3b 	bl	8008c80 <osThreadNew>
 800260a:	4603      	mov	r3, r0
 800260c:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <main+0x1fc>)
 800260e:	6013      	str	r3, [r2, #0]

  /* creation of CyclicPitch */
  CyclicPitchHandle = osThreadNew(StartCyclicPitch, NULL, &CyclicPitch_attributes);
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <main+0x200>)
 8002612:	2100      	movs	r1, #0
 8002614:	482a      	ldr	r0, [pc, #168]	; (80026c0 <main+0x204>)
 8002616:	f006 fb33 	bl	8008c80 <osThreadNew>
 800261a:	4603      	mov	r3, r0
 800261c:	4a29      	ldr	r2, [pc, #164]	; (80026c4 <main+0x208>)
 800261e:	6013      	str	r3, [r2, #0]

  /* creation of MainLoop */
  MainLoopHandle = osThreadNew(StartMainLoop, NULL, &MainLoop_attributes);
 8002620:	4a29      	ldr	r2, [pc, #164]	; (80026c8 <main+0x20c>)
 8002622:	2100      	movs	r1, #0
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <main+0x210>)
 8002626:	f006 fb2b 	bl	8008c80 <osThreadNew>
 800262a:	4603      	mov	r3, r0
 800262c:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <main+0x214>)
 800262e:	6013      	str	r3, [r2, #0]

  /* creation of MAG */
  MAGHandle = osThreadNew(StartMAG, NULL, &MAG_attributes);
 8002630:	4a28      	ldr	r2, [pc, #160]	; (80026d4 <main+0x218>)
 8002632:	2100      	movs	r1, #0
 8002634:	4828      	ldr	r0, [pc, #160]	; (80026d8 <main+0x21c>)
 8002636:	f006 fb23 	bl	8008c80 <osThreadNew>
 800263a:	4603      	mov	r3, r0
 800263c:	4a27      	ldr	r2, [pc, #156]	; (80026dc <main+0x220>)
 800263e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002640:	f006 faf8 	bl	8008c34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002644:	e7fe      	b.n	8002644 <main+0x188>
 8002646:	bf00      	nop
 8002648:	48000400 	.word	0x48000400
 800264c:	20000104 	.word	0x20000104
 8002650:	447a0000 	.word	0x447a0000
 8002654:	20003cec 	.word	0x20003cec
 8002658:	3951b717 	.word	0x3951b717
 800265c:	3b482b12 	.word	0x3b482b12
 8002660:	00000000 	.word	0x00000000
 8002664:	3be56042 	.word	0x3be56042
 8002668:	3ee66666 	.word	0x3ee66666
 800266c:	3c0b4396 	.word	0x3c0b4396
 8002670:	3f4ccccd 	.word	0x3f4ccccd
 8002674:	3f866666 	.word	0x3f866666
 8002678:	3f933333 	.word	0x3f933333
 800267c:	3f733333 	.word	0x3f733333
 8002680:	3ecccccd 	.word	0x3ecccccd
 8002684:	0800de90 	.word	0x0800de90
 8002688:	20003abc 	.word	0x20003abc
 800268c:	0800dea8 	.word	0x0800dea8
 8002690:	20003954 	.word	0x20003954
 8002694:	0800dec0 	.word	0x0800dec0
 8002698:	200039d0 	.word	0x200039d0
 800269c:	0800ded8 	.word	0x0800ded8
 80026a0:	2000396c 	.word	0x2000396c
 80026a4:	0800dddc 	.word	0x0800dddc
 80026a8:	08002e09 	.word	0x08002e09
 80026ac:	20003848 	.word	0x20003848
 80026b0:	0800de00 	.word	0x0800de00
 80026b4:	08002f75 	.word	0x08002f75
 80026b8:	200039d4 	.word	0x200039d4
 80026bc:	0800de24 	.word	0x0800de24
 80026c0:	08002fa5 	.word	0x08002fa5
 80026c4:	200042d8 	.word	0x200042d8
 80026c8:	0800de48 	.word	0x0800de48
 80026cc:	080031d1 	.word	0x080031d1
 80026d0:	20003a28 	.word	0x20003a28
 80026d4:	0800de6c 	.word	0x0800de6c
 80026d8:	0800329d 	.word	0x0800329d
 80026dc:	20003ac0 	.word	0x20003ac0

080026e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0a4      	sub	sp, #144	; 0x90
 80026e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026ea:	2238      	movs	r2, #56	; 0x38
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 f8b4 	bl	800b85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002704:	463b      	mov	r3, r7
 8002706:	2244      	movs	r2, #68	; 0x44
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f009 f8a6 	bl	800b85c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002710:	2000      	movs	r0, #0
 8002712:	f002 f9ed 	bl	8004af0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002716:	2302      	movs	r3, #2
 8002718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800271e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002720:	2340      	movs	r3, #64	; 0x40
 8002722:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002724:	2302      	movs	r3, #2
 8002726:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002728:	2302      	movs	r3, #2
 800272a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800272c:	2304      	movs	r3, #4
 800272e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002730:	2355      	movs	r3, #85	; 0x55
 8002732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002736:	2302      	movs	r3, #2
 8002738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002742:	2302      	movs	r3, #2
 8002744:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002748:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fa83 	bl	8004c58 <HAL_RCC_OscConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002758:	f000 fdbd 	bl	80032d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275c:	230f      	movs	r3, #15
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002760:	2303      	movs	r3, #3
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002764:	2300      	movs	r3, #0
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002768:	2300      	movs	r3, #0
 800276a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002770:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002774:	2104      	movs	r1, #4
 8002776:	4618      	mov	r0, r3
 8002778:	f002 fd86 	bl	8005288 <HAL_RCC_ClockConfig>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002782:	f000 fda8 	bl	80032d6 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002786:	2343      	movs	r3, #67	; 0x43
 8002788:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002796:	463b      	mov	r3, r7
 8002798:	4618      	mov	r0, r3
 800279a:	f002 ffc3 	bl	8005724 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80027a4:	f000 fd97 	bl	80032d6 <Error_Handler>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3790      	adds	r7, #144	; 0x90
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_I2C1_Init+0x74>)
 80027b6:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <MX_I2C1_Init+0x78>)
 80027b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_I2C1_Init+0x74>)
 80027bc:	4a1b      	ldr	r2, [pc, #108]	; (800282c <MX_I2C1_Init+0x7c>)
 80027be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_I2C1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027c6:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_I2C1_Init+0x74>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_I2C1_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_I2C1_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027d8:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_I2C1_Init+0x74>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <MX_I2C1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <MX_I2C1_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027ea:	480e      	ldr	r0, [pc, #56]	; (8002824 <MX_I2C1_Init+0x74>)
 80027ec:	f001 fd76 	bl	80042dc <HAL_I2C_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027f6:	f000 fd6e 	bl	80032d6 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027fa:	2100      	movs	r1, #0
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <MX_I2C1_Init+0x74>)
 80027fe:	f002 f8df 	bl	80049c0 <HAL_I2CEx_ConfigAnalogFilter>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002808:	f000 fd65 	bl	80032d6 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_I2C1_Init+0x74>)
 8002810:	f002 f921 	bl	8004a56 <HAL_I2CEx_ConfigDigitalFilter>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800281a:	f000 fd5c 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200035fc 	.word	0x200035fc
 8002828:	40005400 	.word	0x40005400
 800282c:	30a0a7fb 	.word	0x30a0a7fb

08002830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002836:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <MX_SPI1_Init+0x78>)
 8002838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_SPI1_Init+0x74>)
 800283c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_SPI1_Init+0x74>)
 800284a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800284e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002858:	2201      	movs	r2, #1
 800285a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_SPI1_Init+0x74>)
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002866:	2210      	movs	r2, #16
 8002868:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_SPI1_Init+0x74>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002878:	2200      	movs	r2, #0
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_SPI1_Init+0x74>)
 800287e:	2207      	movs	r2, #7
 8002880:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002884:	2200      	movs	r2, #0
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_SPI1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_SPI1_Init+0x74>)
 8002890:	f003 f938 	bl	8005b04 <HAL_SPI_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800289a:	f000 fd1c 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20003f94 	.word	0x20003f94
 80028a8:	40013000 	.word	0x40013000

080028ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b098      	sub	sp, #96	; 0x60
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	2234      	movs	r2, #52	; 0x34
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f008 ffbf 	bl	800b85c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028de:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <MX_TIM1_Init+0x138>)
 80028e0:	4a41      	ldr	r2, [pc, #260]	; (80029e8 <MX_TIM1_Init+0x13c>)
 80028e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <MX_TIM1_Init+0x138>)
 80028e6:	22a9      	movs	r2, #169	; 0xa9
 80028e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ea:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <MX_TIM1_Init+0x138>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 80028f0:	4b3c      	ldr	r3, [pc, #240]	; (80029e4 <MX_TIM1_Init+0x138>)
 80028f2:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80028f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <MX_TIM1_Init+0x138>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028fe:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <MX_TIM1_Init+0x138>)
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <MX_TIM1_Init+0x138>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800290a:	4836      	ldr	r0, [pc, #216]	; (80029e4 <MX_TIM1_Init+0x138>)
 800290c:	f004 f8da 	bl	8006ac4 <HAL_TIM_PWM_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002916:	f000 fcde 	bl	80032d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800292a:	4619      	mov	r1, r3
 800292c:	482d      	ldr	r0, [pc, #180]	; (80029e4 <MX_TIM1_Init+0x138>)
 800292e:	f005 f885 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002938:	f000 fccd 	bl	80032d6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800293c:	2360      	movs	r3, #96	; 0x60
 800293e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002944:	2300      	movs	r3, #0
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002948:	2300      	movs	r3, #0
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800294c:	2300      	movs	r3, #0
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	4820      	ldr	r0, [pc, #128]	; (80029e4 <MX_TIM1_Init+0x138>)
 8002962:	f004 fb87 	bl	8007074 <HAL_TIM_PWM_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800296c:	f000 fcb3 	bl	80032d6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002974:	2204      	movs	r2, #4
 8002976:	4619      	mov	r1, r3
 8002978:	481a      	ldr	r0, [pc, #104]	; (80029e4 <MX_TIM1_Init+0x138>)
 800297a:	f004 fb7b 	bl	8007074 <HAL_TIM_PWM_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002984:	f000 fca7 	bl	80032d6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4807      	ldr	r0, [pc, #28]	; (80029e4 <MX_TIM1_Init+0x138>)
 80029c6:	f005 f8bb 	bl	8007b40 <HAL_TIMEx_ConfigBreakDeadTime>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80029d0:	f000 fc81 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <MX_TIM1_Init+0x138>)
 80029d6:	f000 fd71 	bl	80034bc <HAL_TIM_MspPostInit>

}
 80029da:	bf00      	nop
 80029dc:	3760      	adds	r7, #96	; 0x60
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20003cec 	.word	0x20003cec
 80029e8:	40012c00 	.word	0x40012c00

080029ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 80029f2:	4a26      	ldr	r2, [pc, #152]	; (8002a8c <MX_USART1_UART_Init+0xa0>)
 80029f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 80029f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a04:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a0a:	4b1f      	ldr	r3, [pc, #124]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a12:	220c      	movs	r2, #12
 8002a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1c:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a28:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a2e:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a34:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a36:	f005 f969 	bl	8007d0c <HAL_UART_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a40:	f000 fc49 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a44:	2100      	movs	r1, #0
 8002a46:	4810      	ldr	r0, [pc, #64]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a48:	f005 ffc2 	bl	80089d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a52:	f000 fc40 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a56:	2100      	movs	r1, #0
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a5a:	f005 fff7 	bl	8008a4c <HAL_UARTEx_SetRxFifoThreshold>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a64:	f000 fc37 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a68:	4807      	ldr	r0, [pc, #28]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a6a:	f005 ff78 	bl	800895e <HAL_UARTEx_DisableFifoMode>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a74:	f000 fc2f 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 8002a78:	2210      	movs	r2, #16
 8002a7a:	4905      	ldr	r1, [pc, #20]	; (8002a90 <MX_USART1_UART_Init+0xa4>)
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <MX_USART1_UART_Init+0x9c>)
 8002a7e:	f005 f995 	bl	8007dac <HAL_UART_Receive_DMA>

  /* USER CODE END USART1_Init 2 */

}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20003a2c 	.word	0x20003a2c
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	20001a70 	.word	0x20001a70

08002a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a98:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <MX_USART2_UART_Init+0x94>)
 8002a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002aba:	220c      	movs	r2, #12
 8002abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002adc:	4811      	ldr	r0, [pc, #68]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002ade:	f005 f915 	bl	8007d0c <HAL_UART_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ae8:	f000 fbf5 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aec:	2100      	movs	r1, #0
 8002aee:	480d      	ldr	r0, [pc, #52]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002af0:	f005 ff6e 	bl	80089d0 <HAL_UARTEx_SetTxFifoThreshold>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002afa:	f000 fbec 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afe:	2100      	movs	r1, #0
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002b02:	f005 ffa3 	bl	8008a4c <HAL_UARTEx_SetRxFifoThreshold>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b0c:	f000 fbe3 	bl	80032d6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b10:	4804      	ldr	r0, [pc, #16]	; (8002b24 <MX_USART2_UART_Init+0x90>)
 8002b12:	f005 ff24 	bl	800895e <HAL_UARTEx_DisableFifoMode>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b1c:	f000 fbdb 	bl	80032d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200041f8 	.word	0x200041f8
 8002b28:	40004400 	.word	0x40004400

08002b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b36:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6493      	str	r3, [r2, #72]	; 0x48
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6493      	str	r3, [r2, #72]	; 0x48
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_DMA_Init+0x50>)
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	200b      	movs	r0, #11
 8002b68:	f000 ff84 	bl	8003a74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b6c:	200b      	movs	r0, #11
 8002b6e:	f000 ff9b 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	f107 030c 	add.w	r3, r7, #12
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	4a22      	ldr	r2, [pc, #136]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bba:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <MX_GPIO_Init+0xa4>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2110      	movs	r1, #16
 8002bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bce:	f001 fb6d 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bd8:	4813      	ldr	r0, [pc, #76]	; (8002c28 <MX_GPIO_Init+0xa8>)
 8002bda:	f001 fb67 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002bde:	2310      	movs	r3, #16
 8002be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be2:	2301      	movs	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf8:	f001 f9d6 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <MX_GPIO_Init+0xa8>)
 8002c16:	f001 f9c7 	bl	8003fa8 <HAL_GPIO_Init>

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	48000400 	.word	0x48000400

08002c2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huartx){
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	if(huartx->Instance == huart1.Instance){
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_UART_RxCpltCallback+0x2c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d106      	bne.n	8002c4e <HAL_UART_RxCpltCallback+0x22>
		Spektrum_Read();
 8002c40:	f7fe ff1a 	bl	8001a78 <Spektrum_Read>

		HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 8002c44:	2210      	movs	r2, #16
 8002c46:	4905      	ldr	r1, [pc, #20]	; (8002c5c <HAL_UART_RxCpltCallback+0x30>)
 8002c48:	4803      	ldr	r0, [pc, #12]	; (8002c58 <HAL_UART_RxCpltCallback+0x2c>)
 8002c4a:	f005 f8af 	bl	8007dac <HAL_UART_Receive_DMA>
	}
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20003a2c 	.word	0x20003a2c
 8002c5c:	20001a70 	.word	0x20001a70

08002c60 <RC_check>:


void RC_check(void){
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
	for(int check = 0; check < 10;){
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	e00a      	b.n	8002c82 <RC_check+0x22>
		if(rc.channel[THROTTLE].pos == 342)	check++;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <RC_check+0x38>)
 8002c6e:	8c1b      	ldrh	r3, [r3, #32]
 8002c70:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002c74:	d103      	bne.n	8002c7e <RC_check+0x1e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e001      	b.n	8002c82 <RC_check+0x22>
		else check = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
	for(int check = 0; check < 10;){
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b09      	cmp	r3, #9
 8002c86:	ddf1      	ble.n	8002c6c <RC_check+0xc>
	}
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20001a20 	.word	0x20001a20

08002c9c <IMU_check>:

void IMU_check(void){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
	IMU imu  = { 0, };
 8002ca2:	1d3b      	adds	r3, r7, #4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
 8002cb0:	615a      	str	r2, [r3, #20]

	wt931_Init(&hi2c1);
 8002cb2:	480f      	ldr	r0, [pc, #60]	; (8002cf0 <IMU_check+0x54>)
 8002cb4:	f7fe ff28 	bl	8001b08 <wt931_Init>

	for(int check = 0; check < 5;){
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	e010      	b.n	8002ce0 <IMU_check+0x44>
		imu = readIMU();
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ff35 	bl	8001b30 <readIMU>
		if(imu.theta != 0) check++;
 8002cc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	d003      	beq.n	8002cdc <IMU_check+0x40>
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e001      	b.n	8002ce0 <IMU_check+0x44>
		else check = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
	for(int check = 0; check < 5;){
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	ddeb      	ble.n	8002cbe <IMU_check+0x22>
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	bf00      	nop
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	200035fc 	.word	0x200035fc
 8002cf4:	00000000 	.word	0x00000000

08002cf8 <MAG_check>:

void MAG_check(void){
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
	as5147_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8002cfe:	2210      	movs	r2, #16
 8002d00:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002d04:	4834      	ldr	r0, [pc, #208]	; (8002dd8 <MAG_check+0xe0>)
 8002d06:	f7ff f84b 	bl	8001da0 <as5147_Init>
	//as5147_setZeroPosition();

	for(int check = 0; check < 20;){
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	e02f      	b.n	8002d70 <MAG_check+0x78>
		updatePosition(&mag);
 8002d10:	4832      	ldr	r0, [pc, #200]	; (8002ddc <MAG_check+0xe4>)
 8002d12:	f7ff f9c9 	bl	80020a8 <updatePosition>
		float err = mag.pre_ang - mag.rad;
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <MAG_check+0xe4>)
 8002d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <MAG_check+0xe4>)
 8002d1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d26:	edc7 7a00 	vstr	s15, [r7]
		if((err >= -0.5 && err <= 0.5) && mag.rad != 0) check++;
 8002d2a:	edd7 7a00 	vldr	s15, [r7]
 8002d2e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	db14      	blt.n	8002d66 <MAG_check+0x6e>
 8002d3c:	edd7 7a00 	vldr	s15, [r7]
 8002d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	d80b      	bhi.n	8002d66 <MAG_check+0x6e>
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <MAG_check+0xe4>)
 8002d50:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d54:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5c:	d003      	beq.n	8002d66 <MAG_check+0x6e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3301      	adds	r3, #1
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	e001      	b.n	8002d6a <MAG_check+0x72>
		else check = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]

		HAL_Delay(5);
 8002d6a:	2005      	movs	r0, #5
 8002d6c:	f000 fda8 	bl	80038c0 <HAL_Delay>
	for(int check = 0; check < 20;){
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b13      	cmp	r3, #19
 8002d74:	ddcc      	ble.n	8002d10 <MAG_check+0x18>
	}
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002d76:	e005      	b.n	8002d84 <MAG_check+0x8c>
		setOffset(&mag);
 8002d78:	4818      	ldr	r0, [pc, #96]	; (8002ddc <MAG_check+0xe4>)
 8002d7a:	f7ff fa09 	bl	8002190 <setOffset>
		updatePosition(&mag);
 8002d7e:	4817      	ldr	r0, [pc, #92]	; (8002ddc <MAG_check+0xe4>)
 8002d80:	f7ff f992 	bl	80020a8 <updatePosition>
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002d84:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <MAG_check+0xe4>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fbad 	bl	80004e8 <__aeabi_f2d>
 8002d8e:	a30e      	add	r3, pc, #56	; (adr r3, 8002dc8 <MAG_check+0xd0>)
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f7fd fe90 	bl	8000ab8 <__aeabi_dcmpgt>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d100      	bne.n	8002da0 <MAG_check+0xa8>
	}

}
 8002d9e:	e00c      	b.n	8002dba <MAG_check+0xc2>
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <MAG_check+0xe4>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fb9f 	bl	80004e8 <__aeabi_f2d>
 8002daa:	a309      	add	r3, pc, #36	; (adr r3, 8002dd0 <MAG_check+0xd8>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fe64 	bl	8000a7c <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1de      	bne.n	8002d78 <MAG_check+0x80>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	f3af 8000 	nop.w
 8002dc8:	9999999a 	.word	0x9999999a
 8002dcc:	3fb99999 	.word	0x3fb99999
 8002dd0:	66666666 	.word	0x66666666
 8002dd4:	40186666 	.word	0x40186666
 8002dd8:	20003f94 	.word	0x20003f94
 8002ddc:	200000ac 	.word	0x200000ac

08002de0 <PWM_check>:

void PWM_check(void){
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
	  htim1.Instance->CCR1 = PWM_START;
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <PWM_check+0x24>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = PWM_START;
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <PWM_check+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20003cec 	.word	0x20003cec

08002e08 <StartRC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRC */
void StartRC(void *argument)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(rc.channel[THROTTLE].pos != 0){
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <StartRC+0x148>)
 8002e12:	8c1b      	ldrh	r3, [r3, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8096 	beq.w	8002f46 <StartRC+0x13e>
		rc.thro = map(rc.channel[THROTTLE].pos, RC_MIN, RC_MAX, PWM_MIN, PWM_MAX);     // thro command 				m/s
 8002e1a:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <StartRC+0x148>)
 8002e1c:	8c1b      	ldrh	r3, [r3, #32]
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 8002f54 <StartRC+0x14c>
 8002e2a:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8002f58 <StartRC+0x150>
 8002e2e:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002f5c <StartRC+0x154>
 8002e32:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002f60 <StartRC+0x158>
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	f7fe fde7 	bl	8001a0c <map>
 8002e3e:	eef0 7a40 	vmov.f32	s15, s0
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <StartRC+0x148>)
 8002e44:	edc3 7a00 	vstr	s15, [r3]

		rc.d_pi = map(rc.channel[AILERON].pos, RC_MIN, RC_MAX, -100, 100);			// d(pi)/dt command			deg/s
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <StartRC+0x148>)
 8002e4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e54:	ed9f 2a43 	vldr	s4, [pc, #268]	; 8002f64 <StartRC+0x15c>
 8002e58:	eddf 1a43 	vldr	s3, [pc, #268]	; 8002f68 <StartRC+0x160>
 8002e5c:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8002f5c <StartRC+0x154>
 8002e60:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002f60 <StartRC+0x158>
 8002e64:	eeb0 0a67 	vmov.f32	s0, s15
 8002e68:	f7fe fdd0 	bl	8001a0c <map>
 8002e6c:	eef0 7a40 	vmov.f32	s15, s0
 8002e70:	4b37      	ldr	r3, [pc, #220]	; (8002f50 <StartRC+0x148>)
 8002e72:	edc3 7a04 	vstr	s15, [r3, #16]
		rc.d_theta = map(rc.channel[ELEVATOR].pos, RC_MIN, RC_MAX, -100, 100);		// d(theta)/dt command		deg/s
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <StartRC+0x148>)
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8002f64 <StartRC+0x15c>
 8002e86:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002f68 <StartRC+0x160>
 8002e8a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8002f5c <StartRC+0x154>
 8002e8e:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002f60 <StartRC+0x158>
 8002e92:	eeb0 0a67 	vmov.f32	s0, s15
 8002e96:	f7fe fdb9 	bl	8001a0c <map>
 8002e9a:	eef0 7a40 	vmov.f32	s15, s0
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <StartRC+0x148>)
 8002ea0:	edc3 7a05 	vstr	s15, [r3, #20]
		rc.d_psi = map(rc.channel[RUDDER].pos, RC_MIN, RC_MAX, -100, 100);			// d(psi)/dt command		deg/s
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <StartRC+0x148>)
 8002ea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb0:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8002f64 <StartRC+0x15c>
 8002eb4:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8002f68 <StartRC+0x160>
 8002eb8:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8002f5c <StartRC+0x154>
 8002ebc:	eddf 0a28 	vldr	s1, [pc, #160]	; 8002f60 <StartRC+0x158>
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	f7fe fda2 	bl	8001a0c <map>
 8002ec8:	eef0 7a40 	vmov.f32	s15, s0
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <StartRC+0x148>)
 8002ece:	edc3 7a06 	vstr	s15, [r3, #24]

		rc.pi = map(rc.channel[AILERON].pos, RC_MIN, RC_MAX, -45, 45);			// d(pi)/dt command			deg/s
 8002ed2:	4b1f      	ldr	r3, [pc, #124]	; (8002f50 <StartRC+0x148>)
 8002ed4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	ed9f 2a23 	vldr	s4, [pc, #140]	; 8002f6c <StartRC+0x164>
 8002ee2:	eddf 1a23 	vldr	s3, [pc, #140]	; 8002f70 <StartRC+0x168>
 8002ee6:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8002f5c <StartRC+0x154>
 8002eea:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002f60 <StartRC+0x158>
 8002eee:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef2:	f7fe fd8b 	bl	8001a0c <map>
 8002ef6:	eef0 7a40 	vmov.f32	s15, s0
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <StartRC+0x148>)
 8002efc:	edc3 7a01 	vstr	s15, [r3, #4]
		rc.theta = map(rc.channel[ELEVATOR].pos, RC_MIN, RC_MAX, -45, 45);		// d(theta)/dt command		deg/s
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <StartRC+0x148>)
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0c:	ed9f 2a17 	vldr	s4, [pc, #92]	; 8002f6c <StartRC+0x164>
 8002f10:	eddf 1a17 	vldr	s3, [pc, #92]	; 8002f70 <StartRC+0x168>
 8002f14:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8002f5c <StartRC+0x154>
 8002f18:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002f60 <StartRC+0x158>
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	f7fe fd74 	bl	8001a0c <map>
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <StartRC+0x148>)
 8002f2a:	edc3 7a02 	vstr	s15, [r3, #8]

		if(SWITCH_POS(rc.channel[AUX1].pos) > 0) rc.arm = 1;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <StartRC+0x148>)
 8002f30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f36:	d303      	bcc.n	8002f40 <StartRC+0x138>
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <StartRC+0x148>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	775a      	strb	r2, [r3, #29]
 8002f3e:	e002      	b.n	8002f46 <StartRC+0x13e>
		else rc.arm = 0;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <StartRC+0x148>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	775a      	strb	r2, [r3, #29]

		////rc.mode = SWITCH_POS(rc.channel[AUX2].pos);
	}
    osDelay(1);
 8002f46:	2001      	movs	r0, #1
 8002f48:	f005 ff2c 	bl	8008da4 <osDelay>
	if(rc.channel[THROTTLE].pos != 0){
 8002f4c:	e760      	b.n	8002e10 <StartRC+0x8>
 8002f4e:	bf00      	nop
 8002f50:	20001a20 	.word	0x20001a20
 8002f54:	44e74000 	.word	0x44e74000
 8002f58:	447a0000 	.word	0x447a0000
 8002f5c:	44d54000 	.word	0x44d54000
 8002f60:	43ab0000 	.word	0x43ab0000
 8002f64:	42c80000 	.word	0x42c80000
 8002f68:	c2c80000 	.word	0xc2c80000
 8002f6c:	42340000 	.word	0x42340000
 8002f70:	c2340000 	.word	0xc2340000

08002f74 <StartIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIMU */
void StartIMU(void *argument)
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartIMU */
  /* Infinite loop */
  for(;;)
  {
	imu = readIMU();
 8002f7c:	4c08      	ldr	r4, [pc, #32]	; (8002fa0 <StartIMU+0x2c>)
 8002f7e:	463b      	mov	r3, r7
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fdd5 	bl	8001b30 <readIMU>
 8002f86:	4625      	mov	r5, r4
 8002f88:	463c      	mov	r4, r7
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f92:	e885 0003 	stmia.w	r5, {r0, r1}
    osDelay(1);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f005 ff04 	bl	8008da4 <osDelay>
	imu = readIMU();
 8002f9c:	e7ee      	b.n	8002f7c <StartIMU+0x8>
 8002f9e:	bf00      	nop
 8002fa0:	20000094 	.word	0x20000094

08002fa4 <StartCyclicPitch>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCyclicPitch */
void StartCyclicPitch(void *argument)
{
 8002fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa6:	b091      	sub	sp, #68	; 0x44
 8002fa8:	af0c      	add	r7, sp, #48	; 0x30
 8002faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCyclicPitch */
  /* Infinite loop */
  for(;;)
  {
	float amplitude = setAmplitude(pwm_cmd, pid_cmd);		//cogging power
 8002fac:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <StartCyclicPitch+0x1f4>)
 8002fae:	4b7b      	ldr	r3, [pc, #492]	; (800319c <StartCyclicPitch+0x1f8>)
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fbc:	466c      	mov	r4, sp
 8002fbe:	f102 0310 	add.w	r3, r2, #16
 8002fc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc6:	e884 0003 	stmia.w	r4, {r0, r1}
 8002fca:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8002fcc:	eeb0 0a66 	vmov.f32	s0, s13
 8002fd0:	eef0 0a47 	vmov.f32	s1, s14
 8002fd4:	eeb0 1a67 	vmov.f32	s2, s15
 8002fd8:	f7fe f91a 	bl	8001210 <setAmplitude>
 8002fdc:	ed87 0a03 	vstr	s0, [r7, #12]
	float start_rad = setCyclicShift(mag, pid_cmd);
 8002fe0:	4e6f      	ldr	r6, [pc, #444]	; (80031a0 <StartCyclicPitch+0x1fc>)
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	; (8003198 <StartCyclicPitch+0x1f4>)
 8002fe4:	ac06      	add	r4, sp, #24
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ff0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ff4:	466d      	mov	r5, sp
 8002ff6:	f106 0410 	add.w	r4, r6, #16
 8002ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003002:	e885 0003 	stmia.w	r5, {r0, r1}
 8003006:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800300a:	f7fe f9cd 	bl	80013a8 <setCyclicShift>
 800300e:	ed87 0a02 	vstr	s0, [r7, #8]

	if(start_rad == -1)
 8003012:	edd7 7a02 	vldr	s15, [r7, #8]
 8003016:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800301a:	eef4 7a47 	vcmp.f32	s15, s14
 800301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003022:	d107      	bne.n	8003034 <StartCyclicPitch+0x90>
		cyclic_control = 0;
 8003024:	495f      	ldr	r1, [pc, #380]	; (80031a4 <StartCyclicPitch+0x200>)
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9c1 2300 	strd	r2, r3, [r1]
 8003032:	e029      	b.n	8003088 <StartCyclicPitch+0xe4>
	else{
		start_rad -= ((pwm_cmd.throttle - PWM_MIN) * cyclic_shift_gain);
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <StartCyclicPitch+0x1f8>)
 8003036:	edd3 7a00 	vldr	s15, [r3]
 800303a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80031a8 <StartCyclicPitch+0x204>
 800303e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003042:	4b5a      	ldr	r3, [pc, #360]	; (80031ac <StartCyclicPitch+0x208>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003054:	edc7 7a02 	vstr	s15, [r7, #8]
		cyclic_control = sin(mag.rad - start_rad);
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <StartCyclicPitch+0x1fc>)
 800305a:	ed93 7a03 	vldr	s14, [r3, #12]
 800305e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	ee17 0a90 	vmov	r0, s15
 800306a:	f7fd fa3d 	bl	80004e8 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	ec43 2b10 	vmov	d0, r2, r3
 8003076:	f008 fc4b 	bl	800b910 <sin>
 800307a:	eeb0 7a40 	vmov.f32	s14, s0
 800307e:	eef0 7a60 	vmov.f32	s15, s1
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <StartCyclicPitch+0x200>)
 8003084:	ed83 7b00 	vstr	d7, [r3]
	}

	pwm_cmd.cyclic_pitch = pwm_cmd.throttle + (cyclic_control * amplitude);
 8003088:	4b44      	ldr	r3, [pc, #272]	; (800319c <StartCyclicPitch+0x1f8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa2b 	bl	80004e8 <__aeabi_f2d>
 8003092:	4604      	mov	r4, r0
 8003094:	460d      	mov	r5, r1
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7fd fa26 	bl	80004e8 <__aeabi_f2d>
 800309c:	4b41      	ldr	r3, [pc, #260]	; (80031a4 <StartCyclicPitch+0x200>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd fa79 	bl	8000598 <__aeabi_dmul>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4620      	mov	r0, r4
 80030ac:	4629      	mov	r1, r5
 80030ae:	f7fd f8bd 	bl	800022c <__adddf3>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7fd fd45 	bl	8000b48 <__aeabi_d2f>
 80030be:	4603      	mov	r3, r0
 80030c0:	4a36      	ldr	r2, [pc, #216]	; (800319c <StartCyclicPitch+0x1f8>)
 80030c2:	6093      	str	r3, [r2, #8]

	if(pwm_cmd.tail < PWM_MIN) pwm_cmd.tail = PWM_MIN;
 80030c4:	4b35      	ldr	r3, [pc, #212]	; (800319c <StartCyclicPitch+0x1f8>)
 80030c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ca:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80031a8 <StartCyclicPitch+0x204>
 80030ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	d503      	bpl.n	80030e0 <StartCyclicPitch+0x13c>
 80030d8:	4b30      	ldr	r3, [pc, #192]	; (800319c <StartCyclicPitch+0x1f8>)
 80030da:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <StartCyclicPitch+0x20c>)
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e00c      	b.n	80030fa <StartCyclicPitch+0x156>
	else if(pwm_cmd.tail > PWM_MAX) pwm_cmd.tail = PWM_MAX;
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <StartCyclicPitch+0x1f8>)
 80030e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80030e6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80031b4 <StartCyclicPitch+0x210>
 80030ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd02      	ble.n	80030fa <StartCyclicPitch+0x156>
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <StartCyclicPitch+0x1f8>)
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <StartCyclicPitch+0x214>)
 80030f8:	605a      	str	r2, [r3, #4]
	if(pwm_cmd.cyclic_pitch < PWM_MIN) pwm_cmd.cyclic_pitch = PWM_MIN;
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <StartCyclicPitch+0x1f8>)
 80030fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003100:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80031a8 <StartCyclicPitch+0x204>
 8003104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	d503      	bpl.n	8003116 <StartCyclicPitch+0x172>
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <StartCyclicPitch+0x1f8>)
 8003110:	4a27      	ldr	r2, [pc, #156]	; (80031b0 <StartCyclicPitch+0x20c>)
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e00c      	b.n	8003130 <StartCyclicPitch+0x18c>
	else if(pwm_cmd.cyclic_pitch > PWM_MAX) pwm_cmd.cyclic_pitch = PWM_MAX;
 8003116:	4b21      	ldr	r3, [pc, #132]	; (800319c <StartCyclicPitch+0x1f8>)
 8003118:	edd3 7a02 	vldr	s15, [r3, #8]
 800311c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80031b4 <StartCyclicPitch+0x210>
 8003120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003128:	dd02      	ble.n	8003130 <StartCyclicPitch+0x18c>
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <StartCyclicPitch+0x1f8>)
 800312c:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <StartCyclicPitch+0x214>)
 800312e:	609a      	str	r2, [r3, #8]

	if(rc.arm){
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <StartCyclicPitch+0x218>)
 8003132:	7f5b      	ldrb	r3, [r3, #29]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d014      	beq.n	8003162 <StartCyclicPitch+0x1be>
		htim1.Instance->CCR1 = pwm_cmd.cyclic_pitch;
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <StartCyclicPitch+0x1f8>)
 800313a:	edd3 7a02 	vldr	s15, [r3, #8]
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <StartCyclicPitch+0x21c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003146:	ee17 2a90 	vmov	r2, s15
 800314a:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = pwm_cmd.tail;
 800314c:	4b13      	ldr	r3, [pc, #76]	; (800319c <StartCyclicPitch+0x1f8>)
 800314e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <StartCyclicPitch+0x21c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315a:	ee17 2a90 	vmov	r2, s15
 800315e:	639a      	str	r2, [r3, #56]	; 0x38
 8003160:	e015      	b.n	800318e <StartCyclicPitch+0x1ea>
	}else{
		P_err.sum_error = 0;
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <StartCyclicPitch+0x220>)
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
		Q_err.sum_error = 0;
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <StartCyclicPitch+0x224>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
		R_err.sum_error = 0;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <StartCyclicPitch+0x228>)
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	609a      	str	r2, [r3, #8]

		htim1.Instance->CCR1 = PWM_MIN;
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <StartCyclicPitch+0x21c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003182:	635a      	str	r2, [r3, #52]	; 0x34
		htim1.Instance->CCR2 = PWM_MIN;
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <StartCyclicPitch+0x21c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800318c:	639a      	str	r2, [r3, #56]	; 0x38
	}
    osDelay(1);
 800318e:	2001      	movs	r0, #1
 8003190:	f005 fe08 	bl	8008da4 <osDelay>
  {
 8003194:	e70a      	b.n	8002fac <StartCyclicPitch+0x8>
 8003196:	bf00      	nop
 8003198:	200000ec 	.word	0x200000ec
 800319c:	20000104 	.word	0x20000104
 80031a0:	200000ac 	.word	0x200000ac
 80031a4:	20003958 	.word	0x20003958
 80031a8:	447a0000 	.word	0x447a0000
 80031ac:	20003294 	.word	0x20003294
 80031b0:	447a0000 	.word	0x447a0000
 80031b4:	44e74000 	.word	0x44e74000
 80031b8:	44e74000 	.word	0x44e74000
 80031bc:	20001a20 	.word	0x20001a20
 80031c0:	20003cec 	.word	0x20003cec
 80031c4:	200032bc 	.word	0x200032bc
 80031c8:	200032f0 	.word	0x200032f0
 80031cc:	200032a4 	.word	0x200032a4

080031d0 <StartMainLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainLoop */
void StartMainLoop(void *argument)
{
 80031d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d2:	b0a3      	sub	sp, #140	; 0x8c
 80031d4:	af18      	add	r7, sp, #96	; 0x60
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN StartMainLoop */
  /* Infinite loop */
  for(;;)
  {
	pqr_cmd = CommandGennerate(imu, rc);
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <StartMainLoop+0xb8>)
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	f107 0608 	add.w	r6, r7, #8
 80031e0:	4c2a      	ldr	r4, [pc, #168]	; (800328c <StartMainLoop+0xbc>)
 80031e2:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <StartMainLoop+0xc0>)
 80031e4:	ab03      	add	r3, sp, #12
 80031e6:	4611      	mov	r1, r2
 80031e8:	2250      	movs	r2, #80	; 0x50
 80031ea:	4618      	mov	r0, r3
 80031ec:	f008 fb28 	bl	800b840 <memcpy>
 80031f0:	466d      	mov	r5, sp
 80031f2:	f104 030c 	add.w	r3, r4, #12
 80031f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80031fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003202:	4630      	mov	r0, r6
 8003204:	f7fd fe6c 	bl	8000ee0 <CommandGennerate>
 8003208:	687d      	ldr	r5, [r7, #4]
 800320a:	f107 0408 	add.w	r4, r7, #8
 800320e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003212:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003216:	e885 0003 	stmia.w	r5, {r0, r1}
	pid_cmd = PIDController(pqr_cmd, imu);
 800321a:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <StartMainLoop+0xc4>)
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	f107 0c08 	add.w	ip, r7, #8
 8003222:	4e19      	ldr	r6, [pc, #100]	; (8003288 <StartMainLoop+0xb8>)
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <StartMainLoop+0xbc>)
 8003226:	ac03      	add	r4, sp, #12
 8003228:	461d      	mov	r5, r3
 800322a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800322c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800322e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003232:	e884 0003 	stmia.w	r4, {r0, r1}
 8003236:	466c      	mov	r4, sp
 8003238:	f106 030c 	add.w	r3, r6, #12
 800323c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003244:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003248:	4660      	mov	r0, ip
 800324a:	f7fe f9dd 	bl	8001608 <PIDController>
 800324e:	687d      	ldr	r5, [r7, #4]
 8003250:	f107 0408 	add.w	r4, r7, #8
 8003254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003258:	e894 0003 	ldmia.w	r4, {r0, r1}
 800325c:	e885 0003 	stmia.w	r5, {r0, r1}

	pwm_cmd.throttle = rc.thro;
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <StartMainLoop+0xc0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <StartMainLoop+0xc8>)
 8003266:	6013      	str	r3, [r2, #0]
	pwm_cmd.tail = rc.thro + pid_cmd.R_cmd;
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <StartMainLoop+0xc0>)
 800326a:	ed93 7a00 	vldr	s14, [r3]
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <StartMainLoop+0xc4>)
 8003270:	edd3 7a02 	vldr	s15, [r3, #8]
 8003274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <StartMainLoop+0xc8>)
 800327a:	edc3 7a01 	vstr	s15, [r3, #4]

    osDelay(1);
 800327e:	2001      	movs	r0, #1
 8003280:	f005 fd90 	bl	8008da4 <osDelay>
	pqr_cmd = CommandGennerate(imu, rc);
 8003284:	e7a8      	b.n	80031d8 <StartMainLoop+0x8>
 8003286:	bf00      	nop
 8003288:	200000d4 	.word	0x200000d4
 800328c:	20000094 	.word	0x20000094
 8003290:	20001a20 	.word	0x20001a20
 8003294:	200000ec 	.word	0x200000ec
 8003298:	20000104 	.word	0x20000104

0800329c <StartMAG>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMAG */
void StartMAG(void *argument)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMAG */
  /* Infinite loop */
  for(;;)
  {
	updatePosition(&mag);
 80032a4:	4803      	ldr	r0, [pc, #12]	; (80032b4 <StartMAG+0x18>)
 80032a6:	f7fe feff 	bl	80020a8 <updatePosition>
    osDelay(1);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f005 fd7a 	bl	8008da4 <osDelay>
	updatePosition(&mag);
 80032b0:	e7f8      	b.n	80032a4 <StartMAG+0x8>
 80032b2:	bf00      	nop
 80032b4:	200000ac 	.word	0x200000ac

080032b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80032ca:	f000 fadb 	bl	8003884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032da:	b672      	cpsid	i
}
 80032dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032de:	e7fe      	b.n	80032de <Error_Handler+0x8>

080032e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_MspInit+0x50>)
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <HAL_MspInit+0x50>)
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	6613      	str	r3, [r2, #96]	; 0x60
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_MspInit+0x50>)
 80032f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <HAL_MspInit+0x50>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <HAL_MspInit+0x50>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
 800330a:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_MspInit+0x50>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	210f      	movs	r1, #15
 800331a:	f06f 0001 	mvn.w	r0, #1
 800331e:	f000 fba9 	bl	8003a74 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003322:	f001 fc89 	bl	8004c38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <HAL_I2C_MspInit+0xb8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d145      	bne.n	80033e2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a25      	ldr	r2, [pc, #148]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338c:	2312      	movs	r3, #18
 800338e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003390:	2301      	movs	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2300      	movs	r3, #0
 8003396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003398:	2304      	movs	r3, #4
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a6:	f000 fdff 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033aa:	2380      	movs	r3, #128	; 0x80
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033ae:	2312      	movs	r3, #18
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033ba:	2304      	movs	r3, #4
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <HAL_I2C_MspInit+0xc0>)
 80033c6:	f000 fdef 	bl	8003fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	4a08      	ldr	r2, [pc, #32]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 80033d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d4:	6593      	str	r3, [r2, #88]	; 0x58
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_I2C_MspInit+0xbc>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	3728      	adds	r7, #40	; 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40005400 	.word	0x40005400
 80033f0:	40021000 	.word	0x40021000
 80033f4:	48000400 	.word	0x48000400

080033f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_SPI_MspInit+0x7c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d128      	bne.n	800346c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_SPI_MspInit+0x80>)
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003424:	6613      	str	r3, [r2, #96]	; 0x60
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_SPI_MspInit+0x80>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800344a:	23e0      	movs	r3, #224	; 0xe0
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800345a:	2305      	movs	r3, #5
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003468:	f000 fd9e 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40013000 	.word	0x40013000
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_TIM_PWM_MspInit+0x38>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10b      	bne.n	80034a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8003494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003498:	6613      	str	r3, [r2, #96]	; 0x60
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40021000 	.word	0x40021000

080034bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a12      	ldr	r2, [pc, #72]	; (8003524 <HAL_TIM_MspPostInit+0x68>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d11d      	bne.n	800351a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034ea:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MAIN_Pin|TAIL_Pin;
 80034f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003508:	2306      	movs	r3, #6
 800350a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 030c 	add.w	r3, r7, #12
 8003510:	4619      	mov	r1, r3
 8003512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003516:	f000 fd47 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800351a:	bf00      	nop
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40021000 	.word	0x40021000

0800352c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 031c 	add.w	r3, r7, #28
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_UART_MspInit+0x168>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d16f      	bne.n	800362e <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800354e:	4b52      	ldr	r3, [pc, #328]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003558:	6613      	str	r3, [r2, #96]	; 0x60
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	4a4b      	ldr	r2, [pc, #300]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800357e:	4b46      	ldr	r3, [pc, #280]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	4a45      	ldr	r2, [pc, #276]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Spektrum_Pin;
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035a8:	2307      	movs	r3, #7
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Spektrum_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b6:	f000 fcf7 	bl	8003fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035be:	2302      	movs	r3, #2
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ca:	2307      	movs	r3, #7
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4619      	mov	r1, r3
 80035d4:	4831      	ldr	r0, [pc, #196]	; (800369c <HAL_UART_MspInit+0x170>)
 80035d6:	f000 fce7 	bl	8003fa8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035dc:	4a31      	ldr	r2, [pc, #196]	; (80036a4 <HAL_UART_MspInit+0x178>)
 80035de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035e2:	2218      	movs	r2, #24
 80035e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e6:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035f2:	4b2b      	ldr	r3, [pc, #172]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_UART_MspInit+0x174>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_UART_MspInit+0x174>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003604:	4b26      	ldr	r3, [pc, #152]	; (80036a0 <HAL_UART_MspInit+0x174>)
 8003606:	2220      	movs	r2, #32
 8003608:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_UART_MspInit+0x174>)
 800360c:	2200      	movs	r2, #0
 800360e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003610:	4823      	ldr	r0, [pc, #140]	; (80036a0 <HAL_UART_MspInit+0x174>)
 8003612:	f000 fa57 	bl	8003ac4 <HAL_DMA_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 800361c:	f7ff fe5b 	bl	80032d6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a1f      	ldr	r2, [pc, #124]	; (80036a0 <HAL_UART_MspInit+0x174>)
 8003624:	67da      	str	r2, [r3, #124]	; 0x7c
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_UART_MspInit+0x174>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800362c:	e02d      	b.n	800368a <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_UART_MspInit+0x17c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d128      	bne.n	800368a <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	4a16      	ldr	r2, [pc, #88]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800363e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003642:	6593      	str	r3, [r2, #88]	; 0x58
 8003644:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_UART_MspInit+0x16c>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <HAL_UART_MspInit+0x16c>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003668:	230c      	movs	r3, #12
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003678:	2307      	movs	r3, #7
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4619      	mov	r1, r3
 8003682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003686:	f000 fc8f 	bl	8003fa8 <HAL_GPIO_Init>
}
 800368a:	bf00      	nop
 800368c:	3730      	adds	r7, #48	; 0x30
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40013800 	.word	0x40013800
 8003698:	40021000 	.word	0x40021000
 800369c:	48000400 	.word	0x48000400
 80036a0:	20003970 	.word	0x20003970
 80036a4:	40020008 	.word	0x40020008
 80036a8:	40004400 	.word	0x40004400

080036ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_InitTick+0xcc>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <HAL_InitTick+0xcc>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_InitTick+0xcc>)
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036da:	f107 020c 	add.w	r2, r7, #12
 80036de:	f107 0310 	add.w	r3, r7, #16
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 ffa5 	bl	8005634 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80036ea:	f001 ff77 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80036ee:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	4a22      	ldr	r2, [pc, #136]	; (800377c <HAL_InitTick+0xd0>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	3b01      	subs	r3, #1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_InitTick+0xd4>)
 8003700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003706:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <HAL_InitTick+0xd4>)
 8003708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800370c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_InitTick+0xd4>)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_InitTick+0xd4>)
 8003716:	2200      	movs	r2, #0
 8003718:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371a:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_InitTick+0xd4>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8003720:	4817      	ldr	r0, [pc, #92]	; (8003780 <HAL_InitTick+0xd4>)
 8003722:	f003 f903 	bl	800692c <HAL_TIM_Base_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800372c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11b      	bne.n	800376c <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003734:	4812      	ldr	r0, [pc, #72]	; (8003780 <HAL_InitTick+0xd4>)
 8003736:	f003 f95b 	bl	80069f0 <HAL_TIM_Base_Start_IT>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d111      	bne.n	800376c <HAL_InitTick+0xc0>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003748:	201c      	movs	r0, #28
 800374a:	f000 f9ad 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0f      	cmp	r3, #15
 8003752:	d808      	bhi.n	8003766 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8003754:	2200      	movs	r2, #0
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	201c      	movs	r0, #28
 800375a:	f000 f98b 	bl	8003a74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <HAL_InitTick+0xd8>)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e002      	b.n	800376c <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 800376c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003770:	4618      	mov	r0, r3
 8003772:	3730      	adds	r7, #48	; 0x30
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	431bde83 	.word	0x431bde83
 8003780:	20004338 	.word	0x20004338
 8003784:	20000004 	.word	0x20000004

08003788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800378c:	e7fe      	b.n	800378c <NMI_Handler+0x4>

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003798:	e7fe      	b.n	8003798 <MemManage_Handler+0x4>

0800379a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800379e:	e7fe      	b.n	800379e <BusFault_Handler+0x4>

080037a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037a4:	e7fe      	b.n	80037a4 <UsageFault_Handler+0x4>

080037a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037a6:	b480      	push	{r7}
 80037a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <DMA1_Channel1_IRQHandler+0x10>)
 80037ba:	f000 faa6 	bl	8003d0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20003970 	.word	0x20003970

080037c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM2_IRQHandler+0x10>)
 80037ce:	f003 fad1 	bl	8006d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20004338 	.word	0x20004338

080037dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <SystemInit+0x20>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <SystemInit+0x20>)
 80037e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003800:	480d      	ldr	r0, [pc, #52]	; (8003838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003802:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003804:	480d      	ldr	r0, [pc, #52]	; (800383c <LoopForever+0x6>)
  ldr r1, =_edata
 8003806:	490e      	ldr	r1, [pc, #56]	; (8003840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <LoopForever+0xe>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800380c:	e002      	b.n	8003814 <LoopCopyDataInit>

0800380e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800380e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003812:	3304      	adds	r3, #4

08003814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003818:	d3f9      	bcc.n	800380e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800381a:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800381c:	4c0b      	ldr	r4, [pc, #44]	; (800384c <LoopForever+0x16>)
  movs r3, #0
 800381e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003820:	e001      	b.n	8003826 <LoopFillZerobss>

08003822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003824:	3204      	adds	r2, #4

08003826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003828:	d3fb      	bcc.n	8003822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800382a:	f7ff ffd7 	bl	80037dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800382e:	f007 ffe3 	bl	800b7f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003832:	f7fe fe43 	bl	80024bc <main>

08003836 <LoopForever>:

LoopForever:
    b LoopForever
 8003836:	e7fe      	b.n	8003836 <LoopForever>
  ldr   r0, =_estack
 8003838:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800383c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003840:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003844:	0800e160 	.word	0x0800e160
  ldr r2, =_sbss
 8003848:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800384c:	200043c8 	.word	0x200043c8

08003850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003850:	e7fe      	b.n	8003850 <ADC1_2_IRQHandler>

08003852 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800385c:	2003      	movs	r0, #3
 800385e:	f000 f8fe 	bl	8003a5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003862:	2000      	movs	r0, #0
 8003864:	f7ff ff22 	bl	80036ac <HAL_InitTick>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	71fb      	strb	r3, [r7, #7]
 8003872:	e001      	b.n	8003878 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003874:	f7ff fd34 	bl	80032e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003878:	79fb      	ldrb	r3, [r7, #7]

}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_IncTick+0x1c>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_IncTick+0x20>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4413      	add	r3, r2
 8003892:	4a03      	ldr	r2, [pc, #12]	; (80038a0 <HAL_IncTick+0x1c>)
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	20004384 	.word	0x20004384
 80038a4:	20000008 	.word	0x20000008

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20004384 	.word	0x20004384

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d004      	beq.n	80038e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_Delay+0x40>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038e4:	bf00      	nop
 80038e6:	f7ff ffdf 	bl	80038a8 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d8f7      	bhi.n	80038e6 <HAL_Delay+0x26>
  {
  }
}
 80038f6:	bf00      	nop
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000008 	.word	0x20000008

08003904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003920:	4013      	ands	r3, r2
 8003922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800392c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <__NVIC_SetPriorityGrouping+0x44>)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	60d3      	str	r3, [r2, #12]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	; (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	; (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff ff4c 	bl	8003904 <__NVIC_SetPriorityGrouping>
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a82:	f7ff ff63 	bl	800394c <__NVIC_GetPriorityGrouping>
 8003a86:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6978      	ldr	r0, [r7, #20]
 8003a8e:	f7ff ffb3 	bl	80039f8 <NVIC_EncodePriority>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff82 	bl	80039a4 <__NVIC_SetPriority>
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff56 	bl	8003968 <__NVIC_EnableIRQ>
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e08d      	b.n	8003bf2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_DMA_Init+0x138>)
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d80f      	bhi.n	8003b02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <HAL_DMA_Init+0x13c>)
 8003aea:	4413      	add	r3, r2
 8003aec:	4a45      	ldr	r2, [pc, #276]	; (8003c04 <HAL_DMA_Init+0x140>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_DMA_Init+0x144>)
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
 8003b00:	e00e      	b.n	8003b20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_DMA_Init+0x148>)
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <HAL_DMA_Init+0x140>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	009a      	lsls	r2, r3, #2
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <HAL_DMA_Init+0x14c>)
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f9b6 	bl	8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b80:	d102      	bne.n	8003b88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d010      	beq.n	8003bc8 <HAL_DMA_Init+0x104>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d80c      	bhi.n	8003bc8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9d6 	bl	8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e008      	b.n	8003bda <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40020407 	.word	0x40020407
 8003c00:	bffdfff8 	.word	0xbffdfff8
 8003c04:	cccccccd 	.word	0xcccccccd
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	bffdfbf8 	.word	0xbffdfbf8
 8003c10:	40020400 	.word	0x40020400

08003c14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Start_IT+0x20>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e066      	b.n	8003d02 <HAL_DMA_Start_IT+0xee>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d155      	bne.n	8003cf4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8fb 	bl	8003e68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 020e 	orr.w	r2, r2, #14
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e00f      	b.n	8003cac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0204 	bic.w	r2, r2, #4
 8003c9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 020a 	orr.w	r2, r2, #10
 8003caa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e005      	b.n	8003d00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 031f 	and.w	r3, r3, #31
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d026      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x7a>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d021      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d107      	bne.n	8003d5e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0204 	bic.w	r2, r2, #4
 8003d5c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f003 021f 	and.w	r2, r3, #31
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d071      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d82:	e06c      	b.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	409a      	lsls	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02e      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d029      	beq.n	8003df6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 020a 	bic.w	r2, r2, #10
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d038      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003df4:	e033      	b.n	8003e5e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2208      	movs	r2, #8
 8003e00:	409a      	lsls	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d025      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020e 	bic.w	r2, r2, #14
 8003e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f003 021f 	and.w	r2, r3, #31
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f202 	lsl.w	r2, r1, r2
 8003e36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
}
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f003 021f 	and.w	r2, r3, #31
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d108      	bne.n	8003ec8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ec6:	e007      	b.n	8003ed8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d802      	bhi.n	8003efe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ef8:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e001      	b.n	8003f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f00:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	3b08      	subs	r3, #8
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	009a      	lsls	r2, r3, #2
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a0b      	ldr	r2, [pc, #44]	; (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2201      	movs	r2, #1
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40020407 	.word	0x40020407
 8003f50:	40020800 	.word	0x40020800
 8003f54:	40020820 	.word	0x40020820
 8003f58:	cccccccd 	.word	0xcccccccd
 8003f5c:	40020880 	.word	0x40020880

08003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a08      	ldr	r2, [pc, #32]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f82:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	1000823f 	.word	0x1000823f
 8003fa4:	40020940 	.word	0x40020940

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003fb6:	e15a      	b.n	800426e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 814c 	beq.w	8004268 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d00b      	beq.n	8003ff0 <HAL_GPIO_Init+0x48>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe4:	2b11      	cmp	r3, #17
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b12      	cmp	r3, #18
 8003fee:	d130      	bne.n	8004052 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004026:	2201      	movs	r2, #1
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	091b      	lsrs	r3, r3, #4
 800403c:	f003 0201 	and.w	r2, r3, #1
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	2203      	movs	r2, #3
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0xea>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b12      	cmp	r3, #18
 8004090:	d123      	bne.n	80040da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	6939      	ldr	r1, [r7, #16]
 80040d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a6 	beq.w	8004268 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411c:	4b5b      	ldr	r3, [pc, #364]	; (800428c <HAL_GPIO_Init+0x2e4>)
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	4a5a      	ldr	r2, [pc, #360]	; (800428c <HAL_GPIO_Init+0x2e4>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6613      	str	r3, [r2, #96]	; 0x60
 8004128:	4b58      	ldr	r3, [pc, #352]	; (800428c <HAL_GPIO_Init+0x2e4>)
 800412a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004134:	4a56      	ldr	r2, [pc, #344]	; (8004290 <HAL_GPIO_Init+0x2e8>)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	3302      	adds	r3, #2
 800413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	220f      	movs	r2, #15
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800415e:	d01f      	beq.n	80041a0 <HAL_GPIO_Init+0x1f8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a4c      	ldr	r2, [pc, #304]	; (8004294 <HAL_GPIO_Init+0x2ec>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d019      	beq.n	800419c <HAL_GPIO_Init+0x1f4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a4b      	ldr	r2, [pc, #300]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_GPIO_Init+0x1f0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a4a      	ldr	r2, [pc, #296]	; (800429c <HAL_GPIO_Init+0x2f4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00d      	beq.n	8004194 <HAL_GPIO_Init+0x1ec>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a49      	ldr	r2, [pc, #292]	; (80042a0 <HAL_GPIO_Init+0x2f8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <HAL_GPIO_Init+0x1e8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a48      	ldr	r2, [pc, #288]	; (80042a4 <HAL_GPIO_Init+0x2fc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <HAL_GPIO_Init+0x1e4>
 8004188:	2305      	movs	r3, #5
 800418a:	e00a      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 800418c:	2306      	movs	r3, #6
 800418e:	e008      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 8004190:	2304      	movs	r3, #4
 8004192:	e006      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 8004194:	2303      	movs	r3, #3
 8004196:	e004      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 8004198:	2302      	movs	r3, #2
 800419a:	e002      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_GPIO_Init+0x1fa>
 80041a0:	2300      	movs	r3, #0
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	f002 0203 	and.w	r2, r2, #3
 80041a8:	0092      	lsls	r2, r2, #2
 80041aa:	4093      	lsls	r3, r2
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041b2:	4937      	ldr	r1, [pc, #220]	; (8004290 <HAL_GPIO_Init+0x2e8>)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	3302      	adds	r3, #2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_GPIO_Init+0x300>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041e4:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <HAL_GPIO_Init+0x300>)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_GPIO_Init+0x300>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800420e:	4a26      	ldr	r2, [pc, #152]	; (80042a8 <HAL_GPIO_Init+0x300>)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004214:	4b24      	ldr	r3, [pc, #144]	; (80042a8 <HAL_GPIO_Init+0x300>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_GPIO_Init+0x300>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800423e:	4b1a      	ldr	r3, [pc, #104]	; (80042a8 <HAL_GPIO_Init+0x300>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004262:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <HAL_GPIO_Init+0x300>)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	3301      	adds	r3, #1
 800426c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	f47f ae9d 	bne.w	8003fb8 <HAL_GPIO_Init+0x10>
  }
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40021000 	.word	0x40021000
 8004290:	40010000 	.word	0x40010000
 8004294:	48000400 	.word	0x48000400
 8004298:	48000800 	.word	0x48000800
 800429c:	48000c00 	.word	0x48000c00
 80042a0:	48001000 	.word	0x48001000
 80042a4:	48001400 	.word	0x48001400
 80042a8:	40010400 	.word	0x40010400

080042ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
 80042b8:	4613      	mov	r3, r2
 80042ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c8:	e002      	b.n	80042d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ca:	887a      	ldrh	r2, [r7, #2]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e081      	b.n	80043f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff f816 	bl	8003334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800432c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800433c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d107      	bne.n	8004356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	e006      	b.n	8004364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d104      	bne.n	8004376 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	ea42 0103 	orr.w	r1, r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69d9      	ldr	r1, [r3, #28]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	4608      	mov	r0, r1
 8004406:	4611      	mov	r1, r2
 8004408:	461a      	mov	r2, r3
 800440a:	4603      	mov	r3, r0
 800440c:	817b      	strh	r3, [r7, #10]
 800440e:	460b      	mov	r3, r1
 8004410:	813b      	strh	r3, [r7, #8]
 8004412:	4613      	mov	r3, r2
 8004414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b20      	cmp	r3, #32
 8004420:	f040 80fd 	bne.w	800461e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_I2C_Mem_Read+0x34>
 800442a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0f1      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_I2C_Mem_Read+0x4e>
 8004446:	2302      	movs	r3, #2
 8004448:	e0ea      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004452:	f7ff fa29 	bl	80038a8 <HAL_GetTick>
 8004456:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2319      	movs	r3, #25
 800445e:	2201      	movs	r2, #1
 8004460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f95b 	bl	8004720 <I2C_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0d5      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2222      	movs	r2, #34	; 0x22
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2240      	movs	r2, #64	; 0x40
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a3a      	ldr	r2, [r7, #32]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800449c:	88f8      	ldrh	r0, [r7, #6]
 800449e:	893a      	ldrh	r2, [r7, #8]
 80044a0:	8979      	ldrh	r1, [r7, #10]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4603      	mov	r3, r0
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 f8bf 	bl	8004630 <I2C_RequestMemoryRead>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0ad      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2bff      	cmp	r3, #255	; 0xff
 80044cc:	d90e      	bls.n	80044ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	4b52      	ldr	r3, [pc, #328]	; (8004628 <HAL_I2C_Mem_Read+0x22c>)
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fa3d 	bl	8004964 <I2C_TransferConfig>
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	4b4a      	ldr	r3, [pc, #296]	; (8004628 <HAL_I2C_Mem_Read+0x22c>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa2c 	bl	8004964 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	2200      	movs	r2, #0
 8004514:	2104      	movs	r1, #4
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f902 	bl	8004720 <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e07c      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d034      	beq.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d130      	bne.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f8d3 	bl	8004720 <I2C_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e04d      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	2bff      	cmp	r3, #255	; 0xff
 800458c:	d90e      	bls.n	80045ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	b2da      	uxtb	r2, r3
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	2300      	movs	r3, #0
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f9dd 	bl	8004964 <I2C_TransferConfig>
 80045aa:	e00f      	b.n	80045cc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	8979      	ldrh	r1, [r7, #10]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f9cc 	bl	8004964 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d19a      	bne.n	800450c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f920 	bl	8004820 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e01a      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2220      	movs	r2, #32
 80045f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_I2C_Mem_Read+0x230>)
 80045fe:	400b      	ands	r3, r1
 8004600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	80002400 	.word	0x80002400
 800462c:	fe00e800 	.word	0xfe00e800

08004630 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	461a      	mov	r2, r3
 800463e:	4603      	mov	r3, r0
 8004640:	817b      	strh	r3, [r7, #10]
 8004642:	460b      	mov	r3, r1
 8004644:	813b      	strh	r3, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	8979      	ldrh	r1, [r7, #10]
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <I2C_RequestMemoryRead+0xa4>)
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f984 	bl	8004964 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f89d 	bl	80047a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e02c      	b.n	80046ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004676:	893b      	ldrh	r3, [r7, #8]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
 8004680:	e015      	b.n	80046ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004682:	893b      	ldrh	r3, [r7, #8]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	b29b      	uxth	r3, r3
 8004688:	b2da      	uxtb	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f883 	bl	80047a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e012      	b.n	80046ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046a4:	893b      	ldrh	r3, [r7, #8]
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2140      	movs	r1, #64	; 0x40
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f831 	bl	8004720 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	80002000 	.word	0x80002000

080046d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d103      	bne.n	80046f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d007      	beq.n	8004714 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	619a      	str	r2, [r3, #24]
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004730:	e022      	b.n	8004778 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d01e      	beq.n	8004778 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7ff f8b5 	bl	80038a8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d113      	bne.n	8004778 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e00f      	b.n	8004798 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	429a      	cmp	r2, r3
 8004794:	d0cd      	beq.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047ac:	e02c      	b.n	8004808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68b9      	ldr	r1, [r7, #8]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f870 	bl	8004898 <I2C_IsAcknowledgeFailed>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e02a      	b.n	8004818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d01e      	beq.n	8004808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7ff f86d 	bl	80038a8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d113      	bne.n	8004808 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f043 0220 	orr.w	r2, r3, #32
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e007      	b.n	8004818 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d1cb      	bne.n	80047ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800482c:	e028      	b.n	8004880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f830 	bl	8004898 <I2C_IsAcknowledgeFailed>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e026      	b.n	8004890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004842:	f7ff f831 	bl	80038a8 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	d302      	bcc.n	8004858 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d113      	bne.n	8004880 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e007      	b.n	8004890 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	d1cf      	bne.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d151      	bne.n	8004956 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b2:	e022      	b.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d01e      	beq.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048bc:	f7fe fff4 	bl	80038a8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d302      	bcc.n	80048d2 <I2C_IsAcknowledgeFailed+0x3a>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d113      	bne.n	80048fa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e02e      	b.n	8004958 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d1d5      	bne.n	80048b4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2210      	movs	r2, #16
 800490e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2220      	movs	r2, #32
 8004916:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff fedd 	bl	80046d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <I2C_IsAcknowledgeFailed+0xc8>)
 800492a:	400b      	ands	r3, r1
 800492c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	460b      	mov	r3, r1
 8004970:	817b      	strh	r3, [r7, #10]
 8004972:	4613      	mov	r3, r2
 8004974:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	0d5b      	lsrs	r3, r3, #21
 8004980:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004984:	4b0d      	ldr	r3, [pc, #52]	; (80049bc <I2C_TransferConfig+0x58>)
 8004986:	430b      	orrs	r3, r1
 8004988:	43db      	mvns	r3, r3
 800498a:	ea02 0103 	and.w	r1, r2, r3
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004994:	7a7b      	ldrb	r3, [r7, #9]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	03ff63ff 	.word	0x03ff63ff

080049c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d138      	bne.n	8004a48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e032      	b.n	8004a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e000      	b.n	8004a4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a48:	2302      	movs	r3, #2
  }
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d139      	bne.n	8004ae0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e033      	b.n	8004ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2224      	movs	r2, #36	; 0x24
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	e000      	b.n	8004ae2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
  }
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d141      	bne.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004afe:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0a:	d131      	bne.n	8004b70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b0c:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b12:	4a46      	ldr	r2, [pc, #280]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b1c:	4b43      	ldr	r3, [pc, #268]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b24:	4a41      	ldr	r2, [pc, #260]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2232      	movs	r2, #50	; 0x32
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	4a3f      	ldr	r2, [pc, #252]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	0c9b      	lsrs	r3, r3, #18
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b42:	e002      	b.n	8004b4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4a:	4b38      	ldr	r3, [pc, #224]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d102      	bne.n	8004b5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f2      	bne.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b5e:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d158      	bne.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e057      	b.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b70:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b76:	4a2d      	ldr	r2, [pc, #180]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b80:	e04d      	b.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b88:	d141      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b96:	d131      	bne.n	8004bfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b98:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	4a23      	ldr	r2, [pc, #140]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bb0:	4a1e      	ldr	r2, [pc, #120]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2232      	movs	r2, #50	; 0x32
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0c9b      	lsrs	r3, r3, #18
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bce:	e002      	b.n	8004bd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be2:	d102      	bne.n	8004bea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f2      	bne.n	8004bd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf6:	d112      	bne.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e011      	b.n	8004c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	4a0a      	ldr	r2, [pc, #40]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c0c:	e007      	b.n	8004c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	20000000 	.word	0x20000000
 8004c34:	431bde83 	.word	0x431bde83

08004c38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c46:	6093      	str	r3, [r2, #8]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40007000 	.word	0x40007000

08004c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e308      	b.n	800527c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d075      	beq.n	8004d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4ba3      	ldr	r3, [pc, #652]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4ba0      	ldr	r3, [pc, #640]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCC_OscConfig+0x3e>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d002      	beq.n	8004c9c <HAL_RCC_OscConfig+0x44>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b99      	ldr	r3, [pc, #612]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05b      	beq.n	8004d60 <HAL_RCC_OscConfig+0x108>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d157      	bne.n	8004d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e2e3      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x74>
 8004cbe:	4b91      	ldr	r3, [pc, #580]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a90      	ldr	r2, [pc, #576]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x98>
 8004cd6:	4b8b      	ldr	r3, [pc, #556]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a8a      	ldr	r2, [pc, #552]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b88      	ldr	r3, [pc, #544]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a87      	ldr	r2, [pc, #540]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004cf0:	4b84      	ldr	r3, [pc, #528]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a83      	ldr	r2, [pc, #524]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b81      	ldr	r3, [pc, #516]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a80      	ldr	r2, [pc, #512]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fe fdca 	bl	80038a8 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d18:	f7fe fdc6 	bl	80038a8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e2a8      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2a:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xc0>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fe fdb6 	bl	80038a8 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fe fdb2 	bl	80038a8 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e294      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d52:	4b6c      	ldr	r3, [pc, #432]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0xe8>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d075      	beq.n	8004e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6e:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d78:	4b62      	ldr	r3, [pc, #392]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b0c      	cmp	r3, #12
 8004d86:	d102      	bne.n	8004d8e <HAL_RCC_OscConfig+0x136>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_OscConfig+0x13c>
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d11f      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d94:	4b5b      	ldr	r3, [pc, #364]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_OscConfig+0x154>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e267      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dac:	4b55      	ldr	r3, [pc, #340]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	4952      	ldr	r1, [pc, #328]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc0:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <HAL_RCC_OscConfig+0x2b0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe fc71 	bl	80036ac <HAL_InitTick>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d043      	beq.n	8004e58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e253      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d023      	beq.n	8004e24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ddc:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a48      	ldr	r2, [pc, #288]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fd5e 	bl	80038a8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe fd5a 	bl	80038a8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e23c      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0e:	4b3d      	ldr	r3, [pc, #244]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	061b      	lsls	r3, r3, #24
 8004e1c:	4939      	ldr	r1, [pc, #228]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	604b      	str	r3, [r1, #4]
 8004e22:	e01a      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e24:	4b37      	ldr	r3, [pc, #220]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a36      	ldr	r2, [pc, #216]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fd3a 	bl	80038a8 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e38:	f7fe fd36 	bl	80038a8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e218      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e4a:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1e0>
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d03c      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e74:	4a23      	ldr	r2, [pc, #140]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7e:	f7fe fd13 	bl	80038a8 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e86:	f7fe fd0f 	bl	80038a8 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e1f1      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ef      	beq.n	8004e86 <HAL_RCC_OscConfig+0x22e>
 8004ea6:	e01b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b16      	ldr	r3, [pc, #88]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eae:	4a15      	ldr	r2, [pc, #84]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fcf6 	bl	80038a8 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec0:	f7fe fcf2 	bl	80038a8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e1d4      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ef      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80ab 	beq.w	8005044 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ef2:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_RCC_OscConfig+0x2b4>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e005      	b.n	8004f0e <HAL_RCC_OscConfig+0x2b6>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	20000004 	.word	0x20000004
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00d      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f12:	4baf      	ldr	r3, [pc, #700]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4aae      	ldr	r2, [pc, #696]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1e:	4bac      	ldr	r3, [pc, #688]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2e:	4ba9      	ldr	r3, [pc, #676]	; (80051d4 <HAL_RCC_OscConfig+0x57c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d118      	bne.n	8004f6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f3a:	4ba6      	ldr	r3, [pc, #664]	; (80051d4 <HAL_RCC_OscConfig+0x57c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4aa5      	ldr	r2, [pc, #660]	; (80051d4 <HAL_RCC_OscConfig+0x57c>)
 8004f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f46:	f7fe fcaf 	bl	80038a8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4e:	f7fe fcab 	bl	80038a8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e18d      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f60:	4b9c      	ldr	r3, [pc, #624]	; (80051d4 <HAL_RCC_OscConfig+0x57c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d108      	bne.n	8004f86 <HAL_RCC_OscConfig+0x32e>
 8004f74:	4b96      	ldr	r3, [pc, #600]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	4a95      	ldr	r2, [pc, #596]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f84:	e024      	b.n	8004fd0 <HAL_RCC_OscConfig+0x378>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b05      	cmp	r3, #5
 8004f8c:	d110      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x358>
 8004f8e:	4b90      	ldr	r3, [pc, #576]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	4a8e      	ldr	r2, [pc, #568]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f9e:	4b8c      	ldr	r3, [pc, #560]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	4a8a      	ldr	r2, [pc, #552]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fae:	e00f      	b.n	8004fd0 <HAL_RCC_OscConfig+0x378>
 8004fb0:	4b87      	ldr	r3, [pc, #540]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	4a86      	ldr	r2, [pc, #536]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc0:	4b83      	ldr	r3, [pc, #524]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	4a82      	ldr	r2, [pc, #520]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d016      	beq.n	8005006 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fe fc66 	bl	80038a8 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fe fc62 	bl	80038a8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e142      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ed      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x388>
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005006:	f7fe fc4f 	bl	80038a8 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800500c:	e00a      	b.n	8005024 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fe fc4b 	bl	80038a8 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e12b      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005024:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ed      	bne.n	800500e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005032:	7ffb      	ldrb	r3, [r7, #31]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005038:	4b65      	ldr	r3, [pc, #404]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	4a64      	ldr	r2, [pc, #400]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800503e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005042:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d03c      	beq.n	80050ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01c      	beq.n	8005092 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005058:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800505a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800505e:	4a5c      	ldr	r2, [pc, #368]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005068:	f7fe fc1e 	bl	80038a8 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005070:	f7fe fc1a 	bl	80038a8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0fc      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005082:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0ef      	beq.n	8005070 <HAL_RCC_OscConfig+0x418>
 8005090:	e01b      	b.n	80050ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005092:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005098:	4a4d      	ldr	r2, [pc, #308]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800509a:	f023 0301 	bic.w	r3, r3, #1
 800509e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fe fc01 	bl	80038a8 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050aa:	f7fe fbfd 	bl	80038a8 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0df      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050bc:	4b44      	ldr	r3, [pc, #272]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80050be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ef      	bne.n	80050aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80d3 	beq.w	800527a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b0c      	cmp	r3, #12
 80050de:	f000 808d 	beq.w	80051fc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d15a      	bne.n	80051a0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a38      	ldr	r2, [pc, #224]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80050f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fe fbd7 	bl	80038a8 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fe:	f7fe fbd3 	bl	80038a8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e0b5      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005110:	4b2f      	ldr	r3, [pc, #188]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800511c:	4b2c      	ldr	r3, [pc, #176]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_OscConfig+0x580>)
 8005122:	4013      	ands	r3, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6a11      	ldr	r1, [r2, #32]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800512c:	3a01      	subs	r2, #1
 800512e:	0112      	lsls	r2, r2, #4
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005136:	0212      	lsls	r2, r2, #8
 8005138:	4311      	orrs	r1, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800513e:	0852      	lsrs	r2, r2, #1
 8005140:	3a01      	subs	r2, #1
 8005142:	0552      	lsls	r2, r2, #21
 8005144:	4311      	orrs	r1, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800514a:	0852      	lsrs	r2, r2, #1
 800514c:	3a01      	subs	r2, #1
 800514e:	0652      	lsls	r2, r2, #25
 8005150:	4311      	orrs	r1, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005156:	06d2      	lsls	r2, r2, #27
 8005158:	430a      	orrs	r2, r1
 800515a:	491d      	ldr	r1, [pc, #116]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800516c:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005176:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fe fb96 	bl	80038a8 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005180:	f7fe fb92 	bl	80038a8 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e074      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x528>
 800519e:	e06c      	b.n	800527a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a0a      	ldr	r2, [pc, #40]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <HAL_RCC_OscConfig+0x578>)
 80051be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fe fb6e 	bl	80038a8 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ce:	e00e      	b.n	80051ee <HAL_RCC_OscConfig+0x596>
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40007000 	.word	0x40007000
 80051d8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051dc:	f7fe fb64 	bl	80038a8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e046      	b.n	800527c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ee:	4b25      	ldr	r3, [pc, #148]	; (8005284 <HAL_RCC_OscConfig+0x62c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x584>
 80051fa:	e03e      	b.n	800527a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e039      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005208:	4b1e      	ldr	r3, [pc, #120]	; (8005284 <HAL_RCC_OscConfig+0x62c>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 0203 	and.w	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	429a      	cmp	r2, r3
 800521a:	d12c      	bne.n	8005276 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	3b01      	subs	r3, #1
 8005228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d123      	bne.n	8005276 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d11b      	bne.n	8005276 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d113      	bne.n	8005276 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	3b01      	subs	r3, #1
 800525c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800525e:	429a      	cmp	r2, r3
 8005260:	d109      	bne.n	8005276 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d001      	beq.n	800527a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40021000 	.word	0x40021000

08005288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e11e      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b91      	ldr	r3, [pc, #580]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d910      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b8e      	ldr	r3, [pc, #568]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	498c      	ldr	r1, [pc, #560]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b8a      	ldr	r3, [pc, #552]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e106      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d073      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d129      	bne.n	8005338 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e4:	4b81      	ldr	r3, [pc, #516]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0f4      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052f4:	f000 f9d0 	bl	8005698 <RCC_GetSysClockFreqFromPLLSource>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4a7c      	ldr	r2, [pc, #496]	; (80054f0 <HAL_RCC_ClockConfig+0x268>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d93f      	bls.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005302:	4b7a      	ldr	r3, [pc, #488]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d033      	beq.n	8005382 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800531e:	2b00      	cmp	r3, #0
 8005320:	d12f      	bne.n	8005382 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005322:	4b72      	ldr	r3, [pc, #456]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532a:	4a70      	ldr	r2, [pc, #448]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 800532c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005332:	2380      	movs	r3, #128	; 0x80
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e024      	b.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d107      	bne.n	8005350 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005340:	4b6a      	ldr	r3, [pc, #424]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0c6      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	4b66      	ldr	r3, [pc, #408]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0be      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005360:	f000 f8ce 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8005364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4a61      	ldr	r2, [pc, #388]	; (80054f0 <HAL_RCC_ClockConfig+0x268>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d909      	bls.n	8005382 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800536e:	4b5f      	ldr	r3, [pc, #380]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005376:	4a5d      	ldr	r2, [pc, #372]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b5a      	ldr	r3, [pc, #360]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4957      	ldr	r1, [pc, #348]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fe fa88 	bl	80038a8 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fe fa84 	bl	80038a8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e095      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b4e      	ldr	r3, [pc, #312]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d023      	beq.n	8005418 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053dc:	4b43      	ldr	r3, [pc, #268]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4a42      	ldr	r2, [pc, #264]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053f4:	4b3d      	ldr	r3, [pc, #244]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053fc:	4a3b      	ldr	r2, [pc, #236]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80053fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005404:	4b39      	ldr	r3, [pc, #228]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	4936      	ldr	r1, [pc, #216]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005412:	4313      	orrs	r3, r2
 8005414:	608b      	str	r3, [r1, #8]
 8005416:	e008      	b.n	800542a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d105      	bne.n	800542a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800541e:	4b33      	ldr	r3, [pc, #204]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	4a32      	ldr	r2, [pc, #200]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005428:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d21d      	bcs.n	8005474 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	4929      	ldr	r1, [pc, #164]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005448:	f7fe fa2e 	bl	80038a8 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fe fa2a 	bl	80038a8 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e03b      	b.n	80054de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_RCC_ClockConfig+0x260>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d1ed      	bne.n	8005450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4917      	ldr	r1, [pc, #92]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	490f      	ldr	r1, [pc, #60]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054b2:	f000 f825 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <HAL_RCC_ClockConfig+0x264>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	490c      	ldr	r1, [pc, #48]	; (80054f4 <HAL_RCC_ClockConfig+0x26c>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	fa22 f303 	lsr.w	r3, r2, r3
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x270>)
 80054d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <HAL_RCC_ClockConfig+0x274>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe f8e8 	bl	80036ac <HAL_InitTick>
 80054dc:	4603      	mov	r3, r0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40021000 	.word	0x40021000
 80054f0:	04c4b400 	.word	0x04c4b400
 80054f4:	0800def0 	.word	0x0800def0
 80054f8:	20000000 	.word	0x20000000
 80054fc:	20000004 	.word	0x20000004

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b04      	cmp	r3, #4
 8005510:	d102      	bne.n	8005518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005512:	4b2a      	ldr	r3, [pc, #168]	; (80055bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e047      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005518:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 030c 	and.w	r3, r3, #12
 8005520:	2b08      	cmp	r3, #8
 8005522:	d102      	bne.n	800552a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e03e      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 030c 	and.w	r3, r3, #12
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d136      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	3301      	adds	r3, #1
 800554c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b03      	cmp	r3, #3
 8005552:	d10c      	bne.n	800556e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005554:	4a1a      	ldr	r2, [pc, #104]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800555e:	68d2      	ldr	r2, [r2, #12]
 8005560:	0a12      	lsrs	r2, r2, #8
 8005562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	617b      	str	r3, [r7, #20]
      break;
 800556c:	e00c      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800556e:	4a13      	ldr	r2, [pc, #76]	; (80055bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	0a12      	lsrs	r2, r2, #8
 800557c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]
      break;
 8005586:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005588:	4b0b      	ldr	r3, [pc, #44]	; (80055b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0e5b      	lsrs	r3, r3, #25
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	3301      	adds	r3, #1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e001      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055a8:	693b      	ldr	r3, [r7, #16]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000
 80055bc:	00f42400 	.word	0x00f42400
 80055c0:	007a1200 	.word	0x007a1200

080055c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20000000 	.word	0x20000000

080055dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055e0:	f7ff fff0 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 80055e4:	4602      	mov	r2, r0
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	0a1b      	lsrs	r3, r3, #8
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055f2:	5ccb      	ldrb	r3, [r1, r3]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	0800df00 	.word	0x0800df00

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800560c:	f7ff ffda 	bl	80055c4 <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	0adb      	lsrs	r3, r3, #11
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4904      	ldr	r1, [pc, #16]	; (8005630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40021000 	.word	0x40021000
 8005630:	0800df00 	.word	0x0800df00

08005634 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	220f      	movs	r2, #15
 8005642:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005644:	4b12      	ldr	r3, [pc, #72]	; (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0203 	and.w	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005650:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <HAL_RCC_GetClockConfig+0x5c>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <HAL_RCC_GetClockConfig+0x60>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
 8005694:	40022000 	.word	0x40022000

08005698 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800569e:	4b1e      	ldr	r3, [pc, #120]	; (8005718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	3301      	adds	r3, #1
 80056b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d10c      	bne.n	80056d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056bc:	4a17      	ldr	r2, [pc, #92]	; (800571c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c4:	4a14      	ldr	r2, [pc, #80]	; (8005718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c6:	68d2      	ldr	r2, [r2, #12]
 80056c8:	0a12      	lsrs	r2, r2, #8
 80056ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	617b      	str	r3, [r7, #20]
    break;
 80056d4:	e00c      	b.n	80056f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	4a0e      	ldr	r2, [pc, #56]	; (8005718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056e0:	68d2      	ldr	r2, [r2, #12]
 80056e2:	0a12      	lsrs	r2, r2, #8
 80056e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056e8:	fb02 f303 	mul.w	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]
    break;
 80056ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0e5b      	lsrs	r3, r3, #25
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	3301      	adds	r3, #1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800570a:	687b      	ldr	r3, [r7, #4]
}
 800570c:	4618      	mov	r0, r3
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	40021000 	.word	0x40021000
 800571c:	007a1200 	.word	0x007a1200
 8005720:	00f42400 	.word	0x00f42400

08005724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800572c:	2300      	movs	r3, #0
 800572e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005730:	2300      	movs	r3, #0
 8005732:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8098 	beq.w	8005872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005746:	4b43      	ldr	r3, [pc, #268]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	4b40      	ldr	r3, [pc, #256]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005756:	4a3f      	ldr	r2, [pc, #252]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	6593      	str	r3, [r2, #88]	; 0x58
 800575e:	4b3d      	ldr	r3, [pc, #244]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800576a:	2301      	movs	r3, #1
 800576c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800576e:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005778:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800577a:	f7fe f895 	bl	80038a8 <HAL_GetTick>
 800577e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005780:	e009      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005782:	f7fe f891 	bl	80038a8 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d902      	bls.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	74fb      	strb	r3, [r7, #19]
        break;
 8005794:	e005      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005796:	4b30      	ldr	r3, [pc, #192]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0ef      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80057a2:	7cfb      	ldrb	r3, [r7, #19]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d159      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057a8:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01e      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d019      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057d0:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057e0:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057f0:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fe f851 	bl	80038a8 <HAL_GetTick>
 8005806:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005808:	e00b      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580a:	f7fe f84d 	bl	80038a8 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f241 3288 	movw	r2, #5000	; 0x1388
 8005818:	4293      	cmp	r3, r2
 800581a:	d902      	bls.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	74fb      	strb	r3, [r7, #19]
            break;
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005822:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ec      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005836:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800584c:	e008      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	74bb      	strb	r3, [r7, #18]
 8005852:	e005      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005854:	40021000 	.word	0x40021000
 8005858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005860:	7c7b      	ldrb	r3, [r7, #17]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005866:	4ba6      	ldr	r3, [pc, #664]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	4aa5      	ldr	r2, [pc, #660]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800586c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005870:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800587e:	4ba0      	ldr	r3, [pc, #640]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f023 0203 	bic.w	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	499c      	ldr	r1, [pc, #624]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058a0:	4b97      	ldr	r3, [pc, #604]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f023 020c 	bic.w	r2, r3, #12
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4994      	ldr	r1, [pc, #592]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058c2:	4b8f      	ldr	r3, [pc, #572]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	498b      	ldr	r1, [pc, #556]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058e4:	4b86      	ldr	r3, [pc, #536]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	4983      	ldr	r1, [pc, #524]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005906:	4b7e      	ldr	r3, [pc, #504]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	497a      	ldr	r1, [pc, #488]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005928:	4b75      	ldr	r3, [pc, #468]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	4972      	ldr	r1, [pc, #456]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800594a:	4b6d      	ldr	r3, [pc, #436]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4969      	ldr	r1, [pc, #420]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800596c:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	4961      	ldr	r1, [pc, #388]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800598e:	4b5c      	ldr	r3, [pc, #368]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	4958      	ldr	r1, [pc, #352]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b0:	4b53      	ldr	r3, [pc, #332]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	4950      	ldr	r1, [pc, #320]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d0:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a4a      	ldr	r2, [pc, #296]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059e8:	4b45      	ldr	r3, [pc, #276]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	4942      	ldr	r1, [pc, #264]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a08:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a3c      	ldr	r2, [pc, #240]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a20:	4b37      	ldr	r3, [pc, #220]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	4934      	ldr	r1, [pc, #208]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a40:	4b2f      	ldr	r3, [pc, #188]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a58:	4b29      	ldr	r3, [pc, #164]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a66:	4926      	ldr	r1, [pc, #152]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a76:	d105      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d015      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a90:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	4918      	ldr	r1, [pc, #96]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aae:	d105      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	490a      	ldr	r1, [pc, #40]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae6:	d105      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ae8:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005af4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000

08005b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e09d      	b.n	8005c52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d108      	bne.n	8005b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b26:	d009      	beq.n	8005b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	61da      	str	r2, [r3, #28]
 8005b2e:	e005      	b.n	8005b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fd fc4e 	bl	80033f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7c:	d902      	bls.n	8005b84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e002      	b.n	8005b8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b92:	d007      	beq.n	8005ba4 <HAL_SPI_Init+0xa0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	ea42 0103 	orr.w	r1, r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	f003 0204 	and.w	r2, r3, #4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c20:	ea42 0103 	orr.w	r1, r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b088      	sub	sp, #32
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_SPI_Transmit+0x22>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e158      	b.n	8005f2e <HAL_SPI_Transmit+0x2d4>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c84:	f7fd fe10 	bl	80038a8 <HAL_GetTick>
 8005c88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c9e:	e13d      	b.n	8005f1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <HAL_SPI_Transmit+0x52>
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d102      	bne.n	8005cb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cb0:	e134      	b.n	8005f1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	88fa      	ldrh	r2, [r7, #6]
 8005cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfc:	d10f      	bne.n	8005d1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d44:	d94b      	bls.n	8005dde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <HAL_SPI_Transmit+0xfa>
 8005d4e:	8afb      	ldrh	r3, [r7, #22]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d13e      	bne.n	8005dd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d78:	e02b      	b.n	8005dd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d112      	bne.n	8005dae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dac:	e011      	b.n	8005dd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dae:	f7fd fd7b 	bl	80038a8 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d803      	bhi.n	8005dc6 <HAL_SPI_Transmit+0x16c>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc4:	d102      	bne.n	8005dcc <HAL_SPI_Transmit+0x172>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dd0:	e0a4      	b.n	8005f1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ce      	bne.n	8005d7a <HAL_SPI_Transmit+0x120>
 8005ddc:	e07c      	b.n	8005ed8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Transmit+0x192>
 8005de6:	8afb      	ldrh	r3, [r7, #22]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d170      	bne.n	8005ece <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d912      	bls.n	8005e1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	1c9a      	adds	r2, r3, #2
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b02      	subs	r3, #2
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e1a:	e058      	b.n	8005ece <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e42:	e044      	b.n	8005ece <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d12b      	bne.n	8005eaa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d912      	bls.n	8005e82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	881a      	ldrh	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b02      	subs	r3, #2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e80:	e025      	b.n	8005ece <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ea8:	e011      	b.n	8005ece <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eaa:	f7fd fcfd 	bl	80038a8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d803      	bhi.n	8005ec2 <HAL_SPI_Transmit+0x268>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SPI_Transmit+0x26e>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ecc:	e026      	b.n	8005f1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1b5      	bne.n	8005e44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fcdf 	bl	80068a0 <SPI_EndRxTxTransaction>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e000      	b.n	8005f1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b088      	sub	sp, #32
 8005f3a:	af02      	add	r7, sp, #8
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d112      	bne.n	8005f7a <HAL_SPI_Receive+0x44>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10e      	bne.n	8005f7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f910 	bl	8006196 <HAL_SPI_TransmitReceive>
 8005f76:	4603      	mov	r3, r0
 8005f78:	e109      	b.n	800618e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_SPI_Receive+0x52>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e102      	b.n	800618e <HAL_SPI_Receive+0x258>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f90:	f7fd fc8a 	bl	80038a8 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fa6:	e0e9      	b.n	800617c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Receive+0x7e>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fb8:	e0e0      	b.n	800617c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006004:	d908      	bls.n	8006018 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	e007      	b.n	8006028 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006026:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	d10f      	bne.n	8006052 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006040:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d007      	beq.n	8006070 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800606e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006078:	d867      	bhi.n	800614a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800607a:	e030      	b.n	80060de <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d117      	bne.n	80060ba <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f103 020c 	add.w	r2, r3, #12
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060b8:	e011      	b.n	80060de <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fd fbf5 	bl	80038a8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Receive+0x19c>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Receive+0x1a2>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060dc:	e04e      	b.n	800617c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1c8      	bne.n	800607c <HAL_SPI_Receive+0x146>
 80060ea:	e034      	b.n	8006156 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d115      	bne.n	8006126 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	b292      	uxth	r2, r2
 8006106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	1c9a      	adds	r2, r3, #2
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006124:	e011      	b.n	800614a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006126:	f7fd fbbf 	bl	80038a8 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d803      	bhi.n	800613e <HAL_SPI_Receive+0x208>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d102      	bne.n	8006144 <HAL_SPI_Receive+0x20e>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006148:	e018      	b.n	800617c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1ca      	bne.n	80060ec <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fb48 	bl	80067f0 <SPI_EndRxTransaction>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	75fb      	strb	r3, [r7, #23]
 8006178:	e000      	b.n	800617c <HAL_SPI_Receive+0x246>
  }

error :
 800617a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800618c:	7dfb      	ldrb	r3, [r7, #23]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b08a      	sub	sp, #40	; 0x28
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061a4:	2301      	movs	r3, #1
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x26>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e1fb      	b.n	80065b4 <HAL_SPI_TransmitReceive+0x41e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061c4:	f7fd fb70 	bl	80038a8 <HAL_GetTick>
 80061c8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061d0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061d8:	887b      	ldrh	r3, [r7, #2]
 80061da:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061e0:	7efb      	ldrb	r3, [r7, #27]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d00e      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x6e>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ec:	d106      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x66>
 80061f6:	7efb      	ldrb	r3, [r7, #27]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d003      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006202:	e1cd      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_TransmitReceive+0x80>
 8006210:	887b      	ldrh	r3, [r7, #2]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d103      	bne.n	800621e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800621c:	e1c0      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b04      	cmp	r3, #4
 8006228:	d003      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2205      	movs	r2, #5
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	887a      	ldrh	r2, [r7, #2]
 8006242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	887a      	ldrh	r2, [r7, #2]
 800624a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	887a      	ldrh	r2, [r7, #2]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006274:	d802      	bhi.n	800627c <HAL_SPI_TransmitReceive+0xe6>
 8006276:	8a3b      	ldrh	r3, [r7, #16]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d908      	bls.n	800628e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800628a:	605a      	str	r2, [r3, #4]
 800628c:	e007      	b.n	800629e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800629c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	d007      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062c4:	d97c      	bls.n	80063c0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_TransmitReceive+0x13e>
 80062ce:	8a7b      	ldrh	r3, [r7, #18]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d169      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f8:	e056      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b02      	cmp	r3, #2
 8006306:	d11b      	bne.n	8006340 <HAL_SPI_TransmitReceive+0x1aa>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d016      	beq.n	8006340 <HAL_SPI_TransmitReceive+0x1aa>
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2b01      	cmp	r3, #1
 8006316:	d113      	bne.n	8006340 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d11c      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x1f2>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	b292      	uxth	r2, r2
 8006366:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	1c9a      	adds	r2, r3, #2
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006378:	b29b      	uxth	r3, r3
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006384:	2301      	movs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006388:	f7fd fa8e 	bl	80038a8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006394:	429a      	cmp	r2, r3
 8006396:	d807      	bhi.n	80063a8 <HAL_SPI_TransmitReceive+0x212>
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d003      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063a6:	e0fb      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1a3      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x164>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d19d      	bne.n	80062fa <HAL_SPI_TransmitReceive+0x164>
 80063be:	e0df      	b.n	8006580 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x23a>
 80063c8:	8a7b      	ldrh	r3, [r7, #18]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	f040 80cb 	bne.w	8006566 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d912      	bls.n	8006400 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b02      	subs	r3, #2
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063fe:	e0b2      	b.n	8006566 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006426:	e09e      	b.n	8006566 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d134      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x30a>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d02f      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x30a>
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b01      	cmp	r3, #1
 8006444:	d12c      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d912      	bls.n	8006476 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b02      	subs	r3, #2
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006474:	e012      	b.n	800649c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d148      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x3aa>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d042      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d923      	bls.n	800650e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	b292      	uxth	r2, r2
 80064d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b02      	subs	r3, #2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d81f      	bhi.n	800653c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	e016      	b.n	800653c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f103 020c 	add.w	r2, r3, #12
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653c:	2301      	movs	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006540:	f7fd f9b2 	bl	80038a8 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	429a      	cmp	r2, r3
 800654e:	d803      	bhi.n	8006558 <HAL_SPI_TransmitReceive+0x3c2>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d102      	bne.n	800655e <HAL_SPI_TransmitReceive+0x3c8>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006564:	e01c      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	f47f af5b 	bne.w	8006428 <HAL_SPI_TransmitReceive+0x292>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	f47f af54 	bne.w	8006428 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f98b 	bl	80068a0 <SPI_EndRxTxTransaction>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d006      	beq.n	800659e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
 800659c:	e000      	b.n	80065a0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800659e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3728      	adds	r7, #40	; 0x28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b088      	sub	sp, #32
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065cc:	f7fd f96c 	bl	80038a8 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	4413      	add	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065dc:	f7fd f964 	bl	80038a8 <HAL_GetTick>
 80065e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065e2:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	015b      	lsls	r3, r3, #5
 80065e8:	0d1b      	lsrs	r3, r3, #20
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	fb02 f303 	mul.w	r3, r2, r3
 80065f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f2:	e054      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d050      	beq.n	800669e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065fc:	f7fd f954 	bl	80038a8 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	429a      	cmp	r2, r3
 800660a:	d902      	bls.n	8006612 <SPI_WaitFlagStateUntilTimeout+0x56>
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d13d      	bne.n	800668e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800662a:	d111      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x94>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006634:	d004      	beq.n	8006640 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663e:	d107      	bne.n	8006650 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006658:	d10f      	bne.n	800667a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e017      	b.n	80066be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3b01      	subs	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	4013      	ands	r3, r2
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	bf0c      	ite	eq
 80066ae:	2301      	moveq	r3, #1
 80066b0:	2300      	movne	r3, #0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	461a      	mov	r2, r3
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d19b      	bne.n	80065f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000000 	.word	0x20000000

080066cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066da:	f7fd f8e5 	bl	80038a8 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	4413      	add	r3, r2
 80066e8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066ea:	f7fd f8dd 	bl	80038a8 <HAL_GetTick>
 80066ee:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066f0:	4b3e      	ldr	r3, [pc, #248]	; (80067ec <SPI_WaitFifoStateUntilTimeout+0x120>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	00da      	lsls	r2, r3, #3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	0d1b      	lsrs	r3, r3, #20
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8006708:	e062      	b.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006710:	d109      	bne.n	8006726 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006724:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672c:	d050      	beq.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800672e:	f7fd f8bb 	bl	80038a8 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	429a      	cmp	r2, r3
 800673c:	d902      	bls.n	8006744 <SPI_WaitFifoStateUntilTimeout+0x78>
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d13d      	bne.n	80067c0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006752:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675c:	d111      	bne.n	8006782 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006766:	d004      	beq.n	8006772 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006770:	d107      	bne.n	8006782 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006780:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678a:	d10f      	bne.n	80067ac <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e010      	b.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d194      	bne.n	800670a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000000 	.word	0x20000000

080067f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006804:	d111      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	d004      	beq.n	800681a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d107      	bne.n	800682a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2200      	movs	r2, #0
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7ff fec1 	bl	80065bc <SPI_WaitFlagStateUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e023      	b.n	8006898 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006858:	d11d      	bne.n	8006896 <SPI_EndRxTransaction+0xa6>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006862:	d004      	beq.n	800686e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d113      	bne.n	8006896 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2200      	movs	r2, #0
 8006876:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff ff26 	bl	80066cc <SPI_WaitFifoStateUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e000      	b.n	8006898 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f7ff ff07 	bl	80066cc <SPI_WaitFifoStateUntilTimeout>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c8:	f043 0220 	orr.w	r2, r3, #32
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e027      	b.n	8006924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fe6c 	bl	80065bc <SPI_WaitFlagStateUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ee:	f043 0220 	orr.w	r2, r3, #32
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e014      	b.n	8006924 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fee0 	bl	80066cc <SPI_WaitFifoStateUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e000      	b.n	8006924 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e049      	b.n	80069d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f841 	bl	80069da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3304      	adds	r3, #4
 8006968:	4619      	mov	r1, r3
 800696a:	4610      	mov	r0, r2
 800696c:	f000 fcba 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
	...

080069f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d001      	beq.n	8006a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e04a      	b.n	8006a9e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a21      	ldr	r2, [pc, #132]	; (8006aac <HAL_TIM_Base_Start_IT+0xbc>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x6c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d013      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x6c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1d      	ldr	r2, [pc, #116]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x6c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x6c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1a      	ldr	r2, [pc, #104]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x6c>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a19      	ldr	r2, [pc, #100]	; (8006abc <HAL_TIM_Base_Start_IT+0xcc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d115      	bne.n	8006a88 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	4b17      	ldr	r3, [pc, #92]	; (8006ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d015      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0xaa>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d011      	beq.n	8006a9a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	e008      	b.n	8006a9a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e000      	b.n	8006a9c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40013400 	.word	0x40013400
 8006abc:	40014000 	.word	0x40014000
 8006ac0:	00010007 	.word	0x00010007

08006ac4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e049      	b.n	8006b6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fc fcc6 	bl	800347c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f000 fbee 	bl	80072e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d109      	bne.n	8006b98 <HAL_TIM_PWM_Start+0x24>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	bf14      	ite	ne
 8006b90:	2301      	movne	r3, #1
 8006b92:	2300      	moveq	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	e03c      	b.n	8006c12 <HAL_TIM_PWM_Start+0x9e>
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d109      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0x3e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	bf14      	ite	ne
 8006baa:	2301      	movne	r3, #1
 8006bac:	2300      	moveq	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	e02f      	b.n	8006c12 <HAL_TIM_PWM_Start+0x9e>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b08      	cmp	r3, #8
 8006bb6:	d109      	bne.n	8006bcc <HAL_TIM_PWM_Start+0x58>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	bf14      	ite	ne
 8006bc4:	2301      	movne	r3, #1
 8006bc6:	2300      	moveq	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	e022      	b.n	8006c12 <HAL_TIM_PWM_Start+0x9e>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b0c      	cmp	r3, #12
 8006bd0:	d109      	bne.n	8006be6 <HAL_TIM_PWM_Start+0x72>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	bf14      	ite	ne
 8006bde:	2301      	movne	r3, #1
 8006be0:	2300      	moveq	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	e015      	b.n	8006c12 <HAL_TIM_PWM_Start+0x9e>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d109      	bne.n	8006c00 <HAL_TIM_PWM_Start+0x8c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e008      	b.n	8006c12 <HAL_TIM_PWM_Start+0x9e>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e097      	b.n	8006d4a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_PWM_Start+0xb6>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	e023      	b.n	8006c72 <HAL_TIM_PWM_Start+0xfe>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_PWM_Start+0xc6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	e01b      	b.n	8006c72 <HAL_TIM_PWM_Start+0xfe>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_PWM_Start+0xd6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c48:	e013      	b.n	8006c72 <HAL_TIM_PWM_Start+0xfe>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b0c      	cmp	r3, #12
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Start+0xe6>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c58:	e00b      	b.n	8006c72 <HAL_TIM_PWM_Start+0xfe>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start+0xf6>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c68:	e003      	b.n	8006c72 <HAL_TIM_PWM_Start+0xfe>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 feb8 	bl	80079f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a33      	ldr	r2, [pc, #204]	; (8006d54 <HAL_TIM_PWM_Start+0x1e0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d013      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x13e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a32      	ldr	r2, [pc, #200]	; (8006d58 <HAL_TIM_PWM_Start+0x1e4>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00e      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x13e>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a30      	ldr	r2, [pc, #192]	; (8006d5c <HAL_TIM_PWM_Start+0x1e8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d009      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x13e>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <HAL_TIM_PWM_Start+0x1ec>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d004      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x13e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <HAL_TIM_PWM_Start+0x1f0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_PWM_Start+0x142>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <HAL_TIM_PWM_Start+0x144>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a20      	ldr	r2, [pc, #128]	; (8006d54 <HAL_TIM_PWM_Start+0x1e0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <HAL_TIM_PWM_Start+0x194>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d013      	beq.n	8006d08 <HAL_TIM_PWM_Start+0x194>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_TIM_PWM_Start+0x1f4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <HAL_TIM_PWM_Start+0x194>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a1f      	ldr	r2, [pc, #124]	; (8006d6c <HAL_TIM_PWM_Start+0x1f8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <HAL_TIM_PWM_Start+0x194>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <HAL_TIM_PWM_Start+0x1e4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_PWM_Start+0x194>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_TIM_PWM_Start+0x1e8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d115      	bne.n	8006d34 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <HAL_TIM_PWM_Start+0x1fc>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b06      	cmp	r3, #6
 8006d18:	d015      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x1d2>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d20:	d011      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	e008      	b.n	8006d46 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0201 	orr.w	r2, r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e000      	b.n	8006d48 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40014400 	.word	0x40014400
 8006d64:	40014800 	.word	0x40014800
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	00010007 	.word	0x00010007

08006d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d122      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d11b      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0202 	mvn.w	r2, #2
 8006da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fa76 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006dbc:	e005      	b.n	8006dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa68 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa79 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b04      	cmp	r3, #4
 8006ddc:	d122      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d11b      	bne.n	8006e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0204 	mvn.w	r2, #4
 8006df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fa4c 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006e10:	e005      	b.n	8006e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa3e 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fa4f 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b08      	cmp	r3, #8
 8006e30:	d122      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0208 	mvn.w	r2, #8
 8006e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa22 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa14 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fa25 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d122      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d11b      	bne.n	8006ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0210 	mvn.w	r2, #16
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9f8 	bl	80072a8 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9ea 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9fb 	bl	80072bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d10e      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d107      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0201 	mvn.w	r2, #1
 8006ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fc f9e0 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f02:	2b80      	cmp	r3, #128	; 0x80
 8006f04:	d10e      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f10:	2b80      	cmp	r3, #128	; 0x80
 8006f12:	d107      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 feb8 	bl	8007c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f32:	d10e      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d107      	bne.n	8006f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 feab 	bl	8007ca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d10e      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d107      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9a9 	bl	80072d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d10e      	bne.n	8006faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d107      	bne.n	8006faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0220 	mvn.w	r2, #32
 8006fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fe6b 	bl	8007c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fb8:	d10f      	bne.n	8006fda <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc8:	d107      	bne.n	8006fda <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fe71 	bl	8007cbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fe8:	d10f      	bne.n	800700a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ff8:	d107      	bne.n	800700a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fe63 	bl	8007cd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007018:	d10f      	bne.n	800703a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007028:	d107      	bne.n	800703a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fe55 	bl	8007ce4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007048:	d10f      	bne.n	800706a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007058:	d107      	bne.n	800706a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fe47 	bl	8007cf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800708a:	2302      	movs	r3, #2
 800708c:	e0fd      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x216>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b14      	cmp	r3, #20
 800709a:	f200 80f0 	bhi.w	800727e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	0800727f 	.word	0x0800727f
 80070ac:	0800727f 	.word	0x0800727f
 80070b0:	0800727f 	.word	0x0800727f
 80070b4:	08007139 	.word	0x08007139
 80070b8:	0800727f 	.word	0x0800727f
 80070bc:	0800727f 	.word	0x0800727f
 80070c0:	0800727f 	.word	0x0800727f
 80070c4:	0800717b 	.word	0x0800717b
 80070c8:	0800727f 	.word	0x0800727f
 80070cc:	0800727f 	.word	0x0800727f
 80070d0:	0800727f 	.word	0x0800727f
 80070d4:	080071bb 	.word	0x080071bb
 80070d8:	0800727f 	.word	0x0800727f
 80070dc:	0800727f 	.word	0x0800727f
 80070e0:	0800727f 	.word	0x0800727f
 80070e4:	080071fd 	.word	0x080071fd
 80070e8:	0800727f 	.word	0x0800727f
 80070ec:	0800727f 	.word	0x0800727f
 80070f0:	0800727f 	.word	0x0800727f
 80070f4:	0800723d 	.word	0x0800723d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f980 	bl	8007404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0208 	orr.w	r2, r2, #8
 8007112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0204 	bic.w	r2, r2, #4
 8007122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6999      	ldr	r1, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	619a      	str	r2, [r3, #24]
      break;
 8007136:	e0a3      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f9f0 	bl	8007524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6999      	ldr	r1, [r3, #24]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	021a      	lsls	r2, r3, #8
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	619a      	str	r2, [r3, #24]
      break;
 8007178:	e082      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fa59 	bl	8007638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0208 	orr.w	r2, r2, #8
 8007194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0204 	bic.w	r2, r2, #4
 80071a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69d9      	ldr	r1, [r3, #28]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	430a      	orrs	r2, r1
 80071b6:	61da      	str	r2, [r3, #28]
      break;
 80071b8:	e062      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fac1 	bl	8007748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69da      	ldr	r2, [r3, #28]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69d9      	ldr	r1, [r3, #28]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	021a      	lsls	r2, r3, #8
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	61da      	str	r2, [r3, #28]
      break;
 80071fa:	e041      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 fb2a 	bl	800785c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0208 	orr.w	r2, r2, #8
 8007216:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0204 	bic.w	r2, r2, #4
 8007226:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800723a:	e021      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fb6e 	bl	8007924 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007256:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007266:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800727c:	e000      	b.n	8007280 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800727e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop

08007294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a3c      	ldr	r2, [pc, #240]	; (80073e8 <TIM_Base_SetConfig+0x104>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00f      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007302:	d00b      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a39      	ldr	r2, [pc, #228]	; (80073ec <TIM_Base_SetConfig+0x108>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d007      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a38      	ldr	r2, [pc, #224]	; (80073f0 <TIM_Base_SetConfig+0x10c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_Base_SetConfig+0x38>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a37      	ldr	r2, [pc, #220]	; (80073f4 <TIM_Base_SetConfig+0x110>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d108      	bne.n	800732e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <TIM_Base_SetConfig+0x104>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d01b      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733c:	d017      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <TIM_Base_SetConfig+0x108>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a29      	ldr	r2, [pc, #164]	; (80073f0 <TIM_Base_SetConfig+0x10c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00f      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <TIM_Base_SetConfig+0x110>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00b      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <TIM_Base_SetConfig+0x114>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a26      	ldr	r2, [pc, #152]	; (80073fc <TIM_Base_SetConfig+0x118>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_Base_SetConfig+0x8a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a25      	ldr	r2, [pc, #148]	; (8007400 <TIM_Base_SetConfig+0x11c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d108      	bne.n	8007380 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a10      	ldr	r2, [pc, #64]	; (80073e8 <TIM_Base_SetConfig+0x104>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00f      	beq.n	80073cc <TIM_Base_SetConfig+0xe8>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a11      	ldr	r2, [pc, #68]	; (80073f4 <TIM_Base_SetConfig+0x110>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00b      	beq.n	80073cc <TIM_Base_SetConfig+0xe8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <TIM_Base_SetConfig+0x114>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d007      	beq.n	80073cc <TIM_Base_SetConfig+0xe8>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a0f      	ldr	r2, [pc, #60]	; (80073fc <TIM_Base_SetConfig+0x118>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_Base_SetConfig+0xe8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a0e      	ldr	r2, [pc, #56]	; (8007400 <TIM_Base_SetConfig+0x11c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d103      	bne.n	80073d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	615a      	str	r2, [r3, #20]
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40012c00 	.word	0x40012c00
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40013400 	.word	0x40013400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	40014800 	.word	0x40014800

08007404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	f023 0201 	bic.w	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 0302 	bic.w	r3, r3, #2
 8007450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a2c      	ldr	r2, [pc, #176]	; (8007510 <TIM_OC1_SetConfig+0x10c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00f      	beq.n	8007484 <TIM_OC1_SetConfig+0x80>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a2b      	ldr	r2, [pc, #172]	; (8007514 <TIM_OC1_SetConfig+0x110>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00b      	beq.n	8007484 <TIM_OC1_SetConfig+0x80>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <TIM_OC1_SetConfig+0x114>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d007      	beq.n	8007484 <TIM_OC1_SetConfig+0x80>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a29      	ldr	r2, [pc, #164]	; (800751c <TIM_OC1_SetConfig+0x118>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC1_SetConfig+0x80>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a28      	ldr	r2, [pc, #160]	; (8007520 <TIM_OC1_SetConfig+0x11c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10c      	bne.n	800749e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f023 0308 	bic.w	r3, r3, #8
 800748a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f023 0304 	bic.w	r3, r3, #4
 800749c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1b      	ldr	r2, [pc, #108]	; (8007510 <TIM_OC1_SetConfig+0x10c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00f      	beq.n	80074c6 <TIM_OC1_SetConfig+0xc2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <TIM_OC1_SetConfig+0x110>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00b      	beq.n	80074c6 <TIM_OC1_SetConfig+0xc2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a19      	ldr	r2, [pc, #100]	; (8007518 <TIM_OC1_SetConfig+0x114>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d007      	beq.n	80074c6 <TIM_OC1_SetConfig+0xc2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a18      	ldr	r2, [pc, #96]	; (800751c <TIM_OC1_SetConfig+0x118>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_OC1_SetConfig+0xc2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a17      	ldr	r2, [pc, #92]	; (8007520 <TIM_OC1_SetConfig+0x11c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d111      	bne.n	80074ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	4313      	orrs	r3, r2
 80074de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	621a      	str	r2, [r3, #32]
}
 8007504:	bf00      	nop
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40012c00 	.word	0x40012c00
 8007514:	40013400 	.word	0x40013400
 8007518:	40014000 	.word	0x40014000
 800751c:	40014400 	.word	0x40014400
 8007520:	40014800 	.word	0x40014800

08007524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	f023 0210 	bic.w	r2, r3, #16
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f023 0320 	bic.w	r3, r3, #32
 8007572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a28      	ldr	r2, [pc, #160]	; (8007624 <TIM_OC2_SetConfig+0x100>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_OC2_SetConfig+0x6c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a27      	ldr	r2, [pc, #156]	; (8007628 <TIM_OC2_SetConfig+0x104>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10d      	bne.n	80075ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <TIM_OC2_SetConfig+0x100>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00f      	beq.n	80075d4 <TIM_OC2_SetConfig+0xb0>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a1c      	ldr	r2, [pc, #112]	; (8007628 <TIM_OC2_SetConfig+0x104>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00b      	beq.n	80075d4 <TIM_OC2_SetConfig+0xb0>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a1b      	ldr	r2, [pc, #108]	; (800762c <TIM_OC2_SetConfig+0x108>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d007      	beq.n	80075d4 <TIM_OC2_SetConfig+0xb0>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1a      	ldr	r2, [pc, #104]	; (8007630 <TIM_OC2_SetConfig+0x10c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_OC2_SetConfig+0xb0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a19      	ldr	r2, [pc, #100]	; (8007634 <TIM_OC2_SetConfig+0x110>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d113      	bne.n	80075fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	621a      	str	r2, [r3, #32]
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40012c00 	.word	0x40012c00
 8007628:	40013400 	.word	0x40013400
 800762c:	40014000 	.word	0x40014000
 8007630:	40014400 	.word	0x40014400
 8007634:	40014800 	.word	0x40014800

08007638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	021b      	lsls	r3, r3, #8
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a27      	ldr	r2, [pc, #156]	; (8007734 <TIM_OC3_SetConfig+0xfc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_OC3_SetConfig+0x6a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a26      	ldr	r2, [pc, #152]	; (8007738 <TIM_OC3_SetConfig+0x100>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d10d      	bne.n	80076be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1c      	ldr	r2, [pc, #112]	; (8007734 <TIM_OC3_SetConfig+0xfc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00f      	beq.n	80076e6 <TIM_OC3_SetConfig+0xae>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a1b      	ldr	r2, [pc, #108]	; (8007738 <TIM_OC3_SetConfig+0x100>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00b      	beq.n	80076e6 <TIM_OC3_SetConfig+0xae>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1a      	ldr	r2, [pc, #104]	; (800773c <TIM_OC3_SetConfig+0x104>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d007      	beq.n	80076e6 <TIM_OC3_SetConfig+0xae>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a19      	ldr	r2, [pc, #100]	; (8007740 <TIM_OC3_SetConfig+0x108>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC3_SetConfig+0xae>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a18      	ldr	r2, [pc, #96]	; (8007744 <TIM_OC3_SetConfig+0x10c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d113      	bne.n	800770e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	011b      	lsls	r3, r3, #4
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40013400 	.word	0x40013400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800

08007748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	031b      	lsls	r3, r3, #12
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a28      	ldr	r2, [pc, #160]	; (8007848 <TIM_OC4_SetConfig+0x100>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_OC4_SetConfig+0x6c>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a27      	ldr	r2, [pc, #156]	; (800784c <TIM_OC4_SetConfig+0x104>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10d      	bne.n	80077d0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	031b      	lsls	r3, r3, #12
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <TIM_OC4_SetConfig+0x100>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00f      	beq.n	80077f8 <TIM_OC4_SetConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1c      	ldr	r2, [pc, #112]	; (800784c <TIM_OC4_SetConfig+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00b      	beq.n	80077f8 <TIM_OC4_SetConfig+0xb0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a1b      	ldr	r2, [pc, #108]	; (8007850 <TIM_OC4_SetConfig+0x108>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d007      	beq.n	80077f8 <TIM_OC4_SetConfig+0xb0>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <TIM_OC4_SetConfig+0x10c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC4_SetConfig+0xb0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a19      	ldr	r2, [pc, #100]	; (8007858 <TIM_OC4_SetConfig+0x110>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d113      	bne.n	8007820 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007806:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	019b      	lsls	r3, r3, #6
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	019b      	lsls	r3, r3, #6
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40013400 	.word	0x40013400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800

0800785c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800785c:	b480      	push	{r7}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80078a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	041b      	lsls	r3, r3, #16
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <TIM_OC5_SetConfig+0xb4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a16      	ldr	r2, [pc, #88]	; (8007914 <TIM_OC5_SetConfig+0xb8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <TIM_OC5_SetConfig+0xbc>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a14      	ldr	r2, [pc, #80]	; (800791c <TIM_OC5_SetConfig+0xc0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_OC5_SetConfig+0x7a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a13      	ldr	r2, [pc, #76]	; (8007920 <TIM_OC5_SetConfig+0xc4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d109      	bne.n	80078ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800796a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	051b      	lsls	r3, r3, #20
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a18      	ldr	r2, [pc, #96]	; (80079dc <TIM_OC6_SetConfig+0xb8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00f      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <TIM_OC6_SetConfig+0xbc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00b      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <TIM_OC6_SetConfig+0xc0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d007      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <TIM_OC6_SetConfig+0xc4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC6_SetConfig+0x7c>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a14      	ldr	r2, [pc, #80]	; (80079ec <TIM_OC6_SetConfig+0xc8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d109      	bne.n	80079b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	029b      	lsls	r3, r3, #10
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40013400 	.word	0x40013400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800

080079f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 031f 	and.w	r3, r3, #31
 8007a02:	2201      	movs	r2, #1
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	401a      	ands	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	fa01 f303 	lsl.w	r3, r1, r3
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e065      	b.n	8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d108      	bne.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d018      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d013      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a18      	ldr	r2, [pc, #96]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00e      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d009      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a13      	ldr	r2, [pc, #76]	; (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10c      	bne.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	40012c00 	.word	0x40012c00
 8007b30:	40013400 	.word	0x40013400
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40014000 	.word	0x40014000

08007b40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	e087      	b.n	8007c6c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a27      	ldr	r2, [pc, #156]	; (8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d004      	beq.n	8007bea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d106      	bne.n	8007bf8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1d      	ldr	r2, [pc, #116]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d126      	bne.n	8007c5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	051b      	lsls	r3, r3, #20
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a0e      	ldr	r2, [pc, #56]	; (8007c78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a0d      	ldr	r2, [pc, #52]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d106      	bne.n	8007c5a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40013400 	.word	0x40013400

08007c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e042      	b.n	8007da4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fb fbfb 	bl	800352c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2224      	movs	r2, #36	; 0x24
 8007d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f892 	bl	8007e78 <UART_SetConfig>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e022      	b.n	8007da4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fb24 	bl	80083b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fbab 	bl	80084f8 <UART_CheckIdleState>
 8007da2:	4603      	mov	r3, r0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d131      	bne.n	8007e28 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Receive_DMA+0x24>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d101      	bne.n	8007dd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e02a      	b.n	8007e2a <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d101      	bne.n	8007de2 <HAL_UART_Receive_DMA+0x36>
 8007dde:	2302      	movs	r3, #2
 8007de0:	e023      	b.n	8007e2a <HAL_UART_Receive_DMA+0x7e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a0f      	ldr	r2, [pc, #60]	; (8007e34 <HAL_UART_Receive_DMA+0x88>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00e      	beq.n	8007e18 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007e16:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fc36 	bl	8008690 <UART_Start_Receive_DMA>
 8007e24:	4603      	mov	r3, r0
 8007e26:	e000      	b.n	8007e2a <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40008000 	.word	0x40008000

08007e38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e78:	b5b0      	push	{r4, r5, r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4baf      	ldr	r3, [pc, #700]	; (8008160 <UART_SetConfig+0x2e8>)
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	69f9      	ldr	r1, [r7, #28]
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4aa4      	ldr	r2, [pc, #656]	; (8008164 <UART_SetConfig+0x2ec>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d004      	beq.n	8007ee0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007eea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	69f9      	ldr	r1, [r7, #28]
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	f023 010f 	bic.w	r1, r3, #15
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a95      	ldr	r2, [pc, #596]	; (8008168 <UART_SetConfig+0x2f0>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d120      	bne.n	8007f5a <UART_SetConfig+0xe2>
 8007f18:	4b94      	ldr	r3, [pc, #592]	; (800816c <UART_SetConfig+0x2f4>)
 8007f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d816      	bhi.n	8007f54 <UART_SetConfig+0xdc>
 8007f26:	a201      	add	r2, pc, #4	; (adr r2, 8007f2c <UART_SetConfig+0xb4>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f3d 	.word	0x08007f3d
 8007f30:	08007f49 	.word	0x08007f49
 8007f34:	08007f43 	.word	0x08007f43
 8007f38:	08007f4f 	.word	0x08007f4f
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	76fb      	strb	r3, [r7, #27]
 8007f40:	e0bc      	b.n	80080bc <UART_SetConfig+0x244>
 8007f42:	2302      	movs	r3, #2
 8007f44:	76fb      	strb	r3, [r7, #27]
 8007f46:	e0b9      	b.n	80080bc <UART_SetConfig+0x244>
 8007f48:	2304      	movs	r3, #4
 8007f4a:	76fb      	strb	r3, [r7, #27]
 8007f4c:	e0b6      	b.n	80080bc <UART_SetConfig+0x244>
 8007f4e:	2308      	movs	r3, #8
 8007f50:	76fb      	strb	r3, [r7, #27]
 8007f52:	e0b3      	b.n	80080bc <UART_SetConfig+0x244>
 8007f54:	2310      	movs	r3, #16
 8007f56:	76fb      	strb	r3, [r7, #27]
 8007f58:	e0b0      	b.n	80080bc <UART_SetConfig+0x244>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a84      	ldr	r2, [pc, #528]	; (8008170 <UART_SetConfig+0x2f8>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d132      	bne.n	8007fca <UART_SetConfig+0x152>
 8007f64:	4b81      	ldr	r3, [pc, #516]	; (800816c <UART_SetConfig+0x2f4>)
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	2b0c      	cmp	r3, #12
 8007f70:	d828      	bhi.n	8007fc4 <UART_SetConfig+0x14c>
 8007f72:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x100>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fc5 	.word	0x08007fc5
 8007f80:	08007fc5 	.word	0x08007fc5
 8007f84:	08007fc5 	.word	0x08007fc5
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	08007fc5 	.word	0x08007fc5
 8007f90:	08007fc5 	.word	0x08007fc5
 8007f94:	08007fc5 	.word	0x08007fc5
 8007f98:	08007fb3 	.word	0x08007fb3
 8007f9c:	08007fc5 	.word	0x08007fc5
 8007fa0:	08007fc5 	.word	0x08007fc5
 8007fa4:	08007fc5 	.word	0x08007fc5
 8007fa8:	08007fbf 	.word	0x08007fbf
 8007fac:	2300      	movs	r3, #0
 8007fae:	76fb      	strb	r3, [r7, #27]
 8007fb0:	e084      	b.n	80080bc <UART_SetConfig+0x244>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	76fb      	strb	r3, [r7, #27]
 8007fb6:	e081      	b.n	80080bc <UART_SetConfig+0x244>
 8007fb8:	2304      	movs	r3, #4
 8007fba:	76fb      	strb	r3, [r7, #27]
 8007fbc:	e07e      	b.n	80080bc <UART_SetConfig+0x244>
 8007fbe:	2308      	movs	r3, #8
 8007fc0:	76fb      	strb	r3, [r7, #27]
 8007fc2:	e07b      	b.n	80080bc <UART_SetConfig+0x244>
 8007fc4:	2310      	movs	r3, #16
 8007fc6:	76fb      	strb	r3, [r7, #27]
 8007fc8:	e078      	b.n	80080bc <UART_SetConfig+0x244>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a69      	ldr	r2, [pc, #420]	; (8008174 <UART_SetConfig+0x2fc>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d120      	bne.n	8008016 <UART_SetConfig+0x19e>
 8007fd4:	4b65      	ldr	r3, [pc, #404]	; (800816c <UART_SetConfig+0x2f4>)
 8007fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fde:	2b30      	cmp	r3, #48	; 0x30
 8007fe0:	d013      	beq.n	800800a <UART_SetConfig+0x192>
 8007fe2:	2b30      	cmp	r3, #48	; 0x30
 8007fe4:	d814      	bhi.n	8008010 <UART_SetConfig+0x198>
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d009      	beq.n	8007ffe <UART_SetConfig+0x186>
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d810      	bhi.n	8008010 <UART_SetConfig+0x198>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <UART_SetConfig+0x180>
 8007ff2:	2b10      	cmp	r3, #16
 8007ff4:	d006      	beq.n	8008004 <UART_SetConfig+0x18c>
 8007ff6:	e00b      	b.n	8008010 <UART_SetConfig+0x198>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	76fb      	strb	r3, [r7, #27]
 8007ffc:	e05e      	b.n	80080bc <UART_SetConfig+0x244>
 8007ffe:	2302      	movs	r3, #2
 8008000:	76fb      	strb	r3, [r7, #27]
 8008002:	e05b      	b.n	80080bc <UART_SetConfig+0x244>
 8008004:	2304      	movs	r3, #4
 8008006:	76fb      	strb	r3, [r7, #27]
 8008008:	e058      	b.n	80080bc <UART_SetConfig+0x244>
 800800a:	2308      	movs	r3, #8
 800800c:	76fb      	strb	r3, [r7, #27]
 800800e:	e055      	b.n	80080bc <UART_SetConfig+0x244>
 8008010:	2310      	movs	r3, #16
 8008012:	76fb      	strb	r3, [r7, #27]
 8008014:	e052      	b.n	80080bc <UART_SetConfig+0x244>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a57      	ldr	r2, [pc, #348]	; (8008178 <UART_SetConfig+0x300>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d120      	bne.n	8008062 <UART_SetConfig+0x1ea>
 8008020:	4b52      	ldr	r3, [pc, #328]	; (800816c <UART_SetConfig+0x2f4>)
 8008022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008026:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800802a:	2bc0      	cmp	r3, #192	; 0xc0
 800802c:	d013      	beq.n	8008056 <UART_SetConfig+0x1de>
 800802e:	2bc0      	cmp	r3, #192	; 0xc0
 8008030:	d814      	bhi.n	800805c <UART_SetConfig+0x1e4>
 8008032:	2b80      	cmp	r3, #128	; 0x80
 8008034:	d009      	beq.n	800804a <UART_SetConfig+0x1d2>
 8008036:	2b80      	cmp	r3, #128	; 0x80
 8008038:	d810      	bhi.n	800805c <UART_SetConfig+0x1e4>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <UART_SetConfig+0x1cc>
 800803e:	2b40      	cmp	r3, #64	; 0x40
 8008040:	d006      	beq.n	8008050 <UART_SetConfig+0x1d8>
 8008042:	e00b      	b.n	800805c <UART_SetConfig+0x1e4>
 8008044:	2300      	movs	r3, #0
 8008046:	76fb      	strb	r3, [r7, #27]
 8008048:	e038      	b.n	80080bc <UART_SetConfig+0x244>
 800804a:	2302      	movs	r3, #2
 800804c:	76fb      	strb	r3, [r7, #27]
 800804e:	e035      	b.n	80080bc <UART_SetConfig+0x244>
 8008050:	2304      	movs	r3, #4
 8008052:	76fb      	strb	r3, [r7, #27]
 8008054:	e032      	b.n	80080bc <UART_SetConfig+0x244>
 8008056:	2308      	movs	r3, #8
 8008058:	76fb      	strb	r3, [r7, #27]
 800805a:	e02f      	b.n	80080bc <UART_SetConfig+0x244>
 800805c:	2310      	movs	r3, #16
 800805e:	76fb      	strb	r3, [r7, #27]
 8008060:	e02c      	b.n	80080bc <UART_SetConfig+0x244>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a3f      	ldr	r2, [pc, #252]	; (8008164 <UART_SetConfig+0x2ec>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d125      	bne.n	80080b8 <UART_SetConfig+0x240>
 800806c:	4b3f      	ldr	r3, [pc, #252]	; (800816c <UART_SetConfig+0x2f4>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800807a:	d017      	beq.n	80080ac <UART_SetConfig+0x234>
 800807c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008080:	d817      	bhi.n	80080b2 <UART_SetConfig+0x23a>
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d00b      	beq.n	80080a0 <UART_SetConfig+0x228>
 8008088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800808c:	d811      	bhi.n	80080b2 <UART_SetConfig+0x23a>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <UART_SetConfig+0x222>
 8008092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008096:	d006      	beq.n	80080a6 <UART_SetConfig+0x22e>
 8008098:	e00b      	b.n	80080b2 <UART_SetConfig+0x23a>
 800809a:	2300      	movs	r3, #0
 800809c:	76fb      	strb	r3, [r7, #27]
 800809e:	e00d      	b.n	80080bc <UART_SetConfig+0x244>
 80080a0:	2302      	movs	r3, #2
 80080a2:	76fb      	strb	r3, [r7, #27]
 80080a4:	e00a      	b.n	80080bc <UART_SetConfig+0x244>
 80080a6:	2304      	movs	r3, #4
 80080a8:	76fb      	strb	r3, [r7, #27]
 80080aa:	e007      	b.n	80080bc <UART_SetConfig+0x244>
 80080ac:	2308      	movs	r3, #8
 80080ae:	76fb      	strb	r3, [r7, #27]
 80080b0:	e004      	b.n	80080bc <UART_SetConfig+0x244>
 80080b2:	2310      	movs	r3, #16
 80080b4:	76fb      	strb	r3, [r7, #27]
 80080b6:	e001      	b.n	80080bc <UART_SetConfig+0x244>
 80080b8:	2310      	movs	r3, #16
 80080ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a28      	ldr	r2, [pc, #160]	; (8008164 <UART_SetConfig+0x2ec>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	f040 809e 	bne.w	8008204 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080c8:	7efb      	ldrb	r3, [r7, #27]
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d823      	bhi.n	8008116 <UART_SetConfig+0x29e>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <UART_SetConfig+0x25c>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008117 	.word	0x08008117
 80080dc:	08008101 	.word	0x08008101
 80080e0:	08008117 	.word	0x08008117
 80080e4:	08008107 	.word	0x08008107
 80080e8:	08008117 	.word	0x08008117
 80080ec:	08008117 	.word	0x08008117
 80080f0:	08008117 	.word	0x08008117
 80080f4:	0800810f 	.word	0x0800810f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080f8:	f7fd fa70 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 80080fc:	6178      	str	r0, [r7, #20]
        break;
 80080fe:	e00f      	b.n	8008120 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008100:	4b1e      	ldr	r3, [pc, #120]	; (800817c <UART_SetConfig+0x304>)
 8008102:	617b      	str	r3, [r7, #20]
        break;
 8008104:	e00c      	b.n	8008120 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008106:	f7fd f9fb 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800810a:	6178      	str	r0, [r7, #20]
        break;
 800810c:	e008      	b.n	8008120 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800810e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008112:	617b      	str	r3, [r7, #20]
        break;
 8008114:	e004      	b.n	8008120 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	76bb      	strb	r3, [r7, #26]
        break;
 800811e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 812e 	beq.w	8008384 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	4a14      	ldr	r2, [pc, #80]	; (8008180 <UART_SetConfig+0x308>)
 800812e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008132:	461a      	mov	r2, r3
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	fbb3 f3f2 	udiv	r3, r3, r2
 800813a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	4613      	mov	r3, r2
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	4413      	add	r3, r2
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d305      	bcc.n	8008158 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	d915      	bls.n	8008184 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	76bb      	strb	r3, [r7, #26]
 800815c:	e112      	b.n	8008384 <UART_SetConfig+0x50c>
 800815e:	bf00      	nop
 8008160:	cfff69f3 	.word	0xcfff69f3
 8008164:	40008000 	.word	0x40008000
 8008168:	40013800 	.word	0x40013800
 800816c:	40021000 	.word	0x40021000
 8008170:	40004400 	.word	0x40004400
 8008174:	40004800 	.word	0x40004800
 8008178:	40004c00 	.word	0x40004c00
 800817c:	00f42400 	.word	0x00f42400
 8008180:	0800df08 	.word	0x0800df08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	4618      	mov	r0, r3
 8008188:	f04f 0100 	mov.w	r1, #0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	4a86      	ldr	r2, [pc, #536]	; (80083ac <UART_SetConfig+0x534>)
 8008192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008196:	b29a      	uxth	r2, r3
 8008198:	f04f 0300 	mov.w	r3, #0
 800819c:	f7f8 fd24 	bl	8000be8 <__aeabi_uldivmod>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	020b      	lsls	r3, r1, #8
 80081b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081b6:	0202      	lsls	r2, r0, #8
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	6849      	ldr	r1, [r1, #4]
 80081bc:	0849      	lsrs	r1, r1, #1
 80081be:	4608      	mov	r0, r1
 80081c0:	f04f 0100 	mov.w	r1, #0
 80081c4:	1814      	adds	r4, r2, r0
 80081c6:	eb43 0501 	adc.w	r5, r3, r1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	4620      	mov	r0, r4
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 fd06 	bl	8000be8 <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4613      	mov	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081ea:	d308      	bcc.n	80081fe <UART_SetConfig+0x386>
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f2:	d204      	bcs.n	80081fe <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	e0c2      	b.n	8008384 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	76bb      	strb	r3, [r7, #26]
 8008202:	e0bf      	b.n	8008384 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820c:	d165      	bne.n	80082da <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800820e:	7efb      	ldrb	r3, [r7, #27]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d828      	bhi.n	8008266 <UART_SetConfig+0x3ee>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0x3a4>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	08008267 	.word	0x08008267
 800822c:	08008257 	.word	0x08008257
 8008230:	08008267 	.word	0x08008267
 8008234:	08008267 	.word	0x08008267
 8008238:	08008267 	.word	0x08008267
 800823c:	0800825f 	.word	0x0800825f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fd f9cc 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8008244:	6178      	str	r0, [r7, #20]
        break;
 8008246:	e013      	b.n	8008270 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008248:	f7fd f9de 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 800824c:	6178      	str	r0, [r7, #20]
        break;
 800824e:	e00f      	b.n	8008270 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008250:	4b57      	ldr	r3, [pc, #348]	; (80083b0 <UART_SetConfig+0x538>)
 8008252:	617b      	str	r3, [r7, #20]
        break;
 8008254:	e00c      	b.n	8008270 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008256:	f7fd f953 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 800825a:	6178      	str	r0, [r7, #20]
        break;
 800825c:	e008      	b.n	8008270 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008262:	617b      	str	r3, [r7, #20]
        break;
 8008264:	e004      	b.n	8008270 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	76bb      	strb	r3, [r7, #26]
        break;
 800826e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8086 	beq.w	8008384 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	4a4b      	ldr	r2, [pc, #300]	; (80083ac <UART_SetConfig+0x534>)
 800827e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008282:	461a      	mov	r2, r3
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	fbb3 f3f2 	udiv	r3, r3, r2
 800828a:	005a      	lsls	r2, r3, #1
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	085b      	lsrs	r3, r3, #1
 8008292:	441a      	add	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	fbb2 f3f3 	udiv	r3, r2, r3
 800829c:	b29b      	uxth	r3, r3
 800829e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b0f      	cmp	r3, #15
 80082a4:	d916      	bls.n	80082d4 <UART_SetConfig+0x45c>
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ac:	d212      	bcs.n	80082d4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f023 030f 	bic.w	r3, r3, #15
 80082b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	085b      	lsrs	r3, r3, #1
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	89fb      	ldrh	r3, [r7, #14]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	89fa      	ldrh	r2, [r7, #14]
 80082d0:	60da      	str	r2, [r3, #12]
 80082d2:	e057      	b.n	8008384 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	76bb      	strb	r3, [r7, #26]
 80082d8:	e054      	b.n	8008384 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082da:	7efb      	ldrb	r3, [r7, #27]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d828      	bhi.n	8008332 <UART_SetConfig+0x4ba>
 80082e0:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0x470>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800830d 	.word	0x0800830d
 80082ec:	08008315 	.word	0x08008315
 80082f0:	0800831d 	.word	0x0800831d
 80082f4:	08008333 	.word	0x08008333
 80082f8:	08008323 	.word	0x08008323
 80082fc:	08008333 	.word	0x08008333
 8008300:	08008333 	.word	0x08008333
 8008304:	08008333 	.word	0x08008333
 8008308:	0800832b 	.word	0x0800832b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800830c:	f7fd f966 	bl	80055dc <HAL_RCC_GetPCLK1Freq>
 8008310:	6178      	str	r0, [r7, #20]
        break;
 8008312:	e013      	b.n	800833c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008314:	f7fd f978 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 8008318:	6178      	str	r0, [r7, #20]
        break;
 800831a:	e00f      	b.n	800833c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800831c:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <UART_SetConfig+0x538>)
 800831e:	617b      	str	r3, [r7, #20]
        break;
 8008320:	e00c      	b.n	800833c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008322:	f7fd f8ed 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 8008326:	6178      	str	r0, [r7, #20]
        break;
 8008328:	e008      	b.n	800833c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800832a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832e:	617b      	str	r3, [r7, #20]
        break;
 8008330:	e004      	b.n	800833c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	76bb      	strb	r3, [r7, #26]
        break;
 800833a:	bf00      	nop
    }

    if (pclk != 0U)
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d020      	beq.n	8008384 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	4a19      	ldr	r2, [pc, #100]	; (80083ac <UART_SetConfig+0x534>)
 8008348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800834c:	461a      	mov	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	fbb3 f2f2 	udiv	r2, r3, r2
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	441a      	add	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	fbb2 f3f3 	udiv	r3, r2, r3
 8008364:	b29b      	uxth	r3, r3
 8008366:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d908      	bls.n	8008380 <UART_SetConfig+0x508>
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008374:	d204      	bcs.n	8008380 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	60da      	str	r2, [r3, #12]
 800837e:	e001      	b.n	8008384 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80083a0:	7ebb      	ldrb	r3, [r7, #26]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bdb0      	pop	{r4, r5, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	0800df08 	.word	0x0800df08
 80083b0:	00f42400 	.word	0x00f42400

080083b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	430a      	orrs	r2, r1
 80083fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	430a      	orrs	r2, r1
 8008420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800848c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01a      	beq.n	80084ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b2:	d10a      	bne.n	80084ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008508:	f7fb f9ce 	bl	80038a8 <HAL_GetTick>
 800850c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b08      	cmp	r3, #8
 800851a:	d10e      	bne.n	800853a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800851c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f82f 	bl	800858e <UART_WaitOnFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e025      	b.n	8008586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b04      	cmp	r3, #4
 8008546:	d10e      	bne.n	8008566 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008548:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f819 	bl	800858e <UART_WaitOnFlagUntilTimeout>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e00f      	b.n	8008586 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	603b      	str	r3, [r7, #0]
 800859a:	4613      	mov	r3, r2
 800859c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859e:	e062      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a6:	d05e      	beq.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a8:	f7fb f97e 	bl	80038a8 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d302      	bcc.n	80085be <UART_WaitOnFlagUntilTimeout+0x30>
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d11d      	bne.n	80085fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689a      	ldr	r2, [r3, #8]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e045      	b.n	8008686 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0304 	and.w	r3, r3, #4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d02e      	beq.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008616:	d126      	bne.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008620:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008630:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689a      	ldr	r2, [r3, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f022 0201 	bic.w	r2, r2, #1
 8008640:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2220      	movs	r2, #32
 8008656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e00f      	b.n	8008686 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69da      	ldr	r2, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4013      	ands	r3, r2
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	bf0c      	ite	eq
 8008676:	2301      	moveq	r3, #1
 8008678:	2300      	movne	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	79fb      	ldrb	r3, [r7, #7]
 8008680:	429a      	cmp	r2, r3
 8008682:	d08d      	beq.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	4613      	mov	r3, r2
 800869c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	88fa      	ldrh	r2, [r7, #6]
 80086a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2222      	movs	r2, #34	; 0x22
 80086b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02c      	beq.n	800871e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c8:	4a25      	ldr	r2, [pc, #148]	; (8008760 <UART_Start_Receive_DMA+0xd0>)
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d0:	4a24      	ldr	r2, [pc, #144]	; (8008764 <UART_Start_Receive_DMA+0xd4>)
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d8:	4a23      	ldr	r2, [pc, #140]	; (8008768 <UART_Start_Receive_DMA+0xd8>)
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086e0:	2200      	movs	r2, #0
 80086e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	4619      	mov	r1, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	461a      	mov	r2, r3
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	f7fb fa8c 	bl	8003c14 <HAL_DMA_Start_IT>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00d      	beq.n	800871e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2210      	movs	r2, #16
 8008706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e01c      	b.n	8008758 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008734:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008754:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	0800880d 	.word	0x0800880d
 8008764:	080088a7 	.word	0x080088a7
 8008768:	080088df 	.word	0x080088df

0800876c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008782:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689a      	ldr	r2, [r3, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008792:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2220      	movs	r2, #32
 8008798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800879c:	bf00      	nop
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d107      	bne.n	80087ec <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0210 	bic.w	r2, r2, #16
 80087ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b00      	cmp	r3, #0
 8008826:	d12b      	bne.n	8008880 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800883e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0201 	bic.w	r2, r2, #1
 800884e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d107      	bne.n	8008880 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0210 	bic.w	r2, r2, #16
 800887e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008884:	2b01      	cmp	r3, #1
 8008886:	d107      	bne.n	8008898 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800888e:	4619      	mov	r1, r3
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f7ff fae5 	bl	8007e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008896:	e002      	b.n	800889e <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7fa f9c7 	bl	8002c2c <HAL_UART_RxCpltCallback>
}
 800889e:	bf00      	nop
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d109      	bne.n	80088d0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fac9 	bl	8007e60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088ce:	e002      	b.n	80088d6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fab1 	bl	8007e38 <HAL_UART_RxHalfCpltCallback>
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b086      	sub	sp, #24
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008906:	2b80      	cmp	r3, #128	; 0x80
 8008908:	d109      	bne.n	800891e <UART_DMAError+0x40>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b21      	cmp	r3, #33	; 0x21
 800890e:	d106      	bne.n	800891e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2200      	movs	r2, #0
 8008914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f7ff ff27 	bl	800876c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d109      	bne.n	8008940 <UART_DMAError+0x62>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b22      	cmp	r3, #34	; 0x22
 8008930:	d106      	bne.n	8008940 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2200      	movs	r2, #0
 8008936:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800893a:	6978      	ldr	r0, [r7, #20]
 800893c:	f7ff ff34 	bl	80087a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008946:	f043 0210 	orr.w	r2, r3, #16
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	f7ff fa7b 	bl	8007e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008956:	bf00      	nop
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_UARTEx_DisableFifoMode+0x16>
 8008970:	2302      	movs	r3, #2
 8008972:	e027      	b.n	80089c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2224      	movs	r2, #36	; 0x24
 8008980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0201 	bic.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e02d      	b.n	8008a44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	; 0x24
 80089f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f84f 	bl	8008ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d101      	bne.n	8008a64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a60:	2302      	movs	r3, #2
 8008a62:	e02d      	b.n	8008ac0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2224      	movs	r2, #36	; 0x24
 8008a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f022 0201 	bic.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f811 	bl	8008ac8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d108      	bne.n	8008aea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ae8:	e031      	b.n	8008b4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008aea:	2308      	movs	r3, #8
 8008aec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008aee:	2308      	movs	r3, #8
 8008af0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	0e5b      	lsrs	r3, r3, #25
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	f003 0307 	and.w	r3, r3, #7
 8008b00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	0f5b      	lsrs	r3, r3, #29
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	7b3a      	ldrb	r2, [r7, #12]
 8008b16:	4911      	ldr	r1, [pc, #68]	; (8008b5c <UARTEx_SetNbDataToProcess+0x94>)
 8008b18:	5c8a      	ldrb	r2, [r1, r2]
 8008b1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b1e:	7b3a      	ldrb	r2, [r7, #12]
 8008b20:	490f      	ldr	r1, [pc, #60]	; (8008b60 <UARTEx_SetNbDataToProcess+0x98>)
 8008b22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b24:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	7b7a      	ldrb	r2, [r7, #13]
 8008b34:	4909      	ldr	r1, [pc, #36]	; (8008b5c <UARTEx_SetNbDataToProcess+0x94>)
 8008b36:	5c8a      	ldrb	r2, [r1, r2]
 8008b38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b3c:	7b7a      	ldrb	r2, [r7, #13]
 8008b3e:	4908      	ldr	r1, [pc, #32]	; (8008b60 <UARTEx_SetNbDataToProcess+0x98>)
 8008b40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b42:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	0800df20 	.word	0x0800df20
 8008b60:	0800df28 	.word	0x0800df28

08008b64 <__NVIC_SetPriority>:
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	db0a      	blt.n	8008b8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	490c      	ldr	r1, [pc, #48]	; (8008bb0 <__NVIC_SetPriority+0x4c>)
 8008b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b82:	0112      	lsls	r2, r2, #4
 8008b84:	b2d2      	uxtb	r2, r2
 8008b86:	440b      	add	r3, r1
 8008b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b8c:	e00a      	b.n	8008ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	4908      	ldr	r1, [pc, #32]	; (8008bb4 <__NVIC_SetPriority+0x50>)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	3b04      	subs	r3, #4
 8008b9c:	0112      	lsls	r2, r2, #4
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	440b      	add	r3, r1
 8008ba2:	761a      	strb	r2, [r3, #24]
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	e000e100 	.word	0xe000e100
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <SysTick_Handler+0x1c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008bc0:	f001 fdaa 	bl	800a718 <xTaskGetSchedulerState>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d001      	beq.n	8008bce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008bca:	f002 fb95 	bl	800b2f8 <xPortSysTickHandler>
  }
}
 8008bce:	bf00      	nop
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	e000e010 	.word	0xe000e010

08008bd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	f06f 0004 	mvn.w	r0, #4
 8008be2:	f7ff ffbf 	bl	8008b64 <__NVIC_SetPriority>
#endif
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bf2:	f3ef 8305 	mrs	r3, IPSR
 8008bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008bfe:	f06f 0305 	mvn.w	r3, #5
 8008c02:	607b      	str	r3, [r7, #4]
 8008c04:	e00c      	b.n	8008c20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c06:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <osKernelInitialize+0x44>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d105      	bne.n	8008c1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <osKernelInitialize+0x44>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	e002      	b.n	8008c20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c20:	687b      	ldr	r3, [r7, #4]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000110 	.word	0x20000110

08008c34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c3a:	f3ef 8305 	mrs	r3, IPSR
 8008c3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008c40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c46:	f06f 0305 	mvn.w	r3, #5
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	e010      	b.n	8008c70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c4e:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <osKernelStart+0x48>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d109      	bne.n	8008c6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c56:	f7ff ffbf 	bl	8008bd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c5a:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <osKernelStart+0x48>)
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c60:	f001 f912 	bl	8009e88 <vTaskStartScheduler>
      stat = osOK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e002      	b.n	8008c70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c70:	687b      	ldr	r3, [r7, #4]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000110 	.word	0x20000110

08008c80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08e      	sub	sp, #56	; 0x38
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c90:	f3ef 8305 	mrs	r3, IPSR
 8008c94:	617b      	str	r3, [r7, #20]
  return(result);
 8008c96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d17e      	bne.n	8008d9a <osThreadNew+0x11a>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d07b      	beq.n	8008d9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ca6:	2318      	movs	r3, #24
 8008ca8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cae:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d045      	beq.n	8008d46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <osThreadNew+0x48>
        name = attr->name;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <osThreadNew+0x6e>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b38      	cmp	r3, #56	; 0x38
 8008ce0:	d805      	bhi.n	8008cee <osThreadNew+0x6e>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <osThreadNew+0x72>
        return (NULL);
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e054      	b.n	8008d9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00e      	beq.n	8008d28 <osThreadNew+0xa8>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	2b5b      	cmp	r3, #91	; 0x5b
 8008d10:	d90a      	bls.n	8008d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <osThreadNew+0xa8>
        mem = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	e010      	b.n	8008d4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10c      	bne.n	8008d4a <osThreadNew+0xca>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d108      	bne.n	8008d4a <osThreadNew+0xca>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <osThreadNew+0xca>
          mem = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e001      	b.n	8008d4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d110      	bne.n	8008d72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d58:	9202      	str	r2, [sp, #8]
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 feb8 	bl	8009adc <xTaskCreateStatic>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	613b      	str	r3, [r7, #16]
 8008d70:	e013      	b.n	8008d9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d110      	bne.n	8008d9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 ff03 	bl	8009b96 <xTaskCreate>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d001      	beq.n	8008d9a <osThreadNew+0x11a>
            hTask = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d9a:	693b      	ldr	r3, [r7, #16]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dac:	f3ef 8305 	mrs	r3, IPSR
 8008db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008db2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <osDelay+0x1c>
    stat = osErrorISR;
 8008db8:	f06f 0305 	mvn.w	r3, #5
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e007      	b.n	8008dd0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 f828 	bl	8009e20 <vTaskDelay>
    }
  }

  return (stat);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b08a      	sub	sp, #40	; 0x28
 8008dde:	af02      	add	r7, sp, #8
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dea:	f3ef 8305 	mrs	r3, IPSR
 8008dee:	613b      	str	r3, [r7, #16]
  return(result);
 8008df0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d15f      	bne.n	8008eb6 <osMessageQueueNew+0xdc>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d05c      	beq.n	8008eb6 <osMessageQueueNew+0xdc>
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d059      	beq.n	8008eb6 <osMessageQueueNew+0xdc>
    mem = -1;
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295
 8008e06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d029      	beq.n	8008e62 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d012      	beq.n	8008e3c <osMessageQueueNew+0x62>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	2b4f      	cmp	r3, #79	; 0x4f
 8008e1c:	d90e      	bls.n	8008e3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	695a      	ldr	r2, [r3, #20]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <osMessageQueueNew+0x62>
        mem = 1;
 8008e36:	2301      	movs	r3, #1
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	e014      	b.n	8008e66 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d110      	bne.n	8008e66 <osMessageQueueNew+0x8c>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10c      	bne.n	8008e66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d104      	bne.n	8008e66 <osMessageQueueNew+0x8c>
          mem = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	e001      	b.n	8008e66 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d10b      	bne.n	8008e84 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	2100      	movs	r1, #0
 8008e76:	9100      	str	r1, [sp, #0]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f970 	bl	8009160 <xQueueGenericCreateStatic>
 8008e80:	61f8      	str	r0, [r7, #28]
 8008e82:	e008      	b.n	8008e96 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f9de 	bl	8009250 <xQueueGenericCreate>
 8008e94:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <osMessageQueueNew+0xd0>
        name = attr->name;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	e001      	b.n	8008eae <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008eae:	6979      	ldr	r1, [r7, #20]
 8008eb0:	69f8      	ldr	r0, [r7, #28]
 8008eb2:	f000 fdb5 	bl	8009a20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008eb6:	69fb      	ldr	r3, [r7, #28]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <vApplicationGetIdleTaskMemory+0x2c>)
 8008ed0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	4a06      	ldr	r2, [pc, #24]	; (8008ef0 <vApplicationGetIdleTaskMemory+0x30>)
 8008ed6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2280      	movs	r2, #128	; 0x80
 8008edc:	601a      	str	r2, [r3, #0]
}
 8008ede:	bf00      	nop
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20000114 	.word	0x20000114
 8008ef0:	20000170 	.word	0x20000170

08008ef4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4a07      	ldr	r2, [pc, #28]	; (8008f20 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a06      	ldr	r2, [pc, #24]	; (8008f24 <vApplicationGetTimerTaskMemory+0x30>)
 8008f0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f12:	601a      	str	r2, [r3, #0]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr
 8008f20:	20000370 	.word	0x20000370
 8008f24:	200003cc 	.word	0x200003cc

08008f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f103 0208 	add.w	r2, r3, #8
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f103 0208 	add.w	r2, r3, #8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f103 0208 	add.w	r2, r3, #8
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f5c:	bf00      	nop
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f76:	bf00      	nop
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
}
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe0:	d103      	bne.n	8008fea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e00c      	b.n	8009004 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3308      	adds	r3, #8
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e002      	b.n	8008ff8 <vListInsert+0x2e>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	429a      	cmp	r2, r3
 8009002:	d2f6      	bcs.n	8008ff2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	683a      	ldr	r2, [r7, #0]
 8009012:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	683a      	ldr	r2, [r7, #0]
 800901e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]
}
 8009030:	bf00      	nop
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6892      	ldr	r2, [r2, #8]
 8009052:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	6852      	ldr	r2, [r2, #4]
 800905c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d103      	bne.n	8009070 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	1e5a      	subs	r2, r3, #1
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10a      	bne.n	80090ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090b6:	bf00      	nop
 80090b8:	e7fe      	b.n	80090b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090ba:	f002 f88b 	bl	800b1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090ca:	fb01 f303 	mul.w	r3, r1, r3
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ea:	3b01      	subs	r3, #1
 80090ec:	68f9      	ldr	r1, [r7, #12]
 80090ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090f0:	fb01 f303 	mul.w	r3, r1, r3
 80090f4:	441a      	add	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	22ff      	movs	r2, #255	; 0xff
 80090fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	22ff      	movs	r2, #255	; 0xff
 8009106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d114      	bne.n	800913a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01a      	beq.n	800914e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3310      	adds	r3, #16
 800911c:	4618      	mov	r0, r3
 800911e:	f001 f93d 	bl	800a39c <xTaskRemoveFromEventList>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d012      	beq.n	800914e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009128:	4b0c      	ldr	r3, [pc, #48]	; (800915c <xQueueGenericReset+0xcc>)
 800912a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	e009      	b.n	800914e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3310      	adds	r3, #16
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fef2 	bl	8008f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	3324      	adds	r3, #36	; 0x24
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff feed 	bl	8008f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800914e:	f002 f871 	bl	800b234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009152:	2301      	movs	r3, #1
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08e      	sub	sp, #56	; 0x38
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <xQueueGenericCreateStatic+0x52>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xQueueGenericCreateStatic+0x56>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e000      	b.n	80091b8 <xQueueGenericCreateStatic+0x58>
 80091b6:	2300      	movs	r3, #0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	623b      	str	r3, [r7, #32]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <xQueueGenericCreateStatic+0x7e>
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <xQueueGenericCreateStatic+0x82>
 80091de:	2301      	movs	r3, #1
 80091e0:	e000      	b.n	80091e4 <xQueueGenericCreateStatic+0x84>
 80091e2:	2300      	movs	r3, #0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	61fb      	str	r3, [r7, #28]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091fe:	2350      	movs	r3, #80	; 0x50
 8009200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b50      	cmp	r3, #80	; 0x50
 8009206:	d00a      	beq.n	800921e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	61bb      	str	r3, [r7, #24]
}
 800921a:	bf00      	nop
 800921c:	e7fe      	b.n	800921c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800921e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00d      	beq.n	8009246 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4613      	mov	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f83f 	bl	80092c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009248:	4618      	mov	r0, r3
 800924a:	3730      	adds	r7, #48	; 0x30
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08a      	sub	sp, #40	; 0x28
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	613b      	str	r3, [r7, #16]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	3350      	adds	r3, #80	; 0x50
 8009288:	4618      	mov	r0, r3
 800928a:	f002 f8c5 	bl	800b418 <pvPortMalloc>
 800928e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d011      	beq.n	80092ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	3350      	adds	r3, #80	; 0x50
 800929e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092a8:	79fa      	ldrb	r2, [r7, #7]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	4613      	mov	r3, r2
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f805 	bl	80092c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092ba:	69bb      	ldr	r3, [r7, #24]
	}
 80092bc:	4618      	mov	r0, r3
 80092be:	3720      	adds	r7, #32
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d103      	bne.n	80092e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	601a      	str	r2, [r3, #0]
 80092de:	e002      	b.n	80092e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092f2:	2101      	movs	r1, #1
 80092f4:	69b8      	ldr	r0, [r7, #24]
 80092f6:	f7ff fecb 	bl	8009090 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
	...

0800930c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b08e      	sub	sp, #56	; 0x38
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800931a:	2300      	movs	r3, #0
 800931c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <xQueueGenericSend+0x32>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d103      	bne.n	800934c <xQueueGenericSend+0x40>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <xQueueGenericSend+0x44>
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <xQueueGenericSend+0x46>
 8009350:	2300      	movs	r3, #0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <xQueueGenericSend+0x60>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d103      	bne.n	800937a <xQueueGenericSend+0x6e>
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009376:	2b01      	cmp	r3, #1
 8009378:	d101      	bne.n	800937e <xQueueGenericSend+0x72>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <xQueueGenericSend+0x74>
 800937e:	2300      	movs	r3, #0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xQueueGenericSend+0x8e>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800939a:	f001 f9bd 	bl	800a718 <xTaskGetSchedulerState>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <xQueueGenericSend+0x9e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <xQueueGenericSend+0xa2>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <xQueueGenericSend+0xa4>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <xQueueGenericSend+0xbe>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	61fb      	str	r3, [r7, #28]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093ca:	f001 ff03 	bl	800b1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d302      	bcc.n	80093e0 <xQueueGenericSend+0xd4>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d129      	bne.n	8009434 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093e6:	f000 fa0b 	bl	8009800 <prvCopyDataToQueue>
 80093ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d010      	beq.n	8009416 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	3324      	adds	r3, #36	; 0x24
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 ffcf 	bl	800a39c <xTaskRemoveFromEventList>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d013      	beq.n	800942c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009404:	4b3f      	ldr	r3, [pc, #252]	; (8009504 <xQueueGenericSend+0x1f8>)
 8009406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	e00a      	b.n	800942c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d007      	beq.n	800942c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800941c:	4b39      	ldr	r3, [pc, #228]	; (8009504 <xQueueGenericSend+0x1f8>)
 800941e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800942c:	f001 ff02 	bl	800b234 <vPortExitCritical>
				return pdPASS;
 8009430:	2301      	movs	r3, #1
 8009432:	e063      	b.n	80094fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d103      	bne.n	8009442 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800943a:	f001 fefb 	bl	800b234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800943e:	2300      	movs	r3, #0
 8009440:	e05c      	b.n	80094fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	2b00      	cmp	r3, #0
 8009446:	d106      	bne.n	8009456 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	4618      	mov	r0, r3
 800944e:	f001 f809 	bl	800a464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009452:	2301      	movs	r3, #1
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009456:	f001 feed 	bl	800b234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800945a:	f000 fd7b 	bl	8009f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800945e:	f001 feb9 	bl	800b1d4 <vPortEnterCritical>
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009468:	b25b      	sxtb	r3, r3
 800946a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946e:	d103      	bne.n	8009478 <xQueueGenericSend+0x16c>
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800947e:	b25b      	sxtb	r3, r3
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d103      	bne.n	800948e <xQueueGenericSend+0x182>
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800948e:	f001 fed1 	bl	800b234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009492:	1d3a      	adds	r2, r7, #4
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fff8 	bl	800a490 <xTaskCheckForTimeOut>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d124      	bne.n	80094f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094a8:	f000 faa2 	bl	80099f0 <prvIsQueueFull>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d018      	beq.n	80094e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b4:	3310      	adds	r3, #16
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 ff1e 	bl	800a2fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80094c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094c2:	f000 fa2d 	bl	8009920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80094c6:	f000 fd53 	bl	8009f70 <xTaskResumeAll>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f47f af7c 	bne.w	80093ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80094d2:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <xQueueGenericSend+0x1f8>)
 80094d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	e772      	b.n	80093ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80094e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094e6:	f000 fa1b 	bl	8009920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ea:	f000 fd41 	bl	8009f70 <xTaskResumeAll>
 80094ee:	e76c      	b.n	80093ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80094f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f2:	f000 fa15 	bl	8009920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094f6:	f000 fd3b 	bl	8009f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80094fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3738      	adds	r7, #56	; 0x38
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	e000ed04 	.word	0xe000ed04

08009508 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b090      	sub	sp, #64	; 0x40
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
 8009514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d103      	bne.n	8009544 <xQueueGenericSendFromISR+0x3c>
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <xQueueGenericSendFromISR+0x40>
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <xQueueGenericSendFromISR+0x42>
 8009548:	2300      	movs	r3, #0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d103      	bne.n	8009572 <xQueueGenericSendFromISR+0x6a>
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <xQueueGenericSendFromISR+0x6e>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueGenericSendFromISR+0x70>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	623b      	str	r3, [r7, #32]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009592:	f001 ff01 	bl	800b398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009596:	f3ef 8211 	mrs	r2, BASEPRI
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	61fa      	str	r2, [r7, #28]
 80095ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d302      	bcc.n	80095c4 <xQueueGenericSendFromISR+0xbc>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d12f      	bne.n	8009624 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80095da:	f000 f911 	bl	8009800 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80095de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d112      	bne.n	800960e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d016      	beq.n	800961e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f2:	3324      	adds	r3, #36	; 0x24
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 fed1 	bl	800a39c <xTaskRemoveFromEventList>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00e      	beq.n	800961e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00b      	beq.n	800961e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	e007      	b.n	800961e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800960e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009612:	3301      	adds	r3, #1
 8009614:	b2db      	uxtb	r3, r3
 8009616:	b25a      	sxtb	r2, r3
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800961e:	2301      	movs	r3, #1
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009622:	e001      	b.n	8009628 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009632:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009636:	4618      	mov	r0, r3
 8009638:	3740      	adds	r7, #64	; 0x40
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b08c      	sub	sp, #48	; 0x30
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800964c:	2300      	movs	r3, #0
 800964e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10a      	bne.n	8009670 <xQueueReceive+0x30>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	623b      	str	r3, [r7, #32]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d103      	bne.n	800967e <xQueueReceive+0x3e>
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <xQueueReceive+0x42>
 800967e:	2301      	movs	r3, #1
 8009680:	e000      	b.n	8009684 <xQueueReceive+0x44>
 8009682:	2300      	movs	r3, #0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d10a      	bne.n	800969e <xQueueReceive+0x5e>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	61fb      	str	r3, [r7, #28]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800969e:	f001 f83b 	bl	800a718 <xTaskGetSchedulerState>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <xQueueReceive+0x6e>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <xQueueReceive+0x72>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <xQueueReceive+0x74>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <xQueueReceive+0x8e>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	61bb      	str	r3, [r7, #24]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ce:	f001 fd81 	bl	800b1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01f      	beq.n	800971e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e2:	f000 f8f7 	bl	80098d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80096e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e8:	1e5a      	subs	r2, r3, #1
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00f      	beq.n	8009716 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	3310      	adds	r3, #16
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fe4e 	bl	800a39c <xTaskRemoveFromEventList>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009706:	4b3d      	ldr	r3, [pc, #244]	; (80097fc <xQueueReceive+0x1bc>)
 8009708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009716:	f001 fd8d 	bl	800b234 <vPortExitCritical>
				return pdPASS;
 800971a:	2301      	movs	r3, #1
 800971c:	e069      	b.n	80097f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009724:	f001 fd86 	bl	800b234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009728:	2300      	movs	r3, #0
 800972a:	e062      	b.n	80097f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009732:	f107 0310 	add.w	r3, r7, #16
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fe94 	bl	800a464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800973c:	2301      	movs	r3, #1
 800973e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009740:	f001 fd78 	bl	800b234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009744:	f000 fc06 	bl	8009f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009748:	f001 fd44 	bl	800b1d4 <vPortEnterCritical>
 800974c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009752:	b25b      	sxtb	r3, r3
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d103      	bne.n	8009762 <xQueueReceive+0x122>
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009768:	b25b      	sxtb	r3, r3
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d103      	bne.n	8009778 <xQueueReceive+0x138>
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009778:	f001 fd5c 	bl	800b234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800977c:	1d3a      	adds	r2, r7, #4
 800977e:	f107 0310 	add.w	r3, r7, #16
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fe83 	bl	800a490 <xTaskCheckForTimeOut>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d123      	bne.n	80097d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009792:	f000 f917 	bl	80099c4 <prvIsQueueEmpty>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d017      	beq.n	80097cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	4611      	mov	r1, r2
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 fda9 	bl	800a2fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ac:	f000 f8b8 	bl	8009920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097b0:	f000 fbde 	bl	8009f70 <xTaskResumeAll>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d189      	bne.n	80096ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097ba:	4b10      	ldr	r3, [pc, #64]	; (80097fc <xQueueReceive+0x1bc>)
 80097bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	e780      	b.n	80096ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ce:	f000 f8a7 	bl	8009920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097d2:	f000 fbcd 	bl	8009f70 <xTaskResumeAll>
 80097d6:	e77a      	b.n	80096ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097da:	f000 f8a1 	bl	8009920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097de:	f000 fbc7 	bl	8009f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e4:	f000 f8ee 	bl	80099c4 <prvIsQueueEmpty>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f43f af6f 	beq.w	80096ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80097f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3730      	adds	r7, #48	; 0x30
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981a:	2b00      	cmp	r3, #0
 800981c:	d10d      	bne.n	800983a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d14d      	bne.n	80098c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	4618      	mov	r0, r3
 800982c:	f000 ff92 	bl	800a754 <xTaskPriorityDisinherit>
 8009830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	609a      	str	r2, [r3, #8]
 8009838:	e043      	b.n	80098c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d119      	bne.n	8009874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6858      	ldr	r0, [r3, #4]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009848:	461a      	mov	r2, r3
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	f001 fff8 	bl	800b840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	441a      	add	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	685a      	ldr	r2, [r3, #4]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	d32b      	bcc.n	80098c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	605a      	str	r2, [r3, #4]
 8009872:	e026      	b.n	80098c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68d8      	ldr	r0, [r3, #12]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	461a      	mov	r2, r3
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	f001 ffde 	bl	800b840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	425b      	negs	r3, r3
 800988e:	441a      	add	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d207      	bcs.n	80098b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	425b      	negs	r3, r3
 80098aa:	441a      	add	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d105      	bne.n	80098c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3b01      	subs	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80098ca:	697b      	ldr	r3, [r7, #20]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d018      	beq.n	8009918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	441a      	add	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d303      	bcc.n	8009908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68d9      	ldr	r1, [r3, #12]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009910:	461a      	mov	r2, r3
 8009912:	6838      	ldr	r0, [r7, #0]
 8009914:	f001 ff94 	bl	800b840 <memcpy>
	}
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009928:	f001 fc54 	bl	800b1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009934:	e011      	b.n	800995a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	2b00      	cmp	r3, #0
 800993c:	d012      	beq.n	8009964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3324      	adds	r3, #36	; 0x24
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fd2a 	bl	800a39c <xTaskRemoveFromEventList>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800994e:	f000 fe01 	bl	800a554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	3b01      	subs	r3, #1
 8009956:	b2db      	uxtb	r3, r3
 8009958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800995a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	dce9      	bgt.n	8009936 <prvUnlockQueue+0x16>
 8009962:	e000      	b.n	8009966 <prvUnlockQueue+0x46>
					break;
 8009964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	22ff      	movs	r2, #255	; 0xff
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800996e:	f001 fc61 	bl	800b234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009972:	f001 fc2f 	bl	800b1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800997c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800997e:	e011      	b.n	80099a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d012      	beq.n	80099ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3310      	adds	r3, #16
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fd05 	bl	800a39c <xTaskRemoveFromEventList>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009998:	f000 fddc 	bl	800a554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	3b01      	subs	r3, #1
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	dce9      	bgt.n	8009980 <prvUnlockQueue+0x60>
 80099ac:	e000      	b.n	80099b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	22ff      	movs	r2, #255	; 0xff
 80099b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099b8:	f001 fc3c 	bl	800b234 <vPortExitCritical>
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099cc:	f001 fc02 	bl	800b1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099d8:	2301      	movs	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e001      	b.n	80099e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099e2:	f001 fc27 	bl	800b234 <vPortExitCritical>

	return xReturn;
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099f8:	f001 fbec 	bl	800b1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d102      	bne.n	8009a0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e001      	b.n	8009a12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a12:	f001 fc0f 	bl	800b234 <vPortExitCritical>

	return xReturn;
 8009a16:	68fb      	ldr	r3, [r7, #12]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]
 8009a2e:	e014      	b.n	8009a5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a30:	4a0f      	ldr	r2, [pc, #60]	; (8009a70 <vQueueAddToRegistry+0x50>)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10b      	bne.n	8009a54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a3c:	490c      	ldr	r1, [pc, #48]	; (8009a70 <vQueueAddToRegistry+0x50>)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a46:	4a0a      	ldr	r2, [pc, #40]	; (8009a70 <vQueueAddToRegistry+0x50>)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a52:	e006      	b.n	8009a62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b07      	cmp	r3, #7
 8009a5e:	d9e7      	bls.n	8009a30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20004388 	.word	0x20004388

08009a74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a84:	f001 fba6 	bl	800b1d4 <vPortEnterCritical>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a94:	d103      	bne.n	8009a9e <vQueueWaitForMessageRestricted+0x2a>
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aaa:	d103      	bne.n	8009ab4 <vQueueWaitForMessageRestricted+0x40>
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ab4:	f001 fbbe 	bl	800b234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d106      	bne.n	8009ace <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	68b9      	ldr	r1, [r7, #8]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fc3b 	bl	800a344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7ff ff26 	bl	8009920 <prvUnlockQueue>
	}
 8009ad4:	bf00      	nop
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08e      	sub	sp, #56	; 0x38
 8009ae0:	af04      	add	r7, sp, #16
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10a      	bne.n	8009b06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	623b      	str	r3, [r7, #32]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <xTaskCreateStatic+0x46>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	61fb      	str	r3, [r7, #28]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b22:	235c      	movs	r3, #92	; 0x5c
 8009b24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b5c      	cmp	r3, #92	; 0x5c
 8009b2a:	d00a      	beq.n	8009b42 <xTaskCreateStatic+0x66>
	__asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	61bb      	str	r3, [r7, #24]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01e      	beq.n	8009b88 <xTaskCreateStatic+0xac>
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01b      	beq.n	8009b88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b62:	2300      	movs	r3, #0
 8009b64:	9303      	str	r3, [sp, #12]
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	f107 0314 	add.w	r3, r7, #20
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	68b9      	ldr	r1, [r7, #8]
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f000 f850 	bl	8009c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b82:	f000 f8dd 	bl	8009d40 <prvAddNewTaskToReadyList>
 8009b86:	e001      	b.n	8009b8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b8c:	697b      	ldr	r3, [r7, #20]
	}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3728      	adds	r7, #40	; 0x28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b08c      	sub	sp, #48	; 0x30
 8009b9a:	af04      	add	r7, sp, #16
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fc34 	bl	800b418 <pvPortMalloc>
 8009bb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00e      	beq.n	8009bd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bb8:	205c      	movs	r0, #92	; 0x5c
 8009bba:	f001 fc2d 	bl	800b418 <pvPortMalloc>
 8009bbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
 8009bcc:	e005      	b.n	8009bda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009bce:	6978      	ldr	r0, [r7, #20]
 8009bd0:	f001 fcee 	bl	800b5b0 <vPortFree>
 8009bd4:	e001      	b.n	8009bda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d017      	beq.n	8009c10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009be8:	88fa      	ldrh	r2, [r7, #6]
 8009bea:	2300      	movs	r3, #0
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	9302      	str	r3, [sp, #8]
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f80e 	bl	8009c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c04:	69f8      	ldr	r0, [r7, #28]
 8009c06:	f000 f89b 	bl	8009d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61bb      	str	r3, [r7, #24]
 8009c0e:	e002      	b.n	8009c16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c10:	f04f 33ff 	mov.w	r3, #4294967295
 8009c14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c16:	69bb      	ldr	r3, [r7, #24]
	}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	461a      	mov	r2, r3
 8009c38:	21a5      	movs	r1, #165	; 0xa5
 8009c3a:	f001 fe0f 	bl	800b85c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00a      	beq.n	8009c78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	617b      	str	r3, [r7, #20]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01f      	beq.n	8009cbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c7e:	2300      	movs	r3, #0
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	e012      	b.n	8009caa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	7819      	ldrb	r1, [r3, #0]
 8009c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	4413      	add	r3, r2
 8009c92:	3334      	adds	r3, #52	; 0x34
 8009c94:	460a      	mov	r2, r1
 8009c96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	2b0f      	cmp	r3, #15
 8009cae:	d9e9      	bls.n	8009c84 <prvInitialiseNewTask+0x64>
 8009cb0:	e000      	b.n	8009cb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009cb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cbc:	e003      	b.n	8009cc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	2b37      	cmp	r3, #55	; 0x37
 8009cca:	d901      	bls.n	8009cd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ccc:	2337      	movs	r3, #55	; 0x37
 8009cce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	2200      	movs	r2, #0
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff f93e 	bl	8008f68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	3318      	adds	r3, #24
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7ff f939 	bl	8008f68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	2200      	movs	r2, #0
 8009d10:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	69b8      	ldr	r0, [r7, #24]
 8009d20:	f001 f928 	bl	800af74 <pxPortInitialiseStack>
 8009d24:	4602      	mov	r2, r0
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d36:	bf00      	nop
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d48:	f001 fa44 	bl	800b1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d4c:	4b2d      	ldr	r3, [pc, #180]	; (8009e04 <prvAddNewTaskToReadyList+0xc4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3301      	adds	r3, #1
 8009d52:	4a2c      	ldr	r2, [pc, #176]	; (8009e04 <prvAddNewTaskToReadyList+0xc4>)
 8009d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d56:	4b2c      	ldr	r3, [pc, #176]	; (8009e08 <prvAddNewTaskToReadyList+0xc8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d5e:	4a2a      	ldr	r2, [pc, #168]	; (8009e08 <prvAddNewTaskToReadyList+0xc8>)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d64:	4b27      	ldr	r3, [pc, #156]	; (8009e04 <prvAddNewTaskToReadyList+0xc4>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d110      	bne.n	8009d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d6c:	f000 fc16 	bl	800a59c <prvInitialiseTaskLists>
 8009d70:	e00d      	b.n	8009d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d72:	4b26      	ldr	r3, [pc, #152]	; (8009e0c <prvAddNewTaskToReadyList+0xcc>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d109      	bne.n	8009d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d7a:	4b23      	ldr	r3, [pc, #140]	; (8009e08 <prvAddNewTaskToReadyList+0xc8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d802      	bhi.n	8009d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d88:	4a1f      	ldr	r2, [pc, #124]	; (8009e08 <prvAddNewTaskToReadyList+0xc8>)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d8e:	4b20      	ldr	r3, [pc, #128]	; (8009e10 <prvAddNewTaskToReadyList+0xd0>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3301      	adds	r3, #1
 8009d94:	4a1e      	ldr	r2, [pc, #120]	; (8009e10 <prvAddNewTaskToReadyList+0xd0>)
 8009d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d98:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <prvAddNewTaskToReadyList+0xd0>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4b1b      	ldr	r3, [pc, #108]	; (8009e14 <prvAddNewTaskToReadyList+0xd4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d903      	bls.n	8009db4 <prvAddNewTaskToReadyList+0x74>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4a18      	ldr	r2, [pc, #96]	; (8009e14 <prvAddNewTaskToReadyList+0xd4>)
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4a15      	ldr	r2, [pc, #84]	; (8009e18 <prvAddNewTaskToReadyList+0xd8>)
 8009dc2:	441a      	add	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4610      	mov	r0, r2
 8009dcc:	f7ff f8d9 	bl	8008f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dd0:	f001 fa30 	bl	800b234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <prvAddNewTaskToReadyList+0xcc>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00e      	beq.n	8009dfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <prvAddNewTaskToReadyList+0xc8>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d207      	bcs.n	8009dfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dea:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <prvAddNewTaskToReadyList+0xdc>)
 8009dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	20000ca0 	.word	0x20000ca0
 8009e08:	200007cc 	.word	0x200007cc
 8009e0c:	20000cac 	.word	0x20000cac
 8009e10:	20000cbc 	.word	0x20000cbc
 8009e14:	20000ca8 	.word	0x20000ca8
 8009e18:	200007d0 	.word	0x200007d0
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d017      	beq.n	8009e62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <vTaskDelay+0x60>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00a      	beq.n	8009e50 <vTaskDelay+0x30>
	__asm volatile
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	60bb      	str	r3, [r7, #8]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e50:	f000 f880 	bl	8009f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fcea 	bl	800a830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e5c:	f000 f888 	bl	8009f70 <xTaskResumeAll>
 8009e60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d107      	bne.n	8009e78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <vTaskDelay+0x64>)
 8009e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	20000cc8 	.word	0x20000cc8
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08a      	sub	sp, #40	; 0x28
 8009e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e96:	463a      	mov	r2, r7
 8009e98:	1d39      	adds	r1, r7, #4
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff f80e 	bl	8008ec0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	9202      	str	r2, [sp, #8]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	460a      	mov	r2, r1
 8009eb6:	4921      	ldr	r1, [pc, #132]	; (8009f3c <vTaskStartScheduler+0xb4>)
 8009eb8:	4821      	ldr	r0, [pc, #132]	; (8009f40 <vTaskStartScheduler+0xb8>)
 8009eba:	f7ff fe0f 	bl	8009adc <xTaskCreateStatic>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	4a20      	ldr	r2, [pc, #128]	; (8009f44 <vTaskStartScheduler+0xbc>)
 8009ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ec4:	4b1f      	ldr	r3, [pc, #124]	; (8009f44 <vTaskStartScheduler+0xbc>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	617b      	str	r3, [r7, #20]
 8009ed0:	e001      	b.n	8009ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d102      	bne.n	8009ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009edc:	f000 fcfc 	bl	800a8d8 <xTimerCreateTimerTask>
 8009ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d116      	bne.n	8009f16 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	613b      	str	r3, [r7, #16]
}
 8009efa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009efc:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <vTaskStartScheduler+0xc0>)
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295
 8009f02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f04:	4b11      	ldr	r3, [pc, #68]	; (8009f4c <vTaskStartScheduler+0xc4>)
 8009f06:	2201      	movs	r2, #1
 8009f08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <vTaskStartScheduler+0xc8>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f10:	f001 f8be 	bl	800b090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f14:	e00e      	b.n	8009f34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1c:	d10a      	bne.n	8009f34 <vTaskStartScheduler+0xac>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	60fb      	str	r3, [r7, #12]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <vTaskStartScheduler+0xaa>
}
 8009f34:	bf00      	nop
 8009f36:	3718      	adds	r7, #24
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	0800ddc4 	.word	0x0800ddc4
 8009f40:	0800a56d 	.word	0x0800a56d
 8009f44:	20000cc4 	.word	0x20000cc4
 8009f48:	20000cc0 	.word	0x20000cc0
 8009f4c:	20000cac 	.word	0x20000cac
 8009f50:	20000ca4 	.word	0x20000ca4

08009f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f58:	4b04      	ldr	r3, [pc, #16]	; (8009f6c <vTaskSuspendAll+0x18>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	4a03      	ldr	r2, [pc, #12]	; (8009f6c <vTaskSuspendAll+0x18>)
 8009f60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f62:	bf00      	nop
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	20000cc8 	.word	0x20000cc8

08009f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f7e:	4b42      	ldr	r3, [pc, #264]	; (800a088 <xTaskResumeAll+0x118>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <xTaskResumeAll+0x2c>
	__asm volatile
 8009f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	603b      	str	r3, [r7, #0]
}
 8009f98:	bf00      	nop
 8009f9a:	e7fe      	b.n	8009f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f9c:	f001 f91a 	bl	800b1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fa0:	4b39      	ldr	r3, [pc, #228]	; (800a088 <xTaskResumeAll+0x118>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	4a38      	ldr	r2, [pc, #224]	; (800a088 <xTaskResumeAll+0x118>)
 8009fa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009faa:	4b37      	ldr	r3, [pc, #220]	; (800a088 <xTaskResumeAll+0x118>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d162      	bne.n	800a078 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fb2:	4b36      	ldr	r3, [pc, #216]	; (800a08c <xTaskResumeAll+0x11c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d05e      	beq.n	800a078 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fba:	e02f      	b.n	800a01c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fbc:	4b34      	ldr	r3, [pc, #208]	; (800a090 <xTaskResumeAll+0x120>)
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff f837 	bl	800903c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7ff f832 	bl	800903c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <xTaskResumeAll+0x124>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d903      	bls.n	8009fec <xTaskResumeAll+0x7c>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe8:	4a2a      	ldr	r2, [pc, #168]	; (800a094 <xTaskResumeAll+0x124>)
 8009fea:	6013      	str	r3, [r2, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4a27      	ldr	r2, [pc, #156]	; (800a098 <xTaskResumeAll+0x128>)
 8009ffa:	441a      	add	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f7fe ffbd 	bl	8008f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00c:	4b23      	ldr	r3, [pc, #140]	; (800a09c <xTaskResumeAll+0x12c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	429a      	cmp	r2, r3
 800a014:	d302      	bcc.n	800a01c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a016:	4b22      	ldr	r3, [pc, #136]	; (800a0a0 <xTaskResumeAll+0x130>)
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a01c:	4b1c      	ldr	r3, [pc, #112]	; (800a090 <xTaskResumeAll+0x120>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1cb      	bne.n	8009fbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a02a:	f000 fb55 	bl	800a6d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a02e:	4b1d      	ldr	r3, [pc, #116]	; (800a0a4 <xTaskResumeAll+0x134>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d010      	beq.n	800a05c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a03a:	f000 f847 	bl	800a0cc <xTaskIncrementTick>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a044:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <xTaskResumeAll+0x130>)
 800a046:	2201      	movs	r2, #1
 800a048:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1f1      	bne.n	800a03a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <xTaskResumeAll+0x134>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <xTaskResumeAll+0x130>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d009      	beq.n	800a078 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a064:	2301      	movs	r3, #1
 800a066:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <xTaskResumeAll+0x138>)
 800a06a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a06e:	601a      	str	r2, [r3, #0]
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a078:	f001 f8dc 	bl	800b234 <vPortExitCritical>

	return xAlreadyYielded;
 800a07c:	68bb      	ldr	r3, [r7, #8]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	20000cc8 	.word	0x20000cc8
 800a08c:	20000ca0 	.word	0x20000ca0
 800a090:	20000c60 	.word	0x20000c60
 800a094:	20000ca8 	.word	0x20000ca8
 800a098:	200007d0 	.word	0x200007d0
 800a09c:	200007cc 	.word	0x200007cc
 800a0a0:	20000cb4 	.word	0x20000cb4
 800a0a4:	20000cb0 	.word	0x20000cb0
 800a0a8:	e000ed04 	.word	0xe000ed04

0800a0ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0b2:	4b05      	ldr	r3, [pc, #20]	; (800a0c8 <xTaskGetTickCount+0x1c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0b8:	687b      	ldr	r3, [r7, #4]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000ca4 	.word	0x20000ca4

0800a0cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0d6:	4b4f      	ldr	r3, [pc, #316]	; (800a214 <xTaskIncrementTick+0x148>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f040 808f 	bne.w	800a1fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0e0:	4b4d      	ldr	r3, [pc, #308]	; (800a218 <xTaskIncrementTick+0x14c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0e8:	4a4b      	ldr	r2, [pc, #300]	; (800a218 <xTaskIncrementTick+0x14c>)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d120      	bne.n	800a136 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0f4:	4b49      	ldr	r3, [pc, #292]	; (800a21c <xTaskIncrementTick+0x150>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <xTaskIncrementTick+0x48>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	603b      	str	r3, [r7, #0]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <xTaskIncrementTick+0x46>
 800a114:	4b41      	ldr	r3, [pc, #260]	; (800a21c <xTaskIncrementTick+0x150>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	4b41      	ldr	r3, [pc, #260]	; (800a220 <xTaskIncrementTick+0x154>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a3f      	ldr	r2, [pc, #252]	; (800a21c <xTaskIncrementTick+0x150>)
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	4a3f      	ldr	r2, [pc, #252]	; (800a220 <xTaskIncrementTick+0x154>)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	4b3e      	ldr	r3, [pc, #248]	; (800a224 <xTaskIncrementTick+0x158>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	4a3d      	ldr	r2, [pc, #244]	; (800a224 <xTaskIncrementTick+0x158>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	f000 fad1 	bl	800a6d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a136:	4b3c      	ldr	r3, [pc, #240]	; (800a228 <xTaskIncrementTick+0x15c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d349      	bcc.n	800a1d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a140:	4b36      	ldr	r3, [pc, #216]	; (800a21c <xTaskIncrementTick+0x150>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d104      	bne.n	800a154 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14a:	4b37      	ldr	r3, [pc, #220]	; (800a228 <xTaskIncrementTick+0x15c>)
 800a14c:	f04f 32ff 	mov.w	r2, #4294967295
 800a150:	601a      	str	r2, [r3, #0]
					break;
 800a152:	e03f      	b.n	800a1d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a154:	4b31      	ldr	r3, [pc, #196]	; (800a21c <xTaskIncrementTick+0x150>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d203      	bcs.n	800a174 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a16c:	4a2e      	ldr	r2, [pc, #184]	; (800a228 <xTaskIncrementTick+0x15c>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a172:	e02f      	b.n	800a1d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3304      	adds	r3, #4
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fe ff5f 	bl	800903c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a182:	2b00      	cmp	r3, #0
 800a184:	d004      	beq.n	800a190 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3318      	adds	r3, #24
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe ff56 	bl	800903c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a194:	4b25      	ldr	r3, [pc, #148]	; (800a22c <xTaskIncrementTick+0x160>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d903      	bls.n	800a1a4 <xTaskIncrementTick+0xd8>
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	4a22      	ldr	r2, [pc, #136]	; (800a22c <xTaskIncrementTick+0x160>)
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4a1f      	ldr	r2, [pc, #124]	; (800a230 <xTaskIncrementTick+0x164>)
 800a1b2:	441a      	add	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7fe fee1 	bl	8008f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c4:	4b1b      	ldr	r3, [pc, #108]	; (800a234 <xTaskIncrementTick+0x168>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d3b8      	bcc.n	800a140 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1d2:	e7b5      	b.n	800a140 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1d4:	4b17      	ldr	r3, [pc, #92]	; (800a234 <xTaskIncrementTick+0x168>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1da:	4915      	ldr	r1, [pc, #84]	; (800a230 <xTaskIncrementTick+0x164>)
 800a1dc:	4613      	mov	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d901      	bls.n	800a1f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1f0:	4b11      	ldr	r3, [pc, #68]	; (800a238 <xTaskIncrementTick+0x16c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	e004      	b.n	800a208 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <xTaskIncrementTick+0x170>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	4a0d      	ldr	r2, [pc, #52]	; (800a23c <xTaskIncrementTick+0x170>)
 800a206:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a208:	697b      	ldr	r3, [r7, #20]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000cc8 	.word	0x20000cc8
 800a218:	20000ca4 	.word	0x20000ca4
 800a21c:	20000c58 	.word	0x20000c58
 800a220:	20000c5c 	.word	0x20000c5c
 800a224:	20000cb8 	.word	0x20000cb8
 800a228:	20000cc0 	.word	0x20000cc0
 800a22c:	20000ca8 	.word	0x20000ca8
 800a230:	200007d0 	.word	0x200007d0
 800a234:	200007cc 	.word	0x200007cc
 800a238:	20000cb4 	.word	0x20000cb4
 800a23c:	20000cb0 	.word	0x20000cb0

0800a240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a246:	4b28      	ldr	r3, [pc, #160]	; (800a2e8 <vTaskSwitchContext+0xa8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a24e:	4b27      	ldr	r3, [pc, #156]	; (800a2ec <vTaskSwitchContext+0xac>)
 800a250:	2201      	movs	r2, #1
 800a252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a254:	e041      	b.n	800a2da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a256:	4b25      	ldr	r3, [pc, #148]	; (800a2ec <vTaskSwitchContext+0xac>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25c:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <vTaskSwitchContext+0xb0>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e010      	b.n	800a286 <vTaskSwitchContext+0x46>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <vTaskSwitchContext+0x40>
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
}
 800a27c:	bf00      	nop
 800a27e:	e7fe      	b.n	800a27e <vTaskSwitchContext+0x3e>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3b01      	subs	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	491b      	ldr	r1, [pc, #108]	; (800a2f4 <vTaskSwitchContext+0xb4>)
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	440b      	add	r3, r1
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0e4      	beq.n	800a264 <vTaskSwitchContext+0x24>
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4a13      	ldr	r2, [pc, #76]	; (800a2f4 <vTaskSwitchContext+0xb4>)
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60bb      	str	r3, [r7, #8]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	605a      	str	r2, [r3, #4]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	685a      	ldr	r2, [r3, #4]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d104      	bne.n	800a2ca <vTaskSwitchContext+0x8a>
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	605a      	str	r2, [r3, #4]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	4a09      	ldr	r2, [pc, #36]	; (800a2f8 <vTaskSwitchContext+0xb8>)
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	4a06      	ldr	r2, [pc, #24]	; (800a2f0 <vTaskSwitchContext+0xb0>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6013      	str	r3, [r2, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	20000cc8 	.word	0x20000cc8
 800a2ec:	20000cb4 	.word	0x20000cb4
 800a2f0:	20000ca8 	.word	0x20000ca8
 800a2f4:	200007d0 	.word	0x200007d0
 800a2f8:	200007cc 	.word	0x200007cc

0800a2fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60fb      	str	r3, [r7, #12]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <vTaskPlaceOnEventList+0x44>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3318      	adds	r3, #24
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe fe4d 	bl	8008fca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a330:	2101      	movs	r1, #1
 800a332:	6838      	ldr	r0, [r7, #0]
 800a334:	f000 fa7c 	bl	800a830 <prvAddCurrentTaskToDelayedList>
}
 800a338:	bf00      	nop
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	200007cc 	.word	0x200007cc

0800a344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10a      	bne.n	800a36c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	617b      	str	r3, [r7, #20]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a36c:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <vTaskPlaceOnEventListRestricted+0x54>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	3318      	adds	r3, #24
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7fe fe04 	bl	8008f82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
 800a384:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	68b8      	ldr	r0, [r7, #8]
 800a38a:	f000 fa51 	bl	800a830 <prvAddCurrentTaskToDelayedList>
	}
 800a38e:	bf00      	nop
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200007cc 	.word	0x200007cc

0800a39c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10a      	bne.n	800a3c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	60fb      	str	r3, [r7, #12]
}
 800a3c4:	bf00      	nop
 800a3c6:	e7fe      	b.n	800a3c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	3318      	adds	r3, #24
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fe35 	bl	800903c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3d2:	4b1e      	ldr	r3, [pc, #120]	; (800a44c <xTaskRemoveFromEventList+0xb0>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d11d      	bne.n	800a416 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fe2c 	bl	800903c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <xTaskRemoveFromEventList+0xb4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d903      	bls.n	800a3f8 <xTaskRemoveFromEventList+0x5c>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f4:	4a16      	ldr	r2, [pc, #88]	; (800a450 <xTaskRemoveFromEventList+0xb4>)
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <xTaskRemoveFromEventList+0xb8>)
 800a406:	441a      	add	r2, r3
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fe fdb7 	bl	8008f82 <vListInsertEnd>
 800a414:	e005      	b.n	800a422 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	3318      	adds	r3, #24
 800a41a:	4619      	mov	r1, r3
 800a41c:	480e      	ldr	r0, [pc, #56]	; (800a458 <xTaskRemoveFromEventList+0xbc>)
 800a41e:	f7fe fdb0 	bl	8008f82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <xTaskRemoveFromEventList+0xc0>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d905      	bls.n	800a43c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a430:	2301      	movs	r3, #1
 800a432:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a434:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <xTaskRemoveFromEventList+0xc4>)
 800a436:	2201      	movs	r2, #1
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	e001      	b.n	800a440 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a440:	697b      	ldr	r3, [r7, #20]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	20000cc8 	.word	0x20000cc8
 800a450:	20000ca8 	.word	0x20000ca8
 800a454:	200007d0 	.word	0x200007d0
 800a458:	20000c60 	.word	0x20000c60
 800a45c:	200007cc 	.word	0x200007cc
 800a460:	20000cb4 	.word	0x20000cb4

0800a464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a46c:	4b06      	ldr	r3, [pc, #24]	; (800a488 <vTaskInternalSetTimeOutState+0x24>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <vTaskInternalSetTimeOutState+0x28>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	605a      	str	r2, [r3, #4]
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	20000cb8 	.word	0x20000cb8
 800a48c:	20000ca4 	.word	0x20000ca4

0800a490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	613b      	str	r3, [r7, #16]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10a      	bne.n	800a4d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	60fb      	str	r3, [r7, #12]
}
 800a4ce:	bf00      	nop
 800a4d0:	e7fe      	b.n	800a4d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a4d2:	f000 fe7f 	bl	800b1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a4d6:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <xTaskCheckForTimeOut+0xbc>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	69ba      	ldr	r2, [r7, #24]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ee:	d102      	bne.n	800a4f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]
 800a4f4:	e023      	b.n	800a53e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	4b15      	ldr	r3, [pc, #84]	; (800a550 <xTaskCheckForTimeOut+0xc0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d007      	beq.n	800a512 <xTaskCheckForTimeOut+0x82>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d302      	bcc.n	800a512 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a50c:	2301      	movs	r3, #1
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	e015      	b.n	800a53e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	697a      	ldr	r2, [r7, #20]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d20b      	bcs.n	800a534 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	1ad2      	subs	r2, r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff ff9b 	bl	800a464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a52e:	2300      	movs	r3, #0
 800a530:	61fb      	str	r3, [r7, #28]
 800a532:	e004      	b.n	800a53e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a53a:	2301      	movs	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a53e:	f000 fe79 	bl	800b234 <vPortExitCritical>

	return xReturn;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	20000ca4 	.word	0x20000ca4
 800a550:	20000cb8 	.word	0x20000cb8

0800a554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a558:	4b03      	ldr	r3, [pc, #12]	; (800a568 <vTaskMissedYield+0x14>)
 800a55a:	2201      	movs	r2, #1
 800a55c:	601a      	str	r2, [r3, #0]
}
 800a55e:	bf00      	nop
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	20000cb4 	.word	0x20000cb4

0800a56c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a574:	f000 f852 	bl	800a61c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a578:	4b06      	ldr	r3, [pc, #24]	; (800a594 <prvIdleTask+0x28>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d9f9      	bls.n	800a574 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a580:	4b05      	ldr	r3, [pc, #20]	; (800a598 <prvIdleTask+0x2c>)
 800a582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a590:	e7f0      	b.n	800a574 <prvIdleTask+0x8>
 800a592:	bf00      	nop
 800a594:	200007d0 	.word	0x200007d0
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	607b      	str	r3, [r7, #4]
 800a5a6:	e00c      	b.n	800a5c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4a12      	ldr	r2, [pc, #72]	; (800a5fc <prvInitialiseTaskLists+0x60>)
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fcb6 	bl	8008f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	607b      	str	r3, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b37      	cmp	r3, #55	; 0x37
 800a5c6:	d9ef      	bls.n	800a5a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5c8:	480d      	ldr	r0, [pc, #52]	; (800a600 <prvInitialiseTaskLists+0x64>)
 800a5ca:	f7fe fcad 	bl	8008f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5ce:	480d      	ldr	r0, [pc, #52]	; (800a604 <prvInitialiseTaskLists+0x68>)
 800a5d0:	f7fe fcaa 	bl	8008f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a5d4:	480c      	ldr	r0, [pc, #48]	; (800a608 <prvInitialiseTaskLists+0x6c>)
 800a5d6:	f7fe fca7 	bl	8008f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a5da:	480c      	ldr	r0, [pc, #48]	; (800a60c <prvInitialiseTaskLists+0x70>)
 800a5dc:	f7fe fca4 	bl	8008f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a5e0:	480b      	ldr	r0, [pc, #44]	; (800a610 <prvInitialiseTaskLists+0x74>)
 800a5e2:	f7fe fca1 	bl	8008f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <prvInitialiseTaskLists+0x78>)
 800a5e8:	4a05      	ldr	r2, [pc, #20]	; (800a600 <prvInitialiseTaskLists+0x64>)
 800a5ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	; (800a618 <prvInitialiseTaskLists+0x7c>)
 800a5ee:	4a05      	ldr	r2, [pc, #20]	; (800a604 <prvInitialiseTaskLists+0x68>)
 800a5f0:	601a      	str	r2, [r3, #0]
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200007d0 	.word	0x200007d0
 800a600:	20000c30 	.word	0x20000c30
 800a604:	20000c44 	.word	0x20000c44
 800a608:	20000c60 	.word	0x20000c60
 800a60c:	20000c74 	.word	0x20000c74
 800a610:	20000c8c 	.word	0x20000c8c
 800a614:	20000c58 	.word	0x20000c58
 800a618:	20000c5c 	.word	0x20000c5c

0800a61c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a622:	e019      	b.n	800a658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a624:	f000 fdd6 	bl	800b1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a628:	4b10      	ldr	r3, [pc, #64]	; (800a66c <prvCheckTasksWaitingTermination+0x50>)
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fd01 	bl	800903c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <prvCheckTasksWaitingTermination+0x54>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	3b01      	subs	r3, #1
 800a640:	4a0b      	ldr	r2, [pc, #44]	; (800a670 <prvCheckTasksWaitingTermination+0x54>)
 800a642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <prvCheckTasksWaitingTermination+0x58>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3b01      	subs	r3, #1
 800a64a:	4a0a      	ldr	r2, [pc, #40]	; (800a674 <prvCheckTasksWaitingTermination+0x58>)
 800a64c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a64e:	f000 fdf1 	bl	800b234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f810 	bl	800a678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a658:	4b06      	ldr	r3, [pc, #24]	; (800a674 <prvCheckTasksWaitingTermination+0x58>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e1      	bne.n	800a624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000c74 	.word	0x20000c74
 800a670:	20000ca0 	.word	0x20000ca0
 800a674:	20000c88 	.word	0x20000c88

0800a678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a686:	2b00      	cmp	r3, #0
 800a688:	d108      	bne.n	800a69c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 ff8e 	bl	800b5b0 <vPortFree>
				vPortFree( pxTCB );
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 ff8b 	bl	800b5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a69a:	e018      	b.n	800a6ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d103      	bne.n	800a6ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 ff82 	bl	800b5b0 <vPortFree>
	}
 800a6ac:	e00f      	b.n	800a6ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d00a      	beq.n	800a6ce <prvDeleteTCB+0x56>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	60fb      	str	r3, [r7, #12]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <prvDeleteTCB+0x54>
	}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6de:	4b0c      	ldr	r3, [pc, #48]	; (800a710 <prvResetNextTaskUnblockTime+0x38>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d104      	bne.n	800a6f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <prvResetNextTaskUnblockTime+0x3c>)
 800a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6f0:	e008      	b.n	800a704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f2:	4b07      	ldr	r3, [pc, #28]	; (800a710 <prvResetNextTaskUnblockTime+0x38>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	4a04      	ldr	r2, [pc, #16]	; (800a714 <prvResetNextTaskUnblockTime+0x3c>)
 800a702:	6013      	str	r3, [r2, #0]
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr
 800a710:	20000c58 	.word	0x20000c58
 800a714:	20000cc0 	.word	0x20000cc0

0800a718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a71e:	4b0b      	ldr	r3, [pc, #44]	; (800a74c <xTaskGetSchedulerState+0x34>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d102      	bne.n	800a72c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a726:	2301      	movs	r3, #1
 800a728:	607b      	str	r3, [r7, #4]
 800a72a:	e008      	b.n	800a73e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a72c:	4b08      	ldr	r3, [pc, #32]	; (800a750 <xTaskGetSchedulerState+0x38>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a734:	2302      	movs	r3, #2
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	e001      	b.n	800a73e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a73a:	2300      	movs	r3, #0
 800a73c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a73e:	687b      	ldr	r3, [r7, #4]
	}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000cac 	.word	0x20000cac
 800a750:	20000cc8 	.word	0x20000cc8

0800a754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a754:	b580      	push	{r7, lr}
 800a756:	b086      	sub	sp, #24
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d056      	beq.n	800a818 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a76a:	4b2e      	ldr	r3, [pc, #184]	; (800a824 <xTaskPriorityDisinherit+0xd0>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	693a      	ldr	r2, [r7, #16]
 800a770:	429a      	cmp	r2, r3
 800a772:	d00a      	beq.n	800a78a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	60fb      	str	r3, [r7, #12]
}
 800a786:	bf00      	nop
 800a788:	e7fe      	b.n	800a788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60bb      	str	r3, [r7, #8]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ac:	1e5a      	subs	r2, r3, #1
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d02c      	beq.n	800a818 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d128      	bne.n	800a818 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fc36 	bl	800903c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	; (800a828 <xTaskPriorityDisinherit+0xd4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d903      	bls.n	800a7f8 <xTaskPriorityDisinherit+0xa4>
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	4a0c      	ldr	r2, [pc, #48]	; (800a828 <xTaskPriorityDisinherit+0xd4>)
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4a09      	ldr	r2, [pc, #36]	; (800a82c <xTaskPriorityDisinherit+0xd8>)
 800a806:	441a      	add	r2, r3
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4619      	mov	r1, r3
 800a80e:	4610      	mov	r0, r2
 800a810:	f7fe fbb7 	bl	8008f82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a818:	697b      	ldr	r3, [r7, #20]
	}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	200007cc 	.word	0x200007cc
 800a828:	20000ca8 	.word	0x20000ca8
 800a82c:	200007d0 	.word	0x200007d0

0800a830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a83a:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a840:	4b20      	ldr	r3, [pc, #128]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3304      	adds	r3, #4
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fbf8 	bl	800903c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d10a      	bne.n	800a86a <prvAddCurrentTaskToDelayedList+0x3a>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d007      	beq.n	800a86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a85a:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3304      	adds	r3, #4
 800a860:	4619      	mov	r1, r3
 800a862:	4819      	ldr	r0, [pc, #100]	; (800a8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a864:	f7fe fb8d 	bl	8008f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a868:	e026      	b.n	800a8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4413      	add	r3, r2
 800a870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a872:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d209      	bcs.n	800a896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3304      	adds	r3, #4
 800a88c:	4619      	mov	r1, r3
 800a88e:	4610      	mov	r0, r2
 800a890:	f7fe fb9b 	bl	8008fca <vListInsert>
}
 800a894:	e010      	b.n	800a8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a896:	4b0e      	ldr	r3, [pc, #56]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b0a      	ldr	r3, [pc, #40]	; (800a8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	3304      	adds	r3, #4
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	f7fe fb91 	bl	8008fca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d202      	bcs.n	800a8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8b2:	4a08      	ldr	r2, [pc, #32]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	6013      	str	r3, [r2, #0]
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	20000ca4 	.word	0x20000ca4
 800a8c4:	200007cc 	.word	0x200007cc
 800a8c8:	20000c8c 	.word	0x20000c8c
 800a8cc:	20000c5c 	.word	0x20000c5c
 800a8d0:	20000c58 	.word	0x20000c58
 800a8d4:	20000cc0 	.word	0x20000cc0

0800a8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	; 0x28
 800a8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8e2:	f000 fb07 	bl	800aef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8e6:	4b1c      	ldr	r3, [pc, #112]	; (800a958 <xTimerCreateTimerTask+0x80>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d021      	beq.n	800a932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a8f6:	1d3a      	adds	r2, r7, #4
 800a8f8:	f107 0108 	add.w	r1, r7, #8
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4618      	mov	r0, r3
 800a902:	f7fe faf7 	bl	8008ef4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	9202      	str	r2, [sp, #8]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	2302      	movs	r3, #2
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	460a      	mov	r2, r1
 800a918:	4910      	ldr	r1, [pc, #64]	; (800a95c <xTimerCreateTimerTask+0x84>)
 800a91a:	4811      	ldr	r0, [pc, #68]	; (800a960 <xTimerCreateTimerTask+0x88>)
 800a91c:	f7ff f8de 	bl	8009adc <xTaskCreateStatic>
 800a920:	4603      	mov	r3, r0
 800a922:	4a10      	ldr	r2, [pc, #64]	; (800a964 <xTimerCreateTimerTask+0x8c>)
 800a924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a926:	4b0f      	ldr	r3, [pc, #60]	; (800a964 <xTimerCreateTimerTask+0x8c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a92e:	2301      	movs	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	613b      	str	r3, [r7, #16]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a94e:	697b      	ldr	r3, [r7, #20]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3718      	adds	r7, #24
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	20000cfc 	.word	0x20000cfc
 800a95c:	0800ddcc 	.word	0x0800ddcc
 800a960:	0800aa9d 	.word	0x0800aa9d
 800a964:	20000d00 	.word	0x20000d00

0800a968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b08a      	sub	sp, #40	; 0x28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a976:	2300      	movs	r3, #0
 800a978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	623b      	str	r3, [r7, #32]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a996:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <xTimerGenericCommand+0x98>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d02a      	beq.n	800a9f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b05      	cmp	r3, #5
 800a9ae:	dc18      	bgt.n	800a9e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9b0:	f7ff feb2 	bl	800a718 <xTaskGetSchedulerState>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d109      	bne.n	800a9ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9ba:	4b11      	ldr	r3, [pc, #68]	; (800aa00 <xTimerGenericCommand+0x98>)
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	f107 0110 	add.w	r1, r7, #16
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c6:	f7fe fca1 	bl	800930c <xQueueGenericSend>
 800a9ca:	6278      	str	r0, [r7, #36]	; 0x24
 800a9cc:	e012      	b.n	800a9f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <xTimerGenericCommand+0x98>)
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f107 0110 	add.w	r1, r7, #16
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f7fe fc97 	bl	800930c <xQueueGenericSend>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24
 800a9e0:	e008      	b.n	800a9f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9e2:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <xTimerGenericCommand+0x98>)
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	f107 0110 	add.w	r1, r7, #16
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	f7fe fd8b 	bl	8009508 <xQueueGenericSendFromISR>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3728      	adds	r7, #40	; 0x28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000cfc 	.word	0x20000cfc

0800aa04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0e:	4b22      	ldr	r3, [pc, #136]	; (800aa98 <prvProcessExpiredTimer+0x94>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fe fb0d 	bl	800903c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d022      	beq.n	800aa76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	699a      	ldr	r2, [r3, #24]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	18d1      	adds	r1, r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	6978      	ldr	r0, [r7, #20]
 800aa3e:	f000 f8d1 	bl	800abe4 <prvInsertTimerInActiveList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01f      	beq.n	800aa88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa48:	2300      	movs	r3, #0
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	2100      	movs	r1, #0
 800aa52:	6978      	ldr	r0, [r7, #20]
 800aa54:	f7ff ff88 	bl	800a968 <xTimerGenericCommand>
 800aa58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d113      	bne.n	800aa88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	60fb      	str	r3, [r7, #12]
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7c:	f023 0301 	bic.w	r3, r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	6978      	ldr	r0, [r7, #20]
 800aa8e:	4798      	blx	r3
}
 800aa90:	bf00      	nop
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20000cf4 	.word	0x20000cf4

0800aa9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f857 	bl	800ab5c <prvGetNextExpireTime>
 800aaae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4619      	mov	r1, r3
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f803 	bl	800aac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aaba:	f000 f8d5 	bl	800ac68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aabe:	e7f1      	b.n	800aaa4 <prvTimerTask+0x8>

0800aac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aaca:	f7ff fa43 	bl	8009f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aace:	f107 0308 	add.w	r3, r7, #8
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f866 	bl	800aba4 <prvSampleTimeNow>
 800aad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d130      	bne.n	800ab42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <prvProcessTimerOrBlockTask+0x3c>
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d806      	bhi.n	800aafc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aaee:	f7ff fa3f 	bl	8009f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff ff85 	bl	800aa04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aafa:	e024      	b.n	800ab46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d008      	beq.n	800ab14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab02:	4b13      	ldr	r3, [pc, #76]	; (800ab50 <prvProcessTimerOrBlockTask+0x90>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <prvProcessTimerOrBlockTask+0x50>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e000      	b.n	800ab12 <prvProcessTimerOrBlockTask+0x52>
 800ab10:	2300      	movs	r3, #0
 800ab12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab14:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <prvProcessTimerOrBlockTask+0x94>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	4619      	mov	r1, r3
 800ab22:	f7fe ffa7 	bl	8009a74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab26:	f7ff fa23 	bl	8009f70 <xTaskResumeAll>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d10a      	bne.n	800ab46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab30:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <prvProcessTimerOrBlockTask+0x98>)
 800ab32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	f3bf 8f6f 	isb	sy
}
 800ab40:	e001      	b.n	800ab46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab42:	f7ff fa15 	bl	8009f70 <xTaskResumeAll>
}
 800ab46:	bf00      	nop
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000cf8 	.word	0x20000cf8
 800ab54:	20000cfc 	.word	0x20000cfc
 800ab58:	e000ed04 	.word	0xe000ed04

0800ab5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab64:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <prvGetNextExpireTime+0x44>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <prvGetNextExpireTime+0x16>
 800ab6e:	2201      	movs	r2, #1
 800ab70:	e000      	b.n	800ab74 <prvGetNextExpireTime+0x18>
 800ab72:	2200      	movs	r2, #0
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d105      	bne.n	800ab8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <prvGetNextExpireTime+0x44>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	60fb      	str	r3, [r7, #12]
 800ab8a:	e001      	b.n	800ab90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab90:	68fb      	ldr	r3, [r7, #12]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	20000cf4 	.word	0x20000cf4

0800aba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abac:	f7ff fa7e 	bl	800a0ac <xTaskGetTickCount>
 800abb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abb2:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <prvSampleTimeNow+0x3c>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d205      	bcs.n	800abc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abbc:	f000 f936 	bl	800ae2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	e002      	b.n	800abce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abce:	4a04      	ldr	r2, [pc, #16]	; (800abe0 <prvSampleTimeNow+0x3c>)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abd4:	68fb      	ldr	r3, [r7, #12]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20000d04 	.word	0x20000d04

0800abe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d812      	bhi.n	800ac30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d302      	bcc.n	800ac1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e01b      	b.n	800ac56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac1e:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <prvInsertTimerInActiveList+0x7c>)
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3304      	adds	r3, #4
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f7fe f9ce 	bl	8008fca <vListInsert>
 800ac2e:	e012      	b.n	800ac56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d206      	bcs.n	800ac46 <prvInsertTimerInActiveList+0x62>
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d302      	bcc.n	800ac46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac40:	2301      	movs	r3, #1
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	e007      	b.n	800ac56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac46:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <prvInsertTimerInActiveList+0x80>)
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4610      	mov	r0, r2
 800ac52:	f7fe f9ba 	bl	8008fca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac56:	697b      	ldr	r3, [r7, #20]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	20000cf8 	.word	0x20000cf8
 800ac64:	20000cf4 	.word	0x20000cf4

0800ac68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08e      	sub	sp, #56	; 0x38
 800ac6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac6e:	e0ca      	b.n	800ae06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	da18      	bge.n	800aca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ac76:	1d3b      	adds	r3, r7, #4
 800ac78:	3304      	adds	r3, #4
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	61fb      	str	r3, [r7, #28]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9e:	6850      	ldr	r0, [r2, #4]
 800aca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aca2:	6892      	ldr	r2, [r2, #8]
 800aca4:	4611      	mov	r1, r2
 800aca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f2c0 80aa 	blt.w	800ae04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbe:	3304      	adds	r3, #4
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe f9bb 	bl	800903c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acc6:	463b      	mov	r3, r7
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff ff6b 	bl	800aba4 <prvSampleTimeNow>
 800acce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b09      	cmp	r3, #9
 800acd4:	f200 8097 	bhi.w	800ae06 <prvProcessReceivedCommands+0x19e>
 800acd8:	a201      	add	r2, pc, #4	; (adr r2, 800ace0 <prvProcessReceivedCommands+0x78>)
 800acda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acde:	bf00      	nop
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad09 	.word	0x0800ad09
 800acec:	0800ad7d 	.word	0x0800ad7d
 800acf0:	0800ad91 	.word	0x0800ad91
 800acf4:	0800addb 	.word	0x0800addb
 800acf8:	0800ad09 	.word	0x0800ad09
 800acfc:	0800ad09 	.word	0x0800ad09
 800ad00:	0800ad7d 	.word	0x0800ad7d
 800ad04:	0800ad91 	.word	0x0800ad91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad0e:	f043 0301 	orr.w	r3, r3, #1
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	18d1      	adds	r1, r2, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad28:	f7ff ff5c 	bl	800abe4 <prvInsertTimerInActiveList>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d069      	beq.n	800ae06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad40:	f003 0304 	and.w	r3, r3, #4
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d05e      	beq.n	800ae06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	441a      	add	r2, r3
 800ad50:	2300      	movs	r3, #0
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	2300      	movs	r3, #0
 800ad56:	2100      	movs	r1, #0
 800ad58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5a:	f7ff fe05 	bl	800a968 <xTimerGenericCommand>
 800ad5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d14f      	bne.n	800ae06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	61bb      	str	r3, [r7, #24]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad82:	f023 0301 	bic.w	r3, r3, #1
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad8e:	e03a      	b.n	800ae06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	699b      	ldr	r3, [r3, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	617b      	str	r3, [r7, #20]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800adc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc8:	699a      	ldr	r2, [r3, #24]
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	18d1      	adds	r1, r2, r3
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add4:	f7ff ff06 	bl	800abe4 <prvInsertTimerInActiveList>
					break;
 800add8:	e015      	b.n	800ae06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade0:	f003 0302 	and.w	r3, r3, #2
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d103      	bne.n	800adf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ade8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adea:	f000 fbe1 	bl	800b5b0 <vPortFree>
 800adee:	e00a      	b.n	800ae06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adf6:	f023 0301 	bic.w	r3, r3, #1
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae02:	e000      	b.n	800ae06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae06:	4b08      	ldr	r3, [pc, #32]	; (800ae28 <prvProcessReceivedCommands+0x1c0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	1d39      	adds	r1, r7, #4
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fc16 	bl	8009640 <xQueueReceive>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f47f af2a 	bne.w	800ac70 <prvProcessReceivedCommands+0x8>
	}
}
 800ae1c:	bf00      	nop
 800ae1e:	bf00      	nop
 800ae20:	3730      	adds	r7, #48	; 0x30
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop
 800ae28:	20000cfc 	.word	0x20000cfc

0800ae2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b088      	sub	sp, #32
 800ae30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae32:	e048      	b.n	800aec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae34:	4b2d      	ldr	r3, [pc, #180]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae3e:	4b2b      	ldr	r3, [pc, #172]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe f8f5 	bl	800903c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d02e      	beq.n	800aec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	4413      	add	r3, r2
 800ae70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d90e      	bls.n	800ae98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae86:	4b19      	ldr	r3, [pc, #100]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4610      	mov	r0, r2
 800ae92:	f7fe f89a 	bl	8008fca <vListInsert>
 800ae96:	e016      	b.n	800aec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae98:	2300      	movs	r3, #0
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	2100      	movs	r1, #0
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f7ff fd60 	bl	800a968 <xTimerGenericCommand>
 800aea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	603b      	str	r3, [r7, #0]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aec6:	4b09      	ldr	r3, [pc, #36]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1b1      	bne.n	800ae34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aed0:	4b06      	ldr	r3, [pc, #24]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <prvSwitchTimerLists+0xc4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a04      	ldr	r2, [pc, #16]	; (800aeec <prvSwitchTimerLists+0xc0>)
 800aedc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aede:	4a04      	ldr	r2, [pc, #16]	; (800aef0 <prvSwitchTimerLists+0xc4>)
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	6013      	str	r3, [r2, #0]
}
 800aee4:	bf00      	nop
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000cf4 	.word	0x20000cf4
 800aef0:	20000cf8 	.word	0x20000cf8

0800aef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aefa:	f000 f96b 	bl	800b1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aefe:	4b15      	ldr	r3, [pc, #84]	; (800af54 <prvCheckForValidListAndQueue+0x60>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d120      	bne.n	800af48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af06:	4814      	ldr	r0, [pc, #80]	; (800af58 <prvCheckForValidListAndQueue+0x64>)
 800af08:	f7fe f80e 	bl	8008f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af0c:	4813      	ldr	r0, [pc, #76]	; (800af5c <prvCheckForValidListAndQueue+0x68>)
 800af0e:	f7fe f80b 	bl	8008f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af12:	4b13      	ldr	r3, [pc, #76]	; (800af60 <prvCheckForValidListAndQueue+0x6c>)
 800af14:	4a10      	ldr	r2, [pc, #64]	; (800af58 <prvCheckForValidListAndQueue+0x64>)
 800af16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800af18:	4b12      	ldr	r3, [pc, #72]	; (800af64 <prvCheckForValidListAndQueue+0x70>)
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <prvCheckForValidListAndQueue+0x68>)
 800af1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800af1e:	2300      	movs	r3, #0
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	4b11      	ldr	r3, [pc, #68]	; (800af68 <prvCheckForValidListAndQueue+0x74>)
 800af24:	4a11      	ldr	r2, [pc, #68]	; (800af6c <prvCheckForValidListAndQueue+0x78>)
 800af26:	2110      	movs	r1, #16
 800af28:	200a      	movs	r0, #10
 800af2a:	f7fe f919 	bl	8009160 <xQueueGenericCreateStatic>
 800af2e:	4603      	mov	r3, r0
 800af30:	4a08      	ldr	r2, [pc, #32]	; (800af54 <prvCheckForValidListAndQueue+0x60>)
 800af32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <prvCheckForValidListAndQueue+0x60>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af3c:	4b05      	ldr	r3, [pc, #20]	; (800af54 <prvCheckForValidListAndQueue+0x60>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	490b      	ldr	r1, [pc, #44]	; (800af70 <prvCheckForValidListAndQueue+0x7c>)
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe fd6c 	bl	8009a20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af48:	f000 f974 	bl	800b234 <vPortExitCritical>
}
 800af4c:	bf00      	nop
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20000cfc 	.word	0x20000cfc
 800af58:	20000ccc 	.word	0x20000ccc
 800af5c:	20000ce0 	.word	0x20000ce0
 800af60:	20000cf4 	.word	0x20000cf4
 800af64:	20000cf8 	.word	0x20000cf8
 800af68:	20000da8 	.word	0x20000da8
 800af6c:	20000d08 	.word	0x20000d08
 800af70:	0800ddd4 	.word	0x0800ddd4

0800af74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3b04      	subs	r3, #4
 800af84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3b04      	subs	r3, #4
 800af92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f023 0201 	bic.w	r2, r3, #1
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3b04      	subs	r3, #4
 800afa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afa4:	4a0c      	ldr	r2, [pc, #48]	; (800afd8 <pxPortInitialiseStack+0x64>)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3b14      	subs	r3, #20
 800afae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3b04      	subs	r3, #4
 800afba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f06f 0202 	mvn.w	r2, #2
 800afc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3b20      	subs	r3, #32
 800afc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afca:	68fb      	ldr	r3, [r7, #12]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr
 800afd8:	0800afdd 	.word	0x0800afdd

0800afdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afdc:	b480      	push	{r7}
 800afde:	b085      	sub	sp, #20
 800afe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afe6:	4b12      	ldr	r3, [pc, #72]	; (800b030 <prvTaskExitError+0x54>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d00a      	beq.n	800b006 <prvTaskExitError+0x2a>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	60fb      	str	r3, [r7, #12]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <prvTaskExitError+0x28>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	60bb      	str	r3, [r7, #8]
}
 800b018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b01a:	bf00      	nop
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0fc      	beq.n	800b01c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b022:	bf00      	nop
 800b024:	bf00      	nop
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	2000000c 	.word	0x2000000c
	...

0800b040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <pxCurrentTCBConst2>)
 800b042:	6819      	ldr	r1, [r3, #0]
 800b044:	6808      	ldr	r0, [r1, #0]
 800b046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	f380 8809 	msr	PSP, r0
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f04f 0000 	mov.w	r0, #0
 800b056:	f380 8811 	msr	BASEPRI, r0
 800b05a:	4770      	bx	lr
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst2>:
 800b060:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop

0800b068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b068:	4808      	ldr	r0, [pc, #32]	; (800b08c <prvPortStartFirstTask+0x24>)
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	f380 8808 	msr	MSP, r0
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f380 8814 	msr	CONTROL, r0
 800b07a:	b662      	cpsie	i
 800b07c:	b661      	cpsie	f
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	df00      	svc	0
 800b088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b08a:	bf00      	nop
 800b08c:	e000ed08 	.word	0xe000ed08

0800b090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b096:	4b46      	ldr	r3, [pc, #280]	; (800b1b0 <xPortStartScheduler+0x120>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a46      	ldr	r2, [pc, #280]	; (800b1b4 <xPortStartScheduler+0x124>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d10a      	bne.n	800b0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	613b      	str	r3, [r7, #16]
}
 800b0b2:	bf00      	nop
 800b0b4:	e7fe      	b.n	800b0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0b6:	4b3e      	ldr	r3, [pc, #248]	; (800b1b0 <xPortStartScheduler+0x120>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a3f      	ldr	r2, [pc, #252]	; (800b1b8 <xPortStartScheduler+0x128>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d10a      	bne.n	800b0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	60fb      	str	r3, [r7, #12]
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0d6:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <xPortStartScheduler+0x12c>)
 800b0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	22ff      	movs	r2, #255	; 0xff
 800b0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0f0:	78fb      	ldrb	r3, [r7, #3]
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	4b31      	ldr	r3, [pc, #196]	; (800b1c0 <xPortStartScheduler+0x130>)
 800b0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0fe:	4b31      	ldr	r3, [pc, #196]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b100:	2207      	movs	r2, #7
 800b102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b104:	e009      	b.n	800b11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b106:	4b2f      	ldr	r3, [pc, #188]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	4a2d      	ldr	r2, [pc, #180]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	b2db      	uxtb	r3, r3
 800b118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b11a:	78fb      	ldrb	r3, [r7, #3]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b122:	2b80      	cmp	r3, #128	; 0x80
 800b124:	d0ef      	beq.n	800b106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b126:	4b27      	ldr	r3, [pc, #156]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f1c3 0307 	rsb	r3, r3, #7
 800b12e:	2b04      	cmp	r3, #4
 800b130:	d00a      	beq.n	800b148 <xPortStartScheduler+0xb8>
	__asm volatile
 800b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	60bb      	str	r3, [r7, #8]
}
 800b144:	bf00      	nop
 800b146:	e7fe      	b.n	800b146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b148:	4b1e      	ldr	r3, [pc, #120]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	4a1d      	ldr	r2, [pc, #116]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b15a:	4a1a      	ldr	r2, [pc, #104]	; (800b1c4 <xPortStartScheduler+0x134>)
 800b15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	b2da      	uxtb	r2, r3
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b166:	4b18      	ldr	r3, [pc, #96]	; (800b1c8 <xPortStartScheduler+0x138>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <xPortStartScheduler+0x138>)
 800b16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <xPortStartScheduler+0x138>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a14      	ldr	r2, [pc, #80]	; (800b1c8 <xPortStartScheduler+0x138>)
 800b178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b17e:	f000 f8dd 	bl	800b33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b182:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <xPortStartScheduler+0x13c>)
 800b184:	2200      	movs	r2, #0
 800b186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b188:	f000 f8fc 	bl	800b384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b18c:	4b10      	ldr	r3, [pc, #64]	; (800b1d0 <xPortStartScheduler+0x140>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a0f      	ldr	r2, [pc, #60]	; (800b1d0 <xPortStartScheduler+0x140>)
 800b192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b198:	f7ff ff66 	bl	800b068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b19c:	f7ff f850 	bl	800a240 <vTaskSwitchContext>
	prvTaskExitError();
 800b1a0:	f7ff ff1c 	bl	800afdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	e000ed00 	.word	0xe000ed00
 800b1b4:	410fc271 	.word	0x410fc271
 800b1b8:	410fc270 	.word	0x410fc270
 800b1bc:	e000e400 	.word	0xe000e400
 800b1c0:	20000df8 	.word	0x20000df8
 800b1c4:	20000dfc 	.word	0x20000dfc
 800b1c8:	e000ed20 	.word	0xe000ed20
 800b1cc:	2000000c 	.word	0x2000000c
 800b1d0:	e000ef34 	.word	0xe000ef34

0800b1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	607b      	str	r3, [r7, #4]
}
 800b1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <vPortEnterCritical+0x58>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	4a0d      	ldr	r2, [pc, #52]	; (800b22c <vPortEnterCritical+0x58>)
 800b1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1f8:	4b0c      	ldr	r3, [pc, #48]	; (800b22c <vPortEnterCritical+0x58>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d10f      	bne.n	800b220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b200:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <vPortEnterCritical+0x5c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00a      	beq.n	800b220 <vPortEnterCritical+0x4c>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	603b      	str	r3, [r7, #0]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <vPortEnterCritical+0x4a>
	}
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	2000000c 	.word	0x2000000c
 800b230:	e000ed04 	.word	0xe000ed04

0800b234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <vPortExitCritical+0x50>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10a      	bne.n	800b258 <vPortExitCritical+0x24>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	607b      	str	r3, [r7, #4]
}
 800b254:	bf00      	nop
 800b256:	e7fe      	b.n	800b256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b258:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <vPortExitCritical+0x50>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	4a09      	ldr	r2, [pc, #36]	; (800b284 <vPortExitCritical+0x50>)
 800b260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b262:	4b08      	ldr	r3, [pc, #32]	; (800b284 <vPortExitCritical+0x50>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d105      	bne.n	800b276 <vPortExitCritical+0x42>
 800b26a:	2300      	movs	r3, #0
 800b26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f383 8811 	msr	BASEPRI, r3
}
 800b274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b276:	bf00      	nop
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	2000000c 	.word	0x2000000c
	...

0800b290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b290:	f3ef 8009 	mrs	r0, PSP
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <pxCurrentTCBConst>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	f01e 0f10 	tst.w	lr, #16
 800b2a0:	bf08      	it	eq
 800b2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2aa:	6010      	str	r0, [r2, #0]
 800b2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b2b4:	f380 8811 	msr	BASEPRI, r0
 800b2b8:	f3bf 8f4f 	dsb	sy
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f7fe ffbe 	bl	800a240 <vTaskSwitchContext>
 800b2c4:	f04f 0000 	mov.w	r0, #0
 800b2c8:	f380 8811 	msr	BASEPRI, r0
 800b2cc:	bc09      	pop	{r0, r3}
 800b2ce:	6819      	ldr	r1, [r3, #0]
 800b2d0:	6808      	ldr	r0, [r1, #0]
 800b2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d6:	f01e 0f10 	tst.w	lr, #16
 800b2da:	bf08      	it	eq
 800b2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2e0:	f380 8809 	msr	PSP, r0
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	f3af 8000 	nop.w

0800b2f0 <pxCurrentTCBConst>:
 800b2f0:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop

0800b2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	607b      	str	r3, [r7, #4]
}
 800b310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b312:	f7fe fedb 	bl	800a0cc <xTaskIncrementTick>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d003      	beq.n	800b324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b31c:	4b06      	ldr	r3, [pc, #24]	; (800b338 <xPortSysTickHandler+0x40>)
 800b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	2300      	movs	r3, #0
 800b326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	f383 8811 	msr	BASEPRI, r3
}
 800b32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b330:	bf00      	nop
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <vPortSetupTimerInterrupt+0x34>)
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <vPortSetupTimerInterrupt+0x38>)
 800b348:	2200      	movs	r2, #0
 800b34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b34c:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <vPortSetupTimerInterrupt+0x3c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a0a      	ldr	r2, [pc, #40]	; (800b37c <vPortSetupTimerInterrupt+0x40>)
 800b352:	fba2 2303 	umull	r2, r3, r2, r3
 800b356:	099b      	lsrs	r3, r3, #6
 800b358:	4a09      	ldr	r2, [pc, #36]	; (800b380 <vPortSetupTimerInterrupt+0x44>)
 800b35a:	3b01      	subs	r3, #1
 800b35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b35e:	4b04      	ldr	r3, [pc, #16]	; (800b370 <vPortSetupTimerInterrupt+0x34>)
 800b360:	2207      	movs	r2, #7
 800b362:	601a      	str	r2, [r3, #0]
}
 800b364:	bf00      	nop
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	e000e010 	.word	0xe000e010
 800b374:	e000e018 	.word	0xe000e018
 800b378:	20000000 	.word	0x20000000
 800b37c:	10624dd3 	.word	0x10624dd3
 800b380:	e000e014 	.word	0xe000e014

0800b384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b394 <vPortEnableVFP+0x10>
 800b388:	6801      	ldr	r1, [r0, #0]
 800b38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b38e:	6001      	str	r1, [r0, #0]
 800b390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b392:	bf00      	nop
 800b394:	e000ed88 	.word	0xe000ed88

0800b398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b39e:	f3ef 8305 	mrs	r3, IPSR
 800b3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b0f      	cmp	r3, #15
 800b3a8:	d914      	bls.n	800b3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3aa:	4a17      	ldr	r2, [pc, #92]	; (800b408 <vPortValidateInterruptPriority+0x70>)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3b4:	4b15      	ldr	r3, [pc, #84]	; (800b40c <vPortValidateInterruptPriority+0x74>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	7afa      	ldrb	r2, [r7, #11]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d20a      	bcs.n	800b3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c2:	f383 8811 	msr	BASEPRI, r3
 800b3c6:	f3bf 8f6f 	isb	sy
 800b3ca:	f3bf 8f4f 	dsb	sy
 800b3ce:	607b      	str	r3, [r7, #4]
}
 800b3d0:	bf00      	nop
 800b3d2:	e7fe      	b.n	800b3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3d4:	4b0e      	ldr	r3, [pc, #56]	; (800b410 <vPortValidateInterruptPriority+0x78>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3dc:	4b0d      	ldr	r3, [pc, #52]	; (800b414 <vPortValidateInterruptPriority+0x7c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d90a      	bls.n	800b3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	603b      	str	r3, [r7, #0]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <vPortValidateInterruptPriority+0x60>
	}
 800b3fa:	bf00      	nop
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	e000e3f0 	.word	0xe000e3f0
 800b40c:	20000df8 	.word	0x20000df8
 800b410:	e000ed0c 	.word	0xe000ed0c
 800b414:	20000dfc 	.word	0x20000dfc

0800b418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08a      	sub	sp, #40	; 0x28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b420:	2300      	movs	r3, #0
 800b422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b424:	f7fe fd96 	bl	8009f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b428:	4b5b      	ldr	r3, [pc, #364]	; (800b598 <pvPortMalloc+0x180>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b430:	f000 f920 	bl	800b674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b434:	4b59      	ldr	r3, [pc, #356]	; (800b59c <pvPortMalloc+0x184>)
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 8093 	bne.w	800b568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d01d      	beq.n	800b484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b448:	2208      	movs	r2, #8
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4413      	add	r3, r2
 800b44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f023 0307 	bic.w	r3, r3, #7
 800b460:	3308      	adds	r3, #8
 800b462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f003 0307 	and.w	r3, r3, #7
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <pvPortMalloc+0x6c>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	617b      	str	r3, [r7, #20]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d06e      	beq.n	800b568 <pvPortMalloc+0x150>
 800b48a:	4b45      	ldr	r3, [pc, #276]	; (800b5a0 <pvPortMalloc+0x188>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	429a      	cmp	r2, r3
 800b492:	d869      	bhi.n	800b568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b494:	4b43      	ldr	r3, [pc, #268]	; (800b5a4 <pvPortMalloc+0x18c>)
 800b496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b498:	4b42      	ldr	r3, [pc, #264]	; (800b5a4 <pvPortMalloc+0x18c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b49e:	e004      	b.n	800b4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d903      	bls.n	800b4bc <pvPortMalloc+0xa4>
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f1      	bne.n	800b4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4bc:	4b36      	ldr	r3, [pc, #216]	; (800b598 <pvPortMalloc+0x180>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d050      	beq.n	800b568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2208      	movs	r2, #8
 800b4cc:	4413      	add	r3, r2
 800b4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	685a      	ldr	r2, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	1ad2      	subs	r2, r2, r3
 800b4e0:	2308      	movs	r3, #8
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d91f      	bls.n	800b528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	f003 0307 	and.w	r3, r3, #7
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <pvPortMalloc+0xf8>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	613b      	str	r3, [r7, #16]
}
 800b50c:	bf00      	nop
 800b50e:	e7fe      	b.n	800b50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	1ad2      	subs	r2, r2, r3
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b522:	69b8      	ldr	r0, [r7, #24]
 800b524:	f000 f908 	bl	800b738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b528:	4b1d      	ldr	r3, [pc, #116]	; (800b5a0 <pvPortMalloc+0x188>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	1ad3      	subs	r3, r2, r3
 800b532:	4a1b      	ldr	r2, [pc, #108]	; (800b5a0 <pvPortMalloc+0x188>)
 800b534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <pvPortMalloc+0x188>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	4b1b      	ldr	r3, [pc, #108]	; (800b5a8 <pvPortMalloc+0x190>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d203      	bcs.n	800b54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b542:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <pvPortMalloc+0x188>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <pvPortMalloc+0x190>)
 800b548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	4b13      	ldr	r3, [pc, #76]	; (800b59c <pvPortMalloc+0x184>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	431a      	orrs	r2, r3
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b55e:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <pvPortMalloc+0x194>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	4a11      	ldr	r2, [pc, #68]	; (800b5ac <pvPortMalloc+0x194>)
 800b566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b568:	f7fe fd02 	bl	8009f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	f003 0307 	and.w	r3, r3, #7
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00a      	beq.n	800b58c <pvPortMalloc+0x174>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	60fb      	str	r3, [r7, #12]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <pvPortMalloc+0x172>
	return pvReturn;
 800b58c:	69fb      	ldr	r3, [r7, #28]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3728      	adds	r7, #40	; 0x28
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20001a08 	.word	0x20001a08
 800b59c:	20001a1c 	.word	0x20001a1c
 800b5a0:	20001a0c 	.word	0x20001a0c
 800b5a4:	20001a00 	.word	0x20001a00
 800b5a8:	20001a10 	.word	0x20001a10
 800b5ac:	20001a14 	.word	0x20001a14

0800b5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d04d      	beq.n	800b65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	425b      	negs	r3, r3
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	4b24      	ldr	r3, [pc, #144]	; (800b668 <vPortFree+0xb8>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <vPortFree+0x44>
	__asm volatile
 800b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	60fb      	str	r3, [r7, #12]
}
 800b5f0:	bf00      	nop
 800b5f2:	e7fe      	b.n	800b5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <vPortFree+0x62>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	f383 8811 	msr	BASEPRI, r3
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	f3bf 8f4f 	dsb	sy
 800b60c:	60bb      	str	r3, [r7, #8]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	4b14      	ldr	r3, [pc, #80]	; (800b668 <vPortFree+0xb8>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4013      	ands	r3, r2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d01e      	beq.n	800b65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d11a      	bne.n	800b65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	4b0e      	ldr	r3, [pc, #56]	; (800b668 <vPortFree+0xb8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	43db      	mvns	r3, r3
 800b632:	401a      	ands	r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b638:	f7fe fc8c 	bl	8009f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <vPortFree+0xbc>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4413      	add	r3, r2
 800b646:	4a09      	ldr	r2, [pc, #36]	; (800b66c <vPortFree+0xbc>)
 800b648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b64a:	6938      	ldr	r0, [r7, #16]
 800b64c:	f000 f874 	bl	800b738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b650:	4b07      	ldr	r3, [pc, #28]	; (800b670 <vPortFree+0xc0>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	4a06      	ldr	r2, [pc, #24]	; (800b670 <vPortFree+0xc0>)
 800b658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b65a:	f7fe fc89 	bl	8009f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b65e:	bf00      	nop
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20001a1c 	.word	0x20001a1c
 800b66c:	20001a0c 	.word	0x20001a0c
 800b670:	20001a18 	.word	0x20001a18

0800b674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b67a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b680:	4b27      	ldr	r3, [pc, #156]	; (800b720 <prvHeapInit+0xac>)
 800b682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00c      	beq.n	800b6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	3307      	adds	r3, #7
 800b692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 0307 	bic.w	r3, r3, #7
 800b69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b69c:	68ba      	ldr	r2, [r7, #8]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	4a1f      	ldr	r2, [pc, #124]	; (800b720 <prvHeapInit+0xac>)
 800b6a4:	4413      	add	r3, r2
 800b6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6ac:	4a1d      	ldr	r2, [pc, #116]	; (800b724 <prvHeapInit+0xb0>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6b2:	4b1c      	ldr	r3, [pc, #112]	; (800b724 <prvHeapInit+0xb0>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	4413      	add	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6c0:	2208      	movs	r2, #8
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	1a9b      	subs	r3, r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f023 0307 	bic.w	r3, r3, #7
 800b6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4a15      	ldr	r2, [pc, #84]	; (800b728 <prvHeapInit+0xb4>)
 800b6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6d6:	4b14      	ldr	r3, [pc, #80]	; (800b728 <prvHeapInit+0xb4>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6de:	4b12      	ldr	r3, [pc, #72]	; (800b728 <prvHeapInit+0xb4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6f4:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <prvHeapInit+0xb4>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	4a0a      	ldr	r2, [pc, #40]	; (800b72c <prvHeapInit+0xb8>)
 800b702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	4a09      	ldr	r2, [pc, #36]	; (800b730 <prvHeapInit+0xbc>)
 800b70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <prvHeapInit+0xc0>)
 800b70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	3714      	adds	r7, #20
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	20000e00 	.word	0x20000e00
 800b724:	20001a00 	.word	0x20001a00
 800b728:	20001a08 	.word	0x20001a08
 800b72c:	20001a10 	.word	0x20001a10
 800b730:	20001a0c 	.word	0x20001a0c
 800b734:	20001a1c 	.word	0x20001a1c

0800b738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b740:	4b28      	ldr	r3, [pc, #160]	; (800b7e4 <prvInsertBlockIntoFreeList+0xac>)
 800b742:	60fb      	str	r3, [r7, #12]
 800b744:	e002      	b.n	800b74c <prvInsertBlockIntoFreeList+0x14>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	429a      	cmp	r2, r3
 800b754:	d8f7      	bhi.n	800b746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	4413      	add	r3, r2
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	d108      	bne.n	800b77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	441a      	add	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	441a      	add	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d118      	bne.n	800b7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	4b15      	ldr	r3, [pc, #84]	; (800b7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	429a      	cmp	r2, r3
 800b798:	d00d      	beq.n	800b7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	441a      	add	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
 800b7b4:	e008      	b.n	800b7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7b6:	4b0c      	ldr	r3, [pc, #48]	; (800b7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	e003      	b.n	800b7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d002      	beq.n	800b7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7d6:	bf00      	nop
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	20001a00 	.word	0x20001a00
 800b7e8:	20001a08 	.word	0x20001a08

0800b7ec <__errno>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	; (800b7f4 <__errno+0x8>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000010 	.word	0x20000010

0800b7f8 <__libc_init_array>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4d0d      	ldr	r5, [pc, #52]	; (800b830 <__libc_init_array+0x38>)
 800b7fc:	4c0d      	ldr	r4, [pc, #52]	; (800b834 <__libc_init_array+0x3c>)
 800b7fe:	1b64      	subs	r4, r4, r5
 800b800:	10a4      	asrs	r4, r4, #2
 800b802:	2600      	movs	r6, #0
 800b804:	42a6      	cmp	r6, r4
 800b806:	d109      	bne.n	800b81c <__libc_init_array+0x24>
 800b808:	4d0b      	ldr	r5, [pc, #44]	; (800b838 <__libc_init_array+0x40>)
 800b80a:	4c0c      	ldr	r4, [pc, #48]	; (800b83c <__libc_init_array+0x44>)
 800b80c:	f002 faaa 	bl	800dd64 <_init>
 800b810:	1b64      	subs	r4, r4, r5
 800b812:	10a4      	asrs	r4, r4, #2
 800b814:	2600      	movs	r6, #0
 800b816:	42a6      	cmp	r6, r4
 800b818:	d105      	bne.n	800b826 <__libc_init_array+0x2e>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b820:	4798      	blx	r3
 800b822:	3601      	adds	r6, #1
 800b824:	e7ee      	b.n	800b804 <__libc_init_array+0xc>
 800b826:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82a:	4798      	blx	r3
 800b82c:	3601      	adds	r6, #1
 800b82e:	e7f2      	b.n	800b816 <__libc_init_array+0x1e>
 800b830:	0800e158 	.word	0x0800e158
 800b834:	0800e158 	.word	0x0800e158
 800b838:	0800e158 	.word	0x0800e158
 800b83c:	0800e15c 	.word	0x0800e15c

0800b840 <memcpy>:
 800b840:	440a      	add	r2, r1
 800b842:	4291      	cmp	r1, r2
 800b844:	f100 33ff 	add.w	r3, r0, #4294967295
 800b848:	d100      	bne.n	800b84c <memcpy+0xc>
 800b84a:	4770      	bx	lr
 800b84c:	b510      	push	{r4, lr}
 800b84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b856:	4291      	cmp	r1, r2
 800b858:	d1f9      	bne.n	800b84e <memcpy+0xe>
 800b85a:	bd10      	pop	{r4, pc}

0800b85c <memset>:
 800b85c:	4402      	add	r2, r0
 800b85e:	4603      	mov	r3, r0
 800b860:	4293      	cmp	r3, r2
 800b862:	d100      	bne.n	800b866 <memset+0xa>
 800b864:	4770      	bx	lr
 800b866:	f803 1b01 	strb.w	r1, [r3], #1
 800b86a:	e7f9      	b.n	800b860 <memset+0x4>
 800b86c:	0000      	movs	r0, r0
	...

0800b870 <cos>:
 800b870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b872:	ec53 2b10 	vmov	r2, r3, d0
 800b876:	4824      	ldr	r0, [pc, #144]	; (800b908 <cos+0x98>)
 800b878:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b87c:	4281      	cmp	r1, r0
 800b87e:	dc06      	bgt.n	800b88e <cos+0x1e>
 800b880:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800b900 <cos+0x90>
 800b884:	f001 fbf8 	bl	800d078 <__kernel_cos>
 800b888:	ec51 0b10 	vmov	r0, r1, d0
 800b88c:	e007      	b.n	800b89e <cos+0x2e>
 800b88e:	481f      	ldr	r0, [pc, #124]	; (800b90c <cos+0x9c>)
 800b890:	4281      	cmp	r1, r0
 800b892:	dd09      	ble.n	800b8a8 <cos+0x38>
 800b894:	ee10 0a10 	vmov	r0, s0
 800b898:	4619      	mov	r1, r3
 800b89a:	f7f4 fcc5 	bl	8000228 <__aeabi_dsub>
 800b89e:	ec41 0b10 	vmov	d0, r0, r1
 800b8a2:	b005      	add	sp, #20
 800b8a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8a8:	4668      	mov	r0, sp
 800b8aa:	f001 f925 	bl	800caf8 <__ieee754_rem_pio2>
 800b8ae:	f000 0003 	and.w	r0, r0, #3
 800b8b2:	2801      	cmp	r0, #1
 800b8b4:	d007      	beq.n	800b8c6 <cos+0x56>
 800b8b6:	2802      	cmp	r0, #2
 800b8b8:	d012      	beq.n	800b8e0 <cos+0x70>
 800b8ba:	b9c0      	cbnz	r0, 800b8ee <cos+0x7e>
 800b8bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8c0:	ed9d 0b00 	vldr	d0, [sp]
 800b8c4:	e7de      	b.n	800b884 <cos+0x14>
 800b8c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8ca:	ed9d 0b00 	vldr	d0, [sp]
 800b8ce:	f001 ffdb 	bl	800d888 <__kernel_sin>
 800b8d2:	ec53 2b10 	vmov	r2, r3, d0
 800b8d6:	ee10 0a10 	vmov	r0, s0
 800b8da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b8de:	e7de      	b.n	800b89e <cos+0x2e>
 800b8e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8e4:	ed9d 0b00 	vldr	d0, [sp]
 800b8e8:	f001 fbc6 	bl	800d078 <__kernel_cos>
 800b8ec:	e7f1      	b.n	800b8d2 <cos+0x62>
 800b8ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8f2:	ed9d 0b00 	vldr	d0, [sp]
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	f001 ffc6 	bl	800d888 <__kernel_sin>
 800b8fc:	e7c4      	b.n	800b888 <cos+0x18>
 800b8fe:	bf00      	nop
	...
 800b908:	3fe921fb 	.word	0x3fe921fb
 800b90c:	7fefffff 	.word	0x7fefffff

0800b910 <sin>:
 800b910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b912:	ec53 2b10 	vmov	r2, r3, d0
 800b916:	4826      	ldr	r0, [pc, #152]	; (800b9b0 <sin+0xa0>)
 800b918:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b91c:	4281      	cmp	r1, r0
 800b91e:	dc07      	bgt.n	800b930 <sin+0x20>
 800b920:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b9a8 <sin+0x98>
 800b924:	2000      	movs	r0, #0
 800b926:	f001 ffaf 	bl	800d888 <__kernel_sin>
 800b92a:	ec51 0b10 	vmov	r0, r1, d0
 800b92e:	e007      	b.n	800b940 <sin+0x30>
 800b930:	4820      	ldr	r0, [pc, #128]	; (800b9b4 <sin+0xa4>)
 800b932:	4281      	cmp	r1, r0
 800b934:	dd09      	ble.n	800b94a <sin+0x3a>
 800b936:	ee10 0a10 	vmov	r0, s0
 800b93a:	4619      	mov	r1, r3
 800b93c:	f7f4 fc74 	bl	8000228 <__aeabi_dsub>
 800b940:	ec41 0b10 	vmov	d0, r0, r1
 800b944:	b005      	add	sp, #20
 800b946:	f85d fb04 	ldr.w	pc, [sp], #4
 800b94a:	4668      	mov	r0, sp
 800b94c:	f001 f8d4 	bl	800caf8 <__ieee754_rem_pio2>
 800b950:	f000 0003 	and.w	r0, r0, #3
 800b954:	2801      	cmp	r0, #1
 800b956:	d008      	beq.n	800b96a <sin+0x5a>
 800b958:	2802      	cmp	r0, #2
 800b95a:	d00d      	beq.n	800b978 <sin+0x68>
 800b95c:	b9d0      	cbnz	r0, 800b994 <sin+0x84>
 800b95e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b962:	ed9d 0b00 	vldr	d0, [sp]
 800b966:	2001      	movs	r0, #1
 800b968:	e7dd      	b.n	800b926 <sin+0x16>
 800b96a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b96e:	ed9d 0b00 	vldr	d0, [sp]
 800b972:	f001 fb81 	bl	800d078 <__kernel_cos>
 800b976:	e7d8      	b.n	800b92a <sin+0x1a>
 800b978:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b97c:	ed9d 0b00 	vldr	d0, [sp]
 800b980:	2001      	movs	r0, #1
 800b982:	f001 ff81 	bl	800d888 <__kernel_sin>
 800b986:	ec53 2b10 	vmov	r2, r3, d0
 800b98a:	ee10 0a10 	vmov	r0, s0
 800b98e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b992:	e7d5      	b.n	800b940 <sin+0x30>
 800b994:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b998:	ed9d 0b00 	vldr	d0, [sp]
 800b99c:	f001 fb6c 	bl	800d078 <__kernel_cos>
 800b9a0:	e7f1      	b.n	800b986 <sin+0x76>
 800b9a2:	bf00      	nop
 800b9a4:	f3af 8000 	nop.w
	...
 800b9b0:	3fe921fb 	.word	0x3fe921fb
 800b9b4:	7fefffff 	.word	0x7fefffff

0800b9b8 <acos>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	ed2d 8b02 	vpush	{d8}
 800b9be:	ec55 4b10 	vmov	r4, r5, d0
 800b9c2:	f000 f915 	bl	800bbf0 <__ieee754_acos>
 800b9c6:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <acos+0x68>)
 800b9c8:	eeb0 8a40 	vmov.f32	s16, s0
 800b9cc:	eef0 8a60 	vmov.f32	s17, s1
 800b9d0:	f993 3000 	ldrsb.w	r3, [r3]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	d01c      	beq.n	800ba12 <acos+0x5a>
 800b9d8:	4622      	mov	r2, r4
 800b9da:	462b      	mov	r3, r5
 800b9dc:	4620      	mov	r0, r4
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7f5 f874 	bl	8000acc <__aeabi_dcmpun>
 800b9e4:	b9a8      	cbnz	r0, 800ba12 <acos+0x5a>
 800b9e6:	ec45 4b10 	vmov	d0, r4, r5
 800b9ea:	f002 f80b 	bl	800da04 <fabs>
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <acos+0x6c>)
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f7f5 f85f 	bl	8000ab8 <__aeabi_dcmpgt>
 800b9fa:	b150      	cbz	r0, 800ba12 <acos+0x5a>
 800b9fc:	f7ff fef6 	bl	800b7ec <__errno>
 800ba00:	ecbd 8b02 	vpop	{d8}
 800ba04:	2321      	movs	r3, #33	; 0x21
 800ba06:	6003      	str	r3, [r0, #0]
 800ba08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba0c:	4806      	ldr	r0, [pc, #24]	; (800ba28 <acos+0x70>)
 800ba0e:	f002 b88f 	b.w	800db30 <nan>
 800ba12:	eeb0 0a48 	vmov.f32	s0, s16
 800ba16:	eef0 0a68 	vmov.f32	s1, s17
 800ba1a:	ecbd 8b02 	vpop	{d8}
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20000074 	.word	0x20000074
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	0800df30 	.word	0x0800df30

0800ba2c <pow>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	ec59 8b10 	vmov	r8, r9, d0
 800ba34:	ec57 6b11 	vmov	r6, r7, d1
 800ba38:	f000 fb3a 	bl	800c0b0 <__ieee754_pow>
 800ba3c:	4b4e      	ldr	r3, [pc, #312]	; (800bb78 <pow+0x14c>)
 800ba3e:	f993 3000 	ldrsb.w	r3, [r3]
 800ba42:	3301      	adds	r3, #1
 800ba44:	ec55 4b10 	vmov	r4, r5, d0
 800ba48:	d015      	beq.n	800ba76 <pow+0x4a>
 800ba4a:	4632      	mov	r2, r6
 800ba4c:	463b      	mov	r3, r7
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f5 f83b 	bl	8000acc <__aeabi_dcmpun>
 800ba56:	b970      	cbnz	r0, 800ba76 <pow+0x4a>
 800ba58:	4642      	mov	r2, r8
 800ba5a:	464b      	mov	r3, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f5 f834 	bl	8000acc <__aeabi_dcmpun>
 800ba64:	2200      	movs	r2, #0
 800ba66:	2300      	movs	r3, #0
 800ba68:	b148      	cbz	r0, 800ba7e <pow+0x52>
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f4 fffb 	bl	8000a68 <__aeabi_dcmpeq>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d17d      	bne.n	800bb72 <pow+0x146>
 800ba76:	ec45 4b10 	vmov	d0, r4, r5
 800ba7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f4 fff1 	bl	8000a68 <__aeabi_dcmpeq>
 800ba86:	b1e0      	cbz	r0, 800bac2 <pow+0x96>
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f4 ffea 	bl	8000a68 <__aeabi_dcmpeq>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d16c      	bne.n	800bb72 <pow+0x146>
 800ba98:	ec47 6b10 	vmov	d0, r6, r7
 800ba9c:	f001 ffbb 	bl	800da16 <finite>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0e8      	beq.n	800ba76 <pow+0x4a>
 800baa4:	2200      	movs	r2, #0
 800baa6:	2300      	movs	r3, #0
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f4 ffe6 	bl	8000a7c <__aeabi_dcmplt>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d0e0      	beq.n	800ba76 <pow+0x4a>
 800bab4:	f7ff fe9a 	bl	800b7ec <__errno>
 800bab8:	2321      	movs	r3, #33	; 0x21
 800baba:	6003      	str	r3, [r0, #0]
 800babc:	2400      	movs	r4, #0
 800babe:	4d2f      	ldr	r5, [pc, #188]	; (800bb7c <pow+0x150>)
 800bac0:	e7d9      	b.n	800ba76 <pow+0x4a>
 800bac2:	ec45 4b10 	vmov	d0, r4, r5
 800bac6:	f001 ffa6 	bl	800da16 <finite>
 800baca:	bbb8      	cbnz	r0, 800bb3c <pow+0x110>
 800bacc:	ec49 8b10 	vmov	d0, r8, r9
 800bad0:	f001 ffa1 	bl	800da16 <finite>
 800bad4:	b390      	cbz	r0, 800bb3c <pow+0x110>
 800bad6:	ec47 6b10 	vmov	d0, r6, r7
 800bada:	f001 ff9c 	bl	800da16 <finite>
 800bade:	b368      	cbz	r0, 800bb3c <pow+0x110>
 800bae0:	4622      	mov	r2, r4
 800bae2:	462b      	mov	r3, r5
 800bae4:	4620      	mov	r0, r4
 800bae6:	4629      	mov	r1, r5
 800bae8:	f7f4 fff0 	bl	8000acc <__aeabi_dcmpun>
 800baec:	b160      	cbz	r0, 800bb08 <pow+0xdc>
 800baee:	f7ff fe7d 	bl	800b7ec <__errno>
 800baf2:	2321      	movs	r3, #33	; 0x21
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	2200      	movs	r2, #0
 800baf8:	2300      	movs	r3, #0
 800bafa:	4610      	mov	r0, r2
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7f4 fe75 	bl	80007ec <__aeabi_ddiv>
 800bb02:	4604      	mov	r4, r0
 800bb04:	460d      	mov	r5, r1
 800bb06:	e7b6      	b.n	800ba76 <pow+0x4a>
 800bb08:	f7ff fe70 	bl	800b7ec <__errno>
 800bb0c:	2322      	movs	r3, #34	; 0x22
 800bb0e:	6003      	str	r3, [r0, #0]
 800bb10:	2200      	movs	r2, #0
 800bb12:	2300      	movs	r3, #0
 800bb14:	4640      	mov	r0, r8
 800bb16:	4649      	mov	r1, r9
 800bb18:	f7f4 ffb0 	bl	8000a7c <__aeabi_dcmplt>
 800bb1c:	2400      	movs	r4, #0
 800bb1e:	b158      	cbz	r0, 800bb38 <pow+0x10c>
 800bb20:	ec47 6b10 	vmov	d0, r6, r7
 800bb24:	f002 f80c 	bl	800db40 <rint>
 800bb28:	4632      	mov	r2, r6
 800bb2a:	ec51 0b10 	vmov	r0, r1, d0
 800bb2e:	463b      	mov	r3, r7
 800bb30:	f7f4 ff9a 	bl	8000a68 <__aeabi_dcmpeq>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d0c2      	beq.n	800babe <pow+0x92>
 800bb38:	4d11      	ldr	r5, [pc, #68]	; (800bb80 <pow+0x154>)
 800bb3a:	e79c      	b.n	800ba76 <pow+0x4a>
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 ff90 	bl	8000a68 <__aeabi_dcmpeq>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d094      	beq.n	800ba76 <pow+0x4a>
 800bb4c:	ec49 8b10 	vmov	d0, r8, r9
 800bb50:	f001 ff61 	bl	800da16 <finite>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d08e      	beq.n	800ba76 <pow+0x4a>
 800bb58:	ec47 6b10 	vmov	d0, r6, r7
 800bb5c:	f001 ff5b 	bl	800da16 <finite>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d088      	beq.n	800ba76 <pow+0x4a>
 800bb64:	f7ff fe42 	bl	800b7ec <__errno>
 800bb68:	2322      	movs	r3, #34	; 0x22
 800bb6a:	6003      	str	r3, [r0, #0]
 800bb6c:	2400      	movs	r4, #0
 800bb6e:	2500      	movs	r5, #0
 800bb70:	e781      	b.n	800ba76 <pow+0x4a>
 800bb72:	4d04      	ldr	r5, [pc, #16]	; (800bb84 <pow+0x158>)
 800bb74:	2400      	movs	r4, #0
 800bb76:	e77e      	b.n	800ba76 <pow+0x4a>
 800bb78:	20000074 	.word	0x20000074
 800bb7c:	fff00000 	.word	0xfff00000
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	3ff00000 	.word	0x3ff00000

0800bb88 <sqrt>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	ed2d 8b02 	vpush	{d8}
 800bb8e:	ec55 4b10 	vmov	r4, r5, d0
 800bb92:	f001 f9bb 	bl	800cf0c <__ieee754_sqrt>
 800bb96:	4b15      	ldr	r3, [pc, #84]	; (800bbec <sqrt+0x64>)
 800bb98:	eeb0 8a40 	vmov.f32	s16, s0
 800bb9c:	eef0 8a60 	vmov.f32	s17, s1
 800bba0:	f993 3000 	ldrsb.w	r3, [r3]
 800bba4:	3301      	adds	r3, #1
 800bba6:	d019      	beq.n	800bbdc <sqrt+0x54>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	462b      	mov	r3, r5
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 ff8c 	bl	8000acc <__aeabi_dcmpun>
 800bbb4:	b990      	cbnz	r0, 800bbdc <sqrt+0x54>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2300      	movs	r3, #0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7f4 ff5d 	bl	8000a7c <__aeabi_dcmplt>
 800bbc2:	b158      	cbz	r0, 800bbdc <sqrt+0x54>
 800bbc4:	f7ff fe12 	bl	800b7ec <__errno>
 800bbc8:	2321      	movs	r3, #33	; 0x21
 800bbca:	6003      	str	r3, [r0, #0]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	2300      	movs	r3, #0
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f7f4 fe0a 	bl	80007ec <__aeabi_ddiv>
 800bbd8:	ec41 0b18 	vmov	d8, r0, r1
 800bbdc:	eeb0 0a48 	vmov.f32	s0, s16
 800bbe0:	eef0 0a68 	vmov.f32	s1, s17
 800bbe4:	ecbd 8b02 	vpop	{d8}
 800bbe8:	bd38      	pop	{r3, r4, r5, pc}
 800bbea:	bf00      	nop
 800bbec:	20000074 	.word	0x20000074

0800bbf0 <__ieee754_acos>:
 800bbf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	ec55 4b10 	vmov	r4, r5, d0
 800bbf8:	49b7      	ldr	r1, [pc, #732]	; (800bed8 <__ieee754_acos+0x2e8>)
 800bbfa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bbfe:	428b      	cmp	r3, r1
 800bc00:	dd1b      	ble.n	800bc3a <__ieee754_acos+0x4a>
 800bc02:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800bc06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bc0a:	4323      	orrs	r3, r4
 800bc0c:	d106      	bne.n	800bc1c <__ieee754_acos+0x2c>
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	f300 8211 	bgt.w	800c036 <__ieee754_acos+0x446>
 800bc14:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800be70 <__ieee754_acos+0x280>
 800bc18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	ee10 2a10 	vmov	r2, s0
 800bc20:	462b      	mov	r3, r5
 800bc22:	ee10 0a10 	vmov	r0, s0
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fafe 	bl	8000228 <__aeabi_dsub>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	f7f4 fddc 	bl	80007ec <__aeabi_ddiv>
 800bc34:	ec41 0b10 	vmov	d0, r0, r1
 800bc38:	e7ee      	b.n	800bc18 <__ieee754_acos+0x28>
 800bc3a:	49a8      	ldr	r1, [pc, #672]	; (800bedc <__ieee754_acos+0x2ec>)
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	f300 8087 	bgt.w	800bd50 <__ieee754_acos+0x160>
 800bc42:	4aa7      	ldr	r2, [pc, #668]	; (800bee0 <__ieee754_acos+0x2f0>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	f340 81f9 	ble.w	800c03c <__ieee754_acos+0x44c>
 800bc4a:	ee10 2a10 	vmov	r2, s0
 800bc4e:	ee10 0a10 	vmov	r0, s0
 800bc52:	462b      	mov	r3, r5
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f4 fc9f 	bl	8000598 <__aeabi_dmul>
 800bc5a:	a387      	add	r3, pc, #540	; (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	4606      	mov	r6, r0
 800bc62:	460f      	mov	r7, r1
 800bc64:	f7f4 fc98 	bl	8000598 <__aeabi_dmul>
 800bc68:	a385      	add	r3, pc, #532	; (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f7f4 fadd 	bl	800022c <__adddf3>
 800bc72:	4632      	mov	r2, r6
 800bc74:	463b      	mov	r3, r7
 800bc76:	f7f4 fc8f 	bl	8000598 <__aeabi_dmul>
 800bc7a:	a383      	add	r3, pc, #524	; (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f7f4 fad2 	bl	8000228 <__aeabi_dsub>
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	f7f4 fc86 	bl	8000598 <__aeabi_dmul>
 800bc8c:	a380      	add	r3, pc, #512	; (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	f7f4 facb 	bl	800022c <__adddf3>
 800bc96:	4632      	mov	r2, r6
 800bc98:	463b      	mov	r3, r7
 800bc9a:	f7f4 fc7d 	bl	8000598 <__aeabi_dmul>
 800bc9e:	a37e      	add	r3, pc, #504	; (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	f7f4 fac0 	bl	8000228 <__aeabi_dsub>
 800bca8:	4632      	mov	r2, r6
 800bcaa:	463b      	mov	r3, r7
 800bcac:	f7f4 fc74 	bl	8000598 <__aeabi_dmul>
 800bcb0:	a37b      	add	r3, pc, #492	; (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fab9 	bl	800022c <__adddf3>
 800bcba:	4632      	mov	r2, r6
 800bcbc:	463b      	mov	r3, r7
 800bcbe:	f7f4 fc6b 	bl	8000598 <__aeabi_dmul>
 800bcc2:	a379      	add	r3, pc, #484	; (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4680      	mov	r8, r0
 800bcca:	4689      	mov	r9, r1
 800bccc:	4630      	mov	r0, r6
 800bcce:	4639      	mov	r1, r7
 800bcd0:	f7f4 fc62 	bl	8000598 <__aeabi_dmul>
 800bcd4:	a376      	add	r3, pc, #472	; (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f7f4 faa5 	bl	8000228 <__aeabi_dsub>
 800bcde:	4632      	mov	r2, r6
 800bce0:	463b      	mov	r3, r7
 800bce2:	f7f4 fc59 	bl	8000598 <__aeabi_dmul>
 800bce6:	a374      	add	r3, pc, #464	; (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800bce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcec:	f7f4 fa9e 	bl	800022c <__adddf3>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 fc50 	bl	8000598 <__aeabi_dmul>
 800bcf8:	a371      	add	r3, pc, #452	; (adr r3, 800bec0 <__ieee754_acos+0x2d0>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	f7f4 fa93 	bl	8000228 <__aeabi_dsub>
 800bd02:	4632      	mov	r2, r6
 800bd04:	463b      	mov	r3, r7
 800bd06:	f7f4 fc47 	bl	8000598 <__aeabi_dmul>
 800bd0a:	4b76      	ldr	r3, [pc, #472]	; (800bee4 <__ieee754_acos+0x2f4>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f7f4 fa8d 	bl	800022c <__adddf3>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4640      	mov	r0, r8
 800bd18:	4649      	mov	r1, r9
 800bd1a:	f7f4 fd67 	bl	80007ec <__aeabi_ddiv>
 800bd1e:	4622      	mov	r2, r4
 800bd20:	462b      	mov	r3, r5
 800bd22:	f7f4 fc39 	bl	8000598 <__aeabi_dmul>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	a167      	add	r1, pc, #412	; (adr r1, 800bec8 <__ieee754_acos+0x2d8>)
 800bd2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd30:	f7f4 fa7a 	bl	8000228 <__aeabi_dsub>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	4620      	mov	r0, r4
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f7f4 fa74 	bl	8000228 <__aeabi_dsub>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	a162      	add	r1, pc, #392	; (adr r1, 800bed0 <__ieee754_acos+0x2e0>)
 800bd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd4a:	f7f4 fa6d 	bl	8000228 <__aeabi_dsub>
 800bd4e:	e771      	b.n	800bc34 <__ieee754_acos+0x44>
 800bd50:	2d00      	cmp	r5, #0
 800bd52:	f280 80cb 	bge.w	800beec <__ieee754_acos+0x2fc>
 800bd56:	ee10 0a10 	vmov	r0, s0
 800bd5a:	4b62      	ldr	r3, [pc, #392]	; (800bee4 <__ieee754_acos+0x2f4>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fa64 	bl	800022c <__adddf3>
 800bd64:	4b60      	ldr	r3, [pc, #384]	; (800bee8 <__ieee754_acos+0x2f8>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fc16 	bl	8000598 <__aeabi_dmul>
 800bd6c:	a342      	add	r3, pc, #264	; (adr r3, 800be78 <__ieee754_acos+0x288>)
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	4604      	mov	r4, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	f7f4 fc0f 	bl	8000598 <__aeabi_dmul>
 800bd7a:	a341      	add	r3, pc, #260	; (adr r3, 800be80 <__ieee754_acos+0x290>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	f7f4 fa54 	bl	800022c <__adddf3>
 800bd84:	4622      	mov	r2, r4
 800bd86:	462b      	mov	r3, r5
 800bd88:	f7f4 fc06 	bl	8000598 <__aeabi_dmul>
 800bd8c:	a33e      	add	r3, pc, #248	; (adr r3, 800be88 <__ieee754_acos+0x298>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa49 	bl	8000228 <__aeabi_dsub>
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	f7f4 fbfd 	bl	8000598 <__aeabi_dmul>
 800bd9e:	a33c      	add	r3, pc, #240	; (adr r3, 800be90 <__ieee754_acos+0x2a0>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	f7f4 fa42 	bl	800022c <__adddf3>
 800bda8:	4622      	mov	r2, r4
 800bdaa:	462b      	mov	r3, r5
 800bdac:	f7f4 fbf4 	bl	8000598 <__aeabi_dmul>
 800bdb0:	a339      	add	r3, pc, #228	; (adr r3, 800be98 <__ieee754_acos+0x2a8>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fa37 	bl	8000228 <__aeabi_dsub>
 800bdba:	4622      	mov	r2, r4
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	f7f4 fbeb 	bl	8000598 <__aeabi_dmul>
 800bdc2:	a337      	add	r3, pc, #220	; (adr r3, 800bea0 <__ieee754_acos+0x2b0>)
 800bdc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc8:	f7f4 fa30 	bl	800022c <__adddf3>
 800bdcc:	4622      	mov	r2, r4
 800bdce:	462b      	mov	r3, r5
 800bdd0:	f7f4 fbe2 	bl	8000598 <__aeabi_dmul>
 800bdd4:	ec45 4b10 	vmov	d0, r4, r5
 800bdd8:	4680      	mov	r8, r0
 800bdda:	4689      	mov	r9, r1
 800bddc:	f001 f896 	bl	800cf0c <__ieee754_sqrt>
 800bde0:	a331      	add	r3, pc, #196	; (adr r3, 800bea8 <__ieee754_acos+0x2b8>)
 800bde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde6:	4620      	mov	r0, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	ec57 6b10 	vmov	r6, r7, d0
 800bdee:	f7f4 fbd3 	bl	8000598 <__aeabi_dmul>
 800bdf2:	a32f      	add	r3, pc, #188	; (adr r3, 800beb0 <__ieee754_acos+0x2c0>)
 800bdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf8:	f7f4 fa16 	bl	8000228 <__aeabi_dsub>
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	462b      	mov	r3, r5
 800be00:	f7f4 fbca 	bl	8000598 <__aeabi_dmul>
 800be04:	a32c      	add	r3, pc, #176	; (adr r3, 800beb8 <__ieee754_acos+0x2c8>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f7f4 fa0f 	bl	800022c <__adddf3>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	f7f4 fbc1 	bl	8000598 <__aeabi_dmul>
 800be16:	a32a      	add	r3, pc, #168	; (adr r3, 800bec0 <__ieee754_acos+0x2d0>)
 800be18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1c:	f7f4 fa04 	bl	8000228 <__aeabi_dsub>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fbb8 	bl	8000598 <__aeabi_dmul>
 800be28:	4b2e      	ldr	r3, [pc, #184]	; (800bee4 <__ieee754_acos+0x2f4>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 f9fe 	bl	800022c <__adddf3>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 fcd8 	bl	80007ec <__aeabi_ddiv>
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	f7f4 fbaa 	bl	8000598 <__aeabi_dmul>
 800be44:	a320      	add	r3, pc, #128	; (adr r3, 800bec8 <__ieee754_acos+0x2d8>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 f9ed 	bl	8000228 <__aeabi_dsub>
 800be4e:	4632      	mov	r2, r6
 800be50:	463b      	mov	r3, r7
 800be52:	f7f4 f9eb 	bl	800022c <__adddf3>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	f7f4 f9e7 	bl	800022c <__adddf3>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	a103      	add	r1, pc, #12	; (adr r1, 800be70 <__ieee754_acos+0x280>)
 800be64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be68:	e76f      	b.n	800bd4a <__ieee754_acos+0x15a>
 800be6a:	bf00      	nop
 800be6c:	f3af 8000 	nop.w
 800be70:	54442d18 	.word	0x54442d18
 800be74:	400921fb 	.word	0x400921fb
 800be78:	0dfdf709 	.word	0x0dfdf709
 800be7c:	3f023de1 	.word	0x3f023de1
 800be80:	7501b288 	.word	0x7501b288
 800be84:	3f49efe0 	.word	0x3f49efe0
 800be88:	b5688f3b 	.word	0xb5688f3b
 800be8c:	3fa48228 	.word	0x3fa48228
 800be90:	0e884455 	.word	0x0e884455
 800be94:	3fc9c155 	.word	0x3fc9c155
 800be98:	03eb6f7d 	.word	0x03eb6f7d
 800be9c:	3fd4d612 	.word	0x3fd4d612
 800bea0:	55555555 	.word	0x55555555
 800bea4:	3fc55555 	.word	0x3fc55555
 800bea8:	b12e9282 	.word	0xb12e9282
 800beac:	3fb3b8c5 	.word	0x3fb3b8c5
 800beb0:	1b8d0159 	.word	0x1b8d0159
 800beb4:	3fe6066c 	.word	0x3fe6066c
 800beb8:	9c598ac8 	.word	0x9c598ac8
 800bebc:	40002ae5 	.word	0x40002ae5
 800bec0:	1c8a2d4b 	.word	0x1c8a2d4b
 800bec4:	40033a27 	.word	0x40033a27
 800bec8:	33145c07 	.word	0x33145c07
 800becc:	3c91a626 	.word	0x3c91a626
 800bed0:	54442d18 	.word	0x54442d18
 800bed4:	3ff921fb 	.word	0x3ff921fb
 800bed8:	3fefffff 	.word	0x3fefffff
 800bedc:	3fdfffff 	.word	0x3fdfffff
 800bee0:	3c600000 	.word	0x3c600000
 800bee4:	3ff00000 	.word	0x3ff00000
 800bee8:	3fe00000 	.word	0x3fe00000
 800beec:	ee10 2a10 	vmov	r2, s0
 800bef0:	462b      	mov	r3, r5
 800bef2:	496d      	ldr	r1, [pc, #436]	; (800c0a8 <__ieee754_acos+0x4b8>)
 800bef4:	2000      	movs	r0, #0
 800bef6:	f7f4 f997 	bl	8000228 <__aeabi_dsub>
 800befa:	4b6c      	ldr	r3, [pc, #432]	; (800c0ac <__ieee754_acos+0x4bc>)
 800befc:	2200      	movs	r2, #0
 800befe:	f7f4 fb4b 	bl	8000598 <__aeabi_dmul>
 800bf02:	4604      	mov	r4, r0
 800bf04:	460d      	mov	r5, r1
 800bf06:	ec45 4b10 	vmov	d0, r4, r5
 800bf0a:	f000 ffff 	bl	800cf0c <__ieee754_sqrt>
 800bf0e:	a34e      	add	r3, pc, #312	; (adr r3, 800c048 <__ieee754_acos+0x458>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	ec59 8b10 	vmov	r8, r9, d0
 800bf1c:	f7f4 fb3c 	bl	8000598 <__aeabi_dmul>
 800bf20:	a34b      	add	r3, pc, #300	; (adr r3, 800c050 <__ieee754_acos+0x460>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 f981 	bl	800022c <__adddf3>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb33 	bl	8000598 <__aeabi_dmul>
 800bf32:	a349      	add	r3, pc, #292	; (adr r3, 800c058 <__ieee754_acos+0x468>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 f976 	bl	8000228 <__aeabi_dsub>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fb2a 	bl	8000598 <__aeabi_dmul>
 800bf44:	a346      	add	r3, pc, #280	; (adr r3, 800c060 <__ieee754_acos+0x470>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	f7f4 f96f 	bl	800022c <__adddf3>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	f7f4 fb21 	bl	8000598 <__aeabi_dmul>
 800bf56:	a344      	add	r3, pc, #272	; (adr r3, 800c068 <__ieee754_acos+0x478>)
 800bf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5c:	f7f4 f964 	bl	8000228 <__aeabi_dsub>
 800bf60:	4622      	mov	r2, r4
 800bf62:	462b      	mov	r3, r5
 800bf64:	f7f4 fb18 	bl	8000598 <__aeabi_dmul>
 800bf68:	a341      	add	r3, pc, #260	; (adr r3, 800c070 <__ieee754_acos+0x480>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f95d 	bl	800022c <__adddf3>
 800bf72:	4622      	mov	r2, r4
 800bf74:	462b      	mov	r3, r5
 800bf76:	f7f4 fb0f 	bl	8000598 <__aeabi_dmul>
 800bf7a:	a33f      	add	r3, pc, #252	; (adr r3, 800c078 <__ieee754_acos+0x488>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	4682      	mov	sl, r0
 800bf82:	468b      	mov	fp, r1
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fb06 	bl	8000598 <__aeabi_dmul>
 800bf8c:	a33c      	add	r3, pc, #240	; (adr r3, 800c080 <__ieee754_acos+0x490>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 f949 	bl	8000228 <__aeabi_dsub>
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	f7f4 fafd 	bl	8000598 <__aeabi_dmul>
 800bf9e:	a33a      	add	r3, pc, #232	; (adr r3, 800c088 <__ieee754_acos+0x498>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f942 	bl	800022c <__adddf3>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	462b      	mov	r3, r5
 800bfac:	f7f4 faf4 	bl	8000598 <__aeabi_dmul>
 800bfb0:	a337      	add	r3, pc, #220	; (adr r3, 800c090 <__ieee754_acos+0x4a0>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f937 	bl	8000228 <__aeabi_dsub>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 faeb 	bl	8000598 <__aeabi_dmul>
 800bfc2:	4b39      	ldr	r3, [pc, #228]	; (800c0a8 <__ieee754_acos+0x4b8>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f7f4 f931 	bl	800022c <__adddf3>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4650      	mov	r0, sl
 800bfd0:	4659      	mov	r1, fp
 800bfd2:	f7f4 fc0b 	bl	80007ec <__aeabi_ddiv>
 800bfd6:	4642      	mov	r2, r8
 800bfd8:	464b      	mov	r3, r9
 800bfda:	f7f4 fadd 	bl	8000598 <__aeabi_dmul>
 800bfde:	2600      	movs	r6, #0
 800bfe0:	4682      	mov	sl, r0
 800bfe2:	468b      	mov	fp, r1
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	4630      	mov	r0, r6
 800bfea:	4649      	mov	r1, r9
 800bfec:	f7f4 fad4 	bl	8000598 <__aeabi_dmul>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4620      	mov	r0, r4
 800bff6:	4629      	mov	r1, r5
 800bff8:	f7f4 f916 	bl	8000228 <__aeabi_dsub>
 800bffc:	4632      	mov	r2, r6
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	464b      	mov	r3, r9
 800c004:	4640      	mov	r0, r8
 800c006:	4649      	mov	r1, r9
 800c008:	f7f4 f910 	bl	800022c <__adddf3>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4620      	mov	r0, r4
 800c012:	4629      	mov	r1, r5
 800c014:	f7f4 fbea 	bl	80007ec <__aeabi_ddiv>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4650      	mov	r0, sl
 800c01e:	4659      	mov	r1, fp
 800c020:	f7f4 f904 	bl	800022c <__adddf3>
 800c024:	4632      	mov	r2, r6
 800c026:	464b      	mov	r3, r9
 800c028:	f7f4 f900 	bl	800022c <__adddf3>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	f7f4 f8fc 	bl	800022c <__adddf3>
 800c034:	e5fe      	b.n	800bc34 <__ieee754_acos+0x44>
 800c036:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c098 <__ieee754_acos+0x4a8>
 800c03a:	e5ed      	b.n	800bc18 <__ieee754_acos+0x28>
 800c03c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800c0a0 <__ieee754_acos+0x4b0>
 800c040:	e5ea      	b.n	800bc18 <__ieee754_acos+0x28>
 800c042:	bf00      	nop
 800c044:	f3af 8000 	nop.w
 800c048:	0dfdf709 	.word	0x0dfdf709
 800c04c:	3f023de1 	.word	0x3f023de1
 800c050:	7501b288 	.word	0x7501b288
 800c054:	3f49efe0 	.word	0x3f49efe0
 800c058:	b5688f3b 	.word	0xb5688f3b
 800c05c:	3fa48228 	.word	0x3fa48228
 800c060:	0e884455 	.word	0x0e884455
 800c064:	3fc9c155 	.word	0x3fc9c155
 800c068:	03eb6f7d 	.word	0x03eb6f7d
 800c06c:	3fd4d612 	.word	0x3fd4d612
 800c070:	55555555 	.word	0x55555555
 800c074:	3fc55555 	.word	0x3fc55555
 800c078:	b12e9282 	.word	0xb12e9282
 800c07c:	3fb3b8c5 	.word	0x3fb3b8c5
 800c080:	1b8d0159 	.word	0x1b8d0159
 800c084:	3fe6066c 	.word	0x3fe6066c
 800c088:	9c598ac8 	.word	0x9c598ac8
 800c08c:	40002ae5 	.word	0x40002ae5
 800c090:	1c8a2d4b 	.word	0x1c8a2d4b
 800c094:	40033a27 	.word	0x40033a27
	...
 800c0a0:	54442d18 	.word	0x54442d18
 800c0a4:	3ff921fb 	.word	0x3ff921fb
 800c0a8:	3ff00000 	.word	0x3ff00000
 800c0ac:	3fe00000 	.word	0x3fe00000

0800c0b0 <__ieee754_pow>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	ed2d 8b06 	vpush	{d8-d10}
 800c0b8:	b08d      	sub	sp, #52	; 0x34
 800c0ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c0be:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c0c2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c0c6:	ea56 0100 	orrs.w	r1, r6, r0
 800c0ca:	ec53 2b10 	vmov	r2, r3, d0
 800c0ce:	f000 84d1 	beq.w	800ca74 <__ieee754_pow+0x9c4>
 800c0d2:	497f      	ldr	r1, [pc, #508]	; (800c2d0 <__ieee754_pow+0x220>)
 800c0d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c0d8:	428c      	cmp	r4, r1
 800c0da:	ee10 8a10 	vmov	r8, s0
 800c0de:	4699      	mov	r9, r3
 800c0e0:	dc09      	bgt.n	800c0f6 <__ieee754_pow+0x46>
 800c0e2:	d103      	bne.n	800c0ec <__ieee754_pow+0x3c>
 800c0e4:	b97a      	cbnz	r2, 800c106 <__ieee754_pow+0x56>
 800c0e6:	42a6      	cmp	r6, r4
 800c0e8:	dd02      	ble.n	800c0f0 <__ieee754_pow+0x40>
 800c0ea:	e00c      	b.n	800c106 <__ieee754_pow+0x56>
 800c0ec:	428e      	cmp	r6, r1
 800c0ee:	dc02      	bgt.n	800c0f6 <__ieee754_pow+0x46>
 800c0f0:	428e      	cmp	r6, r1
 800c0f2:	d110      	bne.n	800c116 <__ieee754_pow+0x66>
 800c0f4:	b178      	cbz	r0, 800c116 <__ieee754_pow+0x66>
 800c0f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c0fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c0fe:	ea54 0308 	orrs.w	r3, r4, r8
 800c102:	f000 84b7 	beq.w	800ca74 <__ieee754_pow+0x9c4>
 800c106:	4873      	ldr	r0, [pc, #460]	; (800c2d4 <__ieee754_pow+0x224>)
 800c108:	b00d      	add	sp, #52	; 0x34
 800c10a:	ecbd 8b06 	vpop	{d8-d10}
 800c10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c112:	f001 bd0d 	b.w	800db30 <nan>
 800c116:	f1b9 0f00 	cmp.w	r9, #0
 800c11a:	da36      	bge.n	800c18a <__ieee754_pow+0xda>
 800c11c:	496e      	ldr	r1, [pc, #440]	; (800c2d8 <__ieee754_pow+0x228>)
 800c11e:	428e      	cmp	r6, r1
 800c120:	dc51      	bgt.n	800c1c6 <__ieee754_pow+0x116>
 800c122:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c126:	428e      	cmp	r6, r1
 800c128:	f340 84af 	ble.w	800ca8a <__ieee754_pow+0x9da>
 800c12c:	1531      	asrs	r1, r6, #20
 800c12e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c132:	2914      	cmp	r1, #20
 800c134:	dd0f      	ble.n	800c156 <__ieee754_pow+0xa6>
 800c136:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c13a:	fa20 fc01 	lsr.w	ip, r0, r1
 800c13e:	fa0c f101 	lsl.w	r1, ip, r1
 800c142:	4281      	cmp	r1, r0
 800c144:	f040 84a1 	bne.w	800ca8a <__ieee754_pow+0x9da>
 800c148:	f00c 0c01 	and.w	ip, ip, #1
 800c14c:	f1cc 0102 	rsb	r1, ip, #2
 800c150:	9100      	str	r1, [sp, #0]
 800c152:	b180      	cbz	r0, 800c176 <__ieee754_pow+0xc6>
 800c154:	e059      	b.n	800c20a <__ieee754_pow+0x15a>
 800c156:	2800      	cmp	r0, #0
 800c158:	d155      	bne.n	800c206 <__ieee754_pow+0x156>
 800c15a:	f1c1 0114 	rsb	r1, r1, #20
 800c15e:	fa46 fc01 	asr.w	ip, r6, r1
 800c162:	fa0c f101 	lsl.w	r1, ip, r1
 800c166:	42b1      	cmp	r1, r6
 800c168:	f040 848c 	bne.w	800ca84 <__ieee754_pow+0x9d4>
 800c16c:	f00c 0c01 	and.w	ip, ip, #1
 800c170:	f1cc 0102 	rsb	r1, ip, #2
 800c174:	9100      	str	r1, [sp, #0]
 800c176:	4959      	ldr	r1, [pc, #356]	; (800c2dc <__ieee754_pow+0x22c>)
 800c178:	428e      	cmp	r6, r1
 800c17a:	d12d      	bne.n	800c1d8 <__ieee754_pow+0x128>
 800c17c:	2f00      	cmp	r7, #0
 800c17e:	da79      	bge.n	800c274 <__ieee754_pow+0x1c4>
 800c180:	4956      	ldr	r1, [pc, #344]	; (800c2dc <__ieee754_pow+0x22c>)
 800c182:	2000      	movs	r0, #0
 800c184:	f7f4 fb32 	bl	80007ec <__aeabi_ddiv>
 800c188:	e016      	b.n	800c1b8 <__ieee754_pow+0x108>
 800c18a:	2100      	movs	r1, #0
 800c18c:	9100      	str	r1, [sp, #0]
 800c18e:	2800      	cmp	r0, #0
 800c190:	d13b      	bne.n	800c20a <__ieee754_pow+0x15a>
 800c192:	494f      	ldr	r1, [pc, #316]	; (800c2d0 <__ieee754_pow+0x220>)
 800c194:	428e      	cmp	r6, r1
 800c196:	d1ee      	bne.n	800c176 <__ieee754_pow+0xc6>
 800c198:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c19c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c1a0:	ea53 0308 	orrs.w	r3, r3, r8
 800c1a4:	f000 8466 	beq.w	800ca74 <__ieee754_pow+0x9c4>
 800c1a8:	4b4d      	ldr	r3, [pc, #308]	; (800c2e0 <__ieee754_pow+0x230>)
 800c1aa:	429c      	cmp	r4, r3
 800c1ac:	dd0d      	ble.n	800c1ca <__ieee754_pow+0x11a>
 800c1ae:	2f00      	cmp	r7, #0
 800c1b0:	f280 8464 	bge.w	800ca7c <__ieee754_pow+0x9cc>
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	ec41 0b10 	vmov	d0, r0, r1
 800c1bc:	b00d      	add	sp, #52	; 0x34
 800c1be:	ecbd 8b06 	vpop	{d8-d10}
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c6:	2102      	movs	r1, #2
 800c1c8:	e7e0      	b.n	800c18c <__ieee754_pow+0xdc>
 800c1ca:	2f00      	cmp	r7, #0
 800c1cc:	daf2      	bge.n	800c1b4 <__ieee754_pow+0x104>
 800c1ce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c1d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c1d6:	e7ef      	b.n	800c1b8 <__ieee754_pow+0x108>
 800c1d8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c1dc:	d104      	bne.n	800c1e8 <__ieee754_pow+0x138>
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	f7f4 f9d9 	bl	8000598 <__aeabi_dmul>
 800c1e6:	e7e7      	b.n	800c1b8 <__ieee754_pow+0x108>
 800c1e8:	493e      	ldr	r1, [pc, #248]	; (800c2e4 <__ieee754_pow+0x234>)
 800c1ea:	428f      	cmp	r7, r1
 800c1ec:	d10d      	bne.n	800c20a <__ieee754_pow+0x15a>
 800c1ee:	f1b9 0f00 	cmp.w	r9, #0
 800c1f2:	db0a      	blt.n	800c20a <__ieee754_pow+0x15a>
 800c1f4:	ec43 2b10 	vmov	d0, r2, r3
 800c1f8:	b00d      	add	sp, #52	; 0x34
 800c1fa:	ecbd 8b06 	vpop	{d8-d10}
 800c1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c202:	f000 be83 	b.w	800cf0c <__ieee754_sqrt>
 800c206:	2100      	movs	r1, #0
 800c208:	9100      	str	r1, [sp, #0]
 800c20a:	ec43 2b10 	vmov	d0, r2, r3
 800c20e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c212:	f001 fbf7 	bl	800da04 <fabs>
 800c216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c21a:	ec51 0b10 	vmov	r0, r1, d0
 800c21e:	f1b8 0f00 	cmp.w	r8, #0
 800c222:	d12a      	bne.n	800c27a <__ieee754_pow+0x1ca>
 800c224:	b12c      	cbz	r4, 800c232 <__ieee754_pow+0x182>
 800c226:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c2dc <__ieee754_pow+0x22c>
 800c22a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c22e:	45e6      	cmp	lr, ip
 800c230:	d123      	bne.n	800c27a <__ieee754_pow+0x1ca>
 800c232:	2f00      	cmp	r7, #0
 800c234:	da05      	bge.n	800c242 <__ieee754_pow+0x192>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	2000      	movs	r0, #0
 800c23c:	4927      	ldr	r1, [pc, #156]	; (800c2dc <__ieee754_pow+0x22c>)
 800c23e:	f7f4 fad5 	bl	80007ec <__aeabi_ddiv>
 800c242:	f1b9 0f00 	cmp.w	r9, #0
 800c246:	dab7      	bge.n	800c1b8 <__ieee754_pow+0x108>
 800c248:	9b00      	ldr	r3, [sp, #0]
 800c24a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c24e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c252:	4323      	orrs	r3, r4
 800c254:	d108      	bne.n	800c268 <__ieee754_pow+0x1b8>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	f7f3 ffe3 	bl	8000228 <__aeabi_dsub>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	e78d      	b.n	800c184 <__ieee754_pow+0xd4>
 800c268:	9b00      	ldr	r3, [sp, #0]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d1a4      	bne.n	800c1b8 <__ieee754_pow+0x108>
 800c26e:	4602      	mov	r2, r0
 800c270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c274:	4610      	mov	r0, r2
 800c276:	4619      	mov	r1, r3
 800c278:	e79e      	b.n	800c1b8 <__ieee754_pow+0x108>
 800c27a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c27e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c282:	950a      	str	r5, [sp, #40]	; 0x28
 800c284:	9d00      	ldr	r5, [sp, #0]
 800c286:	46ac      	mov	ip, r5
 800c288:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c28a:	ea5c 0505 	orrs.w	r5, ip, r5
 800c28e:	d0e4      	beq.n	800c25a <__ieee754_pow+0x1aa>
 800c290:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <__ieee754_pow+0x238>)
 800c292:	429e      	cmp	r6, r3
 800c294:	f340 80fc 	ble.w	800c490 <__ieee754_pow+0x3e0>
 800c298:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c29c:	429e      	cmp	r6, r3
 800c29e:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <__ieee754_pow+0x230>)
 800c2a0:	dd07      	ble.n	800c2b2 <__ieee754_pow+0x202>
 800c2a2:	429c      	cmp	r4, r3
 800c2a4:	dc0a      	bgt.n	800c2bc <__ieee754_pow+0x20c>
 800c2a6:	2f00      	cmp	r7, #0
 800c2a8:	da84      	bge.n	800c1b4 <__ieee754_pow+0x104>
 800c2aa:	a307      	add	r3, pc, #28	; (adr r3, 800c2c8 <__ieee754_pow+0x218>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	e795      	b.n	800c1de <__ieee754_pow+0x12e>
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	dbf7      	blt.n	800c2a6 <__ieee754_pow+0x1f6>
 800c2b6:	4b09      	ldr	r3, [pc, #36]	; (800c2dc <__ieee754_pow+0x22c>)
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	dd17      	ble.n	800c2ec <__ieee754_pow+0x23c>
 800c2bc:	2f00      	cmp	r7, #0
 800c2be:	dcf4      	bgt.n	800c2aa <__ieee754_pow+0x1fa>
 800c2c0:	e778      	b.n	800c1b4 <__ieee754_pow+0x104>
 800c2c2:	bf00      	nop
 800c2c4:	f3af 8000 	nop.w
 800c2c8:	8800759c 	.word	0x8800759c
 800c2cc:	7e37e43c 	.word	0x7e37e43c
 800c2d0:	7ff00000 	.word	0x7ff00000
 800c2d4:	0800df30 	.word	0x0800df30
 800c2d8:	433fffff 	.word	0x433fffff
 800c2dc:	3ff00000 	.word	0x3ff00000
 800c2e0:	3fefffff 	.word	0x3fefffff
 800c2e4:	3fe00000 	.word	0x3fe00000
 800c2e8:	41e00000 	.word	0x41e00000
 800c2ec:	4b64      	ldr	r3, [pc, #400]	; (800c480 <__ieee754_pow+0x3d0>)
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f7f3 ff9a 	bl	8000228 <__aeabi_dsub>
 800c2f4:	a356      	add	r3, pc, #344	; (adr r3, 800c450 <__ieee754_pow+0x3a0>)
 800c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	460d      	mov	r5, r1
 800c2fe:	f7f4 f94b 	bl	8000598 <__aeabi_dmul>
 800c302:	a355      	add	r3, pc, #340	; (adr r3, 800c458 <__ieee754_pow+0x3a8>)
 800c304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f4 f942 	bl	8000598 <__aeabi_dmul>
 800c314:	4b5b      	ldr	r3, [pc, #364]	; (800c484 <__ieee754_pow+0x3d4>)
 800c316:	4682      	mov	sl, r0
 800c318:	468b      	mov	fp, r1
 800c31a:	2200      	movs	r2, #0
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f93a 	bl	8000598 <__aeabi_dmul>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	a14d      	add	r1, pc, #308	; (adr r1, 800c460 <__ieee754_pow+0x3b0>)
 800c32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c32e:	f7f3 ff7b 	bl	8000228 <__aeabi_dsub>
 800c332:	4622      	mov	r2, r4
 800c334:	462b      	mov	r3, r5
 800c336:	f7f4 f92f 	bl	8000598 <__aeabi_dmul>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	2000      	movs	r0, #0
 800c340:	4951      	ldr	r1, [pc, #324]	; (800c488 <__ieee754_pow+0x3d8>)
 800c342:	f7f3 ff71 	bl	8000228 <__aeabi_dsub>
 800c346:	4622      	mov	r2, r4
 800c348:	4680      	mov	r8, r0
 800c34a:	4689      	mov	r9, r1
 800c34c:	462b      	mov	r3, r5
 800c34e:	4620      	mov	r0, r4
 800c350:	4629      	mov	r1, r5
 800c352:	f7f4 f921 	bl	8000598 <__aeabi_dmul>
 800c356:	4602      	mov	r2, r0
 800c358:	460b      	mov	r3, r1
 800c35a:	4640      	mov	r0, r8
 800c35c:	4649      	mov	r1, r9
 800c35e:	f7f4 f91b 	bl	8000598 <__aeabi_dmul>
 800c362:	a341      	add	r3, pc, #260	; (adr r3, 800c468 <__ieee754_pow+0x3b8>)
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f7f4 f916 	bl	8000598 <__aeabi_dmul>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	4650      	mov	r0, sl
 800c372:	4659      	mov	r1, fp
 800c374:	f7f3 ff58 	bl	8000228 <__aeabi_dsub>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4680      	mov	r8, r0
 800c37e:	4689      	mov	r9, r1
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f3 ff52 	bl	800022c <__adddf3>
 800c388:	2400      	movs	r4, #0
 800c38a:	4632      	mov	r2, r6
 800c38c:	463b      	mov	r3, r7
 800c38e:	4620      	mov	r0, r4
 800c390:	460d      	mov	r5, r1
 800c392:	f7f3 ff49 	bl	8000228 <__aeabi_dsub>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	4640      	mov	r0, r8
 800c39c:	4649      	mov	r1, r9
 800c39e:	f7f3 ff43 	bl	8000228 <__aeabi_dsub>
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	4682      	mov	sl, r0
 800c3ac:	468b      	mov	fp, r1
 800c3ae:	f040 81f1 	bne.w	800c794 <__ieee754_pow+0x6e4>
 800c3b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c470 <__ieee754_pow+0x3c0>
 800c3b6:	eeb0 8a47 	vmov.f32	s16, s14
 800c3ba:	eef0 8a67 	vmov.f32	s17, s15
 800c3be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3c2:	2600      	movs	r6, #0
 800c3c4:	4632      	mov	r2, r6
 800c3c6:	463b      	mov	r3, r7
 800c3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3cc:	f7f3 ff2c 	bl	8000228 <__aeabi_dsub>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	462b      	mov	r3, r5
 800c3d4:	f7f4 f8e0 	bl	8000598 <__aeabi_dmul>
 800c3d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3dc:	4680      	mov	r8, r0
 800c3de:	4689      	mov	r9, r1
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	4659      	mov	r1, fp
 800c3e4:	f7f4 f8d8 	bl	8000598 <__aeabi_dmul>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	f7f3 ff1c 	bl	800022c <__adddf3>
 800c3f4:	4632      	mov	r2, r6
 800c3f6:	463b      	mov	r3, r7
 800c3f8:	4680      	mov	r8, r0
 800c3fa:	4689      	mov	r9, r1
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f4 f8ca 	bl	8000598 <__aeabi_dmul>
 800c404:	460b      	mov	r3, r1
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	4602      	mov	r2, r0
 800c40c:	4649      	mov	r1, r9
 800c40e:	4640      	mov	r0, r8
 800c410:	f7f3 ff0c 	bl	800022c <__adddf3>
 800c414:	4b1d      	ldr	r3, [pc, #116]	; (800c48c <__ieee754_pow+0x3dc>)
 800c416:	4299      	cmp	r1, r3
 800c418:	ec45 4b19 	vmov	d9, r4, r5
 800c41c:	4606      	mov	r6, r0
 800c41e:	460f      	mov	r7, r1
 800c420:	468b      	mov	fp, r1
 800c422:	f340 82fe 	ble.w	800ca22 <__ieee754_pow+0x972>
 800c426:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c42a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c42e:	4303      	orrs	r3, r0
 800c430:	f000 81f0 	beq.w	800c814 <__ieee754_pow+0x764>
 800c434:	a310      	add	r3, pc, #64	; (adr r3, 800c478 <__ieee754_pow+0x3c8>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	ec51 0b18 	vmov	r0, r1, d8
 800c43e:	f7f4 f8ab 	bl	8000598 <__aeabi_dmul>
 800c442:	a30d      	add	r3, pc, #52	; (adr r3, 800c478 <__ieee754_pow+0x3c8>)
 800c444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c448:	e6cb      	b.n	800c1e2 <__ieee754_pow+0x132>
 800c44a:	bf00      	nop
 800c44c:	f3af 8000 	nop.w
 800c450:	60000000 	.word	0x60000000
 800c454:	3ff71547 	.word	0x3ff71547
 800c458:	f85ddf44 	.word	0xf85ddf44
 800c45c:	3e54ae0b 	.word	0x3e54ae0b
 800c460:	55555555 	.word	0x55555555
 800c464:	3fd55555 	.word	0x3fd55555
 800c468:	652b82fe 	.word	0x652b82fe
 800c46c:	3ff71547 	.word	0x3ff71547
 800c470:	00000000 	.word	0x00000000
 800c474:	bff00000 	.word	0xbff00000
 800c478:	8800759c 	.word	0x8800759c
 800c47c:	7e37e43c 	.word	0x7e37e43c
 800c480:	3ff00000 	.word	0x3ff00000
 800c484:	3fd00000 	.word	0x3fd00000
 800c488:	3fe00000 	.word	0x3fe00000
 800c48c:	408fffff 	.word	0x408fffff
 800c490:	4bd7      	ldr	r3, [pc, #860]	; (800c7f0 <__ieee754_pow+0x740>)
 800c492:	ea03 0309 	and.w	r3, r3, r9
 800c496:	2200      	movs	r2, #0
 800c498:	b92b      	cbnz	r3, 800c4a6 <__ieee754_pow+0x3f6>
 800c49a:	4bd6      	ldr	r3, [pc, #856]	; (800c7f4 <__ieee754_pow+0x744>)
 800c49c:	f7f4 f87c 	bl	8000598 <__aeabi_dmul>
 800c4a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	1523      	asrs	r3, r4, #20
 800c4a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c4ac:	4413      	add	r3, r2
 800c4ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b0:	4bd1      	ldr	r3, [pc, #836]	; (800c7f8 <__ieee754_pow+0x748>)
 800c4b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c4b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c4ba:	429c      	cmp	r4, r3
 800c4bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c4c0:	dd08      	ble.n	800c4d4 <__ieee754_pow+0x424>
 800c4c2:	4bce      	ldr	r3, [pc, #824]	; (800c7fc <__ieee754_pow+0x74c>)
 800c4c4:	429c      	cmp	r4, r3
 800c4c6:	f340 8163 	ble.w	800c790 <__ieee754_pow+0x6e0>
 800c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c4d4:	2400      	movs	r4, #0
 800c4d6:	00e3      	lsls	r3, r4, #3
 800c4d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4da:	4bc9      	ldr	r3, [pc, #804]	; (800c800 <__ieee754_pow+0x750>)
 800c4dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c4e0:	ed93 7b00 	vldr	d7, [r3]
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	ec53 2b17 	vmov	r2, r3, d7
 800c4ea:	eeb0 8a47 	vmov.f32	s16, s14
 800c4ee:	eef0 8a67 	vmov.f32	s17, s15
 800c4f2:	4682      	mov	sl, r0
 800c4f4:	f7f3 fe98 	bl	8000228 <__aeabi_dsub>
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	462b      	mov	r3, r5
 800c500:	ec51 0b18 	vmov	r0, r1, d8
 800c504:	f7f3 fe92 	bl	800022c <__adddf3>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	2000      	movs	r0, #0
 800c50e:	49bd      	ldr	r1, [pc, #756]	; (800c804 <__ieee754_pow+0x754>)
 800c510:	f7f4 f96c 	bl	80007ec <__aeabi_ddiv>
 800c514:	ec41 0b19 	vmov	d9, r0, r1
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4630      	mov	r0, r6
 800c51e:	4639      	mov	r1, r7
 800c520:	f7f4 f83a 	bl	8000598 <__aeabi_dmul>
 800c524:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c52c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c530:	2300      	movs	r3, #0
 800c532:	9304      	str	r3, [sp, #16]
 800c534:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c538:	46ab      	mov	fp, r5
 800c53a:	106d      	asrs	r5, r5, #1
 800c53c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c540:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c544:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c548:	2200      	movs	r2, #0
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	4614      	mov	r4, r2
 800c550:	461d      	mov	r5, r3
 800c552:	f7f4 f821 	bl	8000598 <__aeabi_dmul>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4630      	mov	r0, r6
 800c55c:	4639      	mov	r1, r7
 800c55e:	f7f3 fe63 	bl	8000228 <__aeabi_dsub>
 800c562:	ec53 2b18 	vmov	r2, r3, d8
 800c566:	4606      	mov	r6, r0
 800c568:	460f      	mov	r7, r1
 800c56a:	4620      	mov	r0, r4
 800c56c:	4629      	mov	r1, r5
 800c56e:	f7f3 fe5b 	bl	8000228 <__aeabi_dsub>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	4650      	mov	r0, sl
 800c578:	4659      	mov	r1, fp
 800c57a:	f7f3 fe55 	bl	8000228 <__aeabi_dsub>
 800c57e:	4642      	mov	r2, r8
 800c580:	464b      	mov	r3, r9
 800c582:	f7f4 f809 	bl	8000598 <__aeabi_dmul>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f3 fe4b 	bl	8000228 <__aeabi_dsub>
 800c592:	ec53 2b19 	vmov	r2, r3, d9
 800c596:	f7f3 ffff 	bl	8000598 <__aeabi_dmul>
 800c59a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c59e:	ec41 0b18 	vmov	d8, r0, r1
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	f7f3 fff7 	bl	8000598 <__aeabi_dmul>
 800c5aa:	a37d      	add	r3, pc, #500	; (adr r3, 800c7a0 <__ieee754_pow+0x6f0>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	f7f3 fff0 	bl	8000598 <__aeabi_dmul>
 800c5b8:	a37b      	add	r3, pc, #492	; (adr r3, 800c7a8 <__ieee754_pow+0x6f8>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f7f3 fe35 	bl	800022c <__adddf3>
 800c5c2:	4622      	mov	r2, r4
 800c5c4:	462b      	mov	r3, r5
 800c5c6:	f7f3 ffe7 	bl	8000598 <__aeabi_dmul>
 800c5ca:	a379      	add	r3, pc, #484	; (adr r3, 800c7b0 <__ieee754_pow+0x700>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe2c 	bl	800022c <__adddf3>
 800c5d4:	4622      	mov	r2, r4
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	f7f3 ffde 	bl	8000598 <__aeabi_dmul>
 800c5dc:	a376      	add	r3, pc, #472	; (adr r3, 800c7b8 <__ieee754_pow+0x708>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f3 fe23 	bl	800022c <__adddf3>
 800c5e6:	4622      	mov	r2, r4
 800c5e8:	462b      	mov	r3, r5
 800c5ea:	f7f3 ffd5 	bl	8000598 <__aeabi_dmul>
 800c5ee:	a374      	add	r3, pc, #464	; (adr r3, 800c7c0 <__ieee754_pow+0x710>)
 800c5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f4:	f7f3 fe1a 	bl	800022c <__adddf3>
 800c5f8:	4622      	mov	r2, r4
 800c5fa:	462b      	mov	r3, r5
 800c5fc:	f7f3 ffcc 	bl	8000598 <__aeabi_dmul>
 800c600:	a371      	add	r3, pc, #452	; (adr r3, 800c7c8 <__ieee754_pow+0x718>)
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f7f3 fe11 	bl	800022c <__adddf3>
 800c60a:	4622      	mov	r2, r4
 800c60c:	4606      	mov	r6, r0
 800c60e:	460f      	mov	r7, r1
 800c610:	462b      	mov	r3, r5
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f7f3 ffbf 	bl	8000598 <__aeabi_dmul>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4630      	mov	r0, r6
 800c620:	4639      	mov	r1, r7
 800c622:	f7f3 ffb9 	bl	8000598 <__aeabi_dmul>
 800c626:	4642      	mov	r2, r8
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	464b      	mov	r3, r9
 800c62e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c632:	f7f3 fdfb 	bl	800022c <__adddf3>
 800c636:	ec53 2b18 	vmov	r2, r3, d8
 800c63a:	f7f3 ffad 	bl	8000598 <__aeabi_dmul>
 800c63e:	4622      	mov	r2, r4
 800c640:	462b      	mov	r3, r5
 800c642:	f7f3 fdf3 	bl	800022c <__adddf3>
 800c646:	4642      	mov	r2, r8
 800c648:	4682      	mov	sl, r0
 800c64a:	468b      	mov	fp, r1
 800c64c:	464b      	mov	r3, r9
 800c64e:	4640      	mov	r0, r8
 800c650:	4649      	mov	r1, r9
 800c652:	f7f3 ffa1 	bl	8000598 <__aeabi_dmul>
 800c656:	4b6c      	ldr	r3, [pc, #432]	; (800c808 <__ieee754_pow+0x758>)
 800c658:	2200      	movs	r2, #0
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	f7f3 fde5 	bl	800022c <__adddf3>
 800c662:	4652      	mov	r2, sl
 800c664:	465b      	mov	r3, fp
 800c666:	f7f3 fde1 	bl	800022c <__adddf3>
 800c66a:	9c04      	ldr	r4, [sp, #16]
 800c66c:	460d      	mov	r5, r1
 800c66e:	4622      	mov	r2, r4
 800c670:	460b      	mov	r3, r1
 800c672:	4640      	mov	r0, r8
 800c674:	4649      	mov	r1, r9
 800c676:	f7f3 ff8f 	bl	8000598 <__aeabi_dmul>
 800c67a:	4b63      	ldr	r3, [pc, #396]	; (800c808 <__ieee754_pow+0x758>)
 800c67c:	4680      	mov	r8, r0
 800c67e:	4689      	mov	r9, r1
 800c680:	2200      	movs	r2, #0
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 fdcf 	bl	8000228 <__aeabi_dsub>
 800c68a:	4632      	mov	r2, r6
 800c68c:	463b      	mov	r3, r7
 800c68e:	f7f3 fdcb 	bl	8000228 <__aeabi_dsub>
 800c692:	4602      	mov	r2, r0
 800c694:	460b      	mov	r3, r1
 800c696:	4650      	mov	r0, sl
 800c698:	4659      	mov	r1, fp
 800c69a:	f7f3 fdc5 	bl	8000228 <__aeabi_dsub>
 800c69e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6a2:	f7f3 ff79 	bl	8000598 <__aeabi_dmul>
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	460f      	mov	r7, r1
 800c6ac:	462b      	mov	r3, r5
 800c6ae:	ec51 0b18 	vmov	r0, r1, d8
 800c6b2:	f7f3 ff71 	bl	8000598 <__aeabi_dmul>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f3 fdb5 	bl	800022c <__adddf3>
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	4649      	mov	r1, r9
 800c6ce:	f7f3 fdad 	bl	800022c <__adddf3>
 800c6d2:	9c04      	ldr	r4, [sp, #16]
 800c6d4:	a33e      	add	r3, pc, #248	; (adr r3, 800c7d0 <__ieee754_pow+0x720>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	460d      	mov	r5, r1
 800c6de:	f7f3 ff5b 	bl	8000598 <__aeabi_dmul>
 800c6e2:	4642      	mov	r2, r8
 800c6e4:	ec41 0b18 	vmov	d8, r0, r1
 800c6e8:	464b      	mov	r3, r9
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 fd9b 	bl	8000228 <__aeabi_dsub>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f3 fd95 	bl	8000228 <__aeabi_dsub>
 800c6fe:	a336      	add	r3, pc, #216	; (adr r3, 800c7d8 <__ieee754_pow+0x728>)
 800c700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c704:	f7f3 ff48 	bl	8000598 <__aeabi_dmul>
 800c708:	a335      	add	r3, pc, #212	; (adr r3, 800c7e0 <__ieee754_pow+0x730>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	4620      	mov	r0, r4
 800c714:	4629      	mov	r1, r5
 800c716:	f7f3 ff3f 	bl	8000598 <__aeabi_dmul>
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4630      	mov	r0, r6
 800c720:	4639      	mov	r1, r7
 800c722:	f7f3 fd83 	bl	800022c <__adddf3>
 800c726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c728:	4b38      	ldr	r3, [pc, #224]	; (800c80c <__ieee754_pow+0x75c>)
 800c72a:	4413      	add	r3, r2
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	f7f3 fd7c 	bl	800022c <__adddf3>
 800c734:	4682      	mov	sl, r0
 800c736:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c738:	468b      	mov	fp, r1
 800c73a:	f7f3 fec3 	bl	80004c4 <__aeabi_i2d>
 800c73e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c740:	4b33      	ldr	r3, [pc, #204]	; (800c810 <__ieee754_pow+0x760>)
 800c742:	4413      	add	r3, r2
 800c744:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c748:	4606      	mov	r6, r0
 800c74a:	460f      	mov	r7, r1
 800c74c:	4652      	mov	r2, sl
 800c74e:	465b      	mov	r3, fp
 800c750:	ec51 0b18 	vmov	r0, r1, d8
 800c754:	f7f3 fd6a 	bl	800022c <__adddf3>
 800c758:	4642      	mov	r2, r8
 800c75a:	464b      	mov	r3, r9
 800c75c:	f7f3 fd66 	bl	800022c <__adddf3>
 800c760:	4632      	mov	r2, r6
 800c762:	463b      	mov	r3, r7
 800c764:	f7f3 fd62 	bl	800022c <__adddf3>
 800c768:	9c04      	ldr	r4, [sp, #16]
 800c76a:	4632      	mov	r2, r6
 800c76c:	463b      	mov	r3, r7
 800c76e:	4620      	mov	r0, r4
 800c770:	460d      	mov	r5, r1
 800c772:	f7f3 fd59 	bl	8000228 <__aeabi_dsub>
 800c776:	4642      	mov	r2, r8
 800c778:	464b      	mov	r3, r9
 800c77a:	f7f3 fd55 	bl	8000228 <__aeabi_dsub>
 800c77e:	ec53 2b18 	vmov	r2, r3, d8
 800c782:	f7f3 fd51 	bl	8000228 <__aeabi_dsub>
 800c786:	4602      	mov	r2, r0
 800c788:	460b      	mov	r3, r1
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	e606      	b.n	800c39e <__ieee754_pow+0x2ee>
 800c790:	2401      	movs	r4, #1
 800c792:	e6a0      	b.n	800c4d6 <__ieee754_pow+0x426>
 800c794:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c7e8 <__ieee754_pow+0x738>
 800c798:	e60d      	b.n	800c3b6 <__ieee754_pow+0x306>
 800c79a:	bf00      	nop
 800c79c:	f3af 8000 	nop.w
 800c7a0:	4a454eef 	.word	0x4a454eef
 800c7a4:	3fca7e28 	.word	0x3fca7e28
 800c7a8:	93c9db65 	.word	0x93c9db65
 800c7ac:	3fcd864a 	.word	0x3fcd864a
 800c7b0:	a91d4101 	.word	0xa91d4101
 800c7b4:	3fd17460 	.word	0x3fd17460
 800c7b8:	518f264d 	.word	0x518f264d
 800c7bc:	3fd55555 	.word	0x3fd55555
 800c7c0:	db6fabff 	.word	0xdb6fabff
 800c7c4:	3fdb6db6 	.word	0x3fdb6db6
 800c7c8:	33333303 	.word	0x33333303
 800c7cc:	3fe33333 	.word	0x3fe33333
 800c7d0:	e0000000 	.word	0xe0000000
 800c7d4:	3feec709 	.word	0x3feec709
 800c7d8:	dc3a03fd 	.word	0xdc3a03fd
 800c7dc:	3feec709 	.word	0x3feec709
 800c7e0:	145b01f5 	.word	0x145b01f5
 800c7e4:	be3e2fe0 	.word	0xbe3e2fe0
 800c7e8:	00000000 	.word	0x00000000
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	7ff00000 	.word	0x7ff00000
 800c7f4:	43400000 	.word	0x43400000
 800c7f8:	0003988e 	.word	0x0003988e
 800c7fc:	000bb679 	.word	0x000bb679
 800c800:	0800df38 	.word	0x0800df38
 800c804:	3ff00000 	.word	0x3ff00000
 800c808:	40080000 	.word	0x40080000
 800c80c:	0800df58 	.word	0x0800df58
 800c810:	0800df48 	.word	0x0800df48
 800c814:	a3b5      	add	r3, pc, #724	; (adr r3, 800caec <__ieee754_pow+0xa3c>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	4640      	mov	r0, r8
 800c81c:	4649      	mov	r1, r9
 800c81e:	f7f3 fd05 	bl	800022c <__adddf3>
 800c822:	4622      	mov	r2, r4
 800c824:	ec41 0b1a 	vmov	d10, r0, r1
 800c828:	462b      	mov	r3, r5
 800c82a:	4630      	mov	r0, r6
 800c82c:	4639      	mov	r1, r7
 800c82e:	f7f3 fcfb 	bl	8000228 <__aeabi_dsub>
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	ec51 0b1a 	vmov	r0, r1, d10
 800c83a:	f7f4 f93d 	bl	8000ab8 <__aeabi_dcmpgt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f47f adf8 	bne.w	800c434 <__ieee754_pow+0x384>
 800c844:	4aa4      	ldr	r2, [pc, #656]	; (800cad8 <__ieee754_pow+0xa28>)
 800c846:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c84a:	4293      	cmp	r3, r2
 800c84c:	f340 810b 	ble.w	800ca66 <__ieee754_pow+0x9b6>
 800c850:	151b      	asrs	r3, r3, #20
 800c852:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c856:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c85a:	fa4a f303 	asr.w	r3, sl, r3
 800c85e:	445b      	add	r3, fp
 800c860:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c864:	4e9d      	ldr	r6, [pc, #628]	; (800cadc <__ieee754_pow+0xa2c>)
 800c866:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c86a:	4116      	asrs	r6, r2
 800c86c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c870:	2000      	movs	r0, #0
 800c872:	ea23 0106 	bic.w	r1, r3, r6
 800c876:	f1c2 0214 	rsb	r2, r2, #20
 800c87a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c87e:	fa4a fa02 	asr.w	sl, sl, r2
 800c882:	f1bb 0f00 	cmp.w	fp, #0
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4620      	mov	r0, r4
 800c88c:	4629      	mov	r1, r5
 800c88e:	bfb8      	it	lt
 800c890:	f1ca 0a00 	rsblt	sl, sl, #0
 800c894:	f7f3 fcc8 	bl	8000228 <__aeabi_dsub>
 800c898:	ec41 0b19 	vmov	d9, r0, r1
 800c89c:	4642      	mov	r2, r8
 800c89e:	464b      	mov	r3, r9
 800c8a0:	ec51 0b19 	vmov	r0, r1, d9
 800c8a4:	f7f3 fcc2 	bl	800022c <__adddf3>
 800c8a8:	2400      	movs	r4, #0
 800c8aa:	a379      	add	r3, pc, #484	; (adr r3, 800ca90 <__ieee754_pow+0x9e0>)
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	f7f3 fe70 	bl	8000598 <__aeabi_dmul>
 800c8b8:	ec53 2b19 	vmov	r2, r3, d9
 800c8bc:	4606      	mov	r6, r0
 800c8be:	460f      	mov	r7, r1
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	f7f3 fcb0 	bl	8000228 <__aeabi_dsub>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4640      	mov	r0, r8
 800c8ce:	4649      	mov	r1, r9
 800c8d0:	f7f3 fcaa 	bl	8000228 <__aeabi_dsub>
 800c8d4:	a370      	add	r3, pc, #448	; (adr r3, 800ca98 <__ieee754_pow+0x9e8>)
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	f7f3 fe5d 	bl	8000598 <__aeabi_dmul>
 800c8de:	a370      	add	r3, pc, #448	; (adr r3, 800caa0 <__ieee754_pow+0x9f0>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	4680      	mov	r8, r0
 800c8e6:	4689      	mov	r9, r1
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	f7f3 fe54 	bl	8000598 <__aeabi_dmul>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	f7f3 fc98 	bl	800022c <__adddf3>
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4630      	mov	r0, r6
 800c906:	4639      	mov	r1, r7
 800c908:	f7f3 fc90 	bl	800022c <__adddf3>
 800c90c:	4632      	mov	r2, r6
 800c90e:	463b      	mov	r3, r7
 800c910:	4680      	mov	r8, r0
 800c912:	4689      	mov	r9, r1
 800c914:	f7f3 fc88 	bl	8000228 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4620      	mov	r0, r4
 800c91e:	4629      	mov	r1, r5
 800c920:	f7f3 fc82 	bl	8000228 <__aeabi_dsub>
 800c924:	4642      	mov	r2, r8
 800c926:	4606      	mov	r6, r0
 800c928:	460f      	mov	r7, r1
 800c92a:	464b      	mov	r3, r9
 800c92c:	4640      	mov	r0, r8
 800c92e:	4649      	mov	r1, r9
 800c930:	f7f3 fe32 	bl	8000598 <__aeabi_dmul>
 800c934:	a35c      	add	r3, pc, #368	; (adr r3, 800caa8 <__ieee754_pow+0x9f8>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	4604      	mov	r4, r0
 800c93c:	460d      	mov	r5, r1
 800c93e:	f7f3 fe2b 	bl	8000598 <__aeabi_dmul>
 800c942:	a35b      	add	r3, pc, #364	; (adr r3, 800cab0 <__ieee754_pow+0xa00>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc6e 	bl	8000228 <__aeabi_dsub>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fe22 	bl	8000598 <__aeabi_dmul>
 800c954:	a358      	add	r3, pc, #352	; (adr r3, 800cab8 <__ieee754_pow+0xa08>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc67 	bl	800022c <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fe19 	bl	8000598 <__aeabi_dmul>
 800c966:	a356      	add	r3, pc, #344	; (adr r3, 800cac0 <__ieee754_pow+0xa10>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc5c 	bl	8000228 <__aeabi_dsub>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fe10 	bl	8000598 <__aeabi_dmul>
 800c978:	a353      	add	r3, pc, #332	; (adr r3, 800cac8 <__ieee754_pow+0xa18>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc55 	bl	800022c <__adddf3>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fe07 	bl	8000598 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	4640      	mov	r0, r8
 800c990:	4649      	mov	r1, r9
 800c992:	f7f3 fc49 	bl	8000228 <__aeabi_dsub>
 800c996:	4604      	mov	r4, r0
 800c998:	460d      	mov	r5, r1
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4640      	mov	r0, r8
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	f7f3 fdf9 	bl	8000598 <__aeabi_dmul>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	ec41 0b19 	vmov	d9, r0, r1
 800c9ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	f7f3 fc38 	bl	8000228 <__aeabi_dsub>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	ec51 0b19 	vmov	r0, r1, d9
 800c9c0:	f7f3 ff14 	bl	80007ec <__aeabi_ddiv>
 800c9c4:	4632      	mov	r2, r6
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	460d      	mov	r5, r1
 800c9ca:	463b      	mov	r3, r7
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	f7f3 fde2 	bl	8000598 <__aeabi_dmul>
 800c9d4:	4632      	mov	r2, r6
 800c9d6:	463b      	mov	r3, r7
 800c9d8:	f7f3 fc28 	bl	800022c <__adddf3>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	f7f3 fc20 	bl	8000228 <__aeabi_dsub>
 800c9e8:	4642      	mov	r2, r8
 800c9ea:	464b      	mov	r3, r9
 800c9ec:	f7f3 fc1c 	bl	8000228 <__aeabi_dsub>
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	493a      	ldr	r1, [pc, #232]	; (800cae0 <__ieee754_pow+0xa30>)
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f7f3 fc16 	bl	8000228 <__aeabi_dsub>
 800c9fc:	e9cd 0100 	strd	r0, r1, [sp]
 800ca00:	9b01      	ldr	r3, [sp, #4]
 800ca02:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca0a:	da2f      	bge.n	800ca6c <__ieee754_pow+0x9bc>
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	ed9d 0b00 	vldr	d0, [sp]
 800ca12:	f001 f921 	bl	800dc58 <scalbn>
 800ca16:	ec51 0b10 	vmov	r0, r1, d0
 800ca1a:	ec53 2b18 	vmov	r2, r3, d8
 800ca1e:	f7ff bbe0 	b.w	800c1e2 <__ieee754_pow+0x132>
 800ca22:	4b30      	ldr	r3, [pc, #192]	; (800cae4 <__ieee754_pow+0xa34>)
 800ca24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca28:	429e      	cmp	r6, r3
 800ca2a:	f77f af0b 	ble.w	800c844 <__ieee754_pow+0x794>
 800ca2e:	4b2e      	ldr	r3, [pc, #184]	; (800cae8 <__ieee754_pow+0xa38>)
 800ca30:	440b      	add	r3, r1
 800ca32:	4303      	orrs	r3, r0
 800ca34:	d00b      	beq.n	800ca4e <__ieee754_pow+0x99e>
 800ca36:	a326      	add	r3, pc, #152	; (adr r3, 800cad0 <__ieee754_pow+0xa20>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	ec51 0b18 	vmov	r0, r1, d8
 800ca40:	f7f3 fdaa 	bl	8000598 <__aeabi_dmul>
 800ca44:	a322      	add	r3, pc, #136	; (adr r3, 800cad0 <__ieee754_pow+0xa20>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7ff bbca 	b.w	800c1e2 <__ieee754_pow+0x132>
 800ca4e:	4622      	mov	r2, r4
 800ca50:	462b      	mov	r3, r5
 800ca52:	f7f3 fbe9 	bl	8000228 <__aeabi_dsub>
 800ca56:	4642      	mov	r2, r8
 800ca58:	464b      	mov	r3, r9
 800ca5a:	f7f4 f823 	bl	8000aa4 <__aeabi_dcmpge>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	f43f aef0 	beq.w	800c844 <__ieee754_pow+0x794>
 800ca64:	e7e7      	b.n	800ca36 <__ieee754_pow+0x986>
 800ca66:	f04f 0a00 	mov.w	sl, #0
 800ca6a:	e717      	b.n	800c89c <__ieee754_pow+0x7ec>
 800ca6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca70:	4619      	mov	r1, r3
 800ca72:	e7d2      	b.n	800ca1a <__ieee754_pow+0x96a>
 800ca74:	491a      	ldr	r1, [pc, #104]	; (800cae0 <__ieee754_pow+0xa30>)
 800ca76:	2000      	movs	r0, #0
 800ca78:	f7ff bb9e 	b.w	800c1b8 <__ieee754_pow+0x108>
 800ca7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca80:	f7ff bb9a 	b.w	800c1b8 <__ieee754_pow+0x108>
 800ca84:	9000      	str	r0, [sp, #0]
 800ca86:	f7ff bb76 	b.w	800c176 <__ieee754_pow+0xc6>
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f7ff bb60 	b.w	800c150 <__ieee754_pow+0xa0>
 800ca90:	00000000 	.word	0x00000000
 800ca94:	3fe62e43 	.word	0x3fe62e43
 800ca98:	fefa39ef 	.word	0xfefa39ef
 800ca9c:	3fe62e42 	.word	0x3fe62e42
 800caa0:	0ca86c39 	.word	0x0ca86c39
 800caa4:	be205c61 	.word	0xbe205c61
 800caa8:	72bea4d0 	.word	0x72bea4d0
 800caac:	3e663769 	.word	0x3e663769
 800cab0:	c5d26bf1 	.word	0xc5d26bf1
 800cab4:	3ebbbd41 	.word	0x3ebbbd41
 800cab8:	af25de2c 	.word	0xaf25de2c
 800cabc:	3f11566a 	.word	0x3f11566a
 800cac0:	16bebd93 	.word	0x16bebd93
 800cac4:	3f66c16c 	.word	0x3f66c16c
 800cac8:	5555553e 	.word	0x5555553e
 800cacc:	3fc55555 	.word	0x3fc55555
 800cad0:	c2f8f359 	.word	0xc2f8f359
 800cad4:	01a56e1f 	.word	0x01a56e1f
 800cad8:	3fe00000 	.word	0x3fe00000
 800cadc:	000fffff 	.word	0x000fffff
 800cae0:	3ff00000 	.word	0x3ff00000
 800cae4:	4090cbff 	.word	0x4090cbff
 800cae8:	3f6f3400 	.word	0x3f6f3400
 800caec:	652b82fe 	.word	0x652b82fe
 800caf0:	3c971547 	.word	0x3c971547
 800caf4:	00000000 	.word	0x00000000

0800caf8 <__ieee754_rem_pio2>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	ed2d 8b02 	vpush	{d8}
 800cb00:	ec55 4b10 	vmov	r4, r5, d0
 800cb04:	4bca      	ldr	r3, [pc, #808]	; (800ce30 <__ieee754_rem_pio2+0x338>)
 800cb06:	b08b      	sub	sp, #44	; 0x2c
 800cb08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cb0c:	4598      	cmp	r8, r3
 800cb0e:	4682      	mov	sl, r0
 800cb10:	9502      	str	r5, [sp, #8]
 800cb12:	dc08      	bgt.n	800cb26 <__ieee754_rem_pio2+0x2e>
 800cb14:	2200      	movs	r2, #0
 800cb16:	2300      	movs	r3, #0
 800cb18:	ed80 0b00 	vstr	d0, [r0]
 800cb1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cb20:	f04f 0b00 	mov.w	fp, #0
 800cb24:	e028      	b.n	800cb78 <__ieee754_rem_pio2+0x80>
 800cb26:	4bc3      	ldr	r3, [pc, #780]	; (800ce34 <__ieee754_rem_pio2+0x33c>)
 800cb28:	4598      	cmp	r8, r3
 800cb2a:	dc78      	bgt.n	800cc1e <__ieee754_rem_pio2+0x126>
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	4ec2      	ldr	r6, [pc, #776]	; (800ce38 <__ieee754_rem_pio2+0x340>)
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	ee10 0a10 	vmov	r0, s0
 800cb36:	a3b0      	add	r3, pc, #704	; (adr r3, 800cdf8 <__ieee754_rem_pio2+0x300>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	dd39      	ble.n	800cbb4 <__ieee754_rem_pio2+0xbc>
 800cb40:	f7f3 fb72 	bl	8000228 <__aeabi_dsub>
 800cb44:	45b0      	cmp	r8, r6
 800cb46:	4604      	mov	r4, r0
 800cb48:	460d      	mov	r5, r1
 800cb4a:	d01b      	beq.n	800cb84 <__ieee754_rem_pio2+0x8c>
 800cb4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ce00 <__ieee754_rem_pio2+0x308>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb69 	bl	8000228 <__aeabi_dsub>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	e9ca 2300 	strd	r2, r3, [sl]
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	f7f3 fb61 	bl	8000228 <__aeabi_dsub>
 800cb66:	a3a6      	add	r3, pc, #664	; (adr r3, 800ce00 <__ieee754_rem_pio2+0x308>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f7f3 fb5c 	bl	8000228 <__aeabi_dsub>
 800cb70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb74:	f04f 0b01 	mov.w	fp, #1
 800cb78:	4658      	mov	r0, fp
 800cb7a:	b00b      	add	sp, #44	; 0x2c
 800cb7c:	ecbd 8b02 	vpop	{d8}
 800cb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb84:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce08 <__ieee754_rem_pio2+0x310>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f7f3 fb4d 	bl	8000228 <__aeabi_dsub>
 800cb8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x318>)
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	4604      	mov	r4, r0
 800cb96:	460d      	mov	r5, r1
 800cb98:	f7f3 fb46 	bl	8000228 <__aeabi_dsub>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	e9ca 2300 	strd	r2, r3, [sl]
 800cba4:	4620      	mov	r0, r4
 800cba6:	4629      	mov	r1, r5
 800cba8:	f7f3 fb3e 	bl	8000228 <__aeabi_dsub>
 800cbac:	a398      	add	r3, pc, #608	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x318>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	e7db      	b.n	800cb6c <__ieee754_rem_pio2+0x74>
 800cbb4:	f7f3 fb3a 	bl	800022c <__adddf3>
 800cbb8:	45b0      	cmp	r8, r6
 800cbba:	4604      	mov	r4, r0
 800cbbc:	460d      	mov	r5, r1
 800cbbe:	d016      	beq.n	800cbee <__ieee754_rem_pio2+0xf6>
 800cbc0:	a38f      	add	r3, pc, #572	; (adr r3, 800ce00 <__ieee754_rem_pio2+0x308>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fb31 	bl	800022c <__adddf3>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	e9ca 2300 	strd	r2, r3, [sl]
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	f7f3 fb27 	bl	8000228 <__aeabi_dsub>
 800cbda:	a389      	add	r3, pc, #548	; (adr r3, 800ce00 <__ieee754_rem_pio2+0x308>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	f7f3 fb24 	bl	800022c <__adddf3>
 800cbe4:	f04f 3bff 	mov.w	fp, #4294967295
 800cbe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cbec:	e7c4      	b.n	800cb78 <__ieee754_rem_pio2+0x80>
 800cbee:	a386      	add	r3, pc, #536	; (adr r3, 800ce08 <__ieee754_rem_pio2+0x310>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	f7f3 fb1a 	bl	800022c <__adddf3>
 800cbf8:	a385      	add	r3, pc, #532	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x318>)
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	4604      	mov	r4, r0
 800cc00:	460d      	mov	r5, r1
 800cc02:	f7f3 fb13 	bl	800022c <__adddf3>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	e9ca 2300 	strd	r2, r3, [sl]
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7f3 fb09 	bl	8000228 <__aeabi_dsub>
 800cc16:	a37e      	add	r3, pc, #504	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x318>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	e7e0      	b.n	800cbe0 <__ieee754_rem_pio2+0xe8>
 800cc1e:	4b87      	ldr	r3, [pc, #540]	; (800ce3c <__ieee754_rem_pio2+0x344>)
 800cc20:	4598      	cmp	r8, r3
 800cc22:	f300 80d9 	bgt.w	800cdd8 <__ieee754_rem_pio2+0x2e0>
 800cc26:	f000 feed 	bl	800da04 <fabs>
 800cc2a:	ec55 4b10 	vmov	r4, r5, d0
 800cc2e:	ee10 0a10 	vmov	r0, s0
 800cc32:	a379      	add	r3, pc, #484	; (adr r3, 800ce18 <__ieee754_rem_pio2+0x320>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 fcad 	bl	8000598 <__aeabi_dmul>
 800cc3e:	4b80      	ldr	r3, [pc, #512]	; (800ce40 <__ieee754_rem_pio2+0x348>)
 800cc40:	2200      	movs	r2, #0
 800cc42:	f7f3 faf3 	bl	800022c <__adddf3>
 800cc46:	f7f3 ff57 	bl	8000af8 <__aeabi_d2iz>
 800cc4a:	4683      	mov	fp, r0
 800cc4c:	f7f3 fc3a 	bl	80004c4 <__aeabi_i2d>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	ec43 2b18 	vmov	d8, r2, r3
 800cc58:	a367      	add	r3, pc, #412	; (adr r3, 800cdf8 <__ieee754_rem_pio2+0x300>)
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f7f3 fc9b 	bl	8000598 <__aeabi_dmul>
 800cc62:	4602      	mov	r2, r0
 800cc64:	460b      	mov	r3, r1
 800cc66:	4620      	mov	r0, r4
 800cc68:	4629      	mov	r1, r5
 800cc6a:	f7f3 fadd 	bl	8000228 <__aeabi_dsub>
 800cc6e:	a364      	add	r3, pc, #400	; (adr r3, 800ce00 <__ieee754_rem_pio2+0x308>)
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	ec51 0b18 	vmov	r0, r1, d8
 800cc7c:	f7f3 fc8c 	bl	8000598 <__aeabi_dmul>
 800cc80:	f1bb 0f1f 	cmp.w	fp, #31
 800cc84:	4604      	mov	r4, r0
 800cc86:	460d      	mov	r5, r1
 800cc88:	dc0d      	bgt.n	800cca6 <__ieee754_rem_pio2+0x1ae>
 800cc8a:	4b6e      	ldr	r3, [pc, #440]	; (800ce44 <__ieee754_rem_pio2+0x34c>)
 800cc8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800cc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc94:	4543      	cmp	r3, r8
 800cc96:	d006      	beq.n	800cca6 <__ieee754_rem_pio2+0x1ae>
 800cc98:	4622      	mov	r2, r4
 800cc9a:	462b      	mov	r3, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 fac2 	bl	8000228 <__aeabi_dsub>
 800cca4:	e00f      	b.n	800ccc6 <__ieee754_rem_pio2+0x1ce>
 800cca6:	462b      	mov	r3, r5
 800cca8:	4622      	mov	r2, r4
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 fabb 	bl	8000228 <__aeabi_dsub>
 800ccb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ccb6:	9303      	str	r3, [sp, #12]
 800ccb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ccbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ccc0:	f1b8 0f10 	cmp.w	r8, #16
 800ccc4:	dc02      	bgt.n	800cccc <__ieee754_rem_pio2+0x1d4>
 800ccc6:	e9ca 0100 	strd	r0, r1, [sl]
 800ccca:	e039      	b.n	800cd40 <__ieee754_rem_pio2+0x248>
 800cccc:	a34e      	add	r3, pc, #312	; (adr r3, 800ce08 <__ieee754_rem_pio2+0x310>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	ec51 0b18 	vmov	r0, r1, d8
 800ccd6:	f7f3 fc5f 	bl	8000598 <__aeabi_dmul>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	460d      	mov	r5, r1
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	4630      	mov	r0, r6
 800cce4:	4639      	mov	r1, r7
 800cce6:	f7f3 fa9f 	bl	8000228 <__aeabi_dsub>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4680      	mov	r8, r0
 800ccf0:	4689      	mov	r9, r1
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	f7f3 fa97 	bl	8000228 <__aeabi_dsub>
 800ccfa:	4622      	mov	r2, r4
 800ccfc:	462b      	mov	r3, r5
 800ccfe:	f7f3 fa93 	bl	8000228 <__aeabi_dsub>
 800cd02:	a343      	add	r3, pc, #268	; (adr r3, 800ce10 <__ieee754_rem_pio2+0x318>)
 800cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd08:	4604      	mov	r4, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	ec51 0b18 	vmov	r0, r1, d8
 800cd10:	f7f3 fc42 	bl	8000598 <__aeabi_dmul>
 800cd14:	4622      	mov	r2, r4
 800cd16:	462b      	mov	r3, r5
 800cd18:	f7f3 fa86 	bl	8000228 <__aeabi_dsub>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4604      	mov	r4, r0
 800cd22:	460d      	mov	r5, r1
 800cd24:	4640      	mov	r0, r8
 800cd26:	4649      	mov	r1, r9
 800cd28:	f7f3 fa7e 	bl	8000228 <__aeabi_dsub>
 800cd2c:	9a03      	ldr	r2, [sp, #12]
 800cd2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	2b31      	cmp	r3, #49	; 0x31
 800cd36:	dc24      	bgt.n	800cd82 <__ieee754_rem_pio2+0x28a>
 800cd38:	e9ca 0100 	strd	r0, r1, [sl]
 800cd3c:	4646      	mov	r6, r8
 800cd3e:	464f      	mov	r7, r9
 800cd40:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd44:	4630      	mov	r0, r6
 800cd46:	4642      	mov	r2, r8
 800cd48:	464b      	mov	r3, r9
 800cd4a:	4639      	mov	r1, r7
 800cd4c:	f7f3 fa6c 	bl	8000228 <__aeabi_dsub>
 800cd50:	462b      	mov	r3, r5
 800cd52:	4622      	mov	r2, r4
 800cd54:	f7f3 fa68 	bl	8000228 <__aeabi_dsub>
 800cd58:	9b02      	ldr	r3, [sp, #8]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cd60:	f6bf af0a 	bge.w	800cb78 <__ieee754_rem_pio2+0x80>
 800cd64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd68:	f8ca 3004 	str.w	r3, [sl, #4]
 800cd6c:	f8ca 8000 	str.w	r8, [sl]
 800cd70:	f8ca 0008 	str.w	r0, [sl, #8]
 800cd74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd78:	f8ca 300c 	str.w	r3, [sl, #12]
 800cd7c:	f1cb 0b00 	rsb	fp, fp, #0
 800cd80:	e6fa      	b.n	800cb78 <__ieee754_rem_pio2+0x80>
 800cd82:	a327      	add	r3, pc, #156	; (adr r3, 800ce20 <__ieee754_rem_pio2+0x328>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	ec51 0b18 	vmov	r0, r1, d8
 800cd8c:	f7f3 fc04 	bl	8000598 <__aeabi_dmul>
 800cd90:	4604      	mov	r4, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	4602      	mov	r2, r0
 800cd96:	460b      	mov	r3, r1
 800cd98:	4640      	mov	r0, r8
 800cd9a:	4649      	mov	r1, r9
 800cd9c:	f7f3 fa44 	bl	8000228 <__aeabi_dsub>
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	4606      	mov	r6, r0
 800cda6:	460f      	mov	r7, r1
 800cda8:	4640      	mov	r0, r8
 800cdaa:	4649      	mov	r1, r9
 800cdac:	f7f3 fa3c 	bl	8000228 <__aeabi_dsub>
 800cdb0:	4622      	mov	r2, r4
 800cdb2:	462b      	mov	r3, r5
 800cdb4:	f7f3 fa38 	bl	8000228 <__aeabi_dsub>
 800cdb8:	a31b      	add	r3, pc, #108	; (adr r3, 800ce28 <__ieee754_rem_pio2+0x330>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	ec51 0b18 	vmov	r0, r1, d8
 800cdc6:	f7f3 fbe7 	bl	8000598 <__aeabi_dmul>
 800cdca:	4622      	mov	r2, r4
 800cdcc:	462b      	mov	r3, r5
 800cdce:	f7f3 fa2b 	bl	8000228 <__aeabi_dsub>
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	e75f      	b.n	800cc98 <__ieee754_rem_pio2+0x1a0>
 800cdd8:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <__ieee754_rem_pio2+0x350>)
 800cdda:	4598      	cmp	r8, r3
 800cddc:	dd36      	ble.n	800ce4c <__ieee754_rem_pio2+0x354>
 800cdde:	ee10 2a10 	vmov	r2, s0
 800cde2:	462b      	mov	r3, r5
 800cde4:	4620      	mov	r0, r4
 800cde6:	4629      	mov	r1, r5
 800cde8:	f7f3 fa1e 	bl	8000228 <__aeabi_dsub>
 800cdec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdf0:	e9ca 0100 	strd	r0, r1, [sl]
 800cdf4:	e694      	b.n	800cb20 <__ieee754_rem_pio2+0x28>
 800cdf6:	bf00      	nop
 800cdf8:	54400000 	.word	0x54400000
 800cdfc:	3ff921fb 	.word	0x3ff921fb
 800ce00:	1a626331 	.word	0x1a626331
 800ce04:	3dd0b461 	.word	0x3dd0b461
 800ce08:	1a600000 	.word	0x1a600000
 800ce0c:	3dd0b461 	.word	0x3dd0b461
 800ce10:	2e037073 	.word	0x2e037073
 800ce14:	3ba3198a 	.word	0x3ba3198a
 800ce18:	6dc9c883 	.word	0x6dc9c883
 800ce1c:	3fe45f30 	.word	0x3fe45f30
 800ce20:	2e000000 	.word	0x2e000000
 800ce24:	3ba3198a 	.word	0x3ba3198a
 800ce28:	252049c1 	.word	0x252049c1
 800ce2c:	397b839a 	.word	0x397b839a
 800ce30:	3fe921fb 	.word	0x3fe921fb
 800ce34:	4002d97b 	.word	0x4002d97b
 800ce38:	3ff921fb 	.word	0x3ff921fb
 800ce3c:	413921fb 	.word	0x413921fb
 800ce40:	3fe00000 	.word	0x3fe00000
 800ce44:	0800df68 	.word	0x0800df68
 800ce48:	7fefffff 	.word	0x7fefffff
 800ce4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ce50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ce54:	ee10 0a10 	vmov	r0, s0
 800ce58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ce5c:	ee10 6a10 	vmov	r6, s0
 800ce60:	460f      	mov	r7, r1
 800ce62:	f7f3 fe49 	bl	8000af8 <__aeabi_d2iz>
 800ce66:	f7f3 fb2d 	bl	80004c4 <__aeabi_i2d>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	4630      	mov	r0, r6
 800ce70:	4639      	mov	r1, r7
 800ce72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce76:	f7f3 f9d7 	bl	8000228 <__aeabi_dsub>
 800ce7a:	4b22      	ldr	r3, [pc, #136]	; (800cf04 <__ieee754_rem_pio2+0x40c>)
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f7f3 fb8b 	bl	8000598 <__aeabi_dmul>
 800ce82:	460f      	mov	r7, r1
 800ce84:	4606      	mov	r6, r0
 800ce86:	f7f3 fe37 	bl	8000af8 <__aeabi_d2iz>
 800ce8a:	f7f3 fb1b 	bl	80004c4 <__aeabi_i2d>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce9a:	f7f3 f9c5 	bl	8000228 <__aeabi_dsub>
 800ce9e:	4b19      	ldr	r3, [pc, #100]	; (800cf04 <__ieee754_rem_pio2+0x40c>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	f7f3 fb79 	bl	8000598 <__aeabi_dmul>
 800cea6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ceaa:	ad04      	add	r5, sp, #16
 800ceac:	f04f 0803 	mov.w	r8, #3
 800ceb0:	46a9      	mov	r9, r5
 800ceb2:	2600      	movs	r6, #0
 800ceb4:	2700      	movs	r7, #0
 800ceb6:	4632      	mov	r2, r6
 800ceb8:	463b      	mov	r3, r7
 800ceba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cebe:	46c3      	mov	fp, r8
 800cec0:	3d08      	subs	r5, #8
 800cec2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cec6:	f7f3 fdcf 	bl	8000a68 <__aeabi_dcmpeq>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d1f3      	bne.n	800ceb6 <__ieee754_rem_pio2+0x3be>
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <__ieee754_rem_pio2+0x410>)
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	2302      	movs	r3, #2
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	4622      	mov	r2, r4
 800ced8:	465b      	mov	r3, fp
 800ceda:	4651      	mov	r1, sl
 800cedc:	4648      	mov	r0, r9
 800cede:	f000 f993 	bl	800d208 <__kernel_rem_pio2>
 800cee2:	9b02      	ldr	r3, [sp, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	4683      	mov	fp, r0
 800cee8:	f6bf ae46 	bge.w	800cb78 <__ieee754_rem_pio2+0x80>
 800ceec:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cef0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cef4:	f8ca 3004 	str.w	r3, [sl, #4]
 800cef8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cefc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cf00:	e73a      	b.n	800cd78 <__ieee754_rem_pio2+0x280>
 800cf02:	bf00      	nop
 800cf04:	41700000 	.word	0x41700000
 800cf08:	0800dfe8 	.word	0x0800dfe8

0800cf0c <__ieee754_sqrt>:
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	ec55 4b10 	vmov	r4, r5, d0
 800cf14:	4e56      	ldr	r6, [pc, #344]	; (800d070 <__ieee754_sqrt+0x164>)
 800cf16:	43ae      	bics	r6, r5
 800cf18:	ee10 0a10 	vmov	r0, s0
 800cf1c:	ee10 3a10 	vmov	r3, s0
 800cf20:	4629      	mov	r1, r5
 800cf22:	462a      	mov	r2, r5
 800cf24:	d110      	bne.n	800cf48 <__ieee754_sqrt+0x3c>
 800cf26:	ee10 2a10 	vmov	r2, s0
 800cf2a:	462b      	mov	r3, r5
 800cf2c:	f7f3 fb34 	bl	8000598 <__aeabi_dmul>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	4620      	mov	r0, r4
 800cf36:	4629      	mov	r1, r5
 800cf38:	f7f3 f978 	bl	800022c <__adddf3>
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	ec45 4b10 	vmov	d0, r4, r5
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	2d00      	cmp	r5, #0
 800cf4a:	dc10      	bgt.n	800cf6e <__ieee754_sqrt+0x62>
 800cf4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf50:	4330      	orrs	r0, r6
 800cf52:	d0f5      	beq.n	800cf40 <__ieee754_sqrt+0x34>
 800cf54:	b15d      	cbz	r5, 800cf6e <__ieee754_sqrt+0x62>
 800cf56:	ee10 2a10 	vmov	r2, s0
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	ee10 0a10 	vmov	r0, s0
 800cf60:	f7f3 f962 	bl	8000228 <__aeabi_dsub>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	f7f3 fc40 	bl	80007ec <__aeabi_ddiv>
 800cf6c:	e7e6      	b.n	800cf3c <__ieee754_sqrt+0x30>
 800cf6e:	1509      	asrs	r1, r1, #20
 800cf70:	d076      	beq.n	800d060 <__ieee754_sqrt+0x154>
 800cf72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cf76:	07ce      	lsls	r6, r1, #31
 800cf78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cf7c:	bf5e      	ittt	pl
 800cf7e:	0fda      	lsrpl	r2, r3, #31
 800cf80:	005b      	lslpl	r3, r3, #1
 800cf82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cf86:	0fda      	lsrs	r2, r3, #31
 800cf88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cf8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cf90:	2000      	movs	r0, #0
 800cf92:	106d      	asrs	r5, r5, #1
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	f04f 0e16 	mov.w	lr, #22
 800cf9a:	4684      	mov	ip, r0
 800cf9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfa0:	eb0c 0401 	add.w	r4, ip, r1
 800cfa4:	4294      	cmp	r4, r2
 800cfa6:	bfde      	ittt	le
 800cfa8:	1b12      	suble	r2, r2, r4
 800cfaa:	eb04 0c01 	addle.w	ip, r4, r1
 800cfae:	1840      	addle	r0, r0, r1
 800cfb0:	0052      	lsls	r2, r2, #1
 800cfb2:	f1be 0e01 	subs.w	lr, lr, #1
 800cfb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cfba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cfc2:	d1ed      	bne.n	800cfa0 <__ieee754_sqrt+0x94>
 800cfc4:	4671      	mov	r1, lr
 800cfc6:	2720      	movs	r7, #32
 800cfc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cfcc:	4562      	cmp	r2, ip
 800cfce:	eb04 060e 	add.w	r6, r4, lr
 800cfd2:	dc02      	bgt.n	800cfda <__ieee754_sqrt+0xce>
 800cfd4:	d113      	bne.n	800cffe <__ieee754_sqrt+0xf2>
 800cfd6:	429e      	cmp	r6, r3
 800cfd8:	d811      	bhi.n	800cffe <__ieee754_sqrt+0xf2>
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	eb06 0e04 	add.w	lr, r6, r4
 800cfe0:	da43      	bge.n	800d06a <__ieee754_sqrt+0x15e>
 800cfe2:	f1be 0f00 	cmp.w	lr, #0
 800cfe6:	db40      	blt.n	800d06a <__ieee754_sqrt+0x15e>
 800cfe8:	f10c 0801 	add.w	r8, ip, #1
 800cfec:	eba2 020c 	sub.w	r2, r2, ip
 800cff0:	429e      	cmp	r6, r3
 800cff2:	bf88      	it	hi
 800cff4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cff8:	1b9b      	subs	r3, r3, r6
 800cffa:	4421      	add	r1, r4
 800cffc:	46c4      	mov	ip, r8
 800cffe:	0052      	lsls	r2, r2, #1
 800d000:	3f01      	subs	r7, #1
 800d002:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d006:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d00a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d00e:	d1dd      	bne.n	800cfcc <__ieee754_sqrt+0xc0>
 800d010:	4313      	orrs	r3, r2
 800d012:	d006      	beq.n	800d022 <__ieee754_sqrt+0x116>
 800d014:	1c4c      	adds	r4, r1, #1
 800d016:	bf13      	iteet	ne
 800d018:	3101      	addne	r1, #1
 800d01a:	3001      	addeq	r0, #1
 800d01c:	4639      	moveq	r1, r7
 800d01e:	f021 0101 	bicne.w	r1, r1, #1
 800d022:	1043      	asrs	r3, r0, #1
 800d024:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d028:	0849      	lsrs	r1, r1, #1
 800d02a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d02e:	07c2      	lsls	r2, r0, #31
 800d030:	bf48      	it	mi
 800d032:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d036:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d03a:	460c      	mov	r4, r1
 800d03c:	463d      	mov	r5, r7
 800d03e:	e77f      	b.n	800cf40 <__ieee754_sqrt+0x34>
 800d040:	0ada      	lsrs	r2, r3, #11
 800d042:	3815      	subs	r0, #21
 800d044:	055b      	lsls	r3, r3, #21
 800d046:	2a00      	cmp	r2, #0
 800d048:	d0fa      	beq.n	800d040 <__ieee754_sqrt+0x134>
 800d04a:	02d7      	lsls	r7, r2, #11
 800d04c:	d50a      	bpl.n	800d064 <__ieee754_sqrt+0x158>
 800d04e:	f1c1 0420 	rsb	r4, r1, #32
 800d052:	fa23 f404 	lsr.w	r4, r3, r4
 800d056:	1e4d      	subs	r5, r1, #1
 800d058:	408b      	lsls	r3, r1
 800d05a:	4322      	orrs	r2, r4
 800d05c:	1b41      	subs	r1, r0, r5
 800d05e:	e788      	b.n	800cf72 <__ieee754_sqrt+0x66>
 800d060:	4608      	mov	r0, r1
 800d062:	e7f0      	b.n	800d046 <__ieee754_sqrt+0x13a>
 800d064:	0052      	lsls	r2, r2, #1
 800d066:	3101      	adds	r1, #1
 800d068:	e7ef      	b.n	800d04a <__ieee754_sqrt+0x13e>
 800d06a:	46e0      	mov	r8, ip
 800d06c:	e7be      	b.n	800cfec <__ieee754_sqrt+0xe0>
 800d06e:	bf00      	nop
 800d070:	7ff00000 	.word	0x7ff00000
 800d074:	00000000 	.word	0x00000000

0800d078 <__kernel_cos>:
 800d078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	ec57 6b10 	vmov	r6, r7, d0
 800d080:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d084:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d088:	ed8d 1b00 	vstr	d1, [sp]
 800d08c:	da07      	bge.n	800d09e <__kernel_cos+0x26>
 800d08e:	ee10 0a10 	vmov	r0, s0
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 fd30 	bl	8000af8 <__aeabi_d2iz>
 800d098:	2800      	cmp	r0, #0
 800d09a:	f000 8088 	beq.w	800d1ae <__kernel_cos+0x136>
 800d09e:	4632      	mov	r2, r6
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	4639      	mov	r1, r7
 800d0a6:	f7f3 fa77 	bl	8000598 <__aeabi_dmul>
 800d0aa:	4b51      	ldr	r3, [pc, #324]	; (800d1f0 <__kernel_cos+0x178>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	460d      	mov	r5, r1
 800d0b2:	f7f3 fa71 	bl	8000598 <__aeabi_dmul>
 800d0b6:	a340      	add	r3, pc, #256	; (adr r3, 800d1b8 <__kernel_cos+0x140>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	4682      	mov	sl, r0
 800d0be:	468b      	mov	fp, r1
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	f7f3 fa68 	bl	8000598 <__aeabi_dmul>
 800d0c8:	a33d      	add	r3, pc, #244	; (adr r3, 800d1c0 <__kernel_cos+0x148>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	f7f3 f8ad 	bl	800022c <__adddf3>
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	462b      	mov	r3, r5
 800d0d6:	f7f3 fa5f 	bl	8000598 <__aeabi_dmul>
 800d0da:	a33b      	add	r3, pc, #236	; (adr r3, 800d1c8 <__kernel_cos+0x150>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	f7f3 f8a2 	bl	8000228 <__aeabi_dsub>
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	462b      	mov	r3, r5
 800d0e8:	f7f3 fa56 	bl	8000598 <__aeabi_dmul>
 800d0ec:	a338      	add	r3, pc, #224	; (adr r3, 800d1d0 <__kernel_cos+0x158>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	f7f3 f89b 	bl	800022c <__adddf3>
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	462b      	mov	r3, r5
 800d0fa:	f7f3 fa4d 	bl	8000598 <__aeabi_dmul>
 800d0fe:	a336      	add	r3, pc, #216	; (adr r3, 800d1d8 <__kernel_cos+0x160>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f890 	bl	8000228 <__aeabi_dsub>
 800d108:	4622      	mov	r2, r4
 800d10a:	462b      	mov	r3, r5
 800d10c:	f7f3 fa44 	bl	8000598 <__aeabi_dmul>
 800d110:	a333      	add	r3, pc, #204	; (adr r3, 800d1e0 <__kernel_cos+0x168>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f889 	bl	800022c <__adddf3>
 800d11a:	4622      	mov	r2, r4
 800d11c:	462b      	mov	r3, r5
 800d11e:	f7f3 fa3b 	bl	8000598 <__aeabi_dmul>
 800d122:	4622      	mov	r2, r4
 800d124:	462b      	mov	r3, r5
 800d126:	f7f3 fa37 	bl	8000598 <__aeabi_dmul>
 800d12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d12e:	4604      	mov	r4, r0
 800d130:	460d      	mov	r5, r1
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 fa2f 	bl	8000598 <__aeabi_dmul>
 800d13a:	460b      	mov	r3, r1
 800d13c:	4602      	mov	r2, r0
 800d13e:	4629      	mov	r1, r5
 800d140:	4620      	mov	r0, r4
 800d142:	f7f3 f871 	bl	8000228 <__aeabi_dsub>
 800d146:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <__kernel_cos+0x17c>)
 800d148:	4598      	cmp	r8, r3
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	dc10      	bgt.n	800d172 <__kernel_cos+0xfa>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	4650      	mov	r0, sl
 800d156:	4659      	mov	r1, fp
 800d158:	f7f3 f866 	bl	8000228 <__aeabi_dsub>
 800d15c:	460b      	mov	r3, r1
 800d15e:	4926      	ldr	r1, [pc, #152]	; (800d1f8 <__kernel_cos+0x180>)
 800d160:	4602      	mov	r2, r0
 800d162:	2000      	movs	r0, #0
 800d164:	f7f3 f860 	bl	8000228 <__aeabi_dsub>
 800d168:	ec41 0b10 	vmov	d0, r0, r1
 800d16c:	b003      	add	sp, #12
 800d16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d172:	4b22      	ldr	r3, [pc, #136]	; (800d1fc <__kernel_cos+0x184>)
 800d174:	4920      	ldr	r1, [pc, #128]	; (800d1f8 <__kernel_cos+0x180>)
 800d176:	4598      	cmp	r8, r3
 800d178:	bfcc      	ite	gt
 800d17a:	4d21      	ldrgt	r5, [pc, #132]	; (800d200 <__kernel_cos+0x188>)
 800d17c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d180:	2400      	movs	r4, #0
 800d182:	4622      	mov	r2, r4
 800d184:	462b      	mov	r3, r5
 800d186:	2000      	movs	r0, #0
 800d188:	f7f3 f84e 	bl	8000228 <__aeabi_dsub>
 800d18c:	4622      	mov	r2, r4
 800d18e:	4680      	mov	r8, r0
 800d190:	4689      	mov	r9, r1
 800d192:	462b      	mov	r3, r5
 800d194:	4650      	mov	r0, sl
 800d196:	4659      	mov	r1, fp
 800d198:	f7f3 f846 	bl	8000228 <__aeabi_dsub>
 800d19c:	4632      	mov	r2, r6
 800d19e:	463b      	mov	r3, r7
 800d1a0:	f7f3 f842 	bl	8000228 <__aeabi_dsub>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	e7da      	b.n	800d164 <__kernel_cos+0xec>
 800d1ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d1e8 <__kernel_cos+0x170>
 800d1b2:	e7db      	b.n	800d16c <__kernel_cos+0xf4>
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	be8838d4 	.word	0xbe8838d4
 800d1bc:	bda8fae9 	.word	0xbda8fae9
 800d1c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d1c4:	3e21ee9e 	.word	0x3e21ee9e
 800d1c8:	809c52ad 	.word	0x809c52ad
 800d1cc:	3e927e4f 	.word	0x3e927e4f
 800d1d0:	19cb1590 	.word	0x19cb1590
 800d1d4:	3efa01a0 	.word	0x3efa01a0
 800d1d8:	16c15177 	.word	0x16c15177
 800d1dc:	3f56c16c 	.word	0x3f56c16c
 800d1e0:	5555554c 	.word	0x5555554c
 800d1e4:	3fa55555 	.word	0x3fa55555
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	3ff00000 	.word	0x3ff00000
 800d1f0:	3fe00000 	.word	0x3fe00000
 800d1f4:	3fd33332 	.word	0x3fd33332
 800d1f8:	3ff00000 	.word	0x3ff00000
 800d1fc:	3fe90000 	.word	0x3fe90000
 800d200:	3fd20000 	.word	0x3fd20000
 800d204:	00000000 	.word	0x00000000

0800d208 <__kernel_rem_pio2>:
 800d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	ed2d 8b02 	vpush	{d8}
 800d210:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d214:	f112 0f14 	cmn.w	r2, #20
 800d218:	9308      	str	r3, [sp, #32]
 800d21a:	9101      	str	r1, [sp, #4]
 800d21c:	4bc6      	ldr	r3, [pc, #792]	; (800d538 <__kernel_rem_pio2+0x330>)
 800d21e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d220:	9009      	str	r0, [sp, #36]	; 0x24
 800d222:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	9b08      	ldr	r3, [sp, #32]
 800d22a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d22e:	bfa8      	it	ge
 800d230:	1ed4      	subge	r4, r2, #3
 800d232:	9306      	str	r3, [sp, #24]
 800d234:	bfb2      	itee	lt
 800d236:	2400      	movlt	r4, #0
 800d238:	2318      	movge	r3, #24
 800d23a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d23e:	f06f 0317 	mvn.w	r3, #23
 800d242:	fb04 3303 	mla	r3, r4, r3, r3
 800d246:	eb03 0a02 	add.w	sl, r3, r2
 800d24a:	9b04      	ldr	r3, [sp, #16]
 800d24c:	9a06      	ldr	r2, [sp, #24]
 800d24e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d528 <__kernel_rem_pio2+0x320>
 800d252:	eb03 0802 	add.w	r8, r3, r2
 800d256:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d258:	1aa7      	subs	r7, r4, r2
 800d25a:	ae20      	add	r6, sp, #128	; 0x80
 800d25c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d260:	2500      	movs	r5, #0
 800d262:	4545      	cmp	r5, r8
 800d264:	dd18      	ble.n	800d298 <__kernel_rem_pio2+0x90>
 800d266:	9b08      	ldr	r3, [sp, #32]
 800d268:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d26c:	aa20      	add	r2, sp, #128	; 0x80
 800d26e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d528 <__kernel_rem_pio2+0x320>
 800d272:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d276:	f1c3 0301 	rsb	r3, r3, #1
 800d27a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d27e:	9307      	str	r3, [sp, #28]
 800d280:	9b07      	ldr	r3, [sp, #28]
 800d282:	9a04      	ldr	r2, [sp, #16]
 800d284:	4443      	add	r3, r8
 800d286:	429a      	cmp	r2, r3
 800d288:	db2f      	blt.n	800d2ea <__kernel_rem_pio2+0xe2>
 800d28a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d28e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d292:	462f      	mov	r7, r5
 800d294:	2600      	movs	r6, #0
 800d296:	e01b      	b.n	800d2d0 <__kernel_rem_pio2+0xc8>
 800d298:	42ef      	cmn	r7, r5
 800d29a:	d407      	bmi.n	800d2ac <__kernel_rem_pio2+0xa4>
 800d29c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d2a0:	f7f3 f910 	bl	80004c4 <__aeabi_i2d>
 800d2a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	e7da      	b.n	800d262 <__kernel_rem_pio2+0x5a>
 800d2ac:	ec51 0b18 	vmov	r0, r1, d8
 800d2b0:	e7f8      	b.n	800d2a4 <__kernel_rem_pio2+0x9c>
 800d2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2b6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d2ba:	f7f3 f96d 	bl	8000598 <__aeabi_dmul>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2c6:	f7f2 ffb1 	bl	800022c <__adddf3>
 800d2ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2ce:	3601      	adds	r6, #1
 800d2d0:	9b06      	ldr	r3, [sp, #24]
 800d2d2:	429e      	cmp	r6, r3
 800d2d4:	f1a7 0708 	sub.w	r7, r7, #8
 800d2d8:	ddeb      	ble.n	800d2b2 <__kernel_rem_pio2+0xaa>
 800d2da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2de:	3508      	adds	r5, #8
 800d2e0:	ecab 7b02 	vstmia	fp!, {d7}
 800d2e4:	f108 0801 	add.w	r8, r8, #1
 800d2e8:	e7ca      	b.n	800d280 <__kernel_rem_pio2+0x78>
 800d2ea:	9b04      	ldr	r3, [sp, #16]
 800d2ec:	aa0c      	add	r2, sp, #48	; 0x30
 800d2ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2f4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d2f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d2fa:	9c04      	ldr	r4, [sp, #16]
 800d2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800d2fe:	ab98      	add	r3, sp, #608	; 0x260
 800d300:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d304:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d308:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d30c:	f8cd b008 	str.w	fp, [sp, #8]
 800d310:	4625      	mov	r5, r4
 800d312:	2d00      	cmp	r5, #0
 800d314:	dc78      	bgt.n	800d408 <__kernel_rem_pio2+0x200>
 800d316:	ec47 6b10 	vmov	d0, r6, r7
 800d31a:	4650      	mov	r0, sl
 800d31c:	f000 fc9c 	bl	800dc58 <scalbn>
 800d320:	ec57 6b10 	vmov	r6, r7, d0
 800d324:	2200      	movs	r2, #0
 800d326:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d32a:	ee10 0a10 	vmov	r0, s0
 800d32e:	4639      	mov	r1, r7
 800d330:	f7f3 f932 	bl	8000598 <__aeabi_dmul>
 800d334:	ec41 0b10 	vmov	d0, r0, r1
 800d338:	f000 fb7a 	bl	800da30 <floor>
 800d33c:	4b7f      	ldr	r3, [pc, #508]	; (800d53c <__kernel_rem_pio2+0x334>)
 800d33e:	ec51 0b10 	vmov	r0, r1, d0
 800d342:	2200      	movs	r2, #0
 800d344:	f7f3 f928 	bl	8000598 <__aeabi_dmul>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f2 ff6a 	bl	8000228 <__aeabi_dsub>
 800d354:	460f      	mov	r7, r1
 800d356:	4606      	mov	r6, r0
 800d358:	f7f3 fbce 	bl	8000af8 <__aeabi_d2iz>
 800d35c:	9007      	str	r0, [sp, #28]
 800d35e:	f7f3 f8b1 	bl	80004c4 <__aeabi_i2d>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	4630      	mov	r0, r6
 800d368:	4639      	mov	r1, r7
 800d36a:	f7f2 ff5d 	bl	8000228 <__aeabi_dsub>
 800d36e:	f1ba 0f00 	cmp.w	sl, #0
 800d372:	4606      	mov	r6, r0
 800d374:	460f      	mov	r7, r1
 800d376:	dd70      	ble.n	800d45a <__kernel_rem_pio2+0x252>
 800d378:	1e62      	subs	r2, r4, #1
 800d37a:	ab0c      	add	r3, sp, #48	; 0x30
 800d37c:	9d07      	ldr	r5, [sp, #28]
 800d37e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d382:	f1ca 0118 	rsb	r1, sl, #24
 800d386:	fa40 f301 	asr.w	r3, r0, r1
 800d38a:	441d      	add	r5, r3
 800d38c:	408b      	lsls	r3, r1
 800d38e:	1ac0      	subs	r0, r0, r3
 800d390:	ab0c      	add	r3, sp, #48	; 0x30
 800d392:	9507      	str	r5, [sp, #28]
 800d394:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d398:	f1ca 0317 	rsb	r3, sl, #23
 800d39c:	fa40 f303 	asr.w	r3, r0, r3
 800d3a0:	9302      	str	r3, [sp, #8]
 800d3a2:	9b02      	ldr	r3, [sp, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd66      	ble.n	800d476 <__kernel_rem_pio2+0x26e>
 800d3a8:	9b07      	ldr	r3, [sp, #28]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	9307      	str	r3, [sp, #28]
 800d3b0:	4615      	mov	r5, r2
 800d3b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d3b6:	4294      	cmp	r4, r2
 800d3b8:	f300 8099 	bgt.w	800d4ee <__kernel_rem_pio2+0x2e6>
 800d3bc:	f1ba 0f00 	cmp.w	sl, #0
 800d3c0:	dd07      	ble.n	800d3d2 <__kernel_rem_pio2+0x1ca>
 800d3c2:	f1ba 0f01 	cmp.w	sl, #1
 800d3c6:	f000 80a5 	beq.w	800d514 <__kernel_rem_pio2+0x30c>
 800d3ca:	f1ba 0f02 	cmp.w	sl, #2
 800d3ce:	f000 80c1 	beq.w	800d554 <__kernel_rem_pio2+0x34c>
 800d3d2:	9b02      	ldr	r3, [sp, #8]
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d14e      	bne.n	800d476 <__kernel_rem_pio2+0x26e>
 800d3d8:	4632      	mov	r2, r6
 800d3da:	463b      	mov	r3, r7
 800d3dc:	4958      	ldr	r1, [pc, #352]	; (800d540 <__kernel_rem_pio2+0x338>)
 800d3de:	2000      	movs	r0, #0
 800d3e0:	f7f2 ff22 	bl	8000228 <__aeabi_dsub>
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	460f      	mov	r7, r1
 800d3e8:	2d00      	cmp	r5, #0
 800d3ea:	d044      	beq.n	800d476 <__kernel_rem_pio2+0x26e>
 800d3ec:	4650      	mov	r0, sl
 800d3ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d530 <__kernel_rem_pio2+0x328>
 800d3f2:	f000 fc31 	bl	800dc58 <scalbn>
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	4639      	mov	r1, r7
 800d3fa:	ec53 2b10 	vmov	r2, r3, d0
 800d3fe:	f7f2 ff13 	bl	8000228 <__aeabi_dsub>
 800d402:	4606      	mov	r6, r0
 800d404:	460f      	mov	r7, r1
 800d406:	e036      	b.n	800d476 <__kernel_rem_pio2+0x26e>
 800d408:	4b4e      	ldr	r3, [pc, #312]	; (800d544 <__kernel_rem_pio2+0x33c>)
 800d40a:	2200      	movs	r2, #0
 800d40c:	4630      	mov	r0, r6
 800d40e:	4639      	mov	r1, r7
 800d410:	f7f3 f8c2 	bl	8000598 <__aeabi_dmul>
 800d414:	f7f3 fb70 	bl	8000af8 <__aeabi_d2iz>
 800d418:	f7f3 f854 	bl	80004c4 <__aeabi_i2d>
 800d41c:	4b4a      	ldr	r3, [pc, #296]	; (800d548 <__kernel_rem_pio2+0x340>)
 800d41e:	2200      	movs	r2, #0
 800d420:	4680      	mov	r8, r0
 800d422:	4689      	mov	r9, r1
 800d424:	f7f3 f8b8 	bl	8000598 <__aeabi_dmul>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	4630      	mov	r0, r6
 800d42e:	4639      	mov	r1, r7
 800d430:	f7f2 fefa 	bl	8000228 <__aeabi_dsub>
 800d434:	f7f3 fb60 	bl	8000af8 <__aeabi_d2iz>
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	f843 0b04 	str.w	r0, [r3], #4
 800d43e:	3d01      	subs	r5, #1
 800d440:	9302      	str	r3, [sp, #8]
 800d442:	ab70      	add	r3, sp, #448	; 0x1c0
 800d444:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	4640      	mov	r0, r8
 800d44e:	4649      	mov	r1, r9
 800d450:	f7f2 feec 	bl	800022c <__adddf3>
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	e75b      	b.n	800d312 <__kernel_rem_pio2+0x10a>
 800d45a:	d105      	bne.n	800d468 <__kernel_rem_pio2+0x260>
 800d45c:	1e63      	subs	r3, r4, #1
 800d45e:	aa0c      	add	r2, sp, #48	; 0x30
 800d460:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d464:	15c3      	asrs	r3, r0, #23
 800d466:	e79b      	b.n	800d3a0 <__kernel_rem_pio2+0x198>
 800d468:	4b38      	ldr	r3, [pc, #224]	; (800d54c <__kernel_rem_pio2+0x344>)
 800d46a:	2200      	movs	r2, #0
 800d46c:	f7f3 fb1a 	bl	8000aa4 <__aeabi_dcmpge>
 800d470:	2800      	cmp	r0, #0
 800d472:	d139      	bne.n	800d4e8 <__kernel_rem_pio2+0x2e0>
 800d474:	9002      	str	r0, [sp, #8]
 800d476:	2200      	movs	r2, #0
 800d478:	2300      	movs	r3, #0
 800d47a:	4630      	mov	r0, r6
 800d47c:	4639      	mov	r1, r7
 800d47e:	f7f3 faf3 	bl	8000a68 <__aeabi_dcmpeq>
 800d482:	2800      	cmp	r0, #0
 800d484:	f000 80b4 	beq.w	800d5f0 <__kernel_rem_pio2+0x3e8>
 800d488:	f104 3bff 	add.w	fp, r4, #4294967295
 800d48c:	465b      	mov	r3, fp
 800d48e:	2200      	movs	r2, #0
 800d490:	9904      	ldr	r1, [sp, #16]
 800d492:	428b      	cmp	r3, r1
 800d494:	da65      	bge.n	800d562 <__kernel_rem_pio2+0x35a>
 800d496:	2a00      	cmp	r2, #0
 800d498:	d07b      	beq.n	800d592 <__kernel_rem_pio2+0x38a>
 800d49a:	ab0c      	add	r3, sp, #48	; 0x30
 800d49c:	f1aa 0a18 	sub.w	sl, sl, #24
 800d4a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f000 80a0 	beq.w	800d5ea <__kernel_rem_pio2+0x3e2>
 800d4aa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d530 <__kernel_rem_pio2+0x328>
 800d4ae:	4650      	mov	r0, sl
 800d4b0:	f000 fbd2 	bl	800dc58 <scalbn>
 800d4b4:	4f23      	ldr	r7, [pc, #140]	; (800d544 <__kernel_rem_pio2+0x33c>)
 800d4b6:	ec55 4b10 	vmov	r4, r5, d0
 800d4ba:	46d8      	mov	r8, fp
 800d4bc:	2600      	movs	r6, #0
 800d4be:	f1b8 0f00 	cmp.w	r8, #0
 800d4c2:	f280 80cf 	bge.w	800d664 <__kernel_rem_pio2+0x45c>
 800d4c6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d528 <__kernel_rem_pio2+0x320>
 800d4ca:	465f      	mov	r7, fp
 800d4cc:	f04f 0800 	mov.w	r8, #0
 800d4d0:	2f00      	cmp	r7, #0
 800d4d2:	f2c0 80fd 	blt.w	800d6d0 <__kernel_rem_pio2+0x4c8>
 800d4d6:	ab70      	add	r3, sp, #448	; 0x1c0
 800d4d8:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d550 <__kernel_rem_pio2+0x348>
 800d4dc:	ec55 4b18 	vmov	r4, r5, d8
 800d4e0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d4e4:	2600      	movs	r6, #0
 800d4e6:	e0e5      	b.n	800d6b4 <__kernel_rem_pio2+0x4ac>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	9302      	str	r3, [sp, #8]
 800d4ec:	e75c      	b.n	800d3a8 <__kernel_rem_pio2+0x1a0>
 800d4ee:	f8db 3000 	ldr.w	r3, [fp]
 800d4f2:	b955      	cbnz	r5, 800d50a <__kernel_rem_pio2+0x302>
 800d4f4:	b123      	cbz	r3, 800d500 <__kernel_rem_pio2+0x2f8>
 800d4f6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d4fa:	f8cb 3000 	str.w	r3, [fp]
 800d4fe:	2301      	movs	r3, #1
 800d500:	3201      	adds	r2, #1
 800d502:	f10b 0b04 	add.w	fp, fp, #4
 800d506:	461d      	mov	r5, r3
 800d508:	e755      	b.n	800d3b6 <__kernel_rem_pio2+0x1ae>
 800d50a:	1acb      	subs	r3, r1, r3
 800d50c:	f8cb 3000 	str.w	r3, [fp]
 800d510:	462b      	mov	r3, r5
 800d512:	e7f5      	b.n	800d500 <__kernel_rem_pio2+0x2f8>
 800d514:	1e62      	subs	r2, r4, #1
 800d516:	ab0c      	add	r3, sp, #48	; 0x30
 800d518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d520:	a90c      	add	r1, sp, #48	; 0x30
 800d522:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d526:	e754      	b.n	800d3d2 <__kernel_rem_pio2+0x1ca>
	...
 800d534:	3ff00000 	.word	0x3ff00000
 800d538:	0800e130 	.word	0x0800e130
 800d53c:	40200000 	.word	0x40200000
 800d540:	3ff00000 	.word	0x3ff00000
 800d544:	3e700000 	.word	0x3e700000
 800d548:	41700000 	.word	0x41700000
 800d54c:	3fe00000 	.word	0x3fe00000
 800d550:	0800e0f0 	.word	0x0800e0f0
 800d554:	1e62      	subs	r2, r4, #1
 800d556:	ab0c      	add	r3, sp, #48	; 0x30
 800d558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d55c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d560:	e7de      	b.n	800d520 <__kernel_rem_pio2+0x318>
 800d562:	a90c      	add	r1, sp, #48	; 0x30
 800d564:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d568:	3b01      	subs	r3, #1
 800d56a:	430a      	orrs	r2, r1
 800d56c:	e790      	b.n	800d490 <__kernel_rem_pio2+0x288>
 800d56e:	3301      	adds	r3, #1
 800d570:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d574:	2900      	cmp	r1, #0
 800d576:	d0fa      	beq.n	800d56e <__kernel_rem_pio2+0x366>
 800d578:	9a08      	ldr	r2, [sp, #32]
 800d57a:	18e3      	adds	r3, r4, r3
 800d57c:	18a6      	adds	r6, r4, r2
 800d57e:	aa20      	add	r2, sp, #128	; 0x80
 800d580:	1c65      	adds	r5, r4, #1
 800d582:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	9b02      	ldr	r3, [sp, #8]
 800d58a:	42ab      	cmp	r3, r5
 800d58c:	da04      	bge.n	800d598 <__kernel_rem_pio2+0x390>
 800d58e:	461c      	mov	r4, r3
 800d590:	e6b5      	b.n	800d2fe <__kernel_rem_pio2+0xf6>
 800d592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d594:	2301      	movs	r3, #1
 800d596:	e7eb      	b.n	800d570 <__kernel_rem_pio2+0x368>
 800d598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d59a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d59e:	f7f2 ff91 	bl	80004c4 <__aeabi_i2d>
 800d5a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	46b3      	mov	fp, r6
 800d5aa:	461c      	mov	r4, r3
 800d5ac:	2700      	movs	r7, #0
 800d5ae:	f04f 0800 	mov.w	r8, #0
 800d5b2:	f04f 0900 	mov.w	r9, #0
 800d5b6:	9b06      	ldr	r3, [sp, #24]
 800d5b8:	429f      	cmp	r7, r3
 800d5ba:	dd06      	ble.n	800d5ca <__kernel_rem_pio2+0x3c2>
 800d5bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800d5be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d5c2:	e9c3 8900 	strd	r8, r9, [r3]
 800d5c6:	3501      	adds	r5, #1
 800d5c8:	e7de      	b.n	800d588 <__kernel_rem_pio2+0x380>
 800d5ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d5ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d5d2:	f7f2 ffe1 	bl	8000598 <__aeabi_dmul>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	4640      	mov	r0, r8
 800d5dc:	4649      	mov	r1, r9
 800d5de:	f7f2 fe25 	bl	800022c <__adddf3>
 800d5e2:	3701      	adds	r7, #1
 800d5e4:	4680      	mov	r8, r0
 800d5e6:	4689      	mov	r9, r1
 800d5e8:	e7e5      	b.n	800d5b6 <__kernel_rem_pio2+0x3ae>
 800d5ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5ee:	e754      	b.n	800d49a <__kernel_rem_pio2+0x292>
 800d5f0:	ec47 6b10 	vmov	d0, r6, r7
 800d5f4:	f1ca 0000 	rsb	r0, sl, #0
 800d5f8:	f000 fb2e 	bl	800dc58 <scalbn>
 800d5fc:	ec57 6b10 	vmov	r6, r7, d0
 800d600:	4b9f      	ldr	r3, [pc, #636]	; (800d880 <__kernel_rem_pio2+0x678>)
 800d602:	ee10 0a10 	vmov	r0, s0
 800d606:	2200      	movs	r2, #0
 800d608:	4639      	mov	r1, r7
 800d60a:	f7f3 fa4b 	bl	8000aa4 <__aeabi_dcmpge>
 800d60e:	b300      	cbz	r0, 800d652 <__kernel_rem_pio2+0x44a>
 800d610:	4b9c      	ldr	r3, [pc, #624]	; (800d884 <__kernel_rem_pio2+0x67c>)
 800d612:	2200      	movs	r2, #0
 800d614:	4630      	mov	r0, r6
 800d616:	4639      	mov	r1, r7
 800d618:	f7f2 ffbe 	bl	8000598 <__aeabi_dmul>
 800d61c:	f7f3 fa6c 	bl	8000af8 <__aeabi_d2iz>
 800d620:	4605      	mov	r5, r0
 800d622:	f7f2 ff4f 	bl	80004c4 <__aeabi_i2d>
 800d626:	4b96      	ldr	r3, [pc, #600]	; (800d880 <__kernel_rem_pio2+0x678>)
 800d628:	2200      	movs	r2, #0
 800d62a:	f7f2 ffb5 	bl	8000598 <__aeabi_dmul>
 800d62e:	460b      	mov	r3, r1
 800d630:	4602      	mov	r2, r0
 800d632:	4639      	mov	r1, r7
 800d634:	4630      	mov	r0, r6
 800d636:	f7f2 fdf7 	bl	8000228 <__aeabi_dsub>
 800d63a:	f7f3 fa5d 	bl	8000af8 <__aeabi_d2iz>
 800d63e:	f104 0b01 	add.w	fp, r4, #1
 800d642:	ab0c      	add	r3, sp, #48	; 0x30
 800d644:	f10a 0a18 	add.w	sl, sl, #24
 800d648:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d64c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d650:	e72b      	b.n	800d4aa <__kernel_rem_pio2+0x2a2>
 800d652:	4630      	mov	r0, r6
 800d654:	4639      	mov	r1, r7
 800d656:	f7f3 fa4f 	bl	8000af8 <__aeabi_d2iz>
 800d65a:	ab0c      	add	r3, sp, #48	; 0x30
 800d65c:	46a3      	mov	fp, r4
 800d65e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d662:	e722      	b.n	800d4aa <__kernel_rem_pio2+0x2a2>
 800d664:	ab70      	add	r3, sp, #448	; 0x1c0
 800d666:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d66a:	ab0c      	add	r3, sp, #48	; 0x30
 800d66c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d670:	f7f2 ff28 	bl	80004c4 <__aeabi_i2d>
 800d674:	4622      	mov	r2, r4
 800d676:	462b      	mov	r3, r5
 800d678:	f7f2 ff8e 	bl	8000598 <__aeabi_dmul>
 800d67c:	4632      	mov	r2, r6
 800d67e:	e9c9 0100 	strd	r0, r1, [r9]
 800d682:	463b      	mov	r3, r7
 800d684:	4620      	mov	r0, r4
 800d686:	4629      	mov	r1, r5
 800d688:	f7f2 ff86 	bl	8000598 <__aeabi_dmul>
 800d68c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d690:	4604      	mov	r4, r0
 800d692:	460d      	mov	r5, r1
 800d694:	e713      	b.n	800d4be <__kernel_rem_pio2+0x2b6>
 800d696:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d69a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d69e:	f7f2 ff7b 	bl	8000598 <__aeabi_dmul>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	f7f2 fdbf 	bl	800022c <__adddf3>
 800d6ae:	3601      	adds	r6, #1
 800d6b0:	4604      	mov	r4, r0
 800d6b2:	460d      	mov	r5, r1
 800d6b4:	9b04      	ldr	r3, [sp, #16]
 800d6b6:	429e      	cmp	r6, r3
 800d6b8:	dc01      	bgt.n	800d6be <__kernel_rem_pio2+0x4b6>
 800d6ba:	45b0      	cmp	r8, r6
 800d6bc:	daeb      	bge.n	800d696 <__kernel_rem_pio2+0x48e>
 800d6be:	ab48      	add	r3, sp, #288	; 0x120
 800d6c0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6c4:	e9c3 4500 	strd	r4, r5, [r3]
 800d6c8:	3f01      	subs	r7, #1
 800d6ca:	f108 0801 	add.w	r8, r8, #1
 800d6ce:	e6ff      	b.n	800d4d0 <__kernel_rem_pio2+0x2c8>
 800d6d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	dc0b      	bgt.n	800d6ee <__kernel_rem_pio2+0x4e6>
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dc6e      	bgt.n	800d7b8 <__kernel_rem_pio2+0x5b0>
 800d6da:	d045      	beq.n	800d768 <__kernel_rem_pio2+0x560>
 800d6dc:	9b07      	ldr	r3, [sp, #28]
 800d6de:	f003 0007 	and.w	r0, r3, #7
 800d6e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d6e6:	ecbd 8b02 	vpop	{d8}
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d6f0:	2b03      	cmp	r3, #3
 800d6f2:	d1f3      	bne.n	800d6dc <__kernel_rem_pio2+0x4d4>
 800d6f4:	ab48      	add	r3, sp, #288	; 0x120
 800d6f6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d6fa:	46d0      	mov	r8, sl
 800d6fc:	46d9      	mov	r9, fp
 800d6fe:	f1b9 0f00 	cmp.w	r9, #0
 800d702:	f1a8 0808 	sub.w	r8, r8, #8
 800d706:	dc64      	bgt.n	800d7d2 <__kernel_rem_pio2+0x5ca>
 800d708:	465c      	mov	r4, fp
 800d70a:	2c01      	cmp	r4, #1
 800d70c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d710:	dc7e      	bgt.n	800d810 <__kernel_rem_pio2+0x608>
 800d712:	2000      	movs	r0, #0
 800d714:	2100      	movs	r1, #0
 800d716:	f1bb 0f01 	cmp.w	fp, #1
 800d71a:	f300 8097 	bgt.w	800d84c <__kernel_rem_pio2+0x644>
 800d71e:	9b02      	ldr	r3, [sp, #8]
 800d720:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d724:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d728:	2b00      	cmp	r3, #0
 800d72a:	f040 8099 	bne.w	800d860 <__kernel_rem_pio2+0x658>
 800d72e:	9b01      	ldr	r3, [sp, #4]
 800d730:	e9c3 5600 	strd	r5, r6, [r3]
 800d734:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d738:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d73c:	e7ce      	b.n	800d6dc <__kernel_rem_pio2+0x4d4>
 800d73e:	ab48      	add	r3, sp, #288	; 0x120
 800d740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f7f2 fd70 	bl	800022c <__adddf3>
 800d74c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d750:	f1bb 0f00 	cmp.w	fp, #0
 800d754:	daf3      	bge.n	800d73e <__kernel_rem_pio2+0x536>
 800d756:	9b02      	ldr	r3, [sp, #8]
 800d758:	b113      	cbz	r3, 800d760 <__kernel_rem_pio2+0x558>
 800d75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d75e:	4619      	mov	r1, r3
 800d760:	9b01      	ldr	r3, [sp, #4]
 800d762:	e9c3 0100 	strd	r0, r1, [r3]
 800d766:	e7b9      	b.n	800d6dc <__kernel_rem_pio2+0x4d4>
 800d768:	2000      	movs	r0, #0
 800d76a:	2100      	movs	r1, #0
 800d76c:	e7f0      	b.n	800d750 <__kernel_rem_pio2+0x548>
 800d76e:	ab48      	add	r3, sp, #288	; 0x120
 800d770:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d778:	f7f2 fd58 	bl	800022c <__adddf3>
 800d77c:	3c01      	subs	r4, #1
 800d77e:	2c00      	cmp	r4, #0
 800d780:	daf5      	bge.n	800d76e <__kernel_rem_pio2+0x566>
 800d782:	9b02      	ldr	r3, [sp, #8]
 800d784:	b1e3      	cbz	r3, 800d7c0 <__kernel_rem_pio2+0x5b8>
 800d786:	4602      	mov	r2, r0
 800d788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d78c:	9c01      	ldr	r4, [sp, #4]
 800d78e:	e9c4 2300 	strd	r2, r3, [r4]
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d79a:	f7f2 fd45 	bl	8000228 <__aeabi_dsub>
 800d79e:	ad4a      	add	r5, sp, #296	; 0x128
 800d7a0:	2401      	movs	r4, #1
 800d7a2:	45a3      	cmp	fp, r4
 800d7a4:	da0f      	bge.n	800d7c6 <__kernel_rem_pio2+0x5be>
 800d7a6:	9b02      	ldr	r3, [sp, #8]
 800d7a8:	b113      	cbz	r3, 800d7b0 <__kernel_rem_pio2+0x5a8>
 800d7aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	9b01      	ldr	r3, [sp, #4]
 800d7b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d7b6:	e791      	b.n	800d6dc <__kernel_rem_pio2+0x4d4>
 800d7b8:	465c      	mov	r4, fp
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	2100      	movs	r1, #0
 800d7be:	e7de      	b.n	800d77e <__kernel_rem_pio2+0x576>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	e7e2      	b.n	800d78c <__kernel_rem_pio2+0x584>
 800d7c6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d7ca:	f7f2 fd2f 	bl	800022c <__adddf3>
 800d7ce:	3401      	adds	r4, #1
 800d7d0:	e7e7      	b.n	800d7a2 <__kernel_rem_pio2+0x59a>
 800d7d2:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d7d6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	4632      	mov	r2, r6
 800d7de:	463b      	mov	r3, r7
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f2 fd23 	bl	800022c <__adddf3>
 800d7e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	f7f2 fd19 	bl	8000228 <__aeabi_dsub>
 800d7f6:	4632      	mov	r2, r6
 800d7f8:	463b      	mov	r3, r7
 800d7fa:	f7f2 fd17 	bl	800022c <__adddf3>
 800d7fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d802:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d806:	ed88 7b00 	vstr	d7, [r8]
 800d80a:	f109 39ff 	add.w	r9, r9, #4294967295
 800d80e:	e776      	b.n	800d6fe <__kernel_rem_pio2+0x4f6>
 800d810:	e9da 8900 	ldrd	r8, r9, [sl]
 800d814:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d818:	4640      	mov	r0, r8
 800d81a:	4632      	mov	r2, r6
 800d81c:	463b      	mov	r3, r7
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f2 fd04 	bl	800022c <__adddf3>
 800d824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d828:	4602      	mov	r2, r0
 800d82a:	460b      	mov	r3, r1
 800d82c:	4640      	mov	r0, r8
 800d82e:	4649      	mov	r1, r9
 800d830:	f7f2 fcfa 	bl	8000228 <__aeabi_dsub>
 800d834:	4632      	mov	r2, r6
 800d836:	463b      	mov	r3, r7
 800d838:	f7f2 fcf8 	bl	800022c <__adddf3>
 800d83c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d840:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d844:	ed8a 7b00 	vstr	d7, [sl]
 800d848:	3c01      	subs	r4, #1
 800d84a:	e75e      	b.n	800d70a <__kernel_rem_pio2+0x502>
 800d84c:	ab48      	add	r3, sp, #288	; 0x120
 800d84e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fce9 	bl	800022c <__adddf3>
 800d85a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d85e:	e75a      	b.n	800d716 <__kernel_rem_pio2+0x50e>
 800d860:	9b01      	ldr	r3, [sp, #4]
 800d862:	9a01      	ldr	r2, [sp, #4]
 800d864:	601d      	str	r5, [r3, #0]
 800d866:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d86a:	605c      	str	r4, [r3, #4]
 800d86c:	609f      	str	r7, [r3, #8]
 800d86e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d872:	60d3      	str	r3, [r2, #12]
 800d874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d878:	6110      	str	r0, [r2, #16]
 800d87a:	6153      	str	r3, [r2, #20]
 800d87c:	e72e      	b.n	800d6dc <__kernel_rem_pio2+0x4d4>
 800d87e:	bf00      	nop
 800d880:	41700000 	.word	0x41700000
 800d884:	3e700000 	.word	0x3e700000

0800d888 <__kernel_sin>:
 800d888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d88c:	ed2d 8b04 	vpush	{d8-d9}
 800d890:	eeb0 8a41 	vmov.f32	s16, s2
 800d894:	eef0 8a61 	vmov.f32	s17, s3
 800d898:	ec55 4b10 	vmov	r4, r5, d0
 800d89c:	b083      	sub	sp, #12
 800d89e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d8a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d8a6:	9001      	str	r0, [sp, #4]
 800d8a8:	da06      	bge.n	800d8b8 <__kernel_sin+0x30>
 800d8aa:	ee10 0a10 	vmov	r0, s0
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	f7f3 f922 	bl	8000af8 <__aeabi_d2iz>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d051      	beq.n	800d95c <__kernel_sin+0xd4>
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	462b      	mov	r3, r5
 800d8bc:	4620      	mov	r0, r4
 800d8be:	4629      	mov	r1, r5
 800d8c0:	f7f2 fe6a 	bl	8000598 <__aeabi_dmul>
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	468b      	mov	fp, r1
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	f7f2 fe62 	bl	8000598 <__aeabi_dmul>
 800d8d4:	a341      	add	r3, pc, #260	; (adr r3, 800d9dc <__kernel_sin+0x154>)
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	4680      	mov	r8, r0
 800d8dc:	4689      	mov	r9, r1
 800d8de:	4650      	mov	r0, sl
 800d8e0:	4659      	mov	r1, fp
 800d8e2:	f7f2 fe59 	bl	8000598 <__aeabi_dmul>
 800d8e6:	a33f      	add	r3, pc, #252	; (adr r3, 800d9e4 <__kernel_sin+0x15c>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fc9c 	bl	8000228 <__aeabi_dsub>
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	465b      	mov	r3, fp
 800d8f4:	f7f2 fe50 	bl	8000598 <__aeabi_dmul>
 800d8f8:	a33c      	add	r3, pc, #240	; (adr r3, 800d9ec <__kernel_sin+0x164>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fc95 	bl	800022c <__adddf3>
 800d902:	4652      	mov	r2, sl
 800d904:	465b      	mov	r3, fp
 800d906:	f7f2 fe47 	bl	8000598 <__aeabi_dmul>
 800d90a:	a33a      	add	r3, pc, #232	; (adr r3, 800d9f4 <__kernel_sin+0x16c>)
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	f7f2 fc8a 	bl	8000228 <__aeabi_dsub>
 800d914:	4652      	mov	r2, sl
 800d916:	465b      	mov	r3, fp
 800d918:	f7f2 fe3e 	bl	8000598 <__aeabi_dmul>
 800d91c:	a337      	add	r3, pc, #220	; (adr r3, 800d9fc <__kernel_sin+0x174>)
 800d91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d922:	f7f2 fc83 	bl	800022c <__adddf3>
 800d926:	9b01      	ldr	r3, [sp, #4]
 800d928:	4606      	mov	r6, r0
 800d92a:	460f      	mov	r7, r1
 800d92c:	b9eb      	cbnz	r3, 800d96a <__kernel_sin+0xe2>
 800d92e:	4602      	mov	r2, r0
 800d930:	460b      	mov	r3, r1
 800d932:	4650      	mov	r0, sl
 800d934:	4659      	mov	r1, fp
 800d936:	f7f2 fe2f 	bl	8000598 <__aeabi_dmul>
 800d93a:	a325      	add	r3, pc, #148	; (adr r3, 800d9d0 <__kernel_sin+0x148>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fc72 	bl	8000228 <__aeabi_dsub>
 800d944:	4642      	mov	r2, r8
 800d946:	464b      	mov	r3, r9
 800d948:	f7f2 fe26 	bl	8000598 <__aeabi_dmul>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	4620      	mov	r0, r4
 800d952:	4629      	mov	r1, r5
 800d954:	f7f2 fc6a 	bl	800022c <__adddf3>
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	ec45 4b10 	vmov	d0, r4, r5
 800d960:	b003      	add	sp, #12
 800d962:	ecbd 8b04 	vpop	{d8-d9}
 800d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96a:	4b1b      	ldr	r3, [pc, #108]	; (800d9d8 <__kernel_sin+0x150>)
 800d96c:	ec51 0b18 	vmov	r0, r1, d8
 800d970:	2200      	movs	r2, #0
 800d972:	f7f2 fe11 	bl	8000598 <__aeabi_dmul>
 800d976:	4632      	mov	r2, r6
 800d978:	ec41 0b19 	vmov	d9, r0, r1
 800d97c:	463b      	mov	r3, r7
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fe09 	bl	8000598 <__aeabi_dmul>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	ec51 0b19 	vmov	r0, r1, d9
 800d98e:	f7f2 fc4b 	bl	8000228 <__aeabi_dsub>
 800d992:	4652      	mov	r2, sl
 800d994:	465b      	mov	r3, fp
 800d996:	f7f2 fdff 	bl	8000598 <__aeabi_dmul>
 800d99a:	ec53 2b18 	vmov	r2, r3, d8
 800d99e:	f7f2 fc43 	bl	8000228 <__aeabi_dsub>
 800d9a2:	a30b      	add	r3, pc, #44	; (adr r3, 800d9d0 <__kernel_sin+0x148>)
 800d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	f7f2 fdf2 	bl	8000598 <__aeabi_dmul>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	f7f2 fc36 	bl	800022c <__adddf3>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	f7f2 fc2e 	bl	8000228 <__aeabi_dsub>
 800d9cc:	e7c4      	b.n	800d958 <__kernel_sin+0xd0>
 800d9ce:	bf00      	nop
 800d9d0:	55555549 	.word	0x55555549
 800d9d4:	3fc55555 	.word	0x3fc55555
 800d9d8:	3fe00000 	.word	0x3fe00000
 800d9dc:	5acfd57c 	.word	0x5acfd57c
 800d9e0:	3de5d93a 	.word	0x3de5d93a
 800d9e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800d9e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800d9ec:	57b1fe7d 	.word	0x57b1fe7d
 800d9f0:	3ec71de3 	.word	0x3ec71de3
 800d9f4:	19c161d5 	.word	0x19c161d5
 800d9f8:	3f2a01a0 	.word	0x3f2a01a0
 800d9fc:	1110f8a6 	.word	0x1110f8a6
 800da00:	3f811111 	.word	0x3f811111

0800da04 <fabs>:
 800da04:	ec51 0b10 	vmov	r0, r1, d0
 800da08:	ee10 2a10 	vmov	r2, s0
 800da0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da10:	ec43 2b10 	vmov	d0, r2, r3
 800da14:	4770      	bx	lr

0800da16 <finite>:
 800da16:	b082      	sub	sp, #8
 800da18:	ed8d 0b00 	vstr	d0, [sp]
 800da1c:	9801      	ldr	r0, [sp, #4]
 800da1e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800da22:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800da26:	0fc0      	lsrs	r0, r0, #31
 800da28:	b002      	add	sp, #8
 800da2a:	4770      	bx	lr
 800da2c:	0000      	movs	r0, r0
	...

0800da30 <floor>:
 800da30:	ec51 0b10 	vmov	r0, r1, d0
 800da34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800da3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800da40:	2e13      	cmp	r6, #19
 800da42:	ee10 5a10 	vmov	r5, s0
 800da46:	ee10 8a10 	vmov	r8, s0
 800da4a:	460c      	mov	r4, r1
 800da4c:	dc32      	bgt.n	800dab4 <floor+0x84>
 800da4e:	2e00      	cmp	r6, #0
 800da50:	da14      	bge.n	800da7c <floor+0x4c>
 800da52:	a333      	add	r3, pc, #204	; (adr r3, 800db20 <floor+0xf0>)
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	f7f2 fbe8 	bl	800022c <__adddf3>
 800da5c:	2200      	movs	r2, #0
 800da5e:	2300      	movs	r3, #0
 800da60:	f7f3 f82a 	bl	8000ab8 <__aeabi_dcmpgt>
 800da64:	b138      	cbz	r0, 800da76 <floor+0x46>
 800da66:	2c00      	cmp	r4, #0
 800da68:	da57      	bge.n	800db1a <floor+0xea>
 800da6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800da6e:	431d      	orrs	r5, r3
 800da70:	d001      	beq.n	800da76 <floor+0x46>
 800da72:	4c2d      	ldr	r4, [pc, #180]	; (800db28 <floor+0xf8>)
 800da74:	2500      	movs	r5, #0
 800da76:	4621      	mov	r1, r4
 800da78:	4628      	mov	r0, r5
 800da7a:	e025      	b.n	800dac8 <floor+0x98>
 800da7c:	4f2b      	ldr	r7, [pc, #172]	; (800db2c <floor+0xfc>)
 800da7e:	4137      	asrs	r7, r6
 800da80:	ea01 0307 	and.w	r3, r1, r7
 800da84:	4303      	orrs	r3, r0
 800da86:	d01f      	beq.n	800dac8 <floor+0x98>
 800da88:	a325      	add	r3, pc, #148	; (adr r3, 800db20 <floor+0xf0>)
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f7f2 fbcd 	bl	800022c <__adddf3>
 800da92:	2200      	movs	r2, #0
 800da94:	2300      	movs	r3, #0
 800da96:	f7f3 f80f 	bl	8000ab8 <__aeabi_dcmpgt>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d0eb      	beq.n	800da76 <floor+0x46>
 800da9e:	2c00      	cmp	r4, #0
 800daa0:	bfbe      	ittt	lt
 800daa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800daa6:	fa43 f606 	asrlt.w	r6, r3, r6
 800daaa:	19a4      	addlt	r4, r4, r6
 800daac:	ea24 0407 	bic.w	r4, r4, r7
 800dab0:	2500      	movs	r5, #0
 800dab2:	e7e0      	b.n	800da76 <floor+0x46>
 800dab4:	2e33      	cmp	r6, #51	; 0x33
 800dab6:	dd0b      	ble.n	800dad0 <floor+0xa0>
 800dab8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dabc:	d104      	bne.n	800dac8 <floor+0x98>
 800dabe:	ee10 2a10 	vmov	r2, s0
 800dac2:	460b      	mov	r3, r1
 800dac4:	f7f2 fbb2 	bl	800022c <__adddf3>
 800dac8:	ec41 0b10 	vmov	d0, r0, r1
 800dacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dad4:	f04f 33ff 	mov.w	r3, #4294967295
 800dad8:	fa23 f707 	lsr.w	r7, r3, r7
 800dadc:	4207      	tst	r7, r0
 800dade:	d0f3      	beq.n	800dac8 <floor+0x98>
 800dae0:	a30f      	add	r3, pc, #60	; (adr r3, 800db20 <floor+0xf0>)
 800dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae6:	f7f2 fba1 	bl	800022c <__adddf3>
 800daea:	2200      	movs	r2, #0
 800daec:	2300      	movs	r3, #0
 800daee:	f7f2 ffe3 	bl	8000ab8 <__aeabi_dcmpgt>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0bf      	beq.n	800da76 <floor+0x46>
 800daf6:	2c00      	cmp	r4, #0
 800daf8:	da02      	bge.n	800db00 <floor+0xd0>
 800dafa:	2e14      	cmp	r6, #20
 800dafc:	d103      	bne.n	800db06 <floor+0xd6>
 800dafe:	3401      	adds	r4, #1
 800db00:	ea25 0507 	bic.w	r5, r5, r7
 800db04:	e7b7      	b.n	800da76 <floor+0x46>
 800db06:	2301      	movs	r3, #1
 800db08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db0c:	fa03 f606 	lsl.w	r6, r3, r6
 800db10:	4435      	add	r5, r6
 800db12:	4545      	cmp	r5, r8
 800db14:	bf38      	it	cc
 800db16:	18e4      	addcc	r4, r4, r3
 800db18:	e7f2      	b.n	800db00 <floor+0xd0>
 800db1a:	2500      	movs	r5, #0
 800db1c:	462c      	mov	r4, r5
 800db1e:	e7aa      	b.n	800da76 <floor+0x46>
 800db20:	8800759c 	.word	0x8800759c
 800db24:	7e37e43c 	.word	0x7e37e43c
 800db28:	bff00000 	.word	0xbff00000
 800db2c:	000fffff 	.word	0x000fffff

0800db30 <nan>:
 800db30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800db38 <nan+0x8>
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	00000000 	.word	0x00000000
 800db3c:	7ff80000 	.word	0x7ff80000

0800db40 <rint>:
 800db40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db42:	ec51 0b10 	vmov	r0, r1, d0
 800db46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db4a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800db4e:	2e13      	cmp	r6, #19
 800db50:	ee10 4a10 	vmov	r4, s0
 800db54:	460b      	mov	r3, r1
 800db56:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800db5a:	dc58      	bgt.n	800dc0e <rint+0xce>
 800db5c:	2e00      	cmp	r6, #0
 800db5e:	da2b      	bge.n	800dbb8 <rint+0x78>
 800db60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800db64:	4302      	orrs	r2, r0
 800db66:	d023      	beq.n	800dbb0 <rint+0x70>
 800db68:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800db6c:	4302      	orrs	r2, r0
 800db6e:	4254      	negs	r4, r2
 800db70:	4314      	orrs	r4, r2
 800db72:	0c4b      	lsrs	r3, r1, #17
 800db74:	0b24      	lsrs	r4, r4, #12
 800db76:	045b      	lsls	r3, r3, #17
 800db78:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800db7c:	ea44 0103 	orr.w	r1, r4, r3
 800db80:	4b32      	ldr	r3, [pc, #200]	; (800dc4c <rint+0x10c>)
 800db82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db86:	e9d3 6700 	ldrd	r6, r7, [r3]
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	4630      	mov	r0, r6
 800db90:	4639      	mov	r1, r7
 800db92:	f7f2 fb4b 	bl	800022c <__adddf3>
 800db96:	e9cd 0100 	strd	r0, r1, [sp]
 800db9a:	463b      	mov	r3, r7
 800db9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dba0:	4632      	mov	r2, r6
 800dba2:	f7f2 fb41 	bl	8000228 <__aeabi_dsub>
 800dba6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbaa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800dbae:	4639      	mov	r1, r7
 800dbb0:	ec41 0b10 	vmov	d0, r0, r1
 800dbb4:	b003      	add	sp, #12
 800dbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbb8:	4a25      	ldr	r2, [pc, #148]	; (800dc50 <rint+0x110>)
 800dbba:	4132      	asrs	r2, r6
 800dbbc:	ea01 0702 	and.w	r7, r1, r2
 800dbc0:	4307      	orrs	r7, r0
 800dbc2:	d0f5      	beq.n	800dbb0 <rint+0x70>
 800dbc4:	0851      	lsrs	r1, r2, #1
 800dbc6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800dbca:	4314      	orrs	r4, r2
 800dbcc:	d00c      	beq.n	800dbe8 <rint+0xa8>
 800dbce:	ea23 0201 	bic.w	r2, r3, r1
 800dbd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dbd6:	2e13      	cmp	r6, #19
 800dbd8:	fa43 f606 	asr.w	r6, r3, r6
 800dbdc:	bf0c      	ite	eq
 800dbde:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800dbe2:	2400      	movne	r4, #0
 800dbe4:	ea42 0306 	orr.w	r3, r2, r6
 800dbe8:	4918      	ldr	r1, [pc, #96]	; (800dc4c <rint+0x10c>)
 800dbea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800dbee:	4622      	mov	r2, r4
 800dbf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	f7f2 fb18 	bl	800022c <__adddf3>
 800dbfc:	e9cd 0100 	strd	r0, r1, [sp]
 800dc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc04:	4622      	mov	r2, r4
 800dc06:	462b      	mov	r3, r5
 800dc08:	f7f2 fb0e 	bl	8000228 <__aeabi_dsub>
 800dc0c:	e7d0      	b.n	800dbb0 <rint+0x70>
 800dc0e:	2e33      	cmp	r6, #51	; 0x33
 800dc10:	dd07      	ble.n	800dc22 <rint+0xe2>
 800dc12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dc16:	d1cb      	bne.n	800dbb0 <rint+0x70>
 800dc18:	ee10 2a10 	vmov	r2, s0
 800dc1c:	f7f2 fb06 	bl	800022c <__adddf3>
 800dc20:	e7c6      	b.n	800dbb0 <rint+0x70>
 800dc22:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dc26:	f04f 36ff 	mov.w	r6, #4294967295
 800dc2a:	40d6      	lsrs	r6, r2
 800dc2c:	4230      	tst	r0, r6
 800dc2e:	d0bf      	beq.n	800dbb0 <rint+0x70>
 800dc30:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dc34:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800dc38:	bf1f      	itttt	ne
 800dc3a:	ea24 0101 	bicne.w	r1, r4, r1
 800dc3e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800dc42:	fa44 f202 	asrne.w	r2, r4, r2
 800dc46:	ea41 0402 	orrne.w	r4, r1, r2
 800dc4a:	e7cd      	b.n	800dbe8 <rint+0xa8>
 800dc4c:	0800e140 	.word	0x0800e140
 800dc50:	000fffff 	.word	0x000fffff
 800dc54:	00000000 	.word	0x00000000

0800dc58 <scalbn>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	ec55 4b10 	vmov	r4, r5, d0
 800dc5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dc62:	4606      	mov	r6, r0
 800dc64:	462b      	mov	r3, r5
 800dc66:	b99a      	cbnz	r2, 800dc90 <scalbn+0x38>
 800dc68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc6c:	4323      	orrs	r3, r4
 800dc6e:	d036      	beq.n	800dcde <scalbn+0x86>
 800dc70:	4b39      	ldr	r3, [pc, #228]	; (800dd58 <scalbn+0x100>)
 800dc72:	4629      	mov	r1, r5
 800dc74:	ee10 0a10 	vmov	r0, s0
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f7f2 fc8d 	bl	8000598 <__aeabi_dmul>
 800dc7e:	4b37      	ldr	r3, [pc, #220]	; (800dd5c <scalbn+0x104>)
 800dc80:	429e      	cmp	r6, r3
 800dc82:	4604      	mov	r4, r0
 800dc84:	460d      	mov	r5, r1
 800dc86:	da10      	bge.n	800dcaa <scalbn+0x52>
 800dc88:	a32b      	add	r3, pc, #172	; (adr r3, 800dd38 <scalbn+0xe0>)
 800dc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8e:	e03a      	b.n	800dd06 <scalbn+0xae>
 800dc90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dc94:	428a      	cmp	r2, r1
 800dc96:	d10c      	bne.n	800dcb2 <scalbn+0x5a>
 800dc98:	ee10 2a10 	vmov	r2, s0
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fac4 	bl	800022c <__adddf3>
 800dca4:	4604      	mov	r4, r0
 800dca6:	460d      	mov	r5, r1
 800dca8:	e019      	b.n	800dcde <scalbn+0x86>
 800dcaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dcae:	460b      	mov	r3, r1
 800dcb0:	3a36      	subs	r2, #54	; 0x36
 800dcb2:	4432      	add	r2, r6
 800dcb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dcb8:	428a      	cmp	r2, r1
 800dcba:	dd08      	ble.n	800dcce <scalbn+0x76>
 800dcbc:	2d00      	cmp	r5, #0
 800dcbe:	a120      	add	r1, pc, #128	; (adr r1, 800dd40 <scalbn+0xe8>)
 800dcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc4:	da1c      	bge.n	800dd00 <scalbn+0xa8>
 800dcc6:	a120      	add	r1, pc, #128	; (adr r1, 800dd48 <scalbn+0xf0>)
 800dcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dccc:	e018      	b.n	800dd00 <scalbn+0xa8>
 800dcce:	2a00      	cmp	r2, #0
 800dcd0:	dd08      	ble.n	800dce4 <scalbn+0x8c>
 800dcd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dcde:	ec45 4b10 	vmov	d0, r4, r5
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dce8:	da19      	bge.n	800dd1e <scalbn+0xc6>
 800dcea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dcf4:	dd0a      	ble.n	800dd0c <scalbn+0xb4>
 800dcf6:	a112      	add	r1, pc, #72	; (adr r1, 800dd40 <scalbn+0xe8>)
 800dcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1e2      	bne.n	800dcc6 <scalbn+0x6e>
 800dd00:	a30f      	add	r3, pc, #60	; (adr r3, 800dd40 <scalbn+0xe8>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fc47 	bl	8000598 <__aeabi_dmul>
 800dd0a:	e7cb      	b.n	800dca4 <scalbn+0x4c>
 800dd0c:	a10a      	add	r1, pc, #40	; (adr r1, 800dd38 <scalbn+0xe0>)
 800dd0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d0b8      	beq.n	800dc88 <scalbn+0x30>
 800dd16:	a10e      	add	r1, pc, #56	; (adr r1, 800dd50 <scalbn+0xf8>)
 800dd18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd1c:	e7b4      	b.n	800dc88 <scalbn+0x30>
 800dd1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd22:	3236      	adds	r2, #54	; 0x36
 800dd24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <scalbn+0x108>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	e7e8      	b.n	800dd06 <scalbn+0xae>
 800dd34:	f3af 8000 	nop.w
 800dd38:	c2f8f359 	.word	0xc2f8f359
 800dd3c:	01a56e1f 	.word	0x01a56e1f
 800dd40:	8800759c 	.word	0x8800759c
 800dd44:	7e37e43c 	.word	0x7e37e43c
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	fe37e43c 	.word	0xfe37e43c
 800dd50:	c2f8f359 	.word	0xc2f8f359
 800dd54:	81a56e1f 	.word	0x81a56e1f
 800dd58:	43500000 	.word	0x43500000
 800dd5c:	ffff3cb0 	.word	0xffff3cb0
 800dd60:	3c900000 	.word	0x3c900000

0800dd64 <_init>:
 800dd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd66:	bf00      	nop
 800dd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6a:	bc08      	pop	{r3}
 800dd6c:	469e      	mov	lr, r3
 800dd6e:	4770      	bx	lr

0800dd70 <_fini>:
 800dd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd72:	bf00      	nop
 800dd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd76:	bc08      	pop	{r3}
 800dd78:	469e      	mov	lr, r3
 800dd7a:	4770      	bx	lr
