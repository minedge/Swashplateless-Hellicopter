
Heli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001109c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08011280  08011280  00021280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b08  08011b08  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011b08  08011b08  00021b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b10  08011b10  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b10  08011b10  00021b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b14  08011b14  00021b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011b18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b78  200001e4  08011cfc  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d5c  08011cfc  00034d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003464f  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059bb  00000000  00000000  00064863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002030  00000000  00000000  0006a220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e18  00000000  00000000  0006c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237b7  00000000  00000000  0006e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000269d9  00000000  00000000  0009181f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d94e3  00000000  00000000  000b81f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001916db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c2c  00000000  00000000  00191730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011264 	.word	0x08011264

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	08011264 	.word	0x08011264

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <getOffset>:


#include "Controller/CyclicPitchControl.h"


float getOffset(RPYT_CMD rpyt_cmd, MOTOR mag){
 8000f90:	b084      	sub	sp, #16
 8000f92:	b5b0      	push	{r4, r5, r7, lr}
 8000f94:	ed2d 8b02 	vpush	{d8}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af02      	add	r7, sp, #8
 8000f9c:	f107 0418 	add.w	r4, r7, #24
 8000fa0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return sin(mag.rad + getShift(rpyt_cmd)) * getAmplitude(rpyt_cmd);
 8000fa4:	ed97 8a0e 	vldr	s16, [r7, #56]	; 0x38
 8000fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb2:	f000 f889 	bl	80010c8 <getShift>
 8000fb6:	eef0 7a40 	vmov.f32	s15, s0
 8000fba:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000fbe:	ee17 0a90 	vmov	r0, s15
 8000fc2:	f7ff fae9 	bl	8000598 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	ec43 2b10 	vmov	d0, r2, r3
 8000fce:	f00d ff4b 	bl	800ee68 <sin>
 8000fd2:	ec55 4b10 	vmov	r4, r5, d0
 8000fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe0:	f000 f81e 	bl	8001020 <getAmplitude>
 8000fe4:	ee10 3a10 	vmov	r3, s0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fad5 	bl	8000598 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	4629      	mov	r1, r5
 8000ff6:	f7ff fb27 	bl	8000648 <__aeabi_dmul>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	4610      	mov	r0, r2
 8001000:	4619      	mov	r1, r3
 8001002:	f7ff fdf9 	bl	8000bf8 <__aeabi_d2f>
 8001006:	4603      	mov	r3, r0
 8001008:	ee07 3a90 	vmov	s15, r3
}
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	46bd      	mov	sp, r7
 8001012:	ecbd 8b02 	vpop	{d8}
 8001016:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800101a:	b004      	add	sp, #16
 800101c:	4770      	bx	lr
	...

08001020 <getAmplitude>:

float getAmplitude(RPYT_CMD rpyt_cmd){
 8001020:	b084      	sub	sp, #16
 8001022:	b5b0      	push	{r4, r5, r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	f107 0418 	add.w	r4, r7, #24
 800102c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float amplitude = sqrt(pow(rpyt_cmd.roll_cmd,2)+pow(rpyt_cmd.pitch_cmd,2));
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fab0 	bl	8000598 <__aeabi_f2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 80010c0 <getAmplitude+0xa0>
 8001040:	ec43 2b10 	vmov	d0, r2, r3
 8001044:	f00d ff66 	bl	800ef14 <pow>
 8001048:	ec55 4b10 	vmov	r4, r5, d0
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff faa2 	bl	8000598 <__aeabi_f2d>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80010c0 <getAmplitude+0xa0>
 800105c:	ec43 2b10 	vmov	d0, r2, r3
 8001060:	f00d ff58 	bl	800ef14 <pow>
 8001064:	ec53 2b10 	vmov	r2, r3, d0
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f936 	bl	80002dc <__adddf3>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	ec43 2b17 	vmov	d7, r2, r3
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	f00d fff6 	bl	800f070 <sqrt>
 8001084:	ec53 2b10 	vmov	r2, r3, d0
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdb4 	bl	8000bf8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	607b      	str	r3, [r7, #4]

	if(amplitude > rpyt_cmd.limit_cmd)
 8001094:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001098:	ed97 7a01 	vldr	s14, [r7, #4]
 800109c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	dd01      	ble.n	80010aa <getAmplitude+0x8a>
		amplitude = rpyt_cmd.limit_cmd;
 80010a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a8:	607b      	str	r3, [r7, #4]

	return amplitude;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ee07 3a90 	vmov	s15, r3
}
 80010b0:	eeb0 0a67 	vmov.f32	s0, s15
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80010bc:	b004      	add	sp, #16
 80010be:	4770      	bx	lr
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40000000 	.word	0x40000000

080010c8 <getShift>:

float getShift(RPYT_CMD rpyt_cmd){
 80010c8:	b084      	sub	sp, #16
 80010ca:	b5b0      	push	{r4, r5, r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	f107 0418 	add.w	r4, r7, #24
 80010d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float shift = atan2(rpyt_cmd.roll_cmd, rpyt_cmd.pitch_cmd);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa5c 	bl	8000598 <__aeabi_f2d>
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b11 	vmov	d1, r2, r3
 80010f4:	ec45 4b10 	vmov	d0, r4, r5
 80010f8:	f00d ff0a 	bl	800ef10 <atan2>
 80010fc:	ec53 2b10 	vmov	r2, r3, d0
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd78 	bl	8000bf8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	607b      	str	r3, [r7, #4]

	shift += PIE/2;
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fa43 	bl	8000598 <__aeabi_f2d>
 8001112:	a30d      	add	r3, pc, #52	; (adr r3, 8001148 <getShift+0x80>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	f7ff f8e0 	bl	80002dc <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd68 	bl	8000bf8 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	607b      	str	r3, [r7, #4]

	return shift;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	ee07 3a90 	vmov	s15, r3
}
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800113e:	b004      	add	sp, #16
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	53c8d4f1 	.word	0x53c8d4f1
 800114c:	3ff921fb 	.word	0x3ff921fb

08001150 <regPID>:
 *      Author: mined
 */

#include "Controller/PID.h"

int regPID(int mode, float gain_p, float gain_i, float gain_d){
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	ed87 0a02 	vstr	s0, [r7, #8]
 800115c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001160:	ed87 1a00 	vstr	s2, [r7]

	int index = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

	for(;pid_list[index].mode != 0; index++){}
 8001168:	e002      	b.n	8001170 <regPID+0x20>
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	4a24      	ldr	r2, [pc, #144]	; (8001204 <regPID+0xb4>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	015b      	lsls	r3, r3, #5
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f5      	bne.n	800116a <regPID+0x1a>

	pid_list[index].mode = mode;
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <regPID+0xb4>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	015b      	lsls	r3, r3, #5
 8001184:	4413      	add	r3, r2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
	pid_list[index].k.p = gain_p;
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <regPID+0xb4>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	4413      	add	r3, r2
 8001192:	3304      	adds	r3, #4
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	601a      	str	r2, [r3, #0]
	pid_list[index].k.i = gain_i;
 8001198:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <regPID+0xb4>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	4413      	add	r3, r2
 80011a0:	3308      	adds	r3, #8
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
	pid_list[index].k.d = gain_d;
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <regPID+0xb4>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	015b      	lsls	r3, r3, #5
 80011ac:	4413      	add	r3, r2
 80011ae:	330c      	adds	r3, #12
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	601a      	str	r2, [r3, #0]

	pid_list[index].loop_time = 1;
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <regPID+0xb4>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	4413      	add	r3, r2
 80011bc:	3318      	adds	r3, #24
 80011be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011c2:	601a      	str	r2, [r3, #0]
	pid_list[index].loop_start = 0;
 80011c4:	4a0f      	ldr	r2, [pc, #60]	; (8001204 <regPID+0xb4>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	4413      	add	r3, r2
 80011cc:	331c      	adds	r3, #28
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
	pid_list[index].pre_error = 0;
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <regPID+0xb4>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	4413      	add	r3, r2
 80011dc:	3310      	adds	r3, #16
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
	pid_list[index].integrated_error = 0;
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <regPID+0xb4>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	015b      	lsls	r3, r3, #5
 80011ea:	4413      	add	r3, r2
 80011ec:	3314      	adds	r3, #20
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

	return index;
 80011f4:	697b      	ldr	r3, [r7, #20]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200027ec 	.word	0x200027ec

08001208 <PIDoutput>:

float PIDoutput(int id, float state, float target){
 8001208:	b4b0      	push	{r4, r5, r7}
 800120a:	b08f      	sub	sp, #60	; 0x3c
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = target - state;
 8001218:	ed97 7a01 	vldr	s14, [r7, #4]
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001224:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float pid_output = 0;
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34

	PID_BLOCK pid = pid_list[id];
 800122e:	4a5d      	ldr	r2, [pc, #372]	; (80013a4 <PIDoutput+0x19c>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	4413      	add	r3, r2
 8001236:	f107 0410 	add.w	r4, r7, #16
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001244:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(pid.mode){
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	3b01      	subs	r3, #1
 800124c:	2b03      	cmp	r3, #3
 800124e:	f200 809f 	bhi.w	8001390 <PIDoutput+0x188>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <PIDoutput+0x50>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	08001269 	.word	0x08001269
 800125c:	0800127b 	.word	0x0800127b
 8001260:	080012ad 	.word	0x080012ad
 8001264:	0800130f 	.word	0x0800130f
	case P:
		pid_output = error*pid.k.p;
 8001268:	edd7 7a05 	vldr	s15, [r7, #20]
 800126c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		break;
 8001278:	e08a      	b.n	8001390 <PIDoutput+0x188>
	case PI:
		pid.integrated_error += error;
 800127a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800127e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001286:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pid_output = error*pid.k.p + pid.integrated_error*pid.k.i;
 800128a:	ed97 7a05 	vldr	s14, [r7, #20]
 800128e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800129a:	edd7 7a06 	vldr	s15, [r7, #24]
 800129e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		break;
 80012aa:	e071      	b.n	8001390 <PIDoutput+0x188>
	case PD:
		pid.loop_time = (gTick - pid.loop_start)/100000.;
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <PIDoutput+0x1a0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80013ac <PIDoutput+0x1a4>
 80012c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		pid_output = error*pid.k.p + ((error - pid.pre_error)/pid.loop_time)*pid.k.d;
 80012cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80012d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012dc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80012e0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80012e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80012ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		pid.loop_start = gTick;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <PIDoutput+0x1a0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001308:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		break;
 800130c:	e040      	b.n	8001390 <PIDoutput+0x188>
	case PID:
		pid.integrated_error += error;
 800130e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001312:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pid.loop_time = (gTick - pid.loop_start)/100000.;
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <PIDoutput+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800132a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800132e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001332:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80013ac <PIDoutput+0x1a4>
 8001336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		pid_output = error*pid.k.p + pid.integrated_error*pid.k.i + ((error - pid.pre_error)/pid.loop_time)*pid.k.d;
 800133e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001342:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800134e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135a:	edd7 7a08 	vldr	s15, [r7, #32]
 800135e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001362:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001366:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800136a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800136e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		pid.loop_start = gTick;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <PIDoutput+0x1a0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800138a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		break;
 800138e:	bf00      	nop
	}

	return pid_output;
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	ee07 3a90 	vmov	s15, r3
}
 8001396:	eeb0 0a67 	vmov.f32	s0, s15
 800139a:	373c      	adds	r7, #60	; 0x3c
 800139c:	46bd      	mov	sp, r7
 800139e:	bcb0      	pop	{r4, r5, r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200027ec 	.word	0x200027ec
 80013a8:	20000200 	.word	0x20000200
 80013ac:	47c35000 	.word	0x47c35000

080013b0 <resetState>:



void resetState(int id){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	pid_list[id].loop_time = 1;
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <resetState+0x54>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4413      	add	r3, r2
 80013c0:	3318      	adds	r3, #24
 80013c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c6:	601a      	str	r2, [r3, #0]
	pid_list[id].loop_start = 0;
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <resetState+0x54>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	4413      	add	r3, r2
 80013d0:	331c      	adds	r3, #28
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
	pid_list[id].pre_error = 0;
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <resetState+0x54>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	015b      	lsls	r3, r3, #5
 80013de:	4413      	add	r3, r2
 80013e0:	3310      	adds	r3, #16
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
	pid_list[id].integrated_error = 0;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <resetState+0x54>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	015b      	lsls	r3, r3, #5
 80013ee:	4413      	add	r3, r2
 80013f0:	3314      	adds	r3, #20
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200027ec 	.word	0x200027ec

08001408 <map>:
#include "Math/novus_math.h"

float map(float target, float from_min, float from_max, float to_min, float to_max){
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001412:	edc7 0a04 	vstr	s1, [r7, #16]
 8001416:	ed87 1a03 	vstr	s2, [r7, #12]
 800141a:	edc7 1a02 	vstr	s3, [r7, #8]
 800141e:	ed87 2a01 	vstr	s4, [r7, #4]
    float mult = (float)(to_max - to_min) / (float)(from_max - from_min);
 8001422:	ed97 7a01 	vldr	s14, [r7, #4]
 8001426:	edd7 7a02 	vldr	s15, [r7, #8]
 800142a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800142e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001432:	edd7 7a04 	vldr	s15, [r7, #16]
 8001436:	ee37 7a67 	vsub.f32	s14, s14, s15
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	edc7 7a07 	vstr	s15, [r7, #28]
    target = target - from_min;
 8001442:	ed97 7a05 	vldr	s14, [r7, #20]
 8001446:	edd7 7a04 	vldr	s15, [r7, #16]
 800144a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144e:	edc7 7a05 	vstr	s15, [r7, #20]
    return to_min + (target * mult);
 8001452:	ed97 7a05 	vldr	s14, [r7, #20]
 8001456:	edd7 7a07 	vldr	s15, [r7, #28]
 800145a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001462:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <Spektrum_Read>:
/** @J.Yeon
  * @brief  uart로 받은 값을 각 채널별 data 저장
  * @param  struct RC
  * @retval 각 채널별 data(RC)
  */
void Spektrum_Read(){
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
	//uint8_t fade = rc_byte_data[0];
	//uint8_t sys = rc_byte_data[1];

    // 비트연산을 통한 각채널별 data 추출
    for (int index = 1; index <= 7; index++) {
 800147a:	2301      	movs	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	e032      	b.n	80014e6 <Spektrum_Read+0x72>
    	uint16_t bit_data = (rc_byte_data[index * 2] << 8) | rc_byte_data[(index * 2) + 1];
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4a1d      	ldr	r2, [pc, #116]	; (80014fc <Spektrum_Read+0x88>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21a      	sxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	3301      	adds	r3, #1
 8001492:	491a      	ldr	r1, [pc, #104]	; (80014fc <Spektrum_Read+0x88>)
 8001494:	5ccb      	ldrb	r3, [r1, r3]
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	817b      	strh	r3, [r7, #10]
        uint8_t id = (bit_data & 0x7800) >> 11;
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	12db      	asrs	r3, r3, #11
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	727b      	strb	r3, [r7, #9]
        uint16_t pos = bit_data & 0x07FF;
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014b0:	80fb      	strh	r3, [r7, #6]
        
        if(pos >= RC_MIN && pos <= RC_MAX){
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80014b8:	d312      	bcc.n	80014e0 <Spektrum_Read+0x6c>
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	f240 62aa 	movw	r2, #1706	; 0x6aa
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d80d      	bhi.n	80014e0 <Spektrum_Read+0x6c>
            rc.channel[id].id = id;
 80014c4:	7a7b      	ldrb	r3, [r7, #9]
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <Spektrum_Read+0x8c>)
 80014c8:	3306      	adds	r3, #6
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	7a7a      	ldrb	r2, [r7, #9]
 80014d0:	71da      	strb	r2, [r3, #7]
            rc.channel[id].pos = pos;
 80014d2:	7a7b      	ldrb	r3, [r7, #9]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <Spektrum_Read+0x8c>)
 80014d6:	3306      	adds	r3, #6
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	88fa      	ldrh	r2, [r7, #6]
 80014de:	811a      	strh	r2, [r3, #8]
    for (int index = 1; index <= 7; index++) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	ddc9      	ble.n	8001480 <Spektrum_Read+0xc>
        }
    }

}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20002abc 	.word	0x20002abc
 8001500:	20002a6c 	.word	0x20002a6c

08001504 <wt931_Init>:
 */


#include "Sensor/WT931.h"

int8_t wt931_Init(I2C_HandleTypeDef* hi2cx){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	wt931_chip_num = addI2CChip(hi2cx, 0x50, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	2150      	movs	r1, #80	; 0x50
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 fc3b 	bl	8001d8c <addI2CChip>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b03      	ldr	r3, [pc, #12]	; (8001528 <wt931_Init+0x24>)
 800151c:	801a      	strh	r2, [r3, #0]

	if(wt931_chip_num < 0){
		return -1;
	}

	return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20002ecc 	.word	0x20002ecc

0800152c <setIMUoffset>:

void setIMUoffset(){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
	offset[0] = 0;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <setIMUoffset+0x3c>)
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
	offset[1] = 0;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <setIMUoffset+0x3c>)
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	605a      	str	r2, [r3, #4]

	IMU imu = readIMU();
 8001542:	463b      	mov	r3, r7
 8001544:	4618      	mov	r0, r3
 8001546:	f000 f811 	bl	800156c <readIMU>

	offset[0] = imu.pi;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <setIMUoffset+0x3c>)
 800154e:	6013      	str	r3, [r2, #0]
	offset[1] = imu.theta*-1;
 8001550:	edd7 7a01 	vldr	s15, [r7, #4]
 8001554:	eef1 7a67 	vneg.f32	s15, s15
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <setIMUoffset+0x3c>)
 800155a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200036d0 	.word	0x200036d0

0800156c <readIMU>:

IMU readIMU(){
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b08e      	sub	sp, #56	; 0x38
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	IMU imu;

	float angle[3] = { 0, };
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]

	angle[0] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_ROLL);
 8001580:	4b99      	ldr	r3, [pc, #612]	; (80017e8 <readIMU+0x27c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	213d      	movs	r1, #61	; 0x3d
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fc3d 	bl	8001e08 <I2C_read2ByteRegister>
 800158e:	4603      	mov	r3, r0
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001598:	edc7 7a05 	vstr	s15, [r7, #20]
	angle[1] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_PITCH);
 800159c:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <readIMU+0x27c>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	213e      	movs	r1, #62	; 0x3e
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fc2f 	bl	8001e08 <I2C_read2ByteRegister>
 80015aa:	4603      	mov	r3, r0
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	edc7 7a06 	vstr	s15, [r7, #24]
	angle[2] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_YAW);
 80015b8:	4b8b      	ldr	r3, [pc, #556]	; (80017e8 <readIMU+0x27c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	213f      	movs	r1, #63	; 0x3f
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fc21 	bl	8001e08 <I2C_read2ByteRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d0:	edc7 7a07 	vstr	s15, [r7, #28]

#if 1
	imu.pi = angle[0] / 32768 * 180;
 80015d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015d8:	eddf 6a84 	vldr	s13, [pc, #528]	; 80017ec <readIMU+0x280>
 80015dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80017f0 <readIMU+0x284>
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	edc7 7a08 	vstr	s15, [r7, #32]
	if(imu.pi > 180) imu.pi -= 360;
 80015ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80015f0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80017f0 <readIMU+0x284>
 80015f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd07      	ble.n	800160e <readIMU+0xa2>
 80015fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001602:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80017f4 <readIMU+0x288>
 8001606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800160a:	edc7 7a08 	vstr	s15, [r7, #32]
	imu.theta = angle[1] / 32768 * 180;
 800160e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001612:	eddf 6a76 	vldr	s13, [pc, #472]	; 80017ec <readIMU+0x280>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80017f0 <readIMU+0x284>
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if(imu.theta > 180) imu.theta -= 360;
 8001626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800162a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80017f0 <readIMU+0x284>
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd07      	ble.n	8001648 <readIMU+0xdc>
 8001638:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800163c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80017f4 <readIMU+0x288>
 8001640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001644:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	imu.psi = angle[2] / 32768 * 180;
 8001648:	ed97 7a07 	vldr	s14, [r7, #28]
 800164c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80017ec <readIMU+0x280>
 8001650:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001654:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80017f0 <readIMU+0x284>
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(imu.psi > 180) imu.psi -= 360;
 8001660:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001664:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80017f0 <readIMU+0x284>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd07      	ble.n	8001682 <readIMU+0x116>
 8001672:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001676:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80017f4 <readIMU+0x288>
 800167a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800167e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	imu.pi -= offset[0];
 8001682:	ed97 7a08 	vldr	s14, [r7, #32]
 8001686:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <readIMU+0x28c>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001690:	edc7 7a08 	vstr	s15, [r7, #32]
	imu.theta -= offset[1];
 8001694:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001698:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <readIMU+0x28c>)
 800169a:	edd3 7a01 	vldr	s15, [r3, #4]
 800169e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	imu.theta = imu.theta * -1;
 80016a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016aa:	eef1 7a67 	vneg.f32	s15, s15
 80016ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	imu.theta = temp_theta;
	imu.psi = temp_psi;
#endif

#if 1
	float angular_velocity[3] = { 0, };
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

	angular_velocity[0] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GX);
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <readIMU+0x27c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2137      	movs	r1, #55	; 0x37
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fb9e 	bl	8001e08 <I2C_read2ByteRegister>
 80016cc:	4603      	mov	r3, r0
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d6:	edc7 7a02 	vstr	s15, [r7, #8]
	angular_velocity[1] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GY);
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <readIMU+0x27c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2138      	movs	r1, #56	; 0x38
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fb90 	bl	8001e08 <I2C_read2ByteRegister>
 80016e8:	4603      	mov	r3, r0
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f2:	edc7 7a03 	vstr	s15, [r7, #12]
	angular_velocity[2] = (float)I2C_read2ByteRegister(wt931_chip_num, WT931_GZ);
 80016f6:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <readIMU+0x27c>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2139      	movs	r1, #57	; 0x39
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fb82 	bl	8001e08 <I2C_read2ByteRegister>
 8001704:	4603      	mov	r3, r0
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170e:	edc7 7a04 	vstr	s15, [r7, #16]

	imu.P = angular_velocity[0] / 32768 * 2000;
 8001712:	ed97 7a02 	vldr	s14, [r7, #8]
 8001716:	eddf 6a35 	vldr	s13, [pc, #212]	; 80017ec <readIMU+0x280>
 800171a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80017fc <readIMU+0x290>
 8001722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001726:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if(imu.P > 2000) imu.P -= 4000;
 800172a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800172e:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80017fc <readIMU+0x290>
 8001732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd07      	ble.n	800174c <readIMU+0x1e0>
 800173c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001740:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001800 <readIMU+0x294>
 8001744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001748:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	imu.Q = angular_velocity[1] / 32768 * 2000;
 800174c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001750:	eddf 6a26 	vldr	s13, [pc, #152]	; 80017ec <readIMU+0x280>
 8001754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001758:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80017fc <readIMU+0x290>
 800175c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001760:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	if(imu.Q > 2000) imu.Q -= 4000;
 8001764:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001768:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80017fc <readIMU+0x290>
 800176c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001774:	dd07      	ble.n	8001786 <readIMU+0x21a>
 8001776:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800177a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001800 <readIMU+0x294>
 800177e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	imu.R = angular_velocity[2] / 32768 * 2000;
 8001786:	ed97 7a04 	vldr	s14, [r7, #16]
 800178a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80017ec <readIMU+0x280>
 800178e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001792:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017fc <readIMU+0x290>
 8001796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if(imu.R > 2000) imu.R -= 4000;
 800179e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017a2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017fc <readIMU+0x290>
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	dd07      	ble.n	80017c0 <readIMU+0x254>
 80017b0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80017b4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001800 <readIMU+0x294>
 80017b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017bc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	imu.Q = imu.Q * -1;
 80017c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017c4:	eef1 7a67 	vneg.f32	s15, s15
 80017c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	imu.P = 0;
	imu.Q = 0;
	imu.R = 0;
#endif

	return imu;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	461d      	mov	r5, r3
 80017d0:	f107 0420 	add.w	r4, r7, #32
 80017d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017dc:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	3738      	adds	r7, #56	; 0x38
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bdb0      	pop	{r4, r5, r7, pc}
 80017e8:	20002ecc 	.word	0x20002ecc
 80017ec:	47000000 	.word	0x47000000
 80017f0:	43340000 	.word	0x43340000
 80017f4:	43b40000 	.word	0x43b40000
 80017f8:	200036d0 	.word	0x200036d0
 80017fc:	44fa0000 	.word	0x44fa0000
 8001800:	457a0000 	.word	0x457a0000

08001804 <as5147_Init>:
  * @param  GPIO_num GPIO pin number
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]

	as5147_chip_num = addSPIChip(hspix, GPIO_port, GPIO_num);
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	461a      	mov	r2, r3
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 fb27 	bl	8001e6c <addSPIChip>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <as5147_Init+0x48>)
 8001824:	801a      	strh	r2, [r3, #0]

	if(as5147_chip_num < 0){
		return -1;
	}

	registerRead(AS5047P_ERRFL);
 8001826:	2001      	movs	r0, #1
 8001828:	f000 f8b2 	bl	8001990 <registerRead>
	registerRead(AS5047P_ERRFL);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 f8af 	bl	8001990 <registerRead>

	if(as5147_setZeroPosition() < 0){
 8001832:	f000 f80d 	bl	8001850 <as5147_setZeroPosition>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	da02      	bge.n	8001842 <as5147_Init+0x3e>
		return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e000      	b.n	8001844 <as5147_Init+0x40>
	}

	return 0;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200027e0 	.word	0x200027e0

08001850 <as5147_setZeroPosition>:
  * @param  none
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_setZeroPosition(){
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
	Frame current_zero_position = { 0, };
 8001856:	2300      	movs	r3, #0
 8001858:	813b      	strh	r3, [r7, #8]
	Frame current_position = { 0, };
 800185a:	2300      	movs	r3, #0
 800185c:	80bb      	strh	r3, [r7, #4]
	uint16_t zero_position_L = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	81fb      	strh	r3, [r7, #14]
	uint16_t zero_position_M = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	81bb      	strh	r3, [r7, #12]
	int8_t error;

	current_zero_position.raw = registerRead(AS5047P_ZPOSL);
 8001866:	2017      	movs	r0, #23
 8001868:	f000 f892 	bl	8001990 <registerRead>
 800186c:	4603      	mov	r3, r0
 800186e:	813b      	strh	r3, [r7, #8]
	if(current_zero_position.values.data < 0) return -1;

	error = registerWrite(AS5047P_ZPOSL, current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN));
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001876:	b29b      	uxth	r3, r3
 8001878:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800187c:	b29b      	uxth	r3, r3
 800187e:	4619      	mov	r1, r3
 8001880:	2017      	movs	r0, #23
 8001882:	f000 f8ad 	bl	80019e0 <registerWrite>
 8001886:	4603      	mov	r3, r0
 8001888:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSL, 0x0000);
 800188a:	2100      	movs	r1, #0
 800188c:	2017      	movs	r0, #23
 800188e:	f000 f8a7 	bl	80019e0 <registerWrite>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	4313      	orrs	r3, r2
 800189a:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 800189c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <as5147_setZeroPosition+0x5a>
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
 80018a8:	e03c      	b.n	8001924 <as5147_setZeroPosition+0xd4>

	current_position.raw = registerRead(AS5047P_ANGLEUNC);
 80018aa:	f643 70fe 	movw	r0, #16382	; 0x3ffe
 80018ae:	f000 f86f 	bl	8001990 <registerRead>
 80018b2:	4603      	mov	r3, r0
 80018b4:	80bb      	strh	r3, [r7, #4]
	if(current_position.values.data < 0) return -1;

	zero_position_L = (current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (current_position.values.data & AS5047P_ZPOSL_ZPOSL);
 80018b6:	893b      	ldrh	r3, [r7, #8]
 80018b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b21b      	sxth	r3, r3
 80018c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b21b      	sxth	r3, r3
 80018da:	81fb      	strh	r3, [r7, #14]
	zero_position_M = (current_position.values.data >> 6 ) & AS5047P_ZPOSM_ZPOSM;
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	119b      	asrs	r3, r3, #6
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	81bb      	strh	r3, [r7, #12]

	error = registerWrite(AS5047P_ZPOSL, zero_position_L);
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	4619      	mov	r1, r3
 80018f0:	2017      	movs	r0, #23
 80018f2:	f000 f875 	bl	80019e0 <registerWrite>
 80018f6:	4603      	mov	r3, r0
 80018f8:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSM, zero_position_M);
 80018fa:	89bb      	ldrh	r3, [r7, #12]
 80018fc:	4619      	mov	r1, r3
 80018fe:	2016      	movs	r0, #22
 8001900:	f000 f86e 	bl	80019e0 <registerWrite>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	4313      	orrs	r3, r2
 800190c:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 800190e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <as5147_setZeroPosition+0xcc>
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e003      	b.n	8001924 <as5147_setZeroPosition+0xd4>

	HAL_Delay(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f002 f8e1 	bl	8003ae4 <HAL_Delay>

	return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <as5147_readPosition>:
  * @brief  read current position from AS5147
  * @param  none
  * @retval position value without DAEC (0 ~ 360)
  */

float as5147_readPosition(){
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
	Frame position = { 0, };
 8001932:	2300      	movs	r3, #0
 8001934:	80bb      	strh	r3, [r7, #4]

	//position.raw = registerRead(AS5047P_ANGLECOM);AS5047P_ANGLEUNC
	//!NOTE::Next line for debug
	position.raw = registerRead(AS5047P_ANGLEUNC);
 8001936:	f643 70fe 	movw	r0, #16382	; 0x3ffe
 800193a:	f000 f829 	bl	8001990 <registerRead>
 800193e:	4603      	mov	r3, r0
 8001940:	80bb      	strh	r3, [r7, #4]

	return position.values.data / 16384. * 360;
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fe12 	bl	8000574 <__aeabi_i2d>
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <as5147_readPosition+0x5c>)
 8001956:	f7fe ffa1 	bl	800089c <__aeabi_ddiv>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <as5147_readPosition+0x60>)
 8001968:	f7fe fe6e 	bl	8000648 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f940 	bl	8000bf8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	ee07 3a90 	vmov	s15, r3
}
 800197e:	eeb0 0a67 	vmov.f32	s0, s15
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40d00000 	.word	0x40d00000
 800198c:	40768000 	.word	0x40768000

08001990 <registerRead>:
  * @brief  read register according to register address
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @retval register value in register's address
  */

uint16_t registerRead(uint16_t resgister_address){
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	uint16_t register_data = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	81fb      	strh	r3, [r7, #14]

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_READ);
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2101      	movs	r1, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f85c 	bl	8001a60 <packCommandFrame>
 80019a8:	4603      	mov	r3, r0
 80019aa:	81bb      	strh	r3, [r7, #12]
	SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <registerRead+0x4c>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fb05 	bl	8001fc8 <SPI_write2ByteRegister>
	//command = packCommandFrame(AS5047P_NOP, AS5047P_ACCESS_READ);
	//register_data = SPI_readWrite2ByteRegister(&command.raw, as5147_chip_num);

	//register_data = SPI_read2ByteRegister(as5147_chip_num);

	SPI_read2ByteRegister(as5147_chip_num, &register_data);
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <registerRead+0x4c>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f107 020e 	add.w	r2, r7, #14
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fab4 	bl	8001f38 <SPI_read2ByteRegister>

	return register_data;
 80019d0:	89fb      	ldrh	r3, [r7, #14]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200027e0 	.word	0x200027e0

080019e0 <registerWrite>:
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @param  data register value based on AS5147 datasheet
  * @retval return 0
  */

int8_t registerWrite(uint16_t resgister_address, uint16_t data){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	460a      	mov	r2, r1
 80019ea:	80fb      	strh	r3, [r7, #6]
 80019ec:	4613      	mov	r3, r2
 80019ee:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef state;

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_WRITE);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 f833 	bl	8001a60 <packCommandFrame>
 80019fa:	4603      	mov	r3, r0
 80019fc:	81bb      	strh	r3, [r7, #12]
	state = SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <registerWrite+0x7c>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fadc 	bl	8001fc8 <SPI_write2ByteRegister>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <registerWrite+0x40>
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	e018      	b.n	8001a52 <registerWrite+0x72>

	command = packCommandFrame(data, AS5047P_ACCESS_WRITE);
 8001a20:	88bb      	ldrh	r3, [r7, #4]
 8001a22:	2100      	movs	r1, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f81b 	bl	8001a60 <packCommandFrame>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	81bb      	strh	r3, [r7, #12]
	state = SPI_write2ByteRegister(&command.raw, as5147_chip_num);
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <registerWrite+0x7c>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fac4 	bl	8001fc8 <SPI_write2ByteRegister>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <registerWrite+0x70>
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e000      	b.n	8001a52 <registerWrite+0x72>

	return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200027e0 	.word	0x200027e0

08001a60 <packCommandFrame>:
  * @param  rw intput read or write state
  * @param  data register value based on AS5147 datasheet
  * @retval Frame struct which has data & R/W state & parity Bit 
  */

Frame packCommandFrame(uint16_t data, uint8_t rw){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	80fb      	strh	r3, [r7, #6]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	717b      	strb	r3, [r7, #5]
	Frame frame = { 0, };
 8001a70:	2300      	movs	r3, #0
 8001a72:	81bb      	strh	r3, [r7, #12]
	frame.values.data = data & AS5047P_FRAME_DATA;
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	89bb      	ldrh	r3, [r7, #12]
 8001a7e:	f362 030d 	bfi	r3, r2, #0, #14
 8001a82:	81bb      	strh	r3, [r7, #12]
	frame.values.rw = rw;
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	f362 1386 	bfi	r3, r2, #6, #1
 8001a92:	737b      	strb	r3, [r7, #13]
	frame.values.pard = calcParity(frame.raw);
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f80d 	bl	8001ab6 <calcParity>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	f362 13c7 	bfi	r3, r2, #7, #1
 8001aaa:	737b      	strb	r3, [r7, #13]

	return frame;
 8001aac:	89bb      	ldrh	r3, [r7, #12]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <calcParity>:
/**
  * @brief calculate parity bit
  * @param  data register value
  * @retval data
  */
uint8_t calcParity(uint16_t data){
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 8;              // example for 8-bir (this line scales it up to 16 bit)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4053      	eors	r3, r2
 8001aca:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	4053      	eors	r3, r2
 8001ad6:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	4053      	eors	r3, r2
 8001ae2:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4053      	eors	r3, r2
 8001aee:	80fb      	strh	r3, [r7, #6]

	data = data & 0x0001;
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)data;
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	b2db      	uxtb	r3, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <updatePosition>:



void updatePosition(MOTOR* motor){
 8001b08:	b5b0      	push	{r4, r5, r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	sens_start = HAL_GetTick();

	motor->ang -= motor->offset;
	if(motor->ang < 0)motor->ang += 360;
#else
	motor->rad = ((as5147_readPosition() * 3.141592) / 180) - motor->offset;
 8001b10:	f7ff ff0c 	bl	800192c <as5147_readPosition>
 8001b14:	ee10 3a10 	vmov	r3, s0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a381      	add	r3, pc, #516	; (adr r3, 8001d24 <updatePosition+0x21c>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b76      	ldr	r3, [pc, #472]	; (8001d10 <updatePosition+0x208>)
 8001b36:	f7fe feb1 	bl	800089c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	461d      	mov	r5, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd26 	bl	8000598 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe fbc0 	bl	80002d8 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f84a 	bl	8000bf8 <__aeabi_d2f>
 8001b64:	4602      	mov	r2, r0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
	if(motor->rad < 0) motor->rad += 6.283184;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d512      	bpl.n	8001ba0 <updatePosition+0x98>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fd0a 	bl	8000598 <__aeabi_f2d>
 8001b84:	a35e      	add	r3, pc, #376	; (adr r3, 8001d00 <updatePosition+0x1f8>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fba7 	bl	80002dc <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f82f 	bl	8000bf8 <__aeabi_d2f>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]

	float dif = motor->rad - motor->pre_ang;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(dif < 0) dif += 6.283184;
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d50f      	bpl.n	8001be2 <updatePosition+0xda>
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7fe fce8 	bl	8000598 <__aeabi_f2d>
 8001bc8:	a34d      	add	r3, pc, #308	; (adr r3, 8001d00 <updatePosition+0x1f8>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fb85 	bl	80002dc <__adddf3>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f7ff f80d 	bl	8000bf8 <__aeabi_d2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60fb      	str	r3, [r7, #12]

	motor->rpm = ((dif * (100000/sens_time)) / 6.283184) * 60;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	; (8001d14 <updatePosition+0x20c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a4c      	ldr	r2, [pc, #304]	; (8001d18 <updatePosition+0x210>)
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	ee17 0a90 	vmov	r0, s15
 8001c00:	f7fe fcca 	bl	8000598 <__aeabi_f2d>
 8001c04:	a33e      	add	r3, pc, #248	; (adr r3, 8001d00 <updatePosition+0x1f8>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	f7fe fe47 	bl	800089c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <updatePosition+0x214>)
 8001c1c:	f7fe fd14 	bl	8000648 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7fe ffe6 	bl	8000bf8 <__aeabi_d2f>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	615a      	str	r2, [r3, #20]

	float LPF_HZ = 100;
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <updatePosition+0x218>)
 8001c34:	60bb      	str	r3, [r7, #8]
	motor->pre_lpf = motor->lpf;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	619a      	str	r2, [r3, #24]
	motor->lpf = ((LPF_HZ * motor->pre_lpf) + 1 * motor->rpm )/(LPF_HZ + 1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c52:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edc3 7a07 	vstr	s15, [r3, #28]

	motor->rad += motor->lpf * 0.0015;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc91 	bl	8000598 <__aeabi_f2d>
 8001c76:	4604      	mov	r4, r0
 8001c78:	460d      	mov	r5, r1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc8a 	bl	8000598 <__aeabi_f2d>
 8001c84:	a320      	add	r3, pc, #128	; (adr r3, 8001d08 <updatePosition+0x200>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fcdd 	bl	8000648 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fb21 	bl	80002dc <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ffa9 	bl	8000bf8 <__aeabi_d2f>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
	if(motor->rad > 6.283184) motor->rad -= 6.283184;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc71 	bl	8000598 <__aeabi_f2d>
 8001cb6:	a312      	add	r3, pc, #72	; (adr r3, 8001d00 <updatePosition+0x1f8>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	f7fe ff54 	bl	8000b68 <__aeabi_dcmpgt>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d012      	beq.n	8001cec <updatePosition+0x1e4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc64 	bl	8000598 <__aeabi_f2d>
 8001cd0:	a30b      	add	r3, pc, #44	; (adr r3, 8001d00 <updatePosition+0x1f8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	f7fe faff 	bl	80002d8 <__aeabi_dsub>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff89 	bl	8000bf8 <__aeabi_d2f>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]

	motor->pre_ang = motor->rad;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	f3af 8000 	nop.w
 8001d00:	fc8b007a 	.word	0xfc8b007a
 8001d04:	401921fa 	.word	0x401921fa
 8001d08:	bc6a7efa 	.word	0xbc6a7efa
 8001d0c:	3f589374 	.word	0x3f589374
 8001d10:	40668000 	.word	0x40668000
 8001d14:	200027e4 	.word	0x200027e4
 8001d18:	000186a0 	.word	0x000186a0
 8001d1c:	404e0000 	.word	0x404e0000
 8001d20:	42c80000 	.word	0x42c80000
 8001d24:	fc8b007a 	.word	0xfc8b007a
 8001d28:	400921fa 	.word	0x400921fa
 8001d2c:	00000000 	.word	0x00000000

08001d30 <setOffset>:
  * @brief  get offset for select front position
  * @param  none
  * @retval none
  */

void setOffset(MOTOR* motor){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	motor->offset = (as5147_readPosition() * 3.141592) / 180;
 8001d38:	f7ff fdf8 	bl	800192c <as5147_readPosition>
 8001d3c:	ee10 3a10 	vmov	r3, s0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc29 	bl	8000598 <__aeabi_f2d>
 8001d46:	a30f      	add	r3, pc, #60	; (adr r3, 8001d84 <setOffset+0x54>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fc7c 	bl	8000648 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <setOffset+0x50>)
 8001d5e:	f7fe fd9d 	bl	800089c <__aeabi_ddiv>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff45 	bl	8000bf8 <__aeabi_d2f>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	f3af 8000 	nop.w
 8001d80:	40668000 	.word	0x40668000
 8001d84:	fc8b007a 	.word	0xfc8b007a
 8001d88:	400921fa 	.word	0x400921fa

08001d8c <addI2CChip>:
  */


/*	chip setting functions*/

uint16_t addI2CChip(I2C_HandleTypeDef* hi2c, uint16_t dev_addr, uint16_t mem_addr_size){
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	803b      	strh	r3, [r7, #0]
	uint8_t chip_num = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	73bb      	strb	r3, [r7, #14]
	uint8_t index = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

	for(index = 0; index < 256; index++){
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
		if(i2c_chip_list[index].dev_addr == 0 || i2c_chip_list[index].hi2c == hi2c){
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <addI2CChip+0x78>)
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	889b      	ldrh	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <addI2CChip+0x38>
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <addI2CChip+0x78>)
 8001dba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d102      	bne.n	8001dca <addI2CChip+0x3e>
			chip_num = index;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	73bb      	strb	r3, [r7, #14]
			break;
 8001dc8:	e003      	b.n	8001dd2 <addI2CChip+0x46>
	for(index = 0; index < 256; index++){
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
		if(i2c_chip_list[index].dev_addr == 0 || i2c_chip_list[index].hi2c == hi2c){
 8001dd0:	e7ea      	b.n	8001da8 <addI2CChip+0x1c>
		}
	}

	if(index != 256){
		i2c_chip_list[chip_num].hi2c = hi2c;
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	490b      	ldr	r1, [pc, #44]	; (8001e04 <addI2CChip+0x78>)
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		i2c_chip_list[chip_num].dev_addr = dev_addr;
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <addI2CChip+0x78>)
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	809a      	strh	r2, [r3, #4]
		i2c_chip_list[chip_num].mem_addr_size = mem_addr_size;
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	4a06      	ldr	r2, [pc, #24]	; (8001e04 <addI2CChip+0x78>)
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	883a      	ldrh	r2, [r7, #0]
 8001df2:	80da      	strh	r2, [r3, #6]

		return chip_num;
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	b29b      	uxth	r3, r3
	}else{
		return -1;
	}
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	20002ed0 	.word	0x20002ed0

08001e08 <I2C_read2ByteRegister>:

/**
  * @}
  */

uint16_t I2C_read2ByteRegister(uint8_t chip_num, uint16_t mem_addr){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460a      	mov	r2, r1
 8001e12:	71fb      	strb	r3, [r7, #7]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80bb      	strh	r3, [r7, #4]
	uint8_t buffer[2] = { 0, };
 8001e18:	2300      	movs	r3, #0
 8001e1a:	81bb      	strh	r3, [r7, #12]

	//HAL_I2C_Master_Transmit(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, (uint8_t*)&mem_addr, 1, HAL_TIMEOUT);

	//HAL_I2C_Master_Receive(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, buffer, 2, HAL_TIMEOUT);

	HAL_I2C_Mem_Read(i2c_chip_list[chip_num].hi2c, (i2c_chip_list[chip_num].dev_addr & 0x7f) << 1, mem_addr, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_TIMEOUT);
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <I2C_read2ByteRegister+0x60>)
 8001e20:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	4a10      	ldr	r2, [pc, #64]	; (8001e68 <I2C_read2ByteRegister+0x60>)
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	b299      	uxth	r1, r3
 8001e36:	88ba      	ldrh	r2, [r7, #4]
 8001e38:	2303      	movs	r3, #3
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	f002 fbea 	bl	8004620 <HAL_I2C_Mem_Read>

	uint16_t data = buffer[1] <<8 | buffer[0];
 8001e4c:	7b7b      	ldrb	r3, [r7, #13]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	7b3b      	ldrb	r3, [r7, #12]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	81fb      	strh	r3, [r7, #14]

	return data;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20002ed0 	.word	0x20002ed0

08001e6c <addSPIChip>:
  * @param	GPIO_port GPIO init structure definition
  * @param	GPIO_num GPIO pin number
  * @retval boolean
  * success chip_num, if fail return false
  */
uint16_t addSPIChip(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
	uint8_t chip_num = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75bb      	strb	r3, [r7, #22]
	uint8_t index = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

	for(index = 0; index < 256; index++){
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
		if(SPI_chip_list[index].CS_pin == 0 || SPI_chip_list[index].hspi == hspix){
 8001e86:	7dfa      	ldrb	r2, [r7, #23]
 8001e88:	492a      	ldr	r1, [pc, #168]	; (8001f34 <addSPIChip+0xc8>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3308      	adds	r3, #8
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <addSPIChip+0x46>
 8001e9c:	7dfa      	ldrb	r2, [r7, #23]
 8001e9e:	4925      	ldr	r1, [pc, #148]	; (8001f34 <addSPIChip+0xc8>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d102      	bne.n	8001eb8 <addSPIChip+0x4c>
			chip_num = index;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	75bb      	strb	r3, [r7, #22]
			break;
 8001eb6:	e003      	b.n	8001ec0 <addSPIChip+0x54>
	for(index = 0; index < 256; index++){
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
		if(SPI_chip_list[index].CS_pin == 0 || SPI_chip_list[index].hspi == hspix){
 8001ebe:	e7e2      	b.n	8001e86 <addSPIChip+0x1a>
		}
	}

	if(index != 256){
		SPI_chip_list[chip_num].hspi = hspix;
 8001ec0:	7dba      	ldrb	r2, [r7, #22]
 8001ec2:	491c      	ldr	r1, [pc, #112]	; (8001f34 <addSPIChip+0xc8>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]
		SPI_chip_list[chip_num].CS_port = GPIO_port;
 8001ed2:	7dba      	ldrb	r2, [r7, #22]
 8001ed4:	4917      	ldr	r1, [pc, #92]	; (8001f34 <addSPIChip+0xc8>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	601a      	str	r2, [r3, #0]
		SPI_chip_list[chip_num].CS_pin = GPIO_num;
 8001ee6:	7dba      	ldrb	r2, [r7, #22]
 8001ee8:	4912      	ldr	r1, [pc, #72]	; (8001f34 <addSPIChip+0xc8>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3308      	adds	r3, #8
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8001efa:	7dba      	ldrb	r2, [r7, #22]
 8001efc:	490d      	ldr	r1, [pc, #52]	; (8001f34 <addSPIChip+0xc8>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3304      	adds	r3, #4
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	7dba      	ldrb	r2, [r7, #22]
 8001f0e:	4909      	ldr	r1, [pc, #36]	; (8001f34 <addSPIChip+0xc8>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	4619      	mov	r1, r3
 8001f22:	f002 fad5 	bl	80044d0 <HAL_GPIO_WritePin>

		return chip_num;
 8001f26:	7dbb      	ldrb	r3, [r7, #22]
 8001f28:	b29b      	uxth	r3, r3
	}else{
		return -1;
	}
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20001be0 	.word	0x20001be0

08001f38 <SPI_read2ByteRegister>:
/**
  * @brief  read register value
  * @param  chip_num spi chip number
  * @retval data in register
  */
uint16_t SPI_read2ByteRegister(uint8_t chip_num, uint16_t* pRxData){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	71fb      	strb	r3, [r7, #7]
	//uint8_t pbuffer[2] = { 0, };
	//uint16_t* read_data = (uint16_t*)pbuffer;

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8001f44:	79fa      	ldrb	r2, [r7, #7]
 8001f46:	491f      	ldr	r1, [pc, #124]	; (8001fc4 <SPI_read2ByteRegister+0x8c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	491a      	ldr	r1, [pc, #104]	; (8001fc4 <SPI_read2ByteRegister+0x8c>)
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	3308      	adds	r3, #8
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f002 fab0 	bl	80044d0 <HAL_GPIO_WritePin>

	HAL_SPI_Receive(SPI_chip_list[chip_num].hspi, (uint8_t*)pRxData, 1, HAL_MAX_DELAY);
 8001f70:	79fa      	ldrb	r2, [r7, #7]
 8001f72:	4914      	ldr	r1, [pc, #80]	; (8001fc4 <SPI_read2ByteRegister+0x8c>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	2201      	movs	r2, #1
 8001f86:	6839      	ldr	r1, [r7, #0]
 8001f88:	f004 f971 	bl	800626e <HAL_SPI_Receive>

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	490d      	ldr	r1, [pc, #52]	; (8001fc4 <SPI_read2ByteRegister+0x8c>)
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	4908      	ldr	r1, [pc, #32]	; (8001fc4 <SPI_read2ByteRegister+0x8c>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3308      	adds	r3, #8
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f002 fa8c 	bl	80044d0 <HAL_GPIO_WritePin>

	//return *read_data;
	return 0;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20001be0 	.word	0x20001be0

08001fc8 <SPI_write2ByteRegister>:
  * @brief  write register value
  * @param	command data what will write in register
  * @param  chip_num spi chip number
  * @retval HAL status
  */
HAL_StatusTypeDef SPI_write2ByteRegister(uint16_t* command, uint8_t chip_num){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8001fd4:	78fa      	ldrb	r2, [r7, #3]
 8001fd6:	4920      	ldr	r1, [pc, #128]	; (8002058 <SPI_write2ByteRegister+0x90>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	491b      	ldr	r1, [pc, #108]	; (8002058 <SPI_write2ByteRegister+0x90>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f002 fa68 	bl	80044d0 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Transmit(SPI_chip_list[chip_num].hspi, (uint8_t*)command, 1, HAL_MAX_DELAY);
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	4915      	ldr	r1, [pc, #84]	; (8002058 <SPI_write2ByteRegister+0x90>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	2201      	movs	r2, #1
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f003 ffbb 	bl	8005f92 <HAL_SPI_Transmit>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(SPI_chip_list[chip_num].CS_port, SPI_chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	490d      	ldr	r1, [pc, #52]	; (8002058 <SPI_write2ByteRegister+0x90>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	3304      	adds	r3, #4
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4908      	ldr	r1, [pc, #32]	; (8002058 <SPI_write2ByteRegister+0x90>)
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3308      	adds	r3, #8
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4619      	mov	r1, r3
 8002048:	f002 fa42 	bl	80044d0 <HAL_GPIO_WritePin>

	return state;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20001be0 	.word	0x20001be0

0800205c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002060:	f001 fd09 	bl	8003a76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002064:	f000 f8c8 	bl	80021f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002068:	f000 fbc0 	bl	80027ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800206c:	f000 fb48 	bl	8002700 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8002070:	f000 fb92 	bl	8002798 <MX_DMA_Init>
  MX_I2C1_Init();
 8002074:	f000 f90c 	bl	8002290 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002078:	f000 f94a 	bl	8002310 <MX_SPI1_Init>
  MX_TIM1_Init();
 800207c:	f000 f986 	bl	800238c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002080:	f000 faea 	bl	8002658 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002084:	f000 fa3e 	bl	8002504 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002088:	f000 fa90 	bl	80025ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	483c      	ldr	r0, [pc, #240]	; (8002184 <main+0x128>)
 8002094:	f002 fa1c 	bl	80044d0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8002098:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800209c:	f001 fd22 	bl	8003ae4 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a6:	4837      	ldr	r0, [pc, #220]	; (8002184 <main+0x128>)
 80020a8:	f002 fa12 	bl	80044d0 <HAL_GPIO_WritePin>

  MAG_check();
 80020ac:	f000 fc68 	bl	8002980 <MAG_check>
  RC_check();
 80020b0:	f000 fc0c 	bl	80028cc <RC_check>
  IMU_check();
 80020b4:	f000 fc38 	bl	8002928 <IMU_check>
  PWM_check();
 80020b8:	f000 fcda 	bl	8002a70 <PWM_check>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c2:	4830      	ldr	r0, [pc, #192]	; (8002184 <main+0x128>)
 80020c4:	f002 fa04 	bl	80044d0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020c8:	f007 f9f8 	bl	80094bc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of RCdata */
  RCdataHandle = osMessageQueueNew (1, sizeof(RC), &RCdata_attributes);
 80020cc:	4a2e      	ldr	r2, [pc, #184]	; (8002188 <main+0x12c>)
 80020ce:	2150      	movs	r1, #80	; 0x50
 80020d0:	2001      	movs	r0, #1
 80020d2:	f007 faea 	bl	80096aa <osMessageQueueNew>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a2c      	ldr	r2, [pc, #176]	; (800218c <main+0x130>)
 80020da:	6013      	str	r3, [r2, #0]

  /* creation of IMUdata */
  IMUdataHandle = osMessageQueueNew (1, sizeof(IMU), &IMUdata_attributes);
 80020dc:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <main+0x134>)
 80020de:	2118      	movs	r1, #24
 80020e0:	2001      	movs	r0, #1
 80020e2:	f007 fae2 	bl	80096aa <osMessageQueueNew>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a2a      	ldr	r2, [pc, #168]	; (8002194 <main+0x138>)
 80020ea:	6013      	str	r3, [r2, #0]

  /* creation of MAGdata */
  MAGdataHandle = osMessageQueueNew (1, sizeof(MOTOR), &MAGdata_attributes);
 80020ec:	4a2a      	ldr	r2, [pc, #168]	; (8002198 <main+0x13c>)
 80020ee:	2128      	movs	r1, #40	; 0x28
 80020f0:	2001      	movs	r0, #1
 80020f2:	f007 fada 	bl	80096aa <osMessageQueueNew>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a28      	ldr	r2, [pc, #160]	; (800219c <main+0x140>)
 80020fa:	6013      	str	r3, [r2, #0]

  /* creation of CMDdata */
  CMDdataHandle = osMessageQueueNew (1, sizeof(RPYT_CMD), &CMDdata_attributes);
 80020fc:	4a28      	ldr	r2, [pc, #160]	; (80021a0 <main+0x144>)
 80020fe:	2114      	movs	r1, #20
 8002100:	2001      	movs	r0, #1
 8002102:	f007 fad2 	bl	80096aa <osMessageQueueNew>
 8002106:	4603      	mov	r3, r0
 8002108:	4a26      	ldr	r2, [pc, #152]	; (80021a4 <main+0x148>)
 800210a:	6013      	str	r3, [r2, #0]

  /* creation of PWMdata */
  PWMdataHandle = osMessageQueueNew (1, sizeof(PWM_CMD), &PWMdata_attributes);
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <main+0x14c>)
 800210e:	2108      	movs	r1, #8
 8002110:	2001      	movs	r0, #1
 8002112:	f007 faca 	bl	80096aa <osMessageQueueNew>
 8002116:	4603      	mov	r3, r0
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <main+0x150>)
 800211a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RadioCommand */
  RadioCommandHandle = osThreadNew(StartRadioCommand, NULL, &RadioCommand_attributes);
 800211c:	4a24      	ldr	r2, [pc, #144]	; (80021b0 <main+0x154>)
 800211e:	2100      	movs	r1, #0
 8002120:	4824      	ldr	r0, [pc, #144]	; (80021b4 <main+0x158>)
 8002122:	f007 fa15 	bl	8009550 <osThreadNew>
 8002126:	4603      	mov	r3, r0
 8002128:	4a23      	ldr	r2, [pc, #140]	; (80021b8 <main+0x15c>)
 800212a:	6013      	str	r3, [r2, #0]

  /* creation of ReadIMU */
  ReadIMUHandle = osThreadNew(StartReadIMU, NULL, &ReadIMU_attributes);
 800212c:	4a23      	ldr	r2, [pc, #140]	; (80021bc <main+0x160>)
 800212e:	2100      	movs	r1, #0
 8002130:	4823      	ldr	r0, [pc, #140]	; (80021c0 <main+0x164>)
 8002132:	f007 fa0d 	bl	8009550 <osThreadNew>
 8002136:	4603      	mov	r3, r0
 8002138:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <main+0x168>)
 800213a:	6013      	str	r3, [r2, #0]

  /* creation of ReadMAG */
  ReadMAGHandle = osThreadNew(StartReadMAG, NULL, &ReadMAG_attributes);
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <main+0x16c>)
 800213e:	2100      	movs	r1, #0
 8002140:	4822      	ldr	r0, [pc, #136]	; (80021cc <main+0x170>)
 8002142:	f007 fa05 	bl	8009550 <osThreadNew>
 8002146:	4603      	mov	r3, r0
 8002148:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <main+0x174>)
 800214a:	6013      	str	r3, [r2, #0]

  /* creation of AttitudeControl */
  AttitudeControlHandle = osThreadNew(StartAttitudeControl, NULL, &AttitudeControl_attributes);
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <main+0x178>)
 800214e:	2100      	movs	r1, #0
 8002150:	4821      	ldr	r0, [pc, #132]	; (80021d8 <main+0x17c>)
 8002152:	f007 f9fd 	bl	8009550 <osThreadNew>
 8002156:	4603      	mov	r3, r0
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <main+0x180>)
 800215a:	6013      	str	r3, [r2, #0]

  /* creation of CyclicPitchCont */
  CyclicPitchContHandle = osThreadNew(StartCyclicPitchControl, NULL, &CyclicPitchCont_attributes);
 800215c:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <main+0x184>)
 800215e:	2100      	movs	r1, #0
 8002160:	4820      	ldr	r0, [pc, #128]	; (80021e4 <main+0x188>)
 8002162:	f007 f9f5 	bl	8009550 <osThreadNew>
 8002166:	4603      	mov	r3, r0
 8002168:	4a1f      	ldr	r2, [pc, #124]	; (80021e8 <main+0x18c>)
 800216a:	6013      	str	r3, [r2, #0]

  /* creation of MotorOutput */
  MotorOutputHandle = osThreadNew(StartMotorOutput, NULL, &MotorOutput_attributes);
 800216c:	4a1f      	ldr	r2, [pc, #124]	; (80021ec <main+0x190>)
 800216e:	2100      	movs	r1, #0
 8002170:	481f      	ldr	r0, [pc, #124]	; (80021f0 <main+0x194>)
 8002172:	f007 f9ed 	bl	8009550 <osThreadNew>
 8002176:	4603      	mov	r3, r0
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <main+0x198>)
 800217a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800217c:	f007 f9c2 	bl	8009504 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002180:	e7fe      	b.n	8002180 <main+0x124>
 8002182:	bf00      	nop
 8002184:	48000400 	.word	0x48000400
 8002188:	080113e4 	.word	0x080113e4
 800218c:	200045b8 	.word	0x200045b8
 8002190:	080113fc 	.word	0x080113fc
 8002194:	200045b4 	.word	0x200045b4
 8002198:	08011414 	.word	0x08011414
 800219c:	200045bc 	.word	0x200045bc
 80021a0:	0801142c 	.word	0x0801142c
 80021a4:	20004cb8 	.word	0x20004cb8
 80021a8:	08011444 	.word	0x08011444
 80021ac:	20004bf0 	.word	0x20004bf0
 80021b0:	0801130c 	.word	0x0801130c
 80021b4:	08002a99 	.word	0x08002a99
 80021b8:	200045c0 	.word	0x200045c0
 80021bc:	08011330 	.word	0x08011330
 80021c0:	08002c69 	.word	0x08002c69
 80021c4:	200044a4 	.word	0x200044a4
 80021c8:	08011354 	.word	0x08011354
 80021cc:	08002cc5 	.word	0x08002cc5
 80021d0:	200042d8 	.word	0x200042d8
 80021d4:	08011378 	.word	0x08011378
 80021d8:	08002d59 	.word	0x08002d59
 80021dc:	20003f28 	.word	0x20003f28
 80021e0:	0801139c 	.word	0x0801139c
 80021e4:	080030b1 	.word	0x080030b1
 80021e8:	20004878 	.word	0x20004878
 80021ec:	080113c0 	.word	0x080113c0
 80021f0:	080031c9 	.word	0x080031c9
 80021f4:	20004564 	.word	0x20004564

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b094      	sub	sp, #80	; 0x50
 80021fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	f107 0318 	add.w	r3, r7, #24
 8002202:	2238      	movs	r2, #56	; 0x38
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f00a f9fa 	bl	800c600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800221a:	2000      	movs	r0, #0
 800221c:	f002 fe04 	bl	8004e28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002220:	2302      	movs	r3, #2
 8002222:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800222a:	2340      	movs	r3, #64	; 0x40
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222e:	2302      	movs	r3, #2
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002232:	2302      	movs	r3, #2
 8002234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002236:	2304      	movs	r3, #4
 8002238:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800223a:	2355      	movs	r3, #85	; 0x55
 800223c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800223e:	2302      	movs	r3, #2
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002242:	2302      	movs	r3, #2
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002246:	2302      	movs	r3, #2
 8002248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224a:	f107 0318 	add.w	r3, r7, #24
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fe9e 	bl	8004f90 <HAL_RCC_OscConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800225a:	f001 f807 	bl	800326c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225e:	230f      	movs	r3, #15
 8002260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002262:	2303      	movs	r3, #3
 8002264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2104      	movs	r1, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f003 f9a2 	bl	80055c0 <HAL_RCC_ClockConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002282:	f000 fff3 	bl	800326c <Error_Handler>
  }
}
 8002286:	bf00      	nop
 8002288:	3750      	adds	r7, #80	; 0x50
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <MX_I2C1_Init+0x74>)
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <MX_I2C1_Init+0x78>)
 8002298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <MX_I2C1_Init+0x74>)
 800229c:	4a1b      	ldr	r2, [pc, #108]	; (800230c <MX_I2C1_Init+0x7c>)
 800229e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <MX_I2C1_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <MX_I2C1_Init+0x74>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <MX_I2C1_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_I2C1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <MX_I2C1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_I2C1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_I2C1_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022ca:	480e      	ldr	r0, [pc, #56]	; (8002304 <MX_I2C1_Init+0x74>)
 80022cc:	f002 f918 	bl	8004500 <HAL_I2C_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022d6:	f000 ffc9 	bl	800326c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022da:	2100      	movs	r1, #0
 80022dc:	4809      	ldr	r0, [pc, #36]	; (8002304 <MX_I2C1_Init+0x74>)
 80022de:	f002 fd0b 	bl	8004cf8 <HAL_I2CEx_ConfigAnalogFilter>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022e8:	f000 ffc0 	bl	800326c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022ec:	2100      	movs	r1, #0
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_I2C1_Init+0x74>)
 80022f0:	f002 fd4d 	bl	8004d8e <HAL_I2CEx_ConfigDigitalFilter>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022fa:	f000 ffb7 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20003a2c 	.word	0x20003a2c
 8002308:	40005400 	.word	0x40005400
 800230c:	30a0a7fb 	.word	0x30a0a7fb

08002310 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <MX_SPI1_Init+0x74>)
 8002316:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <MX_SPI1_Init+0x78>)
 8002318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800231a:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <MX_SPI1_Init+0x74>)
 800231c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <MX_SPI1_Init+0x74>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002328:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_SPI1_Init+0x74>)
 800232a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800232e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_SPI1_Init+0x74>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <MX_SPI1_Init+0x74>)
 8002338:	2201      	movs	r2, #1
 800233a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_SPI1_Init+0x74>)
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_SPI1_Init+0x74>)
 8002346:	2210      	movs	r2, #16
 8002348:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_SPI1_Init+0x74>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_SPI1_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <MX_SPI1_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_SPI1_Init+0x74>)
 800235e:	2207      	movs	r2, #7
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <MX_SPI1_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_SPI1_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800236e:	4805      	ldr	r0, [pc, #20]	; (8002384 <MX_SPI1_Init+0x74>)
 8002370:	f003 fd64 	bl	8005e3c <HAL_SPI_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800237a:	f000 ff77 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20004614 	.word	0x20004614
 8002388:	40013000 	.word	0x40013000

0800238c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b09c      	sub	sp, #112	; 0x70
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002392:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2234      	movs	r2, #52	; 0x34
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00a f91a 	bl	800c600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023cc:	4b4b      	ldr	r3, [pc, #300]	; (80024fc <MX_TIM1_Init+0x170>)
 80023ce:	4a4c      	ldr	r2, [pc, #304]	; (8002500 <MX_TIM1_Init+0x174>)
 80023d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <MX_TIM1_Init+0x170>)
 80023d4:	22a9      	movs	r2, #169	; 0xa9
 80023d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d8:	4b48      	ldr	r3, [pc, #288]	; (80024fc <MX_TIM1_Init+0x170>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <MX_TIM1_Init+0x170>)
 80023e0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80023e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e6:	4b45      	ldr	r3, [pc, #276]	; (80024fc <MX_TIM1_Init+0x170>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ec:	4b43      	ldr	r3, [pc, #268]	; (80024fc <MX_TIM1_Init+0x170>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f2:	4b42      	ldr	r3, [pc, #264]	; (80024fc <MX_TIM1_Init+0x170>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023f8:	4840      	ldr	r0, [pc, #256]	; (80024fc <MX_TIM1_Init+0x170>)
 80023fa:	f004 fc37 	bl	8006c6c <HAL_TIM_Base_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002404:	f000 ff32 	bl	800326c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800240e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002412:	4619      	mov	r1, r3
 8002414:	4839      	ldr	r0, [pc, #228]	; (80024fc <MX_TIM1_Init+0x170>)
 8002416:	f005 f8e1 	bl	80075dc <HAL_TIM_ConfigClockSource>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002420:	f000 ff24 	bl	800326c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002424:	4835      	ldr	r0, [pc, #212]	; (80024fc <MX_TIM1_Init+0x170>)
 8002426:	f004 fce3 	bl	8006df0 <HAL_TIM_PWM_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002430:	f000 ff1c 	bl	800326c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002434:	2300      	movs	r3, #0
 8002436:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002444:	4619      	mov	r1, r3
 8002446:	482d      	ldr	r0, [pc, #180]	; (80024fc <MX_TIM1_Init+0x170>)
 8002448:	f005 fe32 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002452:	f000 ff0b 	bl	800326c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002456:	2360      	movs	r3, #96	; 0x60
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245e:	2300      	movs	r3, #0
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002462:	2300      	movs	r3, #0
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002476:	2200      	movs	r2, #0
 8002478:	4619      	mov	r1, r3
 800247a:	4820      	ldr	r0, [pc, #128]	; (80024fc <MX_TIM1_Init+0x170>)
 800247c:	f004 ff9a 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002486:	f000 fef1 	bl	800326c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800248a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800248e:	2204      	movs	r2, #4
 8002490:	4619      	mov	r1, r3
 8002492:	481a      	ldr	r0, [pc, #104]	; (80024fc <MX_TIM1_Init+0x170>)
 8002494:	f004 ff8e 	bl	80073b4 <HAL_TIM_PWM_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800249e:	f000 fee5 	bl	800326c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <MX_TIM1_Init+0x170>)
 80024e0:	f005 fe68 	bl	80081b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80024ea:	f000 febf 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM1_Init+0x170>)
 80024f0:	f000 fffa 	bl	80034e8 <HAL_TIM_MspPostInit>

}
 80024f4:	bf00      	nop
 80024f6:	3770      	adds	r7, #112	; 0x70
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20004568 	.word	0x20004568
 8002500:	40012c00 	.word	0x40012c00

08002504 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002524:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <MX_TIM3_Init+0xa4>)
 8002526:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17-1;
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <MX_TIM3_Init+0xa0>)
 800252a:	2210      	movs	r2, #16
 800252c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002536:	2263      	movs	r2, #99	; 0x63
 8002538:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_TIM3_Init+0xa0>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002546:	4817      	ldr	r0, [pc, #92]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002548:	f004 fb90 	bl	8006c6c <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002552:	f000 fe8b 	bl	800326c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	4619      	mov	r1, r3
 8002562:	4810      	ldr	r0, [pc, #64]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002564:	f005 f83a 	bl	80075dc <HAL_TIM_ConfigClockSource>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800256e:	f000 fe7d 	bl	800326c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4809      	ldr	r0, [pc, #36]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002580:	f005 fd96 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800258a:	f000 fe6f 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_MspInit(&htim3);
 800258e:	4805      	ldr	r0, [pc, #20]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002590:	f000 ff54 	bl	800343c <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim3);
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <MX_TIM3_Init+0xa0>)
 8002596:	f004 fbc1 	bl	8006d1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20003edc 	.word	0x20003edc
 80025a8:	40000400 	.word	0x40000400

080025ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025cc:	4a21      	ldr	r2, [pc, #132]	; (8002654 <MX_TIM4_Init+0xa8>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 17000-1;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025d2:	f244 2267 	movw	r2, #16999	; 0x4267
 80025d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80025e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b18      	ldr	r3, [pc, #96]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025f2:	4817      	ldr	r0, [pc, #92]	; (8002650 <MX_TIM4_Init+0xa4>)
 80025f4:	f004 fb3a 	bl	8006c6c <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80025fe:	f000 fe35 	bl	800326c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4619      	mov	r1, r3
 800260e:	4810      	ldr	r0, [pc, #64]	; (8002650 <MX_TIM4_Init+0xa4>)
 8002610:	f004 ffe4 	bl	80075dc <HAL_TIM_ConfigClockSource>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800261a:	f000 fe27 	bl	800326c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4809      	ldr	r0, [pc, #36]	; (8002650 <MX_TIM4_Init+0xa4>)
 800262c:	f005 fd40 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002636:	f000 fe19 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_MspInit(&htim4);
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_TIM4_Init+0xa4>)
 800263c:	f000 fefe 	bl	800343c <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim4);
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <MX_TIM4_Init+0xa4>)
 8002642:	f004 fb6b 	bl	8006d1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	3720      	adds	r7, #32
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20003790 	.word	0x20003790
 8002654:	40000800 	.word	0x40000800

08002658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <MX_USART1_UART_Init+0xa0>)
 8002660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002670:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002672:	2200      	movs	r2, #0
 8002674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 800267e:	220c      	movs	r2, #12
 8002680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800268e:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026a0:	4814      	ldr	r0, [pc, #80]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 80026a2:	f005 fe6d 	bl	8008380 <HAL_UART_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80026ac:	f000 fdde 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b0:	2100      	movs	r1, #0
 80026b2:	4810      	ldr	r0, [pc, #64]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 80026b4:	f006 fdf3 	bl	800929e <HAL_UARTEx_SetTxFifoThreshold>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026be:	f000 fdd5 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c2:	2100      	movs	r1, #0
 80026c4:	480b      	ldr	r0, [pc, #44]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 80026c6:	f006 fe28 	bl	800931a <HAL_UARTEx_SetRxFifoThreshold>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026d0:	f000 fdcc 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026d4:	4807      	ldr	r0, [pc, #28]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 80026d6:	f006 fda9 	bl	800922c <HAL_UARTEx_DisableFifoMode>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026e0:	f000 fdc4 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 80026e4:	2210      	movs	r2, #16
 80026e6:	4905      	ldr	r1, [pc, #20]	; (80026fc <MX_USART1_UART_Init+0xa4>)
 80026e8:	4802      	ldr	r0, [pc, #8]	; (80026f4 <MX_USART1_UART_Init+0x9c>)
 80026ea:	f005 fe99 	bl	8008420 <HAL_UART_Receive_DMA>

  /* USER CODE END USART1_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20004248 	.word	0x20004248
 80026f8:	40013800 	.word	0x40013800
 80026fc:	20002abc 	.word	0x20002abc

08002700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002706:	4a23      	ldr	r2, [pc, #140]	; (8002794 <MX_USART2_UART_Init+0x94>)
 8002708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800270c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002712:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002726:	220c      	movs	r2, #12
 8002728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <MX_USART2_UART_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002748:	4811      	ldr	r0, [pc, #68]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800274a:	f005 fe19 	bl	8008380 <HAL_UART_Init>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002754:	f000 fd8a 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002758:	2100      	movs	r1, #0
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800275c:	f006 fd9f 	bl	800929e <HAL_UARTEx_SetTxFifoThreshold>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002766:	f000 fd81 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276a:	2100      	movs	r1, #0
 800276c:	4808      	ldr	r0, [pc, #32]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800276e:	f006 fdd4 	bl	800931a <HAL_UARTEx_SetRxFifoThreshold>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002778:	f000 fd78 	bl	800326c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_USART2_UART_Init+0x90>)
 800277e:	f006 fd55 	bl	800922c <HAL_UARTEx_DisableFifoMode>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002788:	f000 fd70 	bl	800326c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200048a4 	.word	0x200048a4
 8002794:	40004400 	.word	0x40004400

08002798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_DMA_Init+0x50>)
 80027a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a2:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <MX_DMA_Init+0x50>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6493      	str	r3, [r2, #72]	; 0x48
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_DMA_Init+0x50>)
 80027ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_DMA_Init+0x50>)
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	4a0b      	ldr	r2, [pc, #44]	; (80027e8 <MX_DMA_Init+0x50>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6493      	str	r3, [r2, #72]	; 0x48
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_DMA_Init+0x50>)
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2105      	movs	r1, #5
 80027d2:	200b      	movs	r0, #11
 80027d4:	f001 fa60 	bl	8003c98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027d8:	200b      	movs	r0, #11
 80027da:	f001 fa77 	bl	8003ccc <HAL_NVIC_EnableIRQ>

}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000

080027ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <MX_GPIO_Init+0xa4>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <MX_GPIO_Init+0xa4>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <MX_GPIO_Init+0xa4>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <MX_GPIO_Init+0xa4>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <MX_GPIO_Init+0xa4>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <MX_GPIO_Init+0xa4>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002832:	2200      	movs	r2, #0
 8002834:	2110      	movs	r1, #16
 8002836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283a:	f001 fe49 	bl	80044d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002844:	4813      	ldr	r0, [pc, #76]	; (8002894 <MX_GPIO_Init+0xa8>)
 8002846:	f001 fe43 	bl	80044d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800284a:	2310      	movs	r3, #16
 800284c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284e:	2301      	movs	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800285a:	f107 030c 	add.w	r3, r7, #12
 800285e:	4619      	mov	r1, r3
 8002860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002864:	f001 fcb2 	bl	80041cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	4619      	mov	r1, r3
 8002880:	4804      	ldr	r0, [pc, #16]	; (8002894 <MX_GPIO_Init+0xa8>)
 8002882:	f001 fca3 	bl	80041cc <HAL_GPIO_Init>

}
 8002886:	bf00      	nop
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	48000400 	.word	0x48000400

08002898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huartx){
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	if(huartx->Instance == huart1.Instance){
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_UART_RxCpltCallback+0x2c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_UART_RxCpltCallback+0x22>
		Spektrum_Read();
 80028ac:	f7fe fde2 	bl	8001474 <Spektrum_Read>

		HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 80028b0:	2210      	movs	r2, #16
 80028b2:	4905      	ldr	r1, [pc, #20]	; (80028c8 <HAL_UART_RxCpltCallback+0x30>)
 80028b4:	4803      	ldr	r0, [pc, #12]	; (80028c4 <HAL_UART_RxCpltCallback+0x2c>)
 80028b6:	f005 fdb3 	bl	8008420 <HAL_UART_Receive_DMA>
	}
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20004248 	.word	0x20004248
 80028c8:	20002abc 	.word	0x20002abc

080028cc <RC_check>:

void RC_check(void){
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
	for(int check = 0; check < 10;){
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	e00a      	b.n	80028ee <RC_check+0x22>
		if(rc.channel[THROTTLE].pos == 342)	check++;
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <RC_check+0x58>)
 80028da:	8c1b      	ldrh	r3, [r3, #32]
 80028dc:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80028e0:	d103      	bne.n	80028ea <RC_check+0x1e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3301      	adds	r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	e001      	b.n	80028ee <RC_check+0x22>
		else check = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
	for(int check = 0; check < 10;){
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	ddf1      	ble.n	80028d8 <RC_check+0xc>
	}
	for(int check = 0; check < 10;){
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	e00a      	b.n	8002910 <RC_check+0x44>
		if(SWITCH_POS(rc.channel[AUX1].pos) == 0)	check++;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <RC_check+0x58>)
 80028fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80028fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002902:	d203      	bcs.n	800290c <RC_check+0x40>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	e001      	b.n	8002910 <RC_check+0x44>
		else check = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	603b      	str	r3, [r7, #0]
	for(int check = 0; check < 10;){
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b09      	cmp	r3, #9
 8002914:	ddf1      	ble.n	80028fa <RC_check+0x2e>
	}

}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20002a6c 	.word	0x20002a6c

08002928 <IMU_check>:

void IMU_check(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
	IMU imu  = { 0, };
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
 800293c:	615a      	str	r2, [r3, #20]

	wt931_Init(&hi2c1);
 800293e:	480f      	ldr	r0, [pc, #60]	; (800297c <IMU_check+0x54>)
 8002940:	f7fe fde0 	bl	8001504 <wt931_Init>

	for(int check = 0; check < 5;){
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	e010      	b.n	800296c <IMU_check+0x44>
		imu = readIMU();
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fe0d 	bl	800156c <readIMU>
		if(imu.theta != 0) check++;
 8002952:	edd7 7a02 	vldr	s15, [r7, #8]
 8002956:	eef5 7a40 	vcmp.f32	s15, #0.0
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	d003      	beq.n	8002968 <IMU_check+0x40>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	3301      	adds	r3, #1
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e001      	b.n	800296c <IMU_check+0x44>
		else check = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
	for(int check = 0; check < 5;){
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b04      	cmp	r3, #4
 8002970:	ddeb      	ble.n	800294a <IMU_check+0x22>
	}
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20003a2c 	.word	0x20003a2c

08002980 <MAG_check>:

void MAG_check(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
	MOTOR mag = {0, };
 8002986:	463b      	mov	r3, r7
 8002988:	2228      	movs	r2, #40	; 0x28
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f009 fe37 	bl	800c600 <memset>

	as5147_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8002992:	2210      	movs	r2, #16
 8002994:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002998:	4833      	ldr	r0, [pc, #204]	; (8002a68 <MAG_check+0xe8>)
 800299a:	f7fe ff33 	bl	8001804 <as5147_Init>
	//as5147_setZeroPosition();

	sens_time = 11;
 800299e:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <MAG_check+0xec>)
 80029a0:	220b      	movs	r2, #11
 80029a2:	601a      	str	r2, [r3, #0]

	for(int check = 0; check < 20;){
 80029a4:	2300      	movs	r3, #0
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a8:	e02d      	b.n	8002a06 <MAG_check+0x86>
		updatePosition(&mag);
 80029aa:	463b      	mov	r3, r7
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f8ab 	bl	8001b08 <updatePosition>
		float err = mag.pre_ang - mag.rad;
 80029b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80029b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		if((err >= -0.5 && err <= 0.5) && mag.rad != 0) check++;
 80029c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029c6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80029ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d2:	db13      	blt.n	80029fc <MAG_check+0x7c>
 80029d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	d80a      	bhi.n	80029fc <MAG_check+0x7c>
 80029e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f2:	d003      	beq.n	80029fc <MAG_check+0x7c>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	3301      	adds	r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	e001      	b.n	8002a00 <MAG_check+0x80>
		else check = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_Delay(5);
 8002a00:	2005      	movs	r0, #5
 8002a02:	f001 f86f 	bl	8003ae4 <HAL_Delay>
	for(int check = 0; check < 20;){
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	2b13      	cmp	r3, #19
 8002a0a:	ddce      	ble.n	80029aa <MAG_check+0x2a>
	}
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002a0c:	e007      	b.n	8002a1e <MAG_check+0x9e>
		setOffset(&mag);
 8002a0e:	463b      	mov	r3, r7
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f98d 	bl	8001d30 <setOffset>
		updatePosition(&mag);
 8002a16:	463b      	mov	r3, r7
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff f875 	bl	8001b08 <updatePosition>
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	a30c      	add	r3, pc, #48	; (adr r3, 8002a58 <MAG_check+0xd8>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fe f89c 	bl	8000b68 <__aeabi_dcmpgt>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d100      	bne.n	8002a38 <MAG_check+0xb8>
	}

}
 8002a36:	e00b      	b.n	8002a50 <MAG_check+0xd0>
	while(mag.rad > 0.1 && mag.rad < 6.1){
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fdac 	bl	8000598 <__aeabi_f2d>
 8002a40:	a307      	add	r3, pc, #28	; (adr r3, 8002a60 <MAG_check+0xe0>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fe f871 	bl	8000b2c <__aeabi_dcmplt>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1de      	bne.n	8002a0e <MAG_check+0x8e>
}
 8002a50:	bf00      	nop
 8002a52:	3730      	adds	r7, #48	; 0x30
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	9999999a 	.word	0x9999999a
 8002a5c:	3fb99999 	.word	0x3fb99999
 8002a60:	66666666 	.word	0x66666666
 8002a64:	40186666 	.word	0x40186666
 8002a68:	20004614 	.word	0x20004614
 8002a6c:	200027e4 	.word	0x200027e4

08002a70 <PWM_check>:

void PWM_check(void){
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	  htim1.Instance->CCR1 = PWM_START;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <PWM_check+0x24>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = PWM_START;
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <PWM_check+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20004568 	.word	0x20004568

08002a98 <StartRadioCommand>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRadioCommand */
void StartRadioCommand(void *argument)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b098      	sub	sp, #96	; 0x60
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  RC rc_cmd = {0, };
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	2250      	movs	r2, #80	; 0x50
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f009 fda9 	bl	800c600 <memset>
  int imu_key = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Infinite loop */
  for(;;)
  {
	if(rc.channel[THROTTLE].pos != 0){
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002ab4:	8c1b      	ldrh	r3, [r3, #32]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80be 	beq.w	8002c38 <StartRadioCommand+0x1a0>
		rc_cmd.thro = map(rc.channel[THROTTLE].pos, RC_MIN, RC_MAX, PWM_MIN, PWM_MAX);     // thro command 				m/s
 8002abc:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002abe:	8c1b      	ldrh	r3, [r3, #32]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac8:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8002c44 <StartRadioCommand+0x1ac>
 8002acc:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8002c48 <StartRadioCommand+0x1b0>
 8002ad0:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 8002c4c <StartRadioCommand+0x1b4>
 8002ad4:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002c50 <StartRadioCommand+0x1b8>
 8002ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8002adc:	f7fe fc94 	bl	8001408 <map>
 8002ae0:	eef0 7a40 	vmov.f32	s15, s0
 8002ae4:	edc7 7a03 	vstr	s15, [r7, #12]

		rc_cmd.d_pi = map(rc.channel[AILERON].pos, RC_MIN, RC_MAX, 100, -100);			// d(pi)/dt command			deg/s
 8002ae8:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002aea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af4:	ed9f 2a57 	vldr	s4, [pc, #348]	; 8002c54 <StartRadioCommand+0x1bc>
 8002af8:	eddf 1a57 	vldr	s3, [pc, #348]	; 8002c58 <StartRadioCommand+0x1c0>
 8002afc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8002c4c <StartRadioCommand+0x1b4>
 8002b00:	eddf 0a53 	vldr	s1, [pc, #332]	; 8002c50 <StartRadioCommand+0x1b8>
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	f7fe fc7e 	bl	8001408 <map>
 8002b0c:	eef0 7a40 	vmov.f32	s15, s0
 8002b10:	edc7 7a07 	vstr	s15, [r7, #28]
		rc_cmd.d_theta = map(rc.channel[ELEVATOR].pos, RC_MIN, RC_MAX, -100, 100);		// d(theta)/dt command		deg/s
 8002b14:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8002c58 <StartRadioCommand+0x1c0>
 8002b24:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8002c54 <StartRadioCommand+0x1bc>
 8002b28:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8002c4c <StartRadioCommand+0x1b4>
 8002b2c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8002c50 <StartRadioCommand+0x1b8>
 8002b30:	eeb0 0a67 	vmov.f32	s0, s15
 8002b34:	f7fe fc68 	bl	8001408 <map>
 8002b38:	eef0 7a40 	vmov.f32	s15, s0
 8002b3c:	edc7 7a08 	vstr	s15, [r7, #32]
		rc_cmd.d_psi = map(rc.channel[RUDDER].pos, RC_MIN, RC_MAX, -100, 100);			// d(psi)/dt command		deg/s
 8002b40:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002b42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4c:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002c58 <StartRadioCommand+0x1c0>
 8002b50:	eddf 1a40 	vldr	s3, [pc, #256]	; 8002c54 <StartRadioCommand+0x1bc>
 8002b54:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002c4c <StartRadioCommand+0x1b4>
 8002b58:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002c50 <StartRadioCommand+0x1b8>
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	f7fe fc52 	bl	8001408 <map>
 8002b64:	eef0 7a40 	vmov.f32	s15, s0
 8002b68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		rc_cmd.pi = map(rc.channel[AILERON].pos, RC_MIN, RC_MAX, 70, -70);			// d(pi)/dt command			deg/s
 8002b6c:	4b34      	ldr	r3, [pc, #208]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b78:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8002c5c <StartRadioCommand+0x1c4>
 8002b7c:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002c60 <StartRadioCommand+0x1c8>
 8002b80:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002c4c <StartRadioCommand+0x1b4>
 8002b84:	eddf 0a32 	vldr	s1, [pc, #200]	; 8002c50 <StartRadioCommand+0x1b8>
 8002b88:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8c:	f7fe fc3c 	bl	8001408 <map>
 8002b90:	eef0 7a40 	vmov.f32	s15, s0
 8002b94:	edc7 7a04 	vstr	s15, [r7, #16]
		rc_cmd.theta = map(rc.channel[ELEVATOR].pos, RC_MIN, RC_MAX, -70, 70);		// d(theta)/dt command		deg/s
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba4:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8002c60 <StartRadioCommand+0x1c8>
 8002ba8:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8002c5c <StartRadioCommand+0x1c4>
 8002bac:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002c4c <StartRadioCommand+0x1b4>
 8002bb0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002c50 <StartRadioCommand+0x1b8>
 8002bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb8:	f7fe fc26 	bl	8001408 <map>
 8002bbc:	eef0 7a40 	vmov.f32	s15, s0
 8002bc0:	edc7 7a05 	vstr	s15, [r7, #20]

		if(SWITCH_POS(rc.channel[AUX1].pos) > 0) rc_cmd.arm = 1;
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002bc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bcc:	d303      	bcc.n	8002bd6 <StartRadioCommand+0x13e>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002bd4:	e002      	b.n	8002bdc <StartRadioCommand+0x144>
		else rc_cmd.arm = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		rc_cmd.mode = SWITCH_POS(rc.channel[AUX2].pos);
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002bde:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be4:	d309      	bcc.n	8002bfa <StartRadioCommand+0x162>
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002be8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002bea:	f240 52db 	movw	r2, #1499	; 0x5db
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d801      	bhi.n	8002bf6 <StartRadioCommand+0x15e>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e002      	b.n	8002bfc <StartRadioCommand+0x164>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e000      	b.n	8002bfc <StartRadioCommand+0x164>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		if(SWITCH_POS(rc.channel[AUX3].pos) > 0 && imu_key == 1) {
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002c02:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c08:	d307      	bcc.n	8002c1a <StartRadioCommand+0x182>
 8002c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d104      	bne.n	8002c1a <StartRadioCommand+0x182>
			setIMUoffset();
 8002c10:	f7fe fc8c 	bl	800152c <setIMUoffset>
			imu_key = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c18:	e006      	b.n	8002c28 <StartRadioCommand+0x190>
		}else if(SWITCH_POS(rc.channel[AUX3].pos) == 0){
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <StartRadioCommand+0x1a8>)
 8002c1c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c22:	d201      	bcs.n	8002c28 <StartRadioCommand+0x190>
			imu_key = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		osMessageQueuePut(RCdataHandle, &rc_cmd, 0, 0);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <StartRadioCommand+0x1cc>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	f107 010c 	add.w	r1, r7, #12
 8002c30:	2300      	movs	r3, #0
 8002c32:	2200      	movs	r2, #0
 8002c34:	f006 fdac 	bl	8009790 <osMessageQueuePut>
	}
    osDelay(1);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f006 fd1b 	bl	8009674 <osDelay>
	if(rc.channel[THROTTLE].pos != 0){
 8002c3e:	e738      	b.n	8002ab2 <StartRadioCommand+0x1a>
 8002c40:	20002a6c 	.word	0x20002a6c
 8002c44:	44e74000 	.word	0x44e74000
 8002c48:	447a0000 	.word	0x447a0000
 8002c4c:	44d54000 	.word	0x44d54000
 8002c50:	43ab0000 	.word	0x43ab0000
 8002c54:	c2c80000 	.word	0xc2c80000
 8002c58:	42c80000 	.word	0x42c80000
 8002c5c:	c28c0000 	.word	0xc28c0000
 8002c60:	428c0000 	.word	0x428c0000
 8002c64:	200045b8 	.word	0x200045b8

08002c68 <StartReadIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadIMU */
void StartReadIMU(void *argument)
{
 8002c68:	b5b0      	push	{r4, r5, r7, lr}
 8002c6a:	b08e      	sub	sp, #56	; 0x38
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartReadIMU */

  IMU imu  = { 0, };
 8002c70:	f107 0320 	add.w	r3, r7, #32
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
 8002c80:	615a      	str	r2, [r3, #20]

  wt931_Init(&hi2c1);
 8002c82:	480e      	ldr	r0, [pc, #56]	; (8002cbc <StartReadIMU+0x54>)
 8002c84:	f7fe fc3e 	bl	8001504 <wt931_Init>

  /* Infinite loop */
  for(;;)
  {
	imu = readIMU();
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fc6e 	bl	800156c <readIMU>
 8002c90:	f107 0420 	add.w	r4, r7, #32
 8002c94:	463d      	mov	r5, r7
 8002c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c9e:	e884 0003 	stmia.w	r4, {r0, r1}
	osMessageQueuePut(IMUdataHandle, &imu, 0, 0);
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <StartReadIMU+0x58>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	f107 0120 	add.w	r1, r7, #32
 8002caa:	2300      	movs	r3, #0
 8002cac:	2200      	movs	r2, #0
 8002cae:	f006 fd6f 	bl	8009790 <osMessageQueuePut>

    osDelay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f006 fcde 	bl	8009674 <osDelay>
	imu = readIMU();
 8002cb8:	e7e6      	b.n	8002c88 <StartReadIMU+0x20>
 8002cba:	bf00      	nop
 8002cbc:	20003a2c 	.word	0x20003a2c
 8002cc0:	200045b4 	.word	0x200045b4

08002cc4 <StartReadMAG>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadMAG */
void StartReadMAG(void *argument)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	; 0x30
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadMAG */

  MOTOR mag = {0, };
 8002ccc:	f107 0308 	add.w	r3, r7, #8
 8002cd0:	2228      	movs	r2, #40	; 0x28
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f009 fc93 	bl	800c600 <memset>

  as5147_Init(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 8002cda:	2210      	movs	r2, #16
 8002cdc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8002ce0:	4817      	ldr	r0, [pc, #92]	; (8002d40 <StartReadMAG+0x7c>)
 8002ce2:	f7fe fd8f 	bl	8001804 <as5147_Init>
  as5147_setZeroPosition();
 8002ce6:	f7fe fdb3 	bl	8001850 <as5147_setZeroPosition>
  setOffset(&mag);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f81e 	bl	8001d30 <setOffset>

  sens_time = 0;
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <StartReadMAG+0x80>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
  sens_start = 0;
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <StartReadMAG+0x84>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
  osDelay(1);
 8002d00:	2001      	movs	r0, #1
 8002d02:	f006 fcb7 	bl	8009674 <osDelay>

  /* Infinite loop */
  for(;;)
  {
	sens_time = gTick - sens_start;
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <StartReadMAG+0x88>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <StartReadMAG+0x84>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a0c      	ldr	r2, [pc, #48]	; (8002d44 <StartReadMAG+0x80>)
 8002d12:	6013      	str	r3, [r2, #0]
	updatePosition(&mag);
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fef5 	bl	8001b08 <updatePosition>
	sens_start = gTick;
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <StartReadMAG+0x88>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <StartReadMAG+0x84>)
 8002d24:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(MAGdataHandle, &mag, 0, 0);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <StartReadMAG+0x8c>)
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f107 0108 	add.w	r1, r7, #8
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2200      	movs	r2, #0
 8002d32:	f006 fd2d 	bl	8009790 <osMessageQueuePut>

    osDelay(1);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f006 fc9c 	bl	8009674 <osDelay>
	sens_time = gTick - sens_start;
 8002d3c:	e7e3      	b.n	8002d06 <StartReadMAG+0x42>
 8002d3e:	bf00      	nop
 8002d40:	20004614 	.word	0x20004614
 8002d44:	200027e4 	.word	0x200027e4
 8002d48:	200027e8 	.word	0x200027e8
 8002d4c:	20000200 	.word	0x20000200
 8002d50:	200045bc 	.word	0x200045bc
 8002d54:	00000000 	.word	0x00000000

08002d58 <StartAttitudeControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAttitudeControl */
void StartAttitudeControl(void *argument)
{
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	ed2d 8b02 	vpush	{d8}
 8002d5e:	b0a6      	sub	sp, #152	; 0x98
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAttitudeControl */
  RC rc_cmd = {0, };
 8002d64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d68:	2250      	movs	r2, #80	; 0x50
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f009 fc47 	bl	800c600 <memset>
  IMU imu = {0, };
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	611a      	str	r2, [r3, #16]
 8002d82:	615a      	str	r2, [r3, #20]
  RPYT_CMD rpy_cmd = {0, };
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]

  while(rc_cmd.arm){}
 8002d94:	bf00      	nop
 8002d96:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1fb      	bne.n	8002d96 <StartAttitudeControl+0x3e>

  int roll_deg = regPID(PID, 9, 2, 1.7);
 8002d9e:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8003080 <StartAttitudeControl+0x328>
 8002da2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002da6:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8002daa:	2004      	movs	r0, #4
 8002dac:	f7fe f9d0 	bl	8001150 <regPID>
 8002db0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  int pitch_deg = regPID(PID, 10, 2, 2.3);
 8002db4:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 8003084 <StartAttitudeControl+0x32c>
 8002db8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002dbc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	f7fe f9c5 	bl	8001150 <regPID>
 8002dc6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  int dyaw = regPID(PI, -0.6, -1.8, 0);
 8002dca:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8003088 <StartAttitudeControl+0x330>
 8002dce:	eddf 0aaf 	vldr	s1, [pc, #700]	; 800308c <StartAttitudeControl+0x334>
 8002dd2:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8003090 <StartAttitudeControl+0x338>
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f7fe f9ba 	bl	8001150 <regPID>
 8002ddc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

  int droll = regPID(P, 0.5, 0, 0);
 8002de0:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8003088 <StartAttitudeControl+0x330>
 8002de4:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8003088 <StartAttitudeControl+0x330>
 8002de8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe f9af 	bl	8001150 <regPID>
 8002df2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  int dpitch = regPID(P, 0.5, 0, 0);
 8002df6:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8003088 <StartAttitudeControl+0x330>
 8002dfa:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8003088 <StartAttitudeControl+0x330>
 8002dfe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fe f9a4 	bl	8001150 <regPID>
 8002e08:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(RCdataHandle, &rc_cmd, 0, 0);
 8002e0c:	4ba1      	ldr	r3, [pc, #644]	; (8003094 <StartAttitudeControl+0x33c>)
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002e14:	2300      	movs	r3, #0
 8002e16:	2200      	movs	r2, #0
 8002e18:	f006 fd1a 	bl	8009850 <osMessageQueueGet>
	osMessageQueueGet(IMUdataHandle, &imu, 0, 0);
 8002e1c:	4b9e      	ldr	r3, [pc, #632]	; (8003098 <StartAttitudeControl+0x340>)
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	f107 011c 	add.w	r1, r7, #28
 8002e24:	2300      	movs	r3, #0
 8002e26:	2200      	movs	r2, #0
 8002e28:	f006 fd12 	bl	8009850 <osMessageQueueGet>

	if(rc_cmd.arm){
 8002e2c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 80f2 	beq.w	800301a <StartAttitudeControl+0x2c2>
		switch(rc_cmd.mode){
 8002e36:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d075      	beq.n	8002f2a <StartAttitudeControl+0x1d2>
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	f300 810c 	bgt.w	800305c <StartAttitudeControl+0x304>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <StartAttitudeControl+0xf6>
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d037      	beq.n	8002ebc <StartAttitudeControl+0x164>
 8002e4c:	e106      	b.n	800305c <StartAttitudeControl+0x304>
		case 0: //rare
			rpy_cmd.roll_cmd = rc_cmd.d_pi;
 8002e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e50:	60bb      	str	r3, [r7, #8]
			rpy_cmd.pitch_cmd = rc_cmd.d_theta;
 8002e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e54:	60fb      	str	r3, [r7, #12]
			rpy_cmd.limit_cmd = 100;
 8002e56:	4b91      	ldr	r3, [pc, #580]	; (800309c <StartAttitudeControl+0x344>)
 8002e58:	61bb      	str	r3, [r7, #24]

			rpy_cmd.yaw_cmd = PWM_MIN + (rc_cmd.thro-PWM_MIN)*0.6 + rc_cmd.d_psi;
 8002e5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e5e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80030a0 <StartAttitudeControl+0x348>
 8002e62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e66:	ee17 0a90 	vmov	r0, s15
 8002e6a:	f7fd fb95 	bl	8000598 <__aeabi_f2d>
 8002e6e:	a382      	add	r3, pc, #520	; (adr r3, 8003078 <StartAttitudeControl+0x320>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbe8 	bl	8000648 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	4b87      	ldr	r3, [pc, #540]	; (80030a4 <StartAttitudeControl+0x34c>)
 8002e86:	f7fd fa29 	bl	80002dc <__adddf3>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb7f 	bl	8000598 <__aeabi_f2d>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7fd fa1b 	bl	80002dc <__adddf3>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7fd fea3 	bl	8000bf8 <__aeabi_d2f>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	613b      	str	r3, [r7, #16]
			rpy_cmd.throttle_cmd = rc_cmd.thro;
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	617b      	str	r3, [r7, #20]
			break;
 8002eba:	e0cf      	b.n	800305c <StartAttitudeControl+0x304>
		case 1: // manual
			rpy_cmd.roll_cmd = rc_cmd.d_pi;
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	60bb      	str	r3, [r7, #8]
			rpy_cmd.pitch_cmd = rc_cmd.d_theta;
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	60fb      	str	r3, [r7, #12]
			rpy_cmd.limit_cmd = 100;
 8002ec4:	4b75      	ldr	r3, [pc, #468]	; (800309c <StartAttitudeControl+0x344>)
 8002ec6:	61bb      	str	r3, [r7, #24]

			rpy_cmd.yaw_cmd = PWM_MIN + (rc_cmd.thro-PWM_MIN)*0.6 + rc_cmd.d_psi;
 8002ec8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ecc:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80030a0 <StartAttitudeControl+0x348>
 8002ed0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f7fd fb5e 	bl	8000598 <__aeabi_f2d>
 8002edc:	a366      	add	r3, pc, #408	; (adr r3, 8003078 <StartAttitudeControl+0x320>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd fbb1 	bl	8000648 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	; (80030a4 <StartAttitudeControl+0x34c>)
 8002ef4:	f7fd f9f2 	bl	80002dc <__adddf3>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	461d      	mov	r5, r3
 8002f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb48 	bl	8000598 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd f9e4 	bl	80002dc <__adddf3>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fd fe6c 	bl	8000bf8 <__aeabi_d2f>
 8002f20:	4603      	mov	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]
			rpy_cmd.throttle_cmd = rc_cmd.thro;
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	617b      	str	r3, [r7, #20]
			break;
 8002f28:	e098      	b.n	800305c <StartAttitudeControl+0x304>
		case 2: // stabilize
			rpy_cmd.roll_cmd = PIDoutput(droll, imu.P, PIDoutput(roll_deg, imu.pi, rc_cmd.pi));
 8002f2a:	ed97 8a0a 	vldr	s16, [r7, #40]	; 0x28
 8002f2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f32:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002f36:	eef0 0a47 	vmov.f32	s1, s14
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002f42:	f7fe f961 	bl	8001208 <PIDoutput>
 8002f46:	eef0 7a40 	vmov.f32	s15, s0
 8002f4a:	eef0 0a67 	vmov.f32	s1, s15
 8002f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8002f52:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002f56:	f7fe f957 	bl	8001208 <PIDoutput>
 8002f5a:	eef0 7a40 	vmov.f32	s15, s0
 8002f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			rpy_cmd.pitch_cmd = PIDoutput(dpitch, imu.Q, PIDoutput(pitch_deg, imu.theta, rc_cmd.theta));
 8002f62:	ed97 8a0b 	vldr	s16, [r7, #44]	; 0x2c
 8002f66:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f6a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002f6e:	eef0 0a47 	vmov.f32	s1, s14
 8002f72:	eeb0 0a67 	vmov.f32	s0, s15
 8002f76:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002f7a:	f7fe f945 	bl	8001208 <PIDoutput>
 8002f7e:	eef0 7a40 	vmov.f32	s15, s0
 8002f82:	eef0 0a67 	vmov.f32	s1, s15
 8002f86:	eeb0 0a48 	vmov.f32	s0, s16
 8002f8a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002f8e:	f7fe f93b 	bl	8001208 <PIDoutput>
 8002f92:	eef0 7a40 	vmov.f32	s15, s0
 8002f96:	edc7 7a03 	vstr	s15, [r7, #12]
			rpy_cmd.limit_cmd = 100;
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <StartAttitudeControl+0x344>)
 8002f9c:	61bb      	str	r3, [r7, #24]

			rpy_cmd.yaw_cmd = PWM_MIN + (rc_cmd.thro-PWM_MIN)*0.6 + PIDoutput(dyaw, imu.R, rc_cmd.d_psi);
 8002f9e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002fa2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80030a0 <StartAttitudeControl+0x348>
 8002fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002faa:	ee17 0a90 	vmov	r0, s15
 8002fae:	f7fd faf3 	bl	8000598 <__aeabi_f2d>
 8002fb2:	a331      	add	r3, pc, #196	; (adr r3, 8003078 <StartAttitudeControl+0x320>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f7fd fb46 	bl	8000648 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	4b36      	ldr	r3, [pc, #216]	; (80030a4 <StartAttitudeControl+0x34c>)
 8002fca:	f7fd f987 	bl	80002dc <__adddf3>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	461d      	mov	r5, r3
 8002fd6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002fda:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002fde:	eef0 0a47 	vmov.f32	s1, s14
 8002fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002fea:	f7fe f90d 	bl	8001208 <PIDoutput>
 8002fee:	ee10 3a10 	vmov	r3, s0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fad0 	bl	8000598 <__aeabi_f2d>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	4629      	mov	r1, r5
 8003000:	f7fd f96c 	bl	80002dc <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fdf4 	bl	8000bf8 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	613b      	str	r3, [r7, #16]
			rpy_cmd.throttle_cmd = rc_cmd.thro;
 8003014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003016:	617b      	str	r3, [r7, #20]
			break;
 8003018:	e020      	b.n	800305c <StartAttitudeControl+0x304>
		}
	}else{
		rpy_cmd.roll_cmd = 0;
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
		rpy_cmd.pitch_cmd = 0;
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
		rpy_cmd.limit_cmd = 0;
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]

		rpy_cmd.yaw_cmd = PWM_MIN;
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <StartAttitudeControl+0x350>)
 800302e:	613b      	str	r3, [r7, #16]
		rpy_cmd.throttle_cmd = PWM_MIN;
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <StartAttitudeControl+0x350>)
 8003032:	617b      	str	r3, [r7, #20]

		resetState(roll_deg);
 8003034:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003038:	f7fe f9ba 	bl	80013b0 <resetState>
		resetState(pitch_deg);
 800303c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003040:	f7fe f9b6 	bl	80013b0 <resetState>
		resetState(dyaw);
 8003044:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003048:	f7fe f9b2 	bl	80013b0 <resetState>
		resetState(droll);
 800304c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003050:	f7fe f9ae 	bl	80013b0 <resetState>
		resetState(dpitch);
 8003054:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8003058:	f7fe f9aa 	bl	80013b0 <resetState>
	}

	osMessageQueuePut(CMDdataHandle, &rpy_cmd, 0, 0);
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <StartAttitudeControl+0x354>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	f107 0108 	add.w	r1, r7, #8
 8003064:	2300      	movs	r3, #0
 8003066:	2200      	movs	r2, #0
 8003068:	f006 fb92 	bl	8009790 <osMessageQueuePut>
    osDelay(1);
 800306c:	2001      	movs	r0, #1
 800306e:	f006 fb01 	bl	8009674 <osDelay>
	osMessageQueueGet(RCdataHandle, &rc_cmd, 0, 0);
 8003072:	e6cb      	b.n	8002e0c <StartAttitudeControl+0xb4>
 8003074:	f3af 8000 	nop.w
 8003078:	33333333 	.word	0x33333333
 800307c:	3fe33333 	.word	0x3fe33333
 8003080:	3fd9999a 	.word	0x3fd9999a
 8003084:	40133333 	.word	0x40133333
 8003088:	00000000 	.word	0x00000000
 800308c:	bfe66666 	.word	0xbfe66666
 8003090:	bf19999a 	.word	0xbf19999a
 8003094:	200045b8 	.word	0x200045b8
 8003098:	200045b4 	.word	0x200045b4
 800309c:	42c80000 	.word	0x42c80000
 80030a0:	447a0000 	.word	0x447a0000
 80030a4:	408f4000 	.word	0x408f4000
 80030a8:	447a0000 	.word	0x447a0000
 80030ac:	20004cb8 	.word	0x20004cb8

080030b0 <StartCyclicPitchControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCyclicPitchControl */
void StartCyclicPitchControl(void *argument)
{
 80030b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030b4:	b0a0      	sub	sp, #128	; 0x80
 80030b6:	af0c      	add	r7, sp, #48	; 0x30
 80030b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCyclicPitchControl */

  RPYT_CMD rpyt_cmd = {0, };
 80030ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]
  PWM_CMD pwm_cmd = {0, };
 80030ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
  MOTOR mag = {0, };
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2228      	movs	r2, #40	; 0x28
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f009 fa8f 	bl	800c600 <memset>

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(CMDdataHandle, &rpyt_cmd, 0, 0);
 80030e2:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <StartCyclicPitchControl+0x108>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80030ea:	2300      	movs	r3, #0
 80030ec:	2200      	movs	r2, #0
 80030ee:	f006 fbaf 	bl	8009850 <osMessageQueueGet>
	osMessageQueueGet(MAGdataHandle, &mag, 0, 0);
 80030f2:	4b32      	ldr	r3, [pc, #200]	; (80031bc <StartCyclicPitchControl+0x10c>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f107 010c 	add.w	r1, r7, #12
 80030fa:	2300      	movs	r3, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	f006 fba7 	bl	8009850 <osMessageQueueGet>

	pwm_cmd.main_rotor = rpyt_cmd.throttle_cmd + (getOffset(rpyt_cmd, mag)*((rpyt_cmd.throttle_cmd-PWM_MIN)*0.003));
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fa47 	bl	8000598 <__aeabi_f2d>
 800310a:	4680      	mov	r8, r0
 800310c:	4689      	mov	r9, r1
 800310e:	ad01      	add	r5, sp, #4
 8003110:	f107 040c 	add.w	r4, r7, #12
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800311c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003120:	e885 0003 	stmia.w	r5, {r0, r1}
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800312c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800312e:	f7fd ff2f 	bl	8000f90 <getOffset>
 8003132:	ee10 3a10 	vmov	r3, s0
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fa2e 	bl	8000598 <__aeabi_f2d>
 800313c:	4604      	mov	r4, r0
 800313e:	460d      	mov	r5, r1
 8003140:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003144:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80031c0 <StartCyclicPitchControl+0x110>
 8003148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800314c:	ee17 0a90 	vmov	r0, s15
 8003150:	f7fd fa22 	bl	8000598 <__aeabi_f2d>
 8003154:	a316      	add	r3, pc, #88	; (adr r3, 80031b0 <StartCyclicPitchControl+0x100>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f7fd fa75 	bl	8000648 <__aeabi_dmul>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f7fd fa6f 	bl	8000648 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4640      	mov	r0, r8
 8003170:	4649      	mov	r1, r9
 8003172:	f7fd f8b3 	bl	80002dc <__adddf3>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fd13 	bl	8000ba8 <__aeabi_d2iz>
 8003182:	4603      	mov	r3, r0
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
	pwm_cmd.tail_rotor = rpyt_cmd.yaw_cmd;
 8003186:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800318a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800318e:	ee17 3a90 	vmov	r3, s15
 8003192:	63bb      	str	r3, [r7, #56]	; 0x38

	osMessageQueuePut(PWMdataHandle, &pwm_cmd, 0, 0);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <StartCyclicPitchControl+0x114>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800319c:	2300      	movs	r3, #0
 800319e:	2200      	movs	r2, #0
 80031a0:	f006 faf6 	bl	8009790 <osMessageQueuePut>

    osDelay(1);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f006 fa65 	bl	8009674 <osDelay>
	osMessageQueueGet(CMDdataHandle, &rpyt_cmd, 0, 0);
 80031aa:	e79a      	b.n	80030e2 <StartCyclicPitchControl+0x32>
 80031ac:	f3af 8000 	nop.w
 80031b0:	bc6a7efa 	.word	0xbc6a7efa
 80031b4:	3f689374 	.word	0x3f689374
 80031b8:	20004cb8 	.word	0x20004cb8
 80031bc:	200045bc 	.word	0x200045bc
 80031c0:	447a0000 	.word	0x447a0000
 80031c4:	20004bf0 	.word	0x20004bf0

080031c8 <StartMotorOutput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorOutput */
void StartMotorOutput(void *argument)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorOutput */
  PWM_CMD pwm_cmd = {0, };
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]

  htim1.Instance->CCR1 = PWM_MIN;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <StartMotorOutput+0x60>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = PWM_MIN;
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <StartMotorOutput+0x60>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80031ee:	2100      	movs	r1, #0
 80031f0:	480d      	ldr	r0, [pc, #52]	; (8003228 <StartMotorOutput+0x60>)
 80031f2:	f003 fe5f 	bl	8006eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80031f6:	2104      	movs	r1, #4
 80031f8:	480b      	ldr	r0, [pc, #44]	; (8003228 <StartMotorOutput+0x60>)
 80031fa:	f003 fe5b 	bl	8006eb4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
  {
	osMessageQueueGet(PWMdataHandle, &pwm_cmd, 0, 0);
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <StartMotorOutput+0x64>)
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	f107 0108 	add.w	r1, r7, #8
 8003206:	2300      	movs	r3, #0
 8003208:	2200      	movs	r2, #0
 800320a:	f006 fb21 	bl	8009850 <osMessageQueueGet>

    htim1.Instance->CCR1 = pwm_cmd.main_rotor;
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <StartMotorOutput+0x60>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
    htim1.Instance->CCR2 = pwm_cmd.tail_rotor;
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <StartMotorOutput+0x60>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38

    osDelay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f006 fa28 	bl	8009674 <osDelay>
	osMessageQueueGet(PWMdataHandle, &pwm_cmd, 0, 0);
 8003224:	e7eb      	b.n	80031fe <StartMotorOutput+0x36>
 8003226:	bf00      	nop
 8003228:	20004568 	.word	0x20004568
 800322c:	20004bf0 	.word	0x20004bf0

08003230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d101      	bne.n	8003246 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003242:	f000 fc31 	bl	8003aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a06      	ldr	r2, [pc, #24]	; (8003264 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d104      	bne.n	800325a <HAL_TIM_PeriodElapsedCallback+0x2a>
    gTick++;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003258:	6013      	str	r3, [r2, #0]
    sprintf(buffer,"%f\r\n", mag.lpf);
	HAL_UART_Transmit(&huart2, buffer, 50, HAL_TIMEOUT);
#endif
  }
  /* USER CODE END Callback 1 */
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40000400 	.word	0x40000400
 8003268:	20000200 	.word	0x20000200

0800326c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003270:	b672      	cpsid	i
}
 8003272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003274:	e7fe      	b.n	8003274 <Error_Handler+0x8>
	...

08003278 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_MspInit+0x50>)
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <HAL_MspInit+0x50>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6613      	str	r3, [r2, #96]	; 0x60
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <HAL_MspInit+0x50>)
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_MspInit+0x50>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <HAL_MspInit+0x50>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6593      	str	r3, [r2, #88]	; 0x58
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_MspInit+0x50>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	210f      	movs	r1, #15
 80032b2:	f06f 0001 	mvn.w	r0, #1
 80032b6:	f000 fcef 	bl	8003c98 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80032ba:	f001 fe59 	bl	8004f70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b09c      	sub	sp, #112	; 0x70
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	2244      	movs	r2, #68	; 0x44
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f009 f987 	bl	800c600 <memset>
  if(hi2c->Instance==I2C1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_I2C_MspInit+0xe0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d153      	bne.n	80033a4 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032fc:	2340      	movs	r3, #64	; 0x40
 80032fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003300:	2300      	movs	r3, #0
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fba7 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003314:	f7ff ffaa 	bl	800326c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 800331a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331c:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 8003326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 8003332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003334:	4a1e      	ldr	r2, [pc, #120]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800334c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334e:	2312      	movs	r3, #18
 8003350:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	2300      	movs	r3, #0
 8003358:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800335a:	2304      	movs	r3, #4
 800335c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003368:	f000 ff30 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003370:	2312      	movs	r3, #18
 8003372:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800337c:	2304      	movs	r3, #4
 800337e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003384:	4619      	mov	r1, r3
 8003386:	480b      	ldr	r0, [pc, #44]	; (80033b4 <HAL_I2C_MspInit+0xe8>)
 8003388:	f000 ff20 	bl	80041cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	4a07      	ldr	r2, [pc, #28]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 8003392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003396:	6593      	str	r3, [r2, #88]	; 0x58
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_I2C_MspInit+0xe4>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3770      	adds	r7, #112	; 0x70
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40021000 	.word	0x40021000
 80033b4:	48000400 	.word	0x48000400

080033b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_SPI_MspInit+0x7c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d128      	bne.n	800342c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <HAL_SPI_MspInit+0x80>)
 80033dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033de:	4a16      	ldr	r2, [pc, #88]	; (8003438 <HAL_SPI_MspInit+0x80>)
 80033e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033e4:	6613      	str	r3, [r2, #96]	; 0x60
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <HAL_SPI_MspInit+0x80>)
 80033e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_SPI_MspInit+0x80>)
 80033f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <HAL_SPI_MspInit+0x80>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <HAL_SPI_MspInit+0x80>)
 8003400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800340a:	23e0      	movs	r3, #224	; 0xe0
 800340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800341a:	2305      	movs	r3, #5
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4619      	mov	r1, r3
 8003424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003428:	f000 fed0 	bl	80041cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800342c:	bf00      	nop
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40013000 	.word	0x40013000
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <HAL_TIM_Base_MspInit+0x9c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10c      	bne.n	8003468 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800344e:	4b23      	ldr	r3, [pc, #140]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	4a22      	ldr	r2, [pc, #136]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 8003454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003458:	6613      	str	r3, [r2, #96]	; 0x60
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 800345c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003466:	e032      	b.n	80034ce <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIM_Base_MspInit+0xa4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d114      	bne.n	800349c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003476:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6593      	str	r3, [r2, #88]	; 0x58
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2105      	movs	r1, #5
 800348e:	201d      	movs	r0, #29
 8003490:	f000 fc02 	bl	8003c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003494:	201d      	movs	r0, #29
 8003496:	f000 fc19 	bl	8003ccc <HAL_NVIC_EnableIRQ>
}
 800349a:	e018      	b.n	80034ce <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a10      	ldr	r2, [pc, #64]	; (80034e4 <HAL_TIM_Base_MspInit+0xa8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d113      	bne.n	80034ce <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6593      	str	r3, [r2, #88]	; 0x58
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_TIM_Base_MspInit+0xa0>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2105      	movs	r1, #5
 80034c2:	201e      	movs	r0, #30
 80034c4:	f000 fbe8 	bl	8003c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034c8:	201e      	movs	r0, #30
 80034ca:	f000 fbff 	bl	8003ccc <HAL_NVIC_EnableIRQ>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800

080034e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a12      	ldr	r2, [pc, #72]	; (8003550 <HAL_TIM_MspPostInit+0x68>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11d      	bne.n	8003546 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_TIM_MspPostInit+0x6c>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	4a11      	ldr	r2, [pc, #68]	; (8003554 <HAL_TIM_MspPostInit+0x6c>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <HAL_TIM_MspPostInit+0x6c>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = main_Pin|tail_Pin;
 8003522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003528:	2302      	movs	r3, #2
 800352a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003534:	2306      	movs	r3, #6
 8003536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	4619      	mov	r1, r3
 800353e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003542:	f000 fe43 	bl	80041cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003546:	bf00      	nop
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40021000 	.word	0x40021000

08003558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b09e      	sub	sp, #120	; 0x78
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003560:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003570:	f107 0320 	add.w	r3, r7, #32
 8003574:	2244      	movs	r2, #68	; 0x44
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f009 f841 	bl	800c600 <memset>
  if(huart->Instance==USART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a60      	ldr	r2, [pc, #384]	; (8003704 <HAL_UART_MspInit+0x1ac>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d17d      	bne.n	8003684 <HAL_UART_MspInit+0x12c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003588:	2301      	movs	r3, #1
 800358a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003590:	f107 0320 	add.w	r3, r7, #32
 8003594:	4618      	mov	r0, r3
 8003596:	f002 fa61 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80035a0:	f7ff fe64 	bl	800326c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a4:	4b58      	ldr	r3, [pc, #352]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ae:	6613      	str	r3, [r2, #96]	; 0x60
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b8:	61fb      	str	r3, [r7, #28]
 80035ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	4b52      	ldr	r3, [pc, #328]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c0:	4a51      	ldr	r2, [pc, #324]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c8:	4b4f      	ldr	r3, [pc, #316]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d4:	4b4c      	ldr	r3, [pc, #304]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d8:	4a4b      	ldr	r2, [pc, #300]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035e0:	4b49      	ldr	r3, [pc, #292]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = Spektrum_Pin;
 80035ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035fe:	2307      	movs	r3, #7
 8003600:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(Spektrum_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003606:	4619      	mov	r1, r3
 8003608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800360c:	f000 fdde 	bl	80041cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NOT_USE_Pin;
 8003610:	2340      	movs	r3, #64	; 0x40
 8003612:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003614:	2302      	movs	r3, #2
 8003616:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	2300      	movs	r3, #0
 800361e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003620:	2307      	movs	r3, #7
 8003622:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(NOT_USE_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003628:	4619      	mov	r1, r3
 800362a:	4838      	ldr	r0, [pc, #224]	; (800370c <HAL_UART_MspInit+0x1b4>)
 800362c:	f000 fdce 	bl	80041cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003632:	4a38      	ldr	r2, [pc, #224]	; (8003714 <HAL_UART_MspInit+0x1bc>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003638:	2218      	movs	r2, #24
 800363a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363c:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	4b30      	ldr	r3, [pc, #192]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 800365c:	2220      	movs	r2, #32
 800365e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003666:	482a      	ldr	r0, [pc, #168]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 8003668:	f000 fb3e 	bl	8003ce8 <HAL_DMA_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_UART_MspInit+0x11e>
    {
      Error_Handler();
 8003672:	f7ff fdfb 	bl	800326c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c
 800367c:	4a24      	ldr	r2, [pc, #144]	; (8003710 <HAL_UART_MspInit+0x1b8>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003682:	e03b      	b.n	80036fc <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a23      	ldr	r2, [pc, #140]	; (8003718 <HAL_UART_MspInit+0x1c0>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d136      	bne.n	80036fc <HAL_UART_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800368e:	2302      	movs	r3, #2
 8003690:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003696:	f107 0320 	add.w	r3, r7, #32
 800369a:	4618      	mov	r0, r3
 800369c:	f002 f9de 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_UART_MspInit+0x152>
      Error_Handler();
 80036a6:	f7ff fde1 	bl	800326c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	4a16      	ldr	r2, [pc, #88]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b4:	6593      	str	r3, [r2, #88]	; 0x58
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c6:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <HAL_UART_MspInit+0x1b0>)
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TMTC_TX_Pin|TMTC_RX_Pin;
 80036da:	230c      	movs	r3, #12
 80036dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036ea:	2307      	movs	r3, #7
 80036ec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80036f2:	4619      	mov	r1, r3
 80036f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036f8:	f000 fd68 	bl	80041cc <HAL_GPIO_Init>
}
 80036fc:	bf00      	nop
 80036fe:	3778      	adds	r7, #120	; 0x78
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40013800 	.word	0x40013800
 8003708:	40021000 	.word	0x40021000
 800370c:	48000400 	.word	0x48000400
 8003710:	200041e8 	.word	0x200041e8
 8003714:	40020008 	.word	0x40020008
 8003718:	40004400 	.word	0x40004400

0800371c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_InitTick+0xcc>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <HAL_InitTick+0xcc>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_InitTick+0xcc>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800374a:	f107 020c 	add.w	r2, r7, #12
 800374e:	f107 0310 	add.w	r3, r7, #16
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f002 f909 	bl	800596c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800375a:	f002 f8db 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 800375e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_InitTick+0xd0>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	3b01      	subs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_InitTick+0xd4>)
 8003770:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003776:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <HAL_InitTick+0xd4>)
 8003778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800377c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_InitTick+0xd4>)
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <HAL_InitTick+0xd4>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_InitTick+0xd4>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8003790:	4817      	ldr	r0, [pc, #92]	; (80037f0 <HAL_InitTick+0xd4>)
 8003792:	f003 fa6b 	bl	8006c6c <HAL_TIM_Base_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800379c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11b      	bne.n	80037dc <HAL_InitTick+0xc0>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80037a4:	4812      	ldr	r0, [pc, #72]	; (80037f0 <HAL_InitTick+0xd4>)
 80037a6:	f003 fab9 	bl	8006d1c <HAL_TIM_Base_Start_IT>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_InitTick+0xc0>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037b8:	201c      	movs	r0, #28
 80037ba:	f000 fa87 	bl	8003ccc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d808      	bhi.n	80037d6 <HAL_InitTick+0xba>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80037c4:	2200      	movs	r2, #0
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	201c      	movs	r0, #28
 80037ca:	f000 fa65 	bl	8003c98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_InitTick+0xd8>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	e002      	b.n	80037dc <HAL_InitTick+0xc0>
      }
      else
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80037dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	431bde83 	.word	0x431bde83
 80037f0:	20004cbc 	.word	0x20004cbc
 80037f4:	20000004 	.word	0x20000004

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037fc:	e7fe      	b.n	80037fc <NMI_Handler+0x4>

080037fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003802:	e7fe      	b.n	8003802 <HardFault_Handler+0x4>

08003804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003808:	e7fe      	b.n	8003808 <MemManage_Handler+0x4>

0800380a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <BusFault_Handler+0x4>

08003810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <UsageFault_Handler+0x4>

08003816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003828:	4802      	ldr	r0, [pc, #8]	; (8003834 <DMA1_Channel1_IRQHandler+0x10>)
 800382a:	f000 fb80 	bl	8003f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200041e8 	.word	0x200041e8

08003838 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800383c:	4802      	ldr	r0, [pc, #8]	; (8003848 <TIM2_IRQHandler+0x10>)
 800383e:	f003 fc39 	bl	80070b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20004cbc 	.word	0x20004cbc

0800384c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <TIM3_IRQHandler+0x10>)
 8003852:	f003 fc2f 	bl	80070b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20003edc 	.word	0x20003edc

08003860 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <TIM4_IRQHandler+0x10>)
 8003866:	f003 fc25 	bl	80070b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20003790 	.word	0x20003790

08003874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
	return 1;
 8003878:	2301      	movs	r3, #1
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <_kill>:

int _kill(int pid, int sig)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800388e:	f008 fd7d 	bl	800c38c <__errno>
 8003892:	4603      	mov	r3, r0
 8003894:	2216      	movs	r2, #22
 8003896:	601a      	str	r2, [r3, #0]
	return -1;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_exit>:

void _exit (int status)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffe7 	bl	8003884 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038b6:	e7fe      	b.n	80038b6 <_exit+0x12>

080038b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e00a      	b.n	80038e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038ca:	f3af 8000 	nop.w
 80038ce:	4601      	mov	r1, r0
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	60ba      	str	r2, [r7, #8]
 80038d6:	b2ca      	uxtb	r2, r1
 80038d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	3301      	adds	r3, #1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dbf0      	blt.n	80038ca <_read+0x12>
	}

return len;
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e009      	b.n	8003918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	60ba      	str	r2, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	3301      	adds	r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	429a      	cmp	r2, r3
 800391e:	dbf1      	blt.n	8003904 <_write+0x12>
	}
	return len;
 8003920:	687b      	ldr	r3, [r7, #4]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_close>:

int _close(int file)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	return -1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003952:	605a      	str	r2, [r3, #4]
	return 0;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <_isatty>:

int _isatty(int file)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
	return 1;
 800396a:	2301      	movs	r3, #1
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
	return 0;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800399c:	4a14      	ldr	r2, [pc, #80]	; (80039f0 <_sbrk+0x5c>)
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <_sbrk+0x60>)
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <_sbrk+0x64>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <_sbrk+0x64>)
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <_sbrk+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <_sbrk+0x64>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d207      	bcs.n	80039d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039c4:	f008 fce2 	bl	800c38c <__errno>
 80039c8:	4603      	mov	r3, r0
 80039ca:	220c      	movs	r2, #12
 80039cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ce:	f04f 33ff 	mov.w	r3, #4294967295
 80039d2:	e009      	b.n	80039e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <_sbrk+0x64>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039da:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <_sbrk+0x64>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <_sbrk+0x64>)
 80039e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20008000 	.word	0x20008000
 80039f4:	00000400 	.word	0x00000400
 80039f8:	20000204 	.word	0x20000204
 80039fc:	20004d60 	.word	0x20004d60

08003a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <SystemInit+0x20>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <SystemInit+0x20>)
 8003a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00

08003a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a28:	480d      	ldr	r0, [pc, #52]	; (8003a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a2a:	490e      	ldr	r1, [pc, #56]	; (8003a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <LoopForever+0xe>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a30:	e002      	b.n	8003a38 <LoopCopyDataInit>

08003a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a36:	3304      	adds	r3, #4

08003a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a3c:	d3f9      	bcc.n	8003a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a40:	4c0b      	ldr	r4, [pc, #44]	; (8003a70 <LoopForever+0x16>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a44:	e001      	b.n	8003a4a <LoopFillZerobss>

08003a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a48:	3204      	adds	r2, #4

08003a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a4c:	d3fb      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a4e:	f7ff ffd7 	bl	8003a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a52:	f008 fd97 	bl	800c584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a56:	f7fe fb01 	bl	800205c <main>

08003a5a <LoopForever>:

LoopForever:
    b LoopForever
 8003a5a:	e7fe      	b.n	8003a5a <LoopForever>
  ldr   r0, =_estack
 8003a5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003a68:	08011b18 	.word	0x08011b18
  ldr r2, =_sbss
 8003a6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003a70:	20004d5c 	.word	0x20004d5c

08003a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <ADC1_2_IRQHandler>

08003a76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a80:	2003      	movs	r0, #3
 8003a82:	f000 f8fe 	bl	8003c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a86:	200f      	movs	r0, #15
 8003a88:	f7ff fe48 	bl	800371c <HAL_InitTick>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	71fb      	strb	r3, [r7, #7]
 8003a96:	e001      	b.n	8003a9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a98:	f7ff fbee 	bl	8003278 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a9c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_IncTick+0x1c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_IncTick+0x20>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_IncTick+0x1c>)
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	20004d08 	.word	0x20004d08
 8003ac8:	20000008 	.word	0x20000008

08003acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return uwTick;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_GetTick+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20004d08 	.word	0x20004d08

08003ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aec:	f7ff ffee 	bl	8003acc <HAL_GetTick>
 8003af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d004      	beq.n	8003b08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_Delay+0x40>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b08:	bf00      	nop
 8003b0a:	f7ff ffdf 	bl	8003acc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d8f7      	bhi.n	8003b0a <HAL_Delay+0x26>
  {
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000008 	.word	0x20000008

08003b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	60d3      	str	r3, [r2, #12]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <__NVIC_GetPriorityGrouping+0x18>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0307 	and.w	r3, r3, #7
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db0b      	blt.n	8003bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4907      	ldr	r1, [pc, #28]	; (8003bc4 <__NVIC_EnableIRQ+0x38>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2001      	movs	r0, #1
 8003bae:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db0a      	blt.n	8003bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	490c      	ldr	r1, [pc, #48]	; (8003c14 <__NVIC_SetPriority+0x4c>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf0:	e00a      	b.n	8003c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <__NVIC_SetPriority+0x50>)
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	440b      	add	r3, r1
 8003c06:	761a      	strb	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000e100 	.word	0xe000e100
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf28      	it	cs
 8003c3a:	2304      	movcs	r3, #4
 8003c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d902      	bls.n	8003c4c <NVIC_EncodePriority+0x30>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <NVIC_EncodePriority+0x32>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	401a      	ands	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	4313      	orrs	r3, r2
         );
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	; 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff4c 	bl	8003b28 <__NVIC_SetPriorityGrouping>
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca6:	f7ff ff63 	bl	8003b70 <__NVIC_GetPriorityGrouping>
 8003caa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff ffb3 	bl	8003c1c <NVIC_EncodePriority>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff82 	bl	8003bc8 <__NVIC_SetPriority>
}
 8003cc4:	bf00      	nop
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ff56 	bl	8003b8c <__NVIC_EnableIRQ>
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e08d      	b.n	8003e16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_DMA_Init+0x138>)
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d80f      	bhi.n	8003d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b45      	ldr	r3, [pc, #276]	; (8003e24 <HAL_DMA_Init+0x13c>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	4a45      	ldr	r2, [pc, #276]	; (8003e28 <HAL_DMA_Init+0x140>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	009a      	lsls	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a42      	ldr	r2, [pc, #264]	; (8003e2c <HAL_DMA_Init+0x144>)
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
 8003d24:	e00e      	b.n	8003d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <HAL_DMA_Init+0x148>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	4a3d      	ldr	r2, [pc, #244]	; (8003e28 <HAL_DMA_Init+0x140>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	009a      	lsls	r2, r3, #2
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <HAL_DMA_Init+0x14c>)
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9b6 	bl	8004108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da4:	d102      	bne.n	8003dac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d010      	beq.n	8003dec <HAL_DMA_Init+0x104>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d80c      	bhi.n	8003dec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9d6 	bl	8004184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	e008      	b.n	8003dfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40020407 	.word	0x40020407
 8003e24:	bffdfff8 	.word	0xbffdfff8
 8003e28:	cccccccd 	.word	0xcccccccd
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	bffdfbf8 	.word	0xbffdfbf8
 8003e34:	40020400 	.word	0x40020400

08003e38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_DMA_Start_IT+0x20>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e066      	b.n	8003f26 <HAL_DMA_Start_IT+0xee>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d155      	bne.n	8003f18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68b9      	ldr	r1, [r7, #8]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f8fb 	bl	800408c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 020e 	orr.w	r2, r2, #14
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e00f      	b.n	8003ed0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 020a 	orr.w	r2, r2, #10
 8003ece:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d007      	beq.n	8003eee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e005      	b.n	8003f24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2204      	movs	r2, #4
 8003f50:	409a      	lsls	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d026      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x7a>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d021      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d107      	bne.n	8003f82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0204 	bic.w	r2, r2, #4
 8003f80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 021f 	and.w	r2, r3, #31
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2104      	movs	r1, #4
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d071      	beq.n	8004082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003fa6:	e06c      	b.n	8004082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02e      	beq.n	800401a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d029      	beq.n	800401a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 020a 	bic.w	r2, r2, #10
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d038      	beq.n	8004082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004018:	e033      	b.n	8004082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2208      	movs	r2, #8
 8004024:	409a      	lsls	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d02a      	beq.n	8004084 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d025      	beq.n	8004084 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020e 	bic.w	r2, r2, #14
 8004046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f202 	lsl.w	r2, r1, r2
 800405a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	2b00      	cmp	r3, #0
 8004078:	d004      	beq.n	8004084 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004082:	bf00      	nop
 8004084:	bf00      	nop
}
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	f003 021f 	and.w	r2, r3, #31
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	d108      	bne.n	80040ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040ea:	e007      	b.n	80040fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	60da      	str	r2, [r3, #12]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004118:	429a      	cmp	r2, r3
 800411a:	d802      	bhi.n	8004122 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	e001      	b.n	8004126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004124:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3b08      	subs	r3, #8
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004152:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2201      	movs	r2, #1
 800415c:	409a      	lsls	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40020407 	.word	0x40020407
 8004174:	40020800 	.word	0x40020800
 8004178:	40020820 	.word	0x40020820
 800417c:	cccccccd 	.word	0xcccccccd
 8004180:	40020880 	.word	0x40020880

08004184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80041a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	1000823f 	.word	0x1000823f
 80041c8:	40020940 	.word	0x40020940

080041cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041da:	e15a      	b.n	8004492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2101      	movs	r1, #1
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 814c 	beq.w	800448c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d005      	beq.n	800420c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004208:	2b02      	cmp	r3, #2
 800420a:	d130      	bne.n	800426e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004242:	2201      	movs	r2, #1
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	4013      	ands	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	091b      	lsrs	r3, r3, #4
 8004258:	f003 0201 	and.w	r2, r3, #1
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b03      	cmp	r3, #3
 8004278:	d017      	beq.n	80042aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2203      	movs	r2, #3
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d123      	bne.n	80042fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	08da      	lsrs	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3208      	adds	r2, #8
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	220f      	movs	r2, #15
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4013      	ands	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	08da      	lsrs	r2, r3, #3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	6939      	ldr	r1, [r7, #16]
 80042fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80a6 	beq.w	800448c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004340:	4b5b      	ldr	r3, [pc, #364]	; (80044b0 <HAL_GPIO_Init+0x2e4>)
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	4a5a      	ldr	r2, [pc, #360]	; (80044b0 <HAL_GPIO_Init+0x2e4>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6613      	str	r3, [r2, #96]	; 0x60
 800434c:	4b58      	ldr	r3, [pc, #352]	; (80044b0 <HAL_GPIO_Init+0x2e4>)
 800434e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004358:	4a56      	ldr	r2, [pc, #344]	; (80044b4 <HAL_GPIO_Init+0x2e8>)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	3302      	adds	r3, #2
 8004360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	220f      	movs	r2, #15
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004382:	d01f      	beq.n	80043c4 <HAL_GPIO_Init+0x1f8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a4c      	ldr	r2, [pc, #304]	; (80044b8 <HAL_GPIO_Init+0x2ec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d019      	beq.n	80043c0 <HAL_GPIO_Init+0x1f4>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a4b      	ldr	r2, [pc, #300]	; (80044bc <HAL_GPIO_Init+0x2f0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <HAL_GPIO_Init+0x1f0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a4a      	ldr	r2, [pc, #296]	; (80044c0 <HAL_GPIO_Init+0x2f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00d      	beq.n	80043b8 <HAL_GPIO_Init+0x1ec>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a49      	ldr	r2, [pc, #292]	; (80044c4 <HAL_GPIO_Init+0x2f8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d007      	beq.n	80043b4 <HAL_GPIO_Init+0x1e8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a48      	ldr	r2, [pc, #288]	; (80044c8 <HAL_GPIO_Init+0x2fc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <HAL_GPIO_Init+0x1e4>
 80043ac:	2305      	movs	r3, #5
 80043ae:	e00a      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043b0:	2306      	movs	r3, #6
 80043b2:	e008      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043b4:	2304      	movs	r3, #4
 80043b6:	e006      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043b8:	2303      	movs	r3, #3
 80043ba:	e004      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043bc:	2302      	movs	r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_GPIO_Init+0x1fa>
 80043c4:	2300      	movs	r3, #0
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	f002 0203 	and.w	r2, r2, #3
 80043cc:	0092      	lsls	r2, r2, #2
 80043ce:	4093      	lsls	r3, r2
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d6:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_GPIO_Init+0x2e8>)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	089b      	lsrs	r3, r3, #2
 80043dc:	3302      	adds	r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <HAL_GPIO_Init+0x300>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4013      	ands	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_GPIO_Init+0x300>)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800440e:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	43db      	mvns	r3, r3
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_GPIO_Init+0x300>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	43db      	mvns	r3, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800445c:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <HAL_GPIO_Init+0x300>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	43db      	mvns	r3, r3
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4013      	ands	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <HAL_GPIO_Init+0x300>)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3301      	adds	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	f47f ae9d 	bne.w	80041dc <HAL_GPIO_Init+0x10>
  }
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40010000 	.word	0x40010000
 80044b8:	48000400 	.word	0x48000400
 80044bc:	48000800 	.word	0x48000800
 80044c0:	48000c00 	.word	0x48000c00
 80044c4:	48001000 	.word	0x48001000
 80044c8:	48001400 	.word	0x48001400
 80044cc:	40010400 	.word	0x40010400

080044d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
 80044dc:	4613      	mov	r3, r2
 80044de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e0:	787b      	ldrb	r3, [r7, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044ec:	e002      	b.n	80044f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044ee:	887a      	ldrh	r2, [r7, #2]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e081      	b.n	8004616 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe fed0 	bl	80032cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	e006      	b.n	8004588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d104      	bne.n	800459a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b20      	cmp	r3, #32
 8004644:	f040 80fd 	bne.w	8004842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_I2C_Mem_Read+0x34>
 800464e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0f1      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_I2C_Mem_Read+0x4e>
 800466a:	2302      	movs	r3, #2
 800466c:	e0ea      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004676:	f7ff fa29 	bl	8003acc <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2319      	movs	r3, #25
 8004682:	2201      	movs	r2, #1
 8004684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 f95b 	bl	8004944 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0d5      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2222      	movs	r2, #34	; 0x22
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a3a      	ldr	r2, [r7, #32]
 80046b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046c0:	88f8      	ldrh	r0, [r7, #6]
 80046c2:	893a      	ldrh	r2, [r7, #8]
 80046c4:	8979      	ldrh	r1, [r7, #10]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	4603      	mov	r3, r0
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8bf 	bl	8004854 <I2C_RequestMemoryRead>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0ad      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2bff      	cmp	r3, #255	; 0xff
 80046f0:	d90e      	bls.n	8004710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	8979      	ldrh	r1, [r7, #10]
 8004700:	4b52      	ldr	r3, [pc, #328]	; (800484c <HAL_I2C_Mem_Read+0x22c>)
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fac3 	bl	8004c94 <I2C_TransferConfig>
 800470e:	e00f      	b.n	8004730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	b2da      	uxtb	r2, r3
 8004720:	8979      	ldrh	r1, [r7, #10]
 8004722:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_I2C_Mem_Read+0x22c>)
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fab2 	bl	8004c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2200      	movs	r2, #0
 8004738:	2104      	movs	r1, #4
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f902 	bl	8004944 <I2C_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e07c      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d034      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x1d0>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d130      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 f8d3 	bl	8004944 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e04d      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d90e      	bls.n	80047d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fa63 	bl	8004c94 <I2C_TransferConfig>
 80047ce:	e00f      	b.n	80047f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	8979      	ldrh	r1, [r7, #10]
 80047e2:	2300      	movs	r3, #0
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa52 	bl	8004c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d19a      	bne.n	8004730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f920 	bl	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01a      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2220      	movs	r2, #32
 8004814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_I2C_Mem_Read+0x230>)
 8004822:	400b      	ands	r3, r1
 8004824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	80002400 	.word	0x80002400
 8004850:	fe00e800 	.word	0xfe00e800

08004854 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	461a      	mov	r2, r3
 8004862:	4603      	mov	r3, r0
 8004864:	817b      	strh	r3, [r7, #10]
 8004866:	460b      	mov	r3, r1
 8004868:	813b      	strh	r3, [r7, #8]
 800486a:	4613      	mov	r3, r2
 800486c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <I2C_RequestMemoryRead+0xa4>)
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2300      	movs	r3, #0
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 fa0a 	bl	8004c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004880:	69fa      	ldr	r2, [r7, #28]
 8004882:	69b9      	ldr	r1, [r7, #24]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f89d 	bl	80049c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e02c      	b.n	80048ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d105      	bne.n	80048a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800489a:	893b      	ldrh	r3, [r7, #8]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	629a      	str	r2, [r3, #40]	; 0x28
 80048a4:	e015      	b.n	80048d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048a6:	893b      	ldrh	r3, [r7, #8]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	69b9      	ldr	r1, [r7, #24]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f883 	bl	80049c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e012      	b.n	80048ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2200      	movs	r2, #0
 80048da:	2140      	movs	r1, #64	; 0x40
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f831 	bl	8004944 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	80002000 	.word	0x80002000

080048fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b02      	cmp	r3, #2
 8004910:	d103      	bne.n	800491a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d007      	beq.n	8004938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	619a      	str	r2, [r3, #24]
  }
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004954:	e022      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d01e      	beq.n	800499c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7ff f8b5 	bl	8003acc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d113      	bne.n	800499c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e00f      	b.n	80049bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699a      	ldr	r2, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d0cd      	beq.n	8004956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d0:	e02c      	b.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f870 	bl	8004abc <I2C_IsErrorOccurred>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e02a      	b.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d01e      	beq.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ee:	f7ff f86d 	bl	8003acc <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d302      	bcc.n	8004a04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d113      	bne.n	8004a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e007      	b.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d1cb      	bne.n	80049d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a50:	e028      	b.n	8004aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f830 	bl	8004abc <I2C_IsErrorOccurred>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e026      	b.n	8004ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7ff f831 	bl	8003acc <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d113      	bne.n	8004aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e007      	b.n	8004ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d1cf      	bne.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d075      	beq.n	8004bd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004af0:	e056      	b.n	8004ba0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d052      	beq.n	8004ba0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fe ffe7 	bl	8003acc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <I2C_IsErrorOccurred+0x54>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d147      	bne.n	8004ba0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	d12e      	bne.n	8004b92 <I2C_IsErrorOccurred+0xd6>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3a:	d02a      	beq.n	8004b92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004b3c:	7cfb      	ldrb	r3, [r7, #19]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d027      	beq.n	8004b92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b50:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b52:	f7fe ffbb 	bl	8003acc <HAL_GetTick>
 8004b56:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b58:	e01b      	b.n	8004b92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b5a:	f7fe ffb7 	bl	8003acc <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b19      	cmp	r3, #25
 8004b66:	d914      	bls.n	8004b92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d1dc      	bne.n	8004b5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d003      	beq.n	8004bb6 <I2C_IsErrorOccurred+0xfa>
 8004bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d09d      	beq.n	8004af2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f043 0304 	orr.w	r3, r3, #4
 8004bcc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f043 0308 	orr.w	r3, r3, #8
 8004c0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01c      	beq.n	8004c84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fe56 	bl	80048fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0d      	ldr	r3, [pc, #52]	; (8004c90 <I2C_IsErrorOccurred+0x1d4>)
 8004c5c:	400b      	ands	r3, r1
 8004c5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3728      	adds	r7, #40	; 0x28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	fe00e800 	.word	0xfe00e800

08004c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607b      	str	r3, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	817b      	strh	r3, [r7, #10]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cac:	7a7b      	ldrb	r3, [r7, #9]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cb4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	0d5b      	lsrs	r3, r3, #21
 8004cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <I2C_TransferConfig+0x60>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	ea02 0103 	and.w	r1, r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	03ff63ff 	.word	0x03ff63ff

08004cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d138      	bne.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e032      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0201 	bic.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d139      	bne.n	8004e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e033      	b.n	8004e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2224      	movs	r2, #36	; 0x24
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d141      	bne.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e36:	4b4b      	ldr	r3, [pc, #300]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e42:	d131      	bne.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e44:	4b47      	ldr	r3, [pc, #284]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4a:	4a46      	ldr	r2, [pc, #280]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e5c:	4a41      	ldr	r2, [pc, #260]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e64:	4b40      	ldr	r3, [pc, #256]	; (8004f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2232      	movs	r2, #50	; 0x32
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	; (8004f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	0c9b      	lsrs	r3, r3, #18
 8004e76:	3301      	adds	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e7a:	e002      	b.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8e:	d102      	bne.n	8004e96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f2      	bne.n	8004e7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e96:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea2:	d158      	bne.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e057      	b.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eae:	4a2d      	ldr	r2, [pc, #180]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004eb8:	e04d      	b.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d141      	bne.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ec2:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ece:	d131      	bne.n	8004f34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed6:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004edc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2232      	movs	r2, #50	; 0x32
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a1c      	ldr	r2, [pc, #112]	; (8004f6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	0c9b      	lsrs	r3, r3, #18
 8004f02:	3301      	adds	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f06:	e002      	b.n	8004f0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f1a:	d102      	bne.n	8004f22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f2      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f22:	4b10      	ldr	r3, [pc, #64]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d112      	bne.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e011      	b.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f44:	e007      	b.n	8004f56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f4e:	4a05      	ldr	r2, [pc, #20]	; (8004f64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40007000 	.word	0x40007000
 8004f68:	20000000 	.word	0x20000000
 8004f6c:	431bde83 	.word	0x431bde83

08004f70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a04      	ldr	r2, [pc, #16]	; (8004f8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f7e:	6093      	str	r3, [r2, #8]
}
 8004f80:	bf00      	nop
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40007000 	.word	0x40007000

08004f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e308      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d075      	beq.n	800509a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fae:	4ba3      	ldr	r3, [pc, #652]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb8:	4ba0      	ldr	r3, [pc, #640]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b0c      	cmp	r3, #12
 8004fc6:	d102      	bne.n	8004fce <HAL_RCC_OscConfig+0x3e>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d002      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x44>
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10b      	bne.n	8004fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd4:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d05b      	beq.n	8005098 <HAL_RCC_OscConfig+0x108>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d157      	bne.n	8005098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e2e3      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d106      	bne.n	8005004 <HAL_RCC_OscConfig+0x74>
 8004ff6:	4b91      	ldr	r3, [pc, #580]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a90      	ldr	r2, [pc, #576]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e01d      	b.n	8005040 <HAL_RCC_OscConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800500c:	d10c      	bne.n	8005028 <HAL_RCC_OscConfig+0x98>
 800500e:	4b8b      	ldr	r3, [pc, #556]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a8a      	ldr	r2, [pc, #552]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	4b88      	ldr	r3, [pc, #544]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a87      	ldr	r2, [pc, #540]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e00b      	b.n	8005040 <HAL_RCC_OscConfig+0xb0>
 8005028:	4b84      	ldr	r3, [pc, #528]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a83      	ldr	r2, [pc, #524]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a80      	ldr	r2, [pc, #512]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800503a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe fd40 	bl	8003acc <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005050:	f7fe fd3c 	bl	8003acc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e2a8      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005062:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCC_OscConfig+0xc0>
 800506e:	e014      	b.n	800509a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe fd2c 	bl	8003acc <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005078:	f7fe fd28 	bl	8003acc <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e294      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800508a:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0xe8>
 8005096:	e000      	b.n	800509a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d075      	beq.n	8005192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a6:	4b65      	ldr	r3, [pc, #404]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b0:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d102      	bne.n	80050c6 <HAL_RCC_OscConfig+0x136>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d002      	beq.n	80050cc <HAL_RCC_OscConfig+0x13c>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d11f      	bne.n	800510c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050cc:	4b5b      	ldr	r3, [pc, #364]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_OscConfig+0x154>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e267      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e4:	4b55      	ldr	r3, [pc, #340]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	4952      	ldr	r1, [pc, #328]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050f8:	4b51      	ldr	r3, [pc, #324]	; (8005240 <HAL_RCC_OscConfig+0x2b0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fe fb0d 	bl	800371c <HAL_InitTick>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d043      	beq.n	8005190 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e253      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005114:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a48      	ldr	r2, [pc, #288]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005120:	f7fe fcd4 	bl	8003acc <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005128:	f7fe fcd0 	bl	8003acc <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e23c      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513a:	4b40      	ldr	r3, [pc, #256]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005146:	4b3d      	ldr	r3, [pc, #244]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	4939      	ldr	r1, [pc, #228]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
 800515a:	e01a      	b.n	8005192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515c:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a36      	ldr	r2, [pc, #216]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fe fcb0 	bl	8003acc <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005170:	f7fe fcac 	bl	8003acc <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e218      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x1e0>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03c      	beq.n	8005218 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a6:	4b25      	ldr	r3, [pc, #148]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ac:	4a23      	ldr	r2, [pc, #140]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b6:	f7fe fc89 	bl	8003acc <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051be:	f7fe fc85 	bl	8003acc <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1f1      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ef      	beq.n	80051be <HAL_RCC_OscConfig+0x22e>
 80051de:	e01b      	b.n	8005218 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e0:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e6:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fe fc6c 	bl	8003acc <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f8:	f7fe fc68 	bl	8003acc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e1d4      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ef      	bne.n	80051f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80ab 	beq.w	800537c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800522a:	4b04      	ldr	r3, [pc, #16]	; (800523c <HAL_RCC_OscConfig+0x2ac>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_RCC_OscConfig+0x2b4>
 8005236:	2301      	movs	r3, #1
 8005238:	e005      	b.n	8005246 <HAL_RCC_OscConfig+0x2b6>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	20000004 	.word	0x20000004
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4baf      	ldr	r3, [pc, #700]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4aae      	ldr	r2, [pc, #696]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
 8005256:	4bac      	ldr	r3, [pc, #688]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005266:	4ba9      	ldr	r3, [pc, #676]	; (800550c <HAL_RCC_OscConfig+0x57c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d118      	bne.n	80052a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005272:	4ba6      	ldr	r3, [pc, #664]	; (800550c <HAL_RCC_OscConfig+0x57c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4aa5      	ldr	r2, [pc, #660]	; (800550c <HAL_RCC_OscConfig+0x57c>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800527e:	f7fe fc25 	bl	8003acc <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fe fc21 	bl	8003acc <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e18d      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005298:	4b9c      	ldr	r3, [pc, #624]	; (800550c <HAL_RCC_OscConfig+0x57c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d108      	bne.n	80052be <HAL_RCC_OscConfig+0x32e>
 80052ac:	4b96      	ldr	r3, [pc, #600]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b2:	4a95      	ldr	r2, [pc, #596]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052bc:	e024      	b.n	8005308 <HAL_RCC_OscConfig+0x378>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d110      	bne.n	80052e8 <HAL_RCC_OscConfig+0x358>
 80052c6:	4b90      	ldr	r3, [pc, #576]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	4a8e      	ldr	r2, [pc, #568]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052d6:	4b8c      	ldr	r3, [pc, #560]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052dc:	4a8a      	ldr	r2, [pc, #552]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e6:	e00f      	b.n	8005308 <HAL_RCC_OscConfig+0x378>
 80052e8:	4b87      	ldr	r3, [pc, #540]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ee:	4a86      	ldr	r2, [pc, #536]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f8:	4b83      	ldr	r3, [pc, #524]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	4a82      	ldr	r2, [pc, #520]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005300:	f023 0304 	bic.w	r3, r3, #4
 8005304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d016      	beq.n	800533e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fe fbdc 	bl	8003acc <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005316:	e00a      	b.n	800532e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fe fbd8 	bl	8003acc <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e142      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800532e:	4b76      	ldr	r3, [pc, #472]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ed      	beq.n	8005318 <HAL_RCC_OscConfig+0x388>
 800533c:	e015      	b.n	800536a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533e:	f7fe fbc5 	bl	8003acc <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005344:	e00a      	b.n	800535c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005346:	f7fe fbc1 	bl	8003acc <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e12b      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800535c:	4b6a      	ldr	r3, [pc, #424]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1ed      	bne.n	8005346 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800536a:	7ffb      	ldrb	r3, [r7, #31]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d105      	bne.n	800537c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005370:	4b65      	ldr	r3, [pc, #404]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	4a64      	ldr	r2, [pc, #400]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800537a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d03c      	beq.n	8005402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01c      	beq.n	80053ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005390:	4b5d      	ldr	r3, [pc, #372]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005396:	4a5c      	ldr	r2, [pc, #368]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a0:	f7fe fb94 	bl	8003acc <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a8:	f7fe fb90 	bl	8003acc <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0fc      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80053bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0ef      	beq.n	80053a8 <HAL_RCC_OscConfig+0x418>
 80053c8:	e01b      	b.n	8005402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80053cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053d0:	4a4d      	ldr	r2, [pc, #308]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053da:	f7fe fb77 	bl	8003acc <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e2:	f7fe fb73 	bl	8003acc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0df      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80053f4:	4b44      	ldr	r3, [pc, #272]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1ef      	bne.n	80053e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80d3 	beq.w	80055b2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800540c:	4b3e      	ldr	r3, [pc, #248]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 030c 	and.w	r3, r3, #12
 8005414:	2b0c      	cmp	r3, #12
 8005416:	f000 808d 	beq.w	8005534 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d15a      	bne.n	80054d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	4b39      	ldr	r3, [pc, #228]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a38      	ldr	r2, [pc, #224]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800542c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542e:	f7fe fb4d 	bl	8003acc <HAL_GetTick>
 8005432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005436:	f7fe fb49 	bl	8003acc <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0b5      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005448:	4b2f      	ldr	r3, [pc, #188]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1f0      	bne.n	8005436 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005454:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <HAL_RCC_OscConfig+0x580>)
 800545a:	4013      	ands	r3, r2
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6a11      	ldr	r1, [r2, #32]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005464:	3a01      	subs	r2, #1
 8005466:	0112      	lsls	r2, r2, #4
 8005468:	4311      	orrs	r1, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800546e:	0212      	lsls	r2, r2, #8
 8005470:	4311      	orrs	r1, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005476:	0852      	lsrs	r2, r2, #1
 8005478:	3a01      	subs	r2, #1
 800547a:	0552      	lsls	r2, r2, #21
 800547c:	4311      	orrs	r1, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005482:	0852      	lsrs	r2, r2, #1
 8005484:	3a01      	subs	r2, #1
 8005486:	0652      	lsls	r2, r2, #25
 8005488:	4311      	orrs	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800548e:	06d2      	lsls	r2, r2, #27
 8005490:	430a      	orrs	r2, r1
 8005492:	491d      	ldr	r1, [pc, #116]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 8005494:	4313      	orrs	r3, r2
 8005496:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1a      	ldr	r2, [pc, #104]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 800549e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a4:	4b18      	ldr	r3, [pc, #96]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a17      	ldr	r2, [pc, #92]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fe fb0c 	bl	8003acc <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fe fb08 	bl	8003acc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e074      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x528>
 80054d6:	e06c      	b.n	80055b2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4a04      	ldr	r2, [pc, #16]	; (8005508 <HAL_RCC_OscConfig+0x578>)
 80054f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80054fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fe fae4 	bl	8003acc <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005506:	e00e      	b.n	8005526 <HAL_RCC_OscConfig+0x596>
 8005508:	40021000 	.word	0x40021000
 800550c:	40007000 	.word	0x40007000
 8005510:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fe fada 	bl	8003acc <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e046      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005526:	4b25      	ldr	r3, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0x62c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x584>
 8005532:	e03e      	b.n	80055b2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e039      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005540:	4b1e      	ldr	r3, [pc, #120]	; (80055bc <HAL_RCC_OscConfig+0x62c>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f003 0203 	and.w	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	429a      	cmp	r2, r3
 8005552:	d12c      	bne.n	80055ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	3b01      	subs	r3, #1
 8005560:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	429a      	cmp	r2, r3
 8005564:	d123      	bne.n	80055ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005572:	429a      	cmp	r2, r3
 8005574:	d11b      	bne.n	80055ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d113      	bne.n	80055ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	3b01      	subs	r3, #1
 8005594:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005596:	429a      	cmp	r2, r3
 8005598:	d109      	bne.n	80055ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	085b      	lsrs	r3, r3, #1
 80055a6:	3b01      	subs	r3, #1
 80055a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e11e      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055d8:	4b91      	ldr	r3, [pc, #580]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d910      	bls.n	8005608 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b8e      	ldr	r3, [pc, #568]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 020f 	bic.w	r2, r3, #15
 80055ee:	498c      	ldr	r1, [pc, #560]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b8a      	ldr	r3, [pc, #552]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e106      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d073      	beq.n	80056fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d129      	bne.n	8005670 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561c:	4b81      	ldr	r3, [pc, #516]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0f4      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800562c:	f000 f9d0 	bl	80059d0 <RCC_GetSysClockFreqFromPLLSource>
 8005630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4a7c      	ldr	r2, [pc, #496]	; (8005828 <HAL_RCC_ClockConfig+0x268>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d93f      	bls.n	80056ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800563a:	4b7a      	ldr	r3, [pc, #488]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800564e:	2b00      	cmp	r3, #0
 8005650:	d033      	beq.n	80056ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005656:	2b00      	cmp	r3, #0
 8005658:	d12f      	bne.n	80056ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800565a:	4b72      	ldr	r3, [pc, #456]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005662:	4a70      	ldr	r2, [pc, #448]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 8005664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005668:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800566a:	2380      	movs	r3, #128	; 0x80
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e024      	b.n	80056ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d107      	bne.n	8005688 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005678:	4b6a      	ldr	r3, [pc, #424]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0c6      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005688:	4b66      	ldr	r3, [pc, #408]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0be      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005698:	f000 f8ce 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 800569c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	4a61      	ldr	r2, [pc, #388]	; (8005828 <HAL_RCC_ClockConfig+0x268>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d909      	bls.n	80056ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056a6:	4b5f      	ldr	r3, [pc, #380]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ae:	4a5d      	ldr	r2, [pc, #372]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80056b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80056b6:	2380      	movs	r3, #128	; 0x80
 80056b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056ba:	4b5a      	ldr	r3, [pc, #360]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f023 0203 	bic.w	r2, r3, #3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4957      	ldr	r1, [pc, #348]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056cc:	f7fe f9fe 	bl	8003acc <HAL_GetTick>
 80056d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d2:	e00a      	b.n	80056ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d4:	f7fe f9fa 	bl	8003acc <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e095      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ea:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 020c 	and.w	r2, r3, #12
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d1eb      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d023      	beq.n	8005750 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005714:	4b43      	ldr	r3, [pc, #268]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4a42      	ldr	r2, [pc, #264]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800571a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800571e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800572c:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005734:	4a3b      	ldr	r2, [pc, #236]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 8005736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800573a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800573c:	4b39      	ldr	r3, [pc, #228]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4936      	ldr	r1, [pc, #216]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
 800574e:	e008      	b.n	8005762 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d105      	bne.n	8005762 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005756:	4b33      	ldr	r3, [pc, #204]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	4a32      	ldr	r2, [pc, #200]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 800575c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005760:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005762:	4b2f      	ldr	r3, [pc, #188]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d21d      	bcs.n	80057ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005770:	4b2b      	ldr	r3, [pc, #172]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f023 020f 	bic.w	r2, r3, #15
 8005778:	4929      	ldr	r1, [pc, #164]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005780:	f7fe f9a4 	bl	8003acc <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005786:	e00a      	b.n	800579e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005788:	f7fe f9a0 	bl	8003acc <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	f241 3288 	movw	r2, #5000	; 0x1388
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e03b      	b.n	8005816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b20      	ldr	r3, [pc, #128]	; (8005820 <HAL_RCC_ClockConfig+0x260>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1ed      	bne.n	8005788 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4917      	ldr	r1, [pc, #92]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d009      	beq.n	80057ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057d6:	4b13      	ldr	r3, [pc, #76]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	490f      	ldr	r1, [pc, #60]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057ea:	f000 f825 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 80057ee:	4602      	mov	r2, r0
 80057f0:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_RCC_ClockConfig+0x264>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	091b      	lsrs	r3, r3, #4
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	490c      	ldr	r1, [pc, #48]	; (800582c <HAL_RCC_ClockConfig+0x26c>)
 80057fc:	5ccb      	ldrb	r3, [r1, r3]
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	fa22 f303 	lsr.w	r3, r2, r3
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x270>)
 8005808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x274>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fd ff84 	bl	800371c <HAL_InitTick>
 8005814:	4603      	mov	r3, r0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40022000 	.word	0x40022000
 8005824:	40021000 	.word	0x40021000
 8005828:	04c4b400 	.word	0x04c4b400
 800582c:	0801145c 	.word	0x0801145c
 8005830:	20000000 	.word	0x20000000
 8005834:	20000004 	.word	0x20000004

08005838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b04      	cmp	r3, #4
 8005848:	d102      	bne.n	8005850 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800584a:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e047      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005850:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 030c 	and.w	r3, r3, #12
 8005858:	2b08      	cmp	r3, #8
 800585a:	d102      	bne.n	8005862 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800585c:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	e03e      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005862:	4b23      	ldr	r3, [pc, #140]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d136      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005878:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	3301      	adds	r3, #1
 8005884:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d10c      	bne.n	80058a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800588c:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005896:	68d2      	ldr	r2, [r2, #12]
 8005898:	0a12      	lsrs	r2, r2, #8
 800589a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800589e:	fb02 f303 	mul.w	r3, r2, r3
 80058a2:	617b      	str	r3, [r7, #20]
      break;
 80058a4:	e00c      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	4a10      	ldr	r2, [pc, #64]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b0:	68d2      	ldr	r2, [r2, #12]
 80058b2:	0a12      	lsrs	r2, r2, #8
 80058b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058b8:	fb02 f303 	mul.w	r3, r2, r3
 80058bc:	617b      	str	r3, [r7, #20]
      break;
 80058be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	0e5b      	lsrs	r3, r3, #25
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	3301      	adds	r3, #1
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e001      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058e0:	693b      	ldr	r3, [r7, #16]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40021000 	.word	0x40021000
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	007a1200 	.word	0x007a1200

080058fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_RCC_GetHCLKFreq+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20000000 	.word	0x20000000

08005914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005918:	f7ff fff0 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0a1b      	lsrs	r3, r3, #8
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4904      	ldr	r1, [pc, #16]	; (800593c <HAL_RCC_GetPCLK1Freq+0x28>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005934:	4618      	mov	r0, r3
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40021000 	.word	0x40021000
 800593c:	0801146c 	.word	0x0801146c

08005940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005944:	f7ff ffda 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8005948:	4602      	mov	r2, r0
 800594a:	4b06      	ldr	r3, [pc, #24]	; (8005964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	0adb      	lsrs	r3, r3, #11
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	4904      	ldr	r1, [pc, #16]	; (8005968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005956:	5ccb      	ldrb	r3, [r1, r3]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005960:	4618      	mov	r0, r3
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40021000 	.word	0x40021000
 8005968:	0801146c 	.word	0x0801146c

0800596c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	220f      	movs	r2, #15
 800597a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <HAL_RCC_GetClockConfig+0x5c>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0203 	and.w	r2, r3, #3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCC_GetClockConfig+0x5c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <HAL_RCC_GetClockConfig+0x5c>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80059a0:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_GetClockConfig+0x5c>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	08db      	lsrs	r3, r3, #3
 80059a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <HAL_RCC_GetClockConfig+0x60>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 020f 	and.w	r2, r3, #15
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40022000 	.word	0x40022000

080059d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059d6:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d10c      	bne.n	8005a0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fe:	68d2      	ldr	r2, [r2, #12]
 8005a00:	0a12      	lsrs	r2, r2, #8
 8005a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	617b      	str	r3, [r7, #20]
    break;
 8005a0c:	e00c      	b.n	8005a28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a0e:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	0a12      	lsrs	r2, r2, #8
 8005a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    break;
 8005a26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0e5b      	lsrs	r3, r3, #25
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a42:	687b      	ldr	r3, [r7, #4]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	40021000 	.word	0x40021000
 8005a54:	007a1200 	.word	0x007a1200
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a64:	2300      	movs	r3, #0
 8005a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8098 	beq.w	8005baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b43      	ldr	r3, [pc, #268]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	4b40      	ldr	r3, [pc, #256]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6593      	str	r3, [r2, #88]	; 0x58
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a39      	ldr	r2, [pc, #228]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ab2:	f7fe f80b 	bl	8003acc <HAL_GetTick>
 8005ab6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab8:	e009      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fe f807 	bl	8003acc <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d902      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	74fb      	strb	r3, [r7, #19]
        break;
 8005acc:	e005      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ace:	4b30      	ldr	r3, [pc, #192]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ef      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d159      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01e      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d019      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005afc:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b18:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b28:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fd ffc7 	bl	8003acc <HAL_GetTick>
 8005b3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b40:	e00b      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fd ffc3 	bl	8003acc <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d902      	bls.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	74fb      	strb	r3, [r7, #19]
            break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ec      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	4903      	ldr	r1, [pc, #12]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	74bb      	strb	r3, [r7, #18]
 8005b8a:	e005      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b98:	7c7b      	ldrb	r3, [r7, #17]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9e:	4ba6      	ldr	r3, [pc, #664]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	4aa5      	ldr	r2, [pc, #660]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bb6:	4ba0      	ldr	r3, [pc, #640]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f023 0203 	bic.w	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	499c      	ldr	r1, [pc, #624]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bd8:	4b97      	ldr	r3, [pc, #604]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f023 020c 	bic.w	r2, r3, #12
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4994      	ldr	r1, [pc, #592]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bfa:	4b8f      	ldr	r3, [pc, #572]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	498b      	ldr	r1, [pc, #556]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c1c:	4b86      	ldr	r3, [pc, #536]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	4983      	ldr	r1, [pc, #524]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c3e:	4b7e      	ldr	r3, [pc, #504]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	497a      	ldr	r1, [pc, #488]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c60:	4b75      	ldr	r3, [pc, #468]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	4972      	ldr	r1, [pc, #456]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c82:	4b6d      	ldr	r3, [pc, #436]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	4969      	ldr	r1, [pc, #420]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ca4:	4b64      	ldr	r3, [pc, #400]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	4961      	ldr	r1, [pc, #388]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc6:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	4958      	ldr	r1, [pc, #352]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ce8:	4b53      	ldr	r3, [pc, #332]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	4950      	ldr	r1, [pc, #320]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d08:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a4a      	ldr	r2, [pc, #296]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d015      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d20:	4b45      	ldr	r3, [pc, #276]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2e:	4942      	ldr	r1, [pc, #264]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3e:	d105      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d40:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a3c      	ldr	r2, [pc, #240]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d58:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	4934      	ldr	r1, [pc, #208]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d76:	d105      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d78:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	4a2e      	ldr	r2, [pc, #184]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d015      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d90:	4b29      	ldr	r3, [pc, #164]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	4926      	ldr	r1, [pc, #152]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dae:	d105      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db0:	4b21      	ldr	r3, [pc, #132]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4a20      	ldr	r2, [pc, #128]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d015      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	4918      	ldr	r1, [pc, #96]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005de6:	d105      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005de8:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4a12      	ldr	r2, [pc, #72]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005df2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d015      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0e:	490a      	ldr	r1, [pc, #40]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	4a04      	ldr	r2, [pc, #16]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005e2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000

08005e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e09d      	b.n	8005f8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5e:	d009      	beq.n	8005e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
 8005e66:	e005      	b.n	8005e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fd fa92 	bl	80033b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb4:	d902      	bls.n	8005ebc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	e002      	b.n	8005ec2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005eca:	d007      	beq.n	8005edc <HAL_SPI_Init+0xa0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	ea42 0103 	orr.w	r1, r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	f003 0204 	and.w	r2, r3, #4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f003 0310 	and.w	r3, r3, #16
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f58:	ea42 0103 	orr.w	r1, r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b088      	sub	sp, #32
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_SPI_Transmit+0x22>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e158      	b.n	8006266 <HAL_SPI_Transmit+0x2d4>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fbc:	f7fd fd86 	bl	8003acc <HAL_GetTick>
 8005fc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fd6:	e13d      	b.n	8006254 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Transmit+0x52>
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d102      	bne.n	8005fea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fe8:	e134      	b.n	8006254 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2203      	movs	r2, #3
 8005fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	88fa      	ldrh	r2, [r7, #6]
 8006002:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	88fa      	ldrh	r2, [r7, #6]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006034:	d10f      	bne.n	8006056 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006044:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006054:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d007      	beq.n	8006074 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800607c:	d94b      	bls.n	8006116 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_SPI_Transmit+0xfa>
 8006086:	8afb      	ldrh	r3, [r7, #22]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d13e      	bne.n	800610a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	881a      	ldrh	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060b0:	e02b      	b.n	800610a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d112      	bne.n	80060e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e4:	e011      	b.n	800610a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e6:	f7fd fcf1 	bl	8003acc <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d803      	bhi.n	80060fe <HAL_SPI_Transmit+0x16c>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d102      	bne.n	8006104 <HAL_SPI_Transmit+0x172>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006108:	e0a4      	b.n	8006254 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1ce      	bne.n	80060b2 <HAL_SPI_Transmit+0x120>
 8006114:	e07c      	b.n	8006210 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Transmit+0x192>
 800611e:	8afb      	ldrh	r3, [r7, #22]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d170      	bne.n	8006206 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d912      	bls.n	8006154 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b02      	subs	r3, #2
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006152:	e058      	b.n	8006206 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800617a:	e044      	b.n	8006206 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d12b      	bne.n	80061e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d912      	bls.n	80061ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	881a      	ldrh	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	1c9a      	adds	r2, r3, #2
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	3b02      	subs	r3, #2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b8:	e025      	b.n	8006206 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061e0:	e011      	b.n	8006206 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e2:	f7fd fc73 	bl	8003acc <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d803      	bhi.n	80061fa <HAL_SPI_Transmit+0x268>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d102      	bne.n	8006200 <HAL_SPI_Transmit+0x26e>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006204:	e026      	b.n	8006254 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1b5      	bne.n	800617c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fce3 	bl	8006be0 <SPI_EndRxTxTransaction>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e000      	b.n	8006254 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006264:	7ffb      	ldrb	r3, [r7, #31]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b088      	sub	sp, #32
 8006272:	af02      	add	r7, sp, #8
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628a:	d112      	bne.n	80062b2 <HAL_SPI_Receive+0x44>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10e      	bne.n	80062b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2204      	movs	r2, #4
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f910 	bl	80064ce <HAL_SPI_TransmitReceive>
 80062ae:	4603      	mov	r3, r0
 80062b0:	e109      	b.n	80064c6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_SPI_Receive+0x52>
 80062bc:	2302      	movs	r3, #2
 80062be:	e102      	b.n	80064c6 <HAL_SPI_Receive+0x258>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c8:	f7fd fc00 	bl	8003acc <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d002      	beq.n	80062e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062da:	2302      	movs	r3, #2
 80062dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062de:	e0e9      	b.n	80064b4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_SPI_Receive+0x7e>
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062f0:	e0e0      	b.n	80064b4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	88fa      	ldrh	r2, [r7, #6]
 8006312:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800633c:	d908      	bls.n	8006350 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	e007      	b.n	8006360 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800635e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006368:	d10f      	bne.n	800638a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006378:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006388:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b40      	cmp	r3, #64	; 0x40
 8006396:	d007      	beq.n	80063a8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063b0:	d867      	bhi.n	8006482 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80063b2:	e030      	b.n	8006416 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d117      	bne.n	80063f2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f103 020c 	add.w	r2, r3, #12
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063f0:	e011      	b.n	8006416 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063f2:	f7fd fb6b 	bl	8003acc <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d803      	bhi.n	800640a <HAL_SPI_Receive+0x19c>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006408:	d102      	bne.n	8006410 <HAL_SPI_Receive+0x1a2>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006414:	e04e      	b.n	80064b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1c8      	bne.n	80063b4 <HAL_SPI_Receive+0x146>
 8006422:	e034      	b.n	800648e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b01      	cmp	r3, #1
 8006430:	d115      	bne.n	800645e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68da      	ldr	r2, [r3, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	b292      	uxth	r2, r2
 800643e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	1c9a      	adds	r2, r3, #2
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800645c:	e011      	b.n	8006482 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645e:	f7fd fb35 	bl	8003acc <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d803      	bhi.n	8006476 <HAL_SPI_Receive+0x208>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d102      	bne.n	800647c <HAL_SPI_Receive+0x20e>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006480:	e018      	b.n	80064b4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ca      	bne.n	8006424 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 fb4c 	bl	8006b30 <SPI_EndRxTransaction>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	75fb      	strb	r3, [r7, #23]
 80064b0:	e000      	b.n	80064b4 <HAL_SPI_Receive+0x246>
  }

error :
 80064b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b08a      	sub	sp, #40	; 0x28
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064dc:	2301      	movs	r3, #1
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_SPI_TransmitReceive+0x26>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e1fb      	b.n	80068ec <HAL_SPI_TransmitReceive+0x41e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064fc:	f7fd fae6 	bl	8003acc <HAL_GetTick>
 8006500:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006508:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006510:	887b      	ldrh	r3, [r7, #2]
 8006512:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006514:	887b      	ldrh	r3, [r7, #2]
 8006516:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006518:	7efb      	ldrb	r3, [r7, #27]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d00e      	beq.n	800653c <HAL_SPI_TransmitReceive+0x6e>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006524:	d106      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <HAL_SPI_TransmitReceive+0x66>
 800652e:	7efb      	ldrb	r3, [r7, #27]
 8006530:	2b04      	cmp	r3, #4
 8006532:	d003      	beq.n	800653c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006534:	2302      	movs	r3, #2
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800653a:	e1cd      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_SPI_TransmitReceive+0x80>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_SPI_TransmitReceive+0x80>
 8006548:	887b      	ldrh	r3, [r7, #2]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006554:	e1c0      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b04      	cmp	r3, #4
 8006560:	d003      	beq.n	800656a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2205      	movs	r2, #5
 8006566:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	887a      	ldrh	r2, [r7, #2]
 800657a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	887a      	ldrh	r2, [r7, #2]
 8006582:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	887a      	ldrh	r2, [r7, #2]
 8006596:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065ac:	d802      	bhi.n	80065b4 <HAL_SPI_TransmitReceive+0xe6>
 80065ae:	8a3b      	ldrh	r3, [r7, #16]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d908      	bls.n	80065c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065c2:	605a      	str	r2, [r3, #4]
 80065c4:	e007      	b.n	80065d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b40      	cmp	r3, #64	; 0x40
 80065e2:	d007      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065fc:	d97c      	bls.n	80066f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_SPI_TransmitReceive+0x13e>
 8006606:	8a7b      	ldrh	r3, [r7, #18]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d169      	bne.n	80066e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	881a      	ldrh	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	1c9a      	adds	r2, r3, #2
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006630:	e056      	b.n	80066e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b02      	cmp	r3, #2
 800663e:	d11b      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x1aa>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d016      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x1aa>
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	2b01      	cmp	r3, #1
 800664e:	d113      	bne.n	8006678 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	881a      	ldrh	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	1c9a      	adds	r2, r3, #2
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b01      	cmp	r3, #1
 8006684:	d11c      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x1f2>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	b292      	uxth	r2, r2
 800669e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066bc:	2301      	movs	r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066c0:	f7fd fa04 	bl	8003acc <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d807      	bhi.n	80066e0 <HAL_SPI_TransmitReceive+0x212>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d6:	d003      	beq.n	80066e0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066de:	e0fb      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1a3      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x164>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d19d      	bne.n	8006632 <HAL_SPI_TransmitReceive+0x164>
 80066f6:	e0df      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_SPI_TransmitReceive+0x23a>
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	2b01      	cmp	r3, #1
 8006704:	f040 80cb 	bne.w	800689e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b01      	cmp	r3, #1
 8006710:	d912      	bls.n	8006738 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	881a      	ldrh	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b02      	subs	r3, #2
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006736:	e0b2      	b.n	800689e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675e:	e09e      	b.n	800689e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d134      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x30a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	d02f      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x30a>
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	2b01      	cmp	r3, #1
 800677c:	d12c      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d912      	bls.n	80067ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	1c9a      	adds	r2, r3, #2
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b02      	subs	r3, #2
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067ac:	e012      	b.n	80067d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d148      	bne.n	8006878 <HAL_SPI_TransmitReceive+0x3aa>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d042      	beq.n	8006878 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d923      	bls.n	8006846 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	b292      	uxth	r2, r2
 800680a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	1c9a      	adds	r2, r3, #2
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b02      	subs	r3, #2
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d81f      	bhi.n	8006874 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	e016      	b.n	8006874 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f103 020c 	add.w	r2, r3, #12
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006874:	2301      	movs	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006878:	f7fd f928 	bl	8003acc <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006884:	429a      	cmp	r2, r3
 8006886:	d803      	bhi.n	8006890 <HAL_SPI_TransmitReceive+0x3c2>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d102      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x3c8>
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800689c:	e01c      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f af5b 	bne.w	8006760 <HAL_SPI_TransmitReceive+0x292>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f47f af54 	bne.w	8006760 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f98f 	bl	8006be0 <SPI_EndRxTxTransaction>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	661a      	str	r2, [r3, #96]	; 0x60
 80068d4:	e000      	b.n	80068d8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80068d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006904:	f7fd f8e2 	bl	8003acc <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	1a9b      	subs	r3, r3, r2
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	4413      	add	r3, r2
 8006912:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006914:	f7fd f8da 	bl	8003acc <HAL_GetTick>
 8006918:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800691a:	4b39      	ldr	r3, [pc, #228]	; (8006a00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	015b      	lsls	r3, r3, #5
 8006920:	0d1b      	lsrs	r3, r3, #20
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	fb02 f303 	mul.w	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800692a:	e054      	b.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d050      	beq.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006934:	f7fd f8ca 	bl	8003acc <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	429a      	cmp	r2, r3
 8006942:	d902      	bls.n	800694a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d13d      	bne.n	80069c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006958:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006962:	d111      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	d004      	beq.n	8006978 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006976:	d107      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006986:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006990:	d10f      	bne.n	80069b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e017      	b.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d19b      	bne.n	800692c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3720      	adds	r7, #32
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000000 	.word	0x20000000

08006a04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08a      	sub	sp, #40	; 0x28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a12:	2300      	movs	r3, #0
 8006a14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a16:	f7fd f859 	bl	8003acc <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	4413      	add	r3, r2
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006a26:	f7fd f851 	bl	8003acc <HAL_GetTick>
 8006a2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a34:	4b3d      	ldr	r3, [pc, #244]	; (8006b2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	00da      	lsls	r2, r3, #3
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	0d1b      	lsrs	r3, r3, #20
 8006a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a4c:	e060      	b.n	8006b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a54:	d107      	bne.n	8006a66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d050      	beq.n	8006b10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a6e:	f7fd f82d 	bl	8003acc <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d902      	bls.n	8006a84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d13d      	bne.n	8006b00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9c:	d111      	bne.n	8006ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa6:	d004      	beq.n	8006ab2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab0:	d107      	bne.n	8006ac2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aca:	d10f      	bne.n	8006aec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e010      	b.n	8006b22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689a      	ldr	r2, [r3, #8]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d196      	bne.n	8006a4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3728      	adds	r7, #40	; 0x28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000000 	.word	0x20000000

08006b30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b44:	d111      	bne.n	8006b6a <SPI_EndRxTransaction+0x3a>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4e:	d004      	beq.n	8006b5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d107      	bne.n	8006b6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2200      	movs	r2, #0
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff febd 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b84:	f043 0220 	orr.w	r2, r3, #32
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e023      	b.n	8006bd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b98:	d11d      	bne.n	8006bd6 <SPI_EndRxTransaction+0xa6>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba2:	d004      	beq.n	8006bae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bac:	d113      	bne.n	8006bd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff ff22 	bl	8006a04 <SPI_WaitFifoStateUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bca:	f043 0220 	orr.w	r2, r3, #32
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e000      	b.n	8006bd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff03 	bl	8006a04 <SPI_WaitFifoStateUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e027      	b.n	8006c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fe68 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c2e:	f043 0220 	orr.w	r2, r3, #32
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e014      	b.n	8006c64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f7ff fedc 	bl	8006a04 <SPI_WaitFifoStateUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c56:	f043 0220 	orr.w	r2, r3, #32
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e000      	b.n	8006c64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e049      	b.n	8006d12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d106      	bne.n	8006c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fc fbd2 	bl	800343c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f000 fdb8 	bl	8007820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d001      	beq.n	8006d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e04a      	b.n	8006dca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d018      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x6c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5e:	d013      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x6c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <HAL_TIM_Base_Start_IT+0xc0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d00e      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x6c>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d009      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x6c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1a      	ldr	r2, [pc, #104]	; (8006de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d004      	beq.n	8006d88 <HAL_TIM_Base_Start_IT+0x6c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d115      	bne.n	8006db4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	4b17      	ldr	r3, [pc, #92]	; (8006dec <HAL_TIM_Base_Start_IT+0xd0>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b06      	cmp	r3, #6
 8006d98:	d015      	beq.n	8006dc6 <HAL_TIM_Base_Start_IT+0xaa>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d011      	beq.n	8006dc6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db2:	e008      	b.n	8006dc6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	e000      	b.n	8006dc8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40013400 	.word	0x40013400
 8006de8:	40014000 	.word	0x40014000
 8006dec:	00010007 	.word	0x00010007

08006df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e049      	b.n	8006e96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f841 	bl	8006e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 fcf6 	bl	8007820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <HAL_TIM_PWM_Start+0x24>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf14      	ite	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	2300      	moveq	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e03c      	b.n	8006f52 <HAL_TIM_PWM_Start+0x9e>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d109      	bne.n	8006ef2 <HAL_TIM_PWM_Start+0x3e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	bf14      	ite	ne
 8006eea:	2301      	movne	r3, #1
 8006eec:	2300      	moveq	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	e02f      	b.n	8006f52 <HAL_TIM_PWM_Start+0x9e>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d109      	bne.n	8006f0c <HAL_TIM_PWM_Start+0x58>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	e022      	b.n	8006f52 <HAL_TIM_PWM_Start+0x9e>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	d109      	bne.n	8006f26 <HAL_TIM_PWM_Start+0x72>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	bf14      	ite	ne
 8006f1e:	2301      	movne	r3, #1
 8006f20:	2300      	moveq	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	e015      	b.n	8006f52 <HAL_TIM_PWM_Start+0x9e>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d109      	bne.n	8006f40 <HAL_TIM_PWM_Start+0x8c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	bf14      	ite	ne
 8006f38:	2301      	movne	r3, #1
 8006f3a:	2300      	moveq	r3, #0
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	e008      	b.n	8006f52 <HAL_TIM_PWM_Start+0x9e>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e097      	b.n	800708a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_PWM_Start+0xb6>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f68:	e023      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xfe>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b04      	cmp	r3, #4
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_PWM_Start+0xc6>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	e01b      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xfe>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d104      	bne.n	8006f8a <HAL_TIM_PWM_Start+0xd6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f88:	e013      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xfe>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b0c      	cmp	r3, #12
 8006f8e:	d104      	bne.n	8006f9a <HAL_TIM_PWM_Start+0xe6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f98:	e00b      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xfe>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0xf6>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa8:	e003      	b.n	8006fb2 <HAL_TIM_PWM_Start+0xfe>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 f852 	bl	8008064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a33      	ldr	r2, [pc, #204]	; (8007094 <HAL_TIM_PWM_Start+0x1e0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0x13e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a32      	ldr	r2, [pc, #200]	; (8007098 <HAL_TIM_PWM_Start+0x1e4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0x13e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a30      	ldr	r2, [pc, #192]	; (800709c <HAL_TIM_PWM_Start+0x1e8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0x13e>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2f      	ldr	r2, [pc, #188]	; (80070a0 <HAL_TIM_PWM_Start+0x1ec>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d004      	beq.n	8006ff2 <HAL_TIM_PWM_Start+0x13e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2d      	ldr	r2, [pc, #180]	; (80070a4 <HAL_TIM_PWM_Start+0x1f0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d101      	bne.n	8006ff6 <HAL_TIM_PWM_Start+0x142>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_PWM_Start+0x144>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a20      	ldr	r2, [pc, #128]	; (8007094 <HAL_TIM_PWM_Start+0x1e0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_TIM_PWM_Start+0x194>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d013      	beq.n	8007048 <HAL_TIM_PWM_Start+0x194>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_TIM_PWM_Start+0x194>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <HAL_TIM_PWM_Start+0x1f8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_TIM_PWM_Start+0x194>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a17      	ldr	r2, [pc, #92]	; (8007098 <HAL_TIM_PWM_Start+0x1e4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_TIM_PWM_Start+0x194>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_TIM_PWM_Start+0x1e8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d115      	bne.n	8007074 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <HAL_TIM_PWM_Start+0x1fc>)
 8007050:	4013      	ands	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b06      	cmp	r3, #6
 8007058:	d015      	beq.n	8007086 <HAL_TIM_PWM_Start+0x1d2>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007060:	d011      	beq.n	8007086 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007072:	e008      	b.n	8007086 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0201 	orr.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e000      	b.n	8007088 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	00010007 	.word	0x00010007

080070b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d122      	bne.n	8007110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d11b      	bne.n	8007110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f06f 0202 	mvn.w	r2, #2
 80070e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f003 0303 	and.w	r3, r3, #3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fb74 	bl	80077e4 <HAL_TIM_IC_CaptureCallback>
 80070fc:	e005      	b.n	800710a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fb66 	bl	80077d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fb77 	bl	80077f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b04      	cmp	r3, #4
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0204 	mvn.w	r2, #4
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fb4a 	bl	80077e4 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fb3c 	bl	80077d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fb4d 	bl	80077f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b08      	cmp	r3, #8
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b08      	cmp	r3, #8
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0208 	mvn.w	r2, #8
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2204      	movs	r2, #4
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fb20 	bl	80077e4 <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fb12 	bl	80077d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb23 	bl	80077f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b10      	cmp	r3, #16
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0210 	mvn.w	r2, #16
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2208      	movs	r2, #8
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 faf6 	bl	80077e4 <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fae8 	bl	80077d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 faf9 	bl	80077f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10e      	bne.n	8007238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b01      	cmp	r3, #1
 8007226:	d107      	bne.n	8007238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0201 	mvn.w	r2, #1
 8007230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7fb fffc 	bl	8003230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b80      	cmp	r3, #128	; 0x80
 8007244:	d10e      	bne.n	8007264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	2b80      	cmp	r3, #128	; 0x80
 8007252:	d107      	bne.n	8007264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f852 	bl	8008308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007272:	d10e      	bne.n	8007292 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d107      	bne.n	8007292 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800728a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 f845 	bl	800831c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	d10e      	bne.n	80072be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d107      	bne.n	80072be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 faa7 	bl	800780c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d10e      	bne.n	80072ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b20      	cmp	r3, #32
 80072d8:	d107      	bne.n	80072ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f06f 0220 	mvn.w	r2, #32
 80072e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f805 	bl	80082f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072f8:	d10f      	bne.n	800731a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007308:	d107      	bne.n	800731a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 f80b 	bl	8008330 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007328:	d10f      	bne.n	800734a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007338:	d107      	bne.n	800734a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fffd 	bl	8008344 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007358:	d10f      	bne.n	800737a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007368:	d107      	bne.n	800737a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 ffef 	bl	8008358 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007388:	d10f      	bne.n	80073aa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007398:	d107      	bne.n	80073aa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80073a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 ffe1 	bl	800836c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073aa:	bf00      	nop
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073ce:	2302      	movs	r3, #2
 80073d0:	e0ff      	b.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b14      	cmp	r3, #20
 80073de:	f200 80f0 	bhi.w	80075c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	080075c3 	.word	0x080075c3
 80073f0:	080075c3 	.word	0x080075c3
 80073f4:	080075c3 	.word	0x080075c3
 80073f8:	0800747d 	.word	0x0800747d
 80073fc:	080075c3 	.word	0x080075c3
 8007400:	080075c3 	.word	0x080075c3
 8007404:	080075c3 	.word	0x080075c3
 8007408:	080074bf 	.word	0x080074bf
 800740c:	080075c3 	.word	0x080075c3
 8007410:	080075c3 	.word	0x080075c3
 8007414:	080075c3 	.word	0x080075c3
 8007418:	080074ff 	.word	0x080074ff
 800741c:	080075c3 	.word	0x080075c3
 8007420:	080075c3 	.word	0x080075c3
 8007424:	080075c3 	.word	0x080075c3
 8007428:	08007541 	.word	0x08007541
 800742c:	080075c3 	.word	0x080075c3
 8007430:	080075c3 	.word	0x080075c3
 8007434:	080075c3 	.word	0x080075c3
 8007438:	08007581 	.word	0x08007581
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fa7c 	bl	8007940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f042 0208 	orr.w	r2, r2, #8
 8007456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0204 	bic.w	r2, r2, #4
 8007466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6999      	ldr	r1, [r3, #24]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	691a      	ldr	r2, [r3, #16]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	619a      	str	r2, [r3, #24]
      break;
 800747a:	e0a5      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 faec 	bl	8007a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6999      	ldr	r1, [r3, #24]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	021a      	lsls	r2, r3, #8
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	619a      	str	r2, [r3, #24]
      break;
 80074bc:	e084      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fb55 	bl	8007b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69da      	ldr	r2, [r3, #28]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0208 	orr.w	r2, r2, #8
 80074d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0204 	bic.w	r2, r2, #4
 80074e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69d9      	ldr	r1, [r3, #28]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	61da      	str	r2, [r3, #28]
      break;
 80074fc:	e064      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fbbd 	bl	8007c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69da      	ldr	r2, [r3, #28]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69da      	ldr	r2, [r3, #28]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69d9      	ldr	r1, [r3, #28]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	021a      	lsls	r2, r3, #8
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	61da      	str	r2, [r3, #28]
      break;
 800753e:	e043      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fc26 	bl	8007d98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0208 	orr.w	r2, r2, #8
 800755a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0204 	bic.w	r2, r2, #4
 800756a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800757e:	e023      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fc6a 	bl	8007e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800759a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	021a      	lsls	r2, r3, #8
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80075c0:	e002      	b.n	80075c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop

080075dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_ConfigClockSource+0x1c>
 80075f4:	2302      	movs	r3, #2
 80075f6:	e0de      	b.n	80077b6 <HAL_TIM_ConfigClockSource+0x1da>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800761a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a63      	ldr	r2, [pc, #396]	; (80077c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	f000 80a9 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 8007638:	4a61      	ldr	r2, [pc, #388]	; (80077c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	f200 80ae 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 8007640:	4a60      	ldr	r2, [pc, #384]	; (80077c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	f000 80a1 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 8007648:	4a5e      	ldr	r2, [pc, #376]	; (80077c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	f200 80a6 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 8007650:	4a5d      	ldr	r2, [pc, #372]	; (80077c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007652:	4293      	cmp	r3, r2
 8007654:	f000 8099 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 8007658:	4a5b      	ldr	r2, [pc, #364]	; (80077c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800765a:	4293      	cmp	r3, r2
 800765c:	f200 809e 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 8007660:	4a5a      	ldr	r2, [pc, #360]	; (80077cc <HAL_TIM_ConfigClockSource+0x1f0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	f000 8091 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 8007668:	4a58      	ldr	r2, [pc, #352]	; (80077cc <HAL_TIM_ConfigClockSource+0x1f0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	f200 8096 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 8007670:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007674:	f000 8089 	beq.w	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 8007678:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800767c:	f200 808e 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 8007680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007684:	d03e      	beq.n	8007704 <HAL_TIM_ConfigClockSource+0x128>
 8007686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768a:	f200 8087 	bhi.w	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007692:	f000 8086 	beq.w	80077a2 <HAL_TIM_ConfigClockSource+0x1c6>
 8007696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769a:	d87f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 800769c:	2b70      	cmp	r3, #112	; 0x70
 800769e:	d01a      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0xfa>
 80076a0:	2b70      	cmp	r3, #112	; 0x70
 80076a2:	d87b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076a4:	2b60      	cmp	r3, #96	; 0x60
 80076a6:	d050      	beq.n	800774a <HAL_TIM_ConfigClockSource+0x16e>
 80076a8:	2b60      	cmp	r3, #96	; 0x60
 80076aa:	d877      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076ac:	2b50      	cmp	r3, #80	; 0x50
 80076ae:	d03c      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x14e>
 80076b0:	2b50      	cmp	r3, #80	; 0x50
 80076b2:	d873      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d058      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x18e>
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	d86f      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d064      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 80076c0:	2b30      	cmp	r3, #48	; 0x30
 80076c2:	d86b      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d060      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d867      	bhi.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d05c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d05a      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x1ae>
 80076d4:	e062      	b.n	800779c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f000 fc9d 	bl	8008024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	609a      	str	r2, [r3, #8]
      break;
 8007702:	e04f      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6818      	ldr	r0, [r3, #0]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	6899      	ldr	r1, [r3, #8]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f000 fc86 	bl	8008024 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007726:	609a      	str	r2, [r3, #8]
      break;
 8007728:	e03c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	461a      	mov	r2, r3
 8007738:	f000 fbf8 	bl	8007f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2150      	movs	r1, #80	; 0x50
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fc51 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007748:	e02c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6859      	ldr	r1, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	461a      	mov	r2, r3
 8007758:	f000 fc17 	bl	8007f8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2160      	movs	r1, #96	; 0x60
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fc41 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007768:	e01c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	461a      	mov	r2, r3
 8007778:	f000 fbd8 	bl	8007f2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2140      	movs	r1, #64	; 0x40
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fc31 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 8007788:	e00c      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f000 fc28 	bl	8007fea <TIM_ITRx_SetConfig>
      break;
 800779a:	e003      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80077a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	00100070 	.word	0x00100070
 80077c4:	00100040 	.word	0x00100040
 80077c8:	00100030 	.word	0x00100030
 80077cc:	00100020 	.word	0x00100020

080077d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <TIM_Base_SetConfig+0x104>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00f      	beq.n	8007858 <TIM_Base_SetConfig+0x38>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783e:	d00b      	beq.n	8007858 <TIM_Base_SetConfig+0x38>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a39      	ldr	r2, [pc, #228]	; (8007928 <TIM_Base_SetConfig+0x108>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d007      	beq.n	8007858 <TIM_Base_SetConfig+0x38>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a38      	ldr	r2, [pc, #224]	; (800792c <TIM_Base_SetConfig+0x10c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d003      	beq.n	8007858 <TIM_Base_SetConfig+0x38>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a37      	ldr	r2, [pc, #220]	; (8007930 <TIM_Base_SetConfig+0x110>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d108      	bne.n	800786a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2d      	ldr	r2, [pc, #180]	; (8007924 <TIM_Base_SetConfig+0x104>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01b      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d017      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <TIM_Base_SetConfig+0x108>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a29      	ldr	r2, [pc, #164]	; (800792c <TIM_Base_SetConfig+0x10c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a28      	ldr	r2, [pc, #160]	; (8007930 <TIM_Base_SetConfig+0x110>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00b      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <TIM_Base_SetConfig+0x114>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <TIM_Base_SetConfig+0x118>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_Base_SetConfig+0x8a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a25      	ldr	r2, [pc, #148]	; (800793c <TIM_Base_SetConfig+0x11c>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d108      	bne.n	80078bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <TIM_Base_SetConfig+0x104>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0xe8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a11      	ldr	r2, [pc, #68]	; (8007930 <TIM_Base_SetConfig+0x110>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0xe8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a10      	ldr	r2, [pc, #64]	; (8007934 <TIM_Base_SetConfig+0x114>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0xe8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a0f      	ldr	r2, [pc, #60]	; (8007938 <TIM_Base_SetConfig+0x118>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0xe8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a0e      	ldr	r2, [pc, #56]	; (800793c <TIM_Base_SetConfig+0x11c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d103      	bne.n	8007910 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	615a      	str	r2, [r3, #20]
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	40014400 	.word	0x40014400
 800793c:	40014800 	.word	0x40014800

08007940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0201 	bic.w	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0303 	bic.w	r3, r3, #3
 800797a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f023 0302 	bic.w	r3, r3, #2
 800798c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4313      	orrs	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <TIM_OC1_SetConfig+0x10c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00f      	beq.n	80079c0 <TIM_OC1_SetConfig+0x80>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a2b      	ldr	r2, [pc, #172]	; (8007a50 <TIM_OC1_SetConfig+0x110>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d00b      	beq.n	80079c0 <TIM_OC1_SetConfig+0x80>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a2a      	ldr	r2, [pc, #168]	; (8007a54 <TIM_OC1_SetConfig+0x114>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d007      	beq.n	80079c0 <TIM_OC1_SetConfig+0x80>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a29      	ldr	r2, [pc, #164]	; (8007a58 <TIM_OC1_SetConfig+0x118>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d003      	beq.n	80079c0 <TIM_OC1_SetConfig+0x80>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a28      	ldr	r2, [pc, #160]	; (8007a5c <TIM_OC1_SetConfig+0x11c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10c      	bne.n	80079da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 0308 	bic.w	r3, r3, #8
 80079c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 0304 	bic.w	r3, r3, #4
 80079d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <TIM_OC1_SetConfig+0x10c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00f      	beq.n	8007a02 <TIM_OC1_SetConfig+0xc2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1a      	ldr	r2, [pc, #104]	; (8007a50 <TIM_OC1_SetConfig+0x110>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00b      	beq.n	8007a02 <TIM_OC1_SetConfig+0xc2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <TIM_OC1_SetConfig+0x114>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d007      	beq.n	8007a02 <TIM_OC1_SetConfig+0xc2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a18      	ldr	r2, [pc, #96]	; (8007a58 <TIM_OC1_SetConfig+0x118>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d003      	beq.n	8007a02 <TIM_OC1_SetConfig+0xc2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a17      	ldr	r2, [pc, #92]	; (8007a5c <TIM_OC1_SetConfig+0x11c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d111      	bne.n	8007a26 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	621a      	str	r2, [r3, #32]
}
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	40012c00 	.word	0x40012c00
 8007a50:	40013400 	.word	0x40013400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40014400 	.word	0x40014400
 8007a5c:	40014800 	.word	0x40014800

08007a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f023 0210 	bic.w	r2, r3, #16
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	021b      	lsls	r3, r3, #8
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f023 0320 	bic.w	r3, r3, #32
 8007aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a28      	ldr	r2, [pc, #160]	; (8007b60 <TIM_OC2_SetConfig+0x100>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d003      	beq.n	8007acc <TIM_OC2_SetConfig+0x6c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a27      	ldr	r2, [pc, #156]	; (8007b64 <TIM_OC2_SetConfig+0x104>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d10d      	bne.n	8007ae8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a1d      	ldr	r2, [pc, #116]	; (8007b60 <TIM_OC2_SetConfig+0x100>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00f      	beq.n	8007b10 <TIM_OC2_SetConfig+0xb0>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a1c      	ldr	r2, [pc, #112]	; (8007b64 <TIM_OC2_SetConfig+0x104>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_OC2_SetConfig+0xb0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a1b      	ldr	r2, [pc, #108]	; (8007b68 <TIM_OC2_SetConfig+0x108>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_OC2_SetConfig+0xb0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1a      	ldr	r2, [pc, #104]	; (8007b6c <TIM_OC2_SetConfig+0x10c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC2_SetConfig+0xb0>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a19      	ldr	r2, [pc, #100]	; (8007b70 <TIM_OC2_SetConfig+0x110>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d113      	bne.n	8007b38 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	621a      	str	r2, [r3, #32]
}
 8007b52:	bf00      	nop
 8007b54:	371c      	adds	r7, #28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40013400 	.word	0x40013400
 8007b68:	40014000 	.word	0x40014000
 8007b6c:	40014400 	.word	0x40014400
 8007b70:	40014800 	.word	0x40014800

08007b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a27      	ldr	r2, [pc, #156]	; (8007c70 <TIM_OC3_SetConfig+0xfc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC3_SetConfig+0x6a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a26      	ldr	r2, [pc, #152]	; (8007c74 <TIM_OC3_SetConfig+0x100>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d10d      	bne.n	8007bfa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <TIM_OC3_SetConfig+0xfc>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00f      	beq.n	8007c22 <TIM_OC3_SetConfig+0xae>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a1b      	ldr	r2, [pc, #108]	; (8007c74 <TIM_OC3_SetConfig+0x100>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00b      	beq.n	8007c22 <TIM_OC3_SetConfig+0xae>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a1a      	ldr	r2, [pc, #104]	; (8007c78 <TIM_OC3_SetConfig+0x104>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d007      	beq.n	8007c22 <TIM_OC3_SetConfig+0xae>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <TIM_OC3_SetConfig+0x108>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC3_SetConfig+0xae>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a18      	ldr	r2, [pc, #96]	; (8007c80 <TIM_OC3_SetConfig+0x10c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d113      	bne.n	8007c4a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	621a      	str	r2, [r3, #32]
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	40012c00 	.word	0x40012c00
 8007c74:	40013400 	.word	0x40013400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800

08007c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	021b      	lsls	r3, r3, #8
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	031b      	lsls	r3, r3, #12
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a28      	ldr	r2, [pc, #160]	; (8007d84 <TIM_OC4_SetConfig+0x100>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d003      	beq.n	8007cf0 <TIM_OC4_SetConfig+0x6c>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a27      	ldr	r2, [pc, #156]	; (8007d88 <TIM_OC4_SetConfig+0x104>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d10d      	bne.n	8007d0c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	031b      	lsls	r3, r3, #12
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	; (8007d84 <TIM_OC4_SetConfig+0x100>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00f      	beq.n	8007d34 <TIM_OC4_SetConfig+0xb0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <TIM_OC4_SetConfig+0x104>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00b      	beq.n	8007d34 <TIM_OC4_SetConfig+0xb0>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <TIM_OC4_SetConfig+0x108>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d007      	beq.n	8007d34 <TIM_OC4_SetConfig+0xb0>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1a      	ldr	r2, [pc, #104]	; (8007d90 <TIM_OC4_SetConfig+0x10c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_OC4_SetConfig+0xb0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <TIM_OC4_SetConfig+0x110>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d113      	bne.n	8007d5c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d42:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	019b      	lsls	r3, r3, #6
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	019b      	lsls	r3, r3, #6
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40012c00 	.word	0x40012c00
 8007d88:	40013400 	.word	0x40013400
 8007d8c:	40014000 	.word	0x40014000
 8007d90:	40014400 	.word	0x40014400
 8007d94:	40014800 	.word	0x40014800

08007d98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b087      	sub	sp, #28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ddc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	041b      	lsls	r3, r3, #16
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <TIM_OC5_SetConfig+0xb4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d00f      	beq.n	8007e12 <TIM_OC5_SetConfig+0x7a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <TIM_OC5_SetConfig+0xb8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00b      	beq.n	8007e12 <TIM_OC5_SetConfig+0x7a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <TIM_OC5_SetConfig+0xbc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d007      	beq.n	8007e12 <TIM_OC5_SetConfig+0x7a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a14      	ldr	r2, [pc, #80]	; (8007e58 <TIM_OC5_SetConfig+0xc0>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d003      	beq.n	8007e12 <TIM_OC5_SetConfig+0x7a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <TIM_OC5_SetConfig+0xc4>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d109      	bne.n	8007e26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	621a      	str	r2, [r3, #32]
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	40012c00 	.word	0x40012c00
 8007e50:	40013400 	.word	0x40013400
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800

08007e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	051b      	lsls	r3, r3, #20
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <TIM_OC6_SetConfig+0xb8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00f      	beq.n	8007edc <TIM_OC6_SetConfig+0x7c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <TIM_OC6_SetConfig+0xbc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00b      	beq.n	8007edc <TIM_OC6_SetConfig+0x7c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <TIM_OC6_SetConfig+0xc0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d007      	beq.n	8007edc <TIM_OC6_SetConfig+0x7c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <TIM_OC6_SetConfig+0xc4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_OC6_SetConfig+0x7c>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a14      	ldr	r2, [pc, #80]	; (8007f28 <TIM_OC6_SetConfig+0xc8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d109      	bne.n	8007ef0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	029b      	lsls	r3, r3, #10
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40012c00 	.word	0x40012c00
 8007f1c:	40013400 	.word	0x40013400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800

08007f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f023 0201 	bic.w	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 030a 	bic.w	r3, r3, #10
 8007f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b087      	sub	sp, #28
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f023 0210 	bic.w	r2, r3, #16
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	031b      	lsls	r3, r3, #12
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	f043 0307 	orr.w	r3, r3, #7
 8008010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800803e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	021a      	lsls	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	431a      	orrs	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4313      	orrs	r3, r2
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	609a      	str	r2, [r3, #8]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2201      	movs	r2, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e065      	b.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2c      	ldr	r2, [pc, #176]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d004      	beq.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2b      	ldr	r2, [pc, #172]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d108      	bne.n	800810e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008102:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008118:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4313      	orrs	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a1b      	ldr	r2, [pc, #108]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d018      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800813e:	d013      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d00e      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a17      	ldr	r2, [pc, #92]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d009      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a12      	ldr	r2, [pc, #72]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d004      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d10c      	bne.n	8008182 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	4313      	orrs	r3, r2
 8008178:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40000400 	.word	0x40000400
 80081ac:	40000800 	.word	0x40000800
 80081b0:	40014000 	.word	0x40014000

080081b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e087      	b.n	80082e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a27      	ldr	r2, [pc, #156]	; (80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d004      	beq.n	800825e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a25      	ldr	r2, [pc, #148]	; (80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d106      	bne.n	800826c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1e      	ldr	r2, [pc, #120]	; (80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d004      	beq.n	8008280 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d126      	bne.n	80082ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	051b      	lsls	r3, r3, #20
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0e      	ldr	r2, [pc, #56]	; (80082ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d004      	beq.n	80082c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d106      	bne.n	80082ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40012c00 	.word	0x40012c00
 80082f0:	40013400 	.word	0x40013400

080082f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e042      	b.n	8008418 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008398:	2b00      	cmp	r3, #0
 800839a:	d106      	bne.n	80083aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fb f8d7 	bl	8003558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2224      	movs	r2, #36	; 0x24
 80083ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0201 	bic.w	r2, r2, #1
 80083c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f8a2 	bl	800850c <UART_SetConfig>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e022      	b.n	8008418 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fb32 	bl	8008a44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fbb9 	bl	8008b88 <UART_CheckIdleState>
 8008416:	4603      	mov	r3, r0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	2b20      	cmp	r3, #32
 8008436:	d142      	bne.n	80084be <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <HAL_UART_Receive_DMA+0x24>
 800843e:	88fb      	ldrh	r3, [r7, #6]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e03b      	b.n	80084c0 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <HAL_UART_Receive_DMA+0x36>
 8008452:	2302      	movs	r3, #2
 8008454:	e034      	b.n	80084c0 <HAL_UART_Receive_DMA+0xa0>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <HAL_UART_Receive_DMA+0xa8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d01f      	beq.n	80084ae <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d018      	beq.n	80084ae <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	623b      	str	r3, [r7, #32]
 800849c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	69f9      	ldr	r1, [r7, #28]
 80084a0:	6a3a      	ldr	r2, [r7, #32]
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e6      	bne.n	800847c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084ae:	88fb      	ldrh	r3, [r7, #6]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fc7b 	bl	8008db0 <UART_Start_Receive_DMA>
 80084ba:	4603      	mov	r3, r0
 80084bc:	e000      	b.n	80084c0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3728      	adds	r7, #40	; 0x28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40008000 	.word	0x40008000

080084cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	431a      	orrs	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	4313      	orrs	r3, r2
 800852e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	4baf      	ldr	r3, [pc, #700]	; (80087f4 <UART_SetConfig+0x2e8>)
 8008538:	4013      	ands	r3, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6812      	ldr	r2, [r2, #0]
 800853e:	69f9      	ldr	r1, [r7, #28]
 8008540:	430b      	orrs	r3, r1
 8008542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4aa4      	ldr	r2, [pc, #656]	; (80087f8 <UART_SetConfig+0x2ec>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d004      	beq.n	8008574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	4313      	orrs	r3, r2
 8008572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800857e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	69f9      	ldr	r1, [r7, #28]
 8008588:	430b      	orrs	r3, r1
 800858a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	f023 010f 	bic.w	r1, r3, #15
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a95      	ldr	r2, [pc, #596]	; (80087fc <UART_SetConfig+0x2f0>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d120      	bne.n	80085ee <UART_SetConfig+0xe2>
 80085ac:	4b94      	ldr	r3, [pc, #592]	; (8008800 <UART_SetConfig+0x2f4>)
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d816      	bhi.n	80085e8 <UART_SetConfig+0xdc>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0xb4>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	080085d1 	.word	0x080085d1
 80085c4:	080085dd 	.word	0x080085dd
 80085c8:	080085d7 	.word	0x080085d7
 80085cc:	080085e3 	.word	0x080085e3
 80085d0:	2301      	movs	r3, #1
 80085d2:	76fb      	strb	r3, [r7, #27]
 80085d4:	e0bc      	b.n	8008750 <UART_SetConfig+0x244>
 80085d6:	2302      	movs	r3, #2
 80085d8:	76fb      	strb	r3, [r7, #27]
 80085da:	e0b9      	b.n	8008750 <UART_SetConfig+0x244>
 80085dc:	2304      	movs	r3, #4
 80085de:	76fb      	strb	r3, [r7, #27]
 80085e0:	e0b6      	b.n	8008750 <UART_SetConfig+0x244>
 80085e2:	2308      	movs	r3, #8
 80085e4:	76fb      	strb	r3, [r7, #27]
 80085e6:	e0b3      	b.n	8008750 <UART_SetConfig+0x244>
 80085e8:	2310      	movs	r3, #16
 80085ea:	76fb      	strb	r3, [r7, #27]
 80085ec:	e0b0      	b.n	8008750 <UART_SetConfig+0x244>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a84      	ldr	r2, [pc, #528]	; (8008804 <UART_SetConfig+0x2f8>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d132      	bne.n	800865e <UART_SetConfig+0x152>
 80085f8:	4b81      	ldr	r3, [pc, #516]	; (8008800 <UART_SetConfig+0x2f4>)
 80085fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085fe:	f003 030c 	and.w	r3, r3, #12
 8008602:	2b0c      	cmp	r3, #12
 8008604:	d828      	bhi.n	8008658 <UART_SetConfig+0x14c>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <UART_SetConfig+0x100>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008641 	.word	0x08008641
 8008610:	08008659 	.word	0x08008659
 8008614:	08008659 	.word	0x08008659
 8008618:	08008659 	.word	0x08008659
 800861c:	0800864d 	.word	0x0800864d
 8008620:	08008659 	.word	0x08008659
 8008624:	08008659 	.word	0x08008659
 8008628:	08008659 	.word	0x08008659
 800862c:	08008647 	.word	0x08008647
 8008630:	08008659 	.word	0x08008659
 8008634:	08008659 	.word	0x08008659
 8008638:	08008659 	.word	0x08008659
 800863c:	08008653 	.word	0x08008653
 8008640:	2300      	movs	r3, #0
 8008642:	76fb      	strb	r3, [r7, #27]
 8008644:	e084      	b.n	8008750 <UART_SetConfig+0x244>
 8008646:	2302      	movs	r3, #2
 8008648:	76fb      	strb	r3, [r7, #27]
 800864a:	e081      	b.n	8008750 <UART_SetConfig+0x244>
 800864c:	2304      	movs	r3, #4
 800864e:	76fb      	strb	r3, [r7, #27]
 8008650:	e07e      	b.n	8008750 <UART_SetConfig+0x244>
 8008652:	2308      	movs	r3, #8
 8008654:	76fb      	strb	r3, [r7, #27]
 8008656:	e07b      	b.n	8008750 <UART_SetConfig+0x244>
 8008658:	2310      	movs	r3, #16
 800865a:	76fb      	strb	r3, [r7, #27]
 800865c:	e078      	b.n	8008750 <UART_SetConfig+0x244>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a69      	ldr	r2, [pc, #420]	; (8008808 <UART_SetConfig+0x2fc>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d120      	bne.n	80086aa <UART_SetConfig+0x19e>
 8008668:	4b65      	ldr	r3, [pc, #404]	; (8008800 <UART_SetConfig+0x2f4>)
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008672:	2b30      	cmp	r3, #48	; 0x30
 8008674:	d013      	beq.n	800869e <UART_SetConfig+0x192>
 8008676:	2b30      	cmp	r3, #48	; 0x30
 8008678:	d814      	bhi.n	80086a4 <UART_SetConfig+0x198>
 800867a:	2b20      	cmp	r3, #32
 800867c:	d009      	beq.n	8008692 <UART_SetConfig+0x186>
 800867e:	2b20      	cmp	r3, #32
 8008680:	d810      	bhi.n	80086a4 <UART_SetConfig+0x198>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <UART_SetConfig+0x180>
 8008686:	2b10      	cmp	r3, #16
 8008688:	d006      	beq.n	8008698 <UART_SetConfig+0x18c>
 800868a:	e00b      	b.n	80086a4 <UART_SetConfig+0x198>
 800868c:	2300      	movs	r3, #0
 800868e:	76fb      	strb	r3, [r7, #27]
 8008690:	e05e      	b.n	8008750 <UART_SetConfig+0x244>
 8008692:	2302      	movs	r3, #2
 8008694:	76fb      	strb	r3, [r7, #27]
 8008696:	e05b      	b.n	8008750 <UART_SetConfig+0x244>
 8008698:	2304      	movs	r3, #4
 800869a:	76fb      	strb	r3, [r7, #27]
 800869c:	e058      	b.n	8008750 <UART_SetConfig+0x244>
 800869e:	2308      	movs	r3, #8
 80086a0:	76fb      	strb	r3, [r7, #27]
 80086a2:	e055      	b.n	8008750 <UART_SetConfig+0x244>
 80086a4:	2310      	movs	r3, #16
 80086a6:	76fb      	strb	r3, [r7, #27]
 80086a8:	e052      	b.n	8008750 <UART_SetConfig+0x244>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a57      	ldr	r2, [pc, #348]	; (800880c <UART_SetConfig+0x300>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d120      	bne.n	80086f6 <UART_SetConfig+0x1ea>
 80086b4:	4b52      	ldr	r3, [pc, #328]	; (8008800 <UART_SetConfig+0x2f4>)
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80086be:	2bc0      	cmp	r3, #192	; 0xc0
 80086c0:	d013      	beq.n	80086ea <UART_SetConfig+0x1de>
 80086c2:	2bc0      	cmp	r3, #192	; 0xc0
 80086c4:	d814      	bhi.n	80086f0 <UART_SetConfig+0x1e4>
 80086c6:	2b80      	cmp	r3, #128	; 0x80
 80086c8:	d009      	beq.n	80086de <UART_SetConfig+0x1d2>
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d810      	bhi.n	80086f0 <UART_SetConfig+0x1e4>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <UART_SetConfig+0x1cc>
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d006      	beq.n	80086e4 <UART_SetConfig+0x1d8>
 80086d6:	e00b      	b.n	80086f0 <UART_SetConfig+0x1e4>
 80086d8:	2300      	movs	r3, #0
 80086da:	76fb      	strb	r3, [r7, #27]
 80086dc:	e038      	b.n	8008750 <UART_SetConfig+0x244>
 80086de:	2302      	movs	r3, #2
 80086e0:	76fb      	strb	r3, [r7, #27]
 80086e2:	e035      	b.n	8008750 <UART_SetConfig+0x244>
 80086e4:	2304      	movs	r3, #4
 80086e6:	76fb      	strb	r3, [r7, #27]
 80086e8:	e032      	b.n	8008750 <UART_SetConfig+0x244>
 80086ea:	2308      	movs	r3, #8
 80086ec:	76fb      	strb	r3, [r7, #27]
 80086ee:	e02f      	b.n	8008750 <UART_SetConfig+0x244>
 80086f0:	2310      	movs	r3, #16
 80086f2:	76fb      	strb	r3, [r7, #27]
 80086f4:	e02c      	b.n	8008750 <UART_SetConfig+0x244>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a3f      	ldr	r2, [pc, #252]	; (80087f8 <UART_SetConfig+0x2ec>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d125      	bne.n	800874c <UART_SetConfig+0x240>
 8008700:	4b3f      	ldr	r3, [pc, #252]	; (8008800 <UART_SetConfig+0x2f4>)
 8008702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008706:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800870a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800870e:	d017      	beq.n	8008740 <UART_SetConfig+0x234>
 8008710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008714:	d817      	bhi.n	8008746 <UART_SetConfig+0x23a>
 8008716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871a:	d00b      	beq.n	8008734 <UART_SetConfig+0x228>
 800871c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008720:	d811      	bhi.n	8008746 <UART_SetConfig+0x23a>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <UART_SetConfig+0x222>
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800872a:	d006      	beq.n	800873a <UART_SetConfig+0x22e>
 800872c:	e00b      	b.n	8008746 <UART_SetConfig+0x23a>
 800872e:	2300      	movs	r3, #0
 8008730:	76fb      	strb	r3, [r7, #27]
 8008732:	e00d      	b.n	8008750 <UART_SetConfig+0x244>
 8008734:	2302      	movs	r3, #2
 8008736:	76fb      	strb	r3, [r7, #27]
 8008738:	e00a      	b.n	8008750 <UART_SetConfig+0x244>
 800873a:	2304      	movs	r3, #4
 800873c:	76fb      	strb	r3, [r7, #27]
 800873e:	e007      	b.n	8008750 <UART_SetConfig+0x244>
 8008740:	2308      	movs	r3, #8
 8008742:	76fb      	strb	r3, [r7, #27]
 8008744:	e004      	b.n	8008750 <UART_SetConfig+0x244>
 8008746:	2310      	movs	r3, #16
 8008748:	76fb      	strb	r3, [r7, #27]
 800874a:	e001      	b.n	8008750 <UART_SetConfig+0x244>
 800874c:	2310      	movs	r3, #16
 800874e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a28      	ldr	r2, [pc, #160]	; (80087f8 <UART_SetConfig+0x2ec>)
 8008756:	4293      	cmp	r3, r2
 8008758:	f040 809e 	bne.w	8008898 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800875c:	7efb      	ldrb	r3, [r7, #27]
 800875e:	2b08      	cmp	r3, #8
 8008760:	d823      	bhi.n	80087aa <UART_SetConfig+0x29e>
 8008762:	a201      	add	r2, pc, #4	; (adr r2, 8008768 <UART_SetConfig+0x25c>)
 8008764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008768:	0800878d 	.word	0x0800878d
 800876c:	080087ab 	.word	0x080087ab
 8008770:	08008795 	.word	0x08008795
 8008774:	080087ab 	.word	0x080087ab
 8008778:	0800879b 	.word	0x0800879b
 800877c:	080087ab 	.word	0x080087ab
 8008780:	080087ab 	.word	0x080087ab
 8008784:	080087ab 	.word	0x080087ab
 8008788:	080087a3 	.word	0x080087a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800878c:	f7fd f8c2 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 8008790:	6178      	str	r0, [r7, #20]
        break;
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008794:	4b1e      	ldr	r3, [pc, #120]	; (8008810 <UART_SetConfig+0x304>)
 8008796:	617b      	str	r3, [r7, #20]
        break;
 8008798:	e00c      	b.n	80087b4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800879a:	f7fd f84d 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 800879e:	6178      	str	r0, [r7, #20]
        break;
 80087a0:	e008      	b.n	80087b4 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a6:	617b      	str	r3, [r7, #20]
        break;
 80087a8:	e004      	b.n	80087b4 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	76bb      	strb	r3, [r7, #26]
        break;
 80087b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 812c 	beq.w	8008a14 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	4a14      	ldr	r2, [pc, #80]	; (8008814 <UART_SetConfig+0x308>)
 80087c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c6:	461a      	mov	r2, r3
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ce:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	4413      	add	r3, r2
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d305      	bcc.n	80087ec <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d915      	bls.n	8008818 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	76bb      	strb	r3, [r7, #26]
 80087f0:	e110      	b.n	8008a14 <UART_SetConfig+0x508>
 80087f2:	bf00      	nop
 80087f4:	cfff69f3 	.word	0xcfff69f3
 80087f8:	40008000 	.word	0x40008000
 80087fc:	40013800 	.word	0x40013800
 8008800:	40021000 	.word	0x40021000
 8008804:	40004400 	.word	0x40004400
 8008808:	40004800 	.word	0x40004800
 800880c:	40004c00 	.word	0x40004c00
 8008810:	00f42400 	.word	0x00f42400
 8008814:	08011474 	.word	0x08011474
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	4618      	mov	r0, r3
 800881c:	f04f 0100 	mov.w	r1, #0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	4a85      	ldr	r2, [pc, #532]	; (8008a3c <UART_SetConfig+0x530>)
 8008826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800882a:	b29a      	uxth	r2, r3
 800882c:	f04f 0300 	mov.w	r3, #0
 8008830:	f7f8 fa32 	bl	8000c98 <__aeabi_uldivmod>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4610      	mov	r0, r2
 800883a:	4619      	mov	r1, r3
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	020b      	lsls	r3, r1, #8
 8008846:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800884a:	0202      	lsls	r2, r0, #8
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	6849      	ldr	r1, [r1, #4]
 8008850:	0849      	lsrs	r1, r1, #1
 8008852:	4608      	mov	r0, r1
 8008854:	f04f 0100 	mov.w	r1, #0
 8008858:	1814      	adds	r4, r2, r0
 800885a:	eb43 0501 	adc.w	r5, r3, r1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	461a      	mov	r2, r3
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f8 fa14 	bl	8000c98 <__aeabi_uldivmod>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4613      	mov	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800887e:	d308      	bcc.n	8008892 <UART_SetConfig+0x386>
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008886:	d204      	bcs.n	8008892 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	e0c0      	b.n	8008a14 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	76bb      	strb	r3, [r7, #26]
 8008896:	e0bd      	b.n	8008a14 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088a0:	d164      	bne.n	800896c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80088a2:	7efb      	ldrb	r3, [r7, #27]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d828      	bhi.n	80088fa <UART_SetConfig+0x3ee>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <UART_SetConfig+0x3a4>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	080088d5 	.word	0x080088d5
 80088b4:	080088dd 	.word	0x080088dd
 80088b8:	080088e5 	.word	0x080088e5
 80088bc:	080088fb 	.word	0x080088fb
 80088c0:	080088eb 	.word	0x080088eb
 80088c4:	080088fb 	.word	0x080088fb
 80088c8:	080088fb 	.word	0x080088fb
 80088cc:	080088fb 	.word	0x080088fb
 80088d0:	080088f3 	.word	0x080088f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088d4:	f7fd f81e 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80088d8:	6178      	str	r0, [r7, #20]
        break;
 80088da:	e013      	b.n	8008904 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088dc:	f7fd f830 	bl	8005940 <HAL_RCC_GetPCLK2Freq>
 80088e0:	6178      	str	r0, [r7, #20]
        break;
 80088e2:	e00f      	b.n	8008904 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e4:	4b56      	ldr	r3, [pc, #344]	; (8008a40 <UART_SetConfig+0x534>)
 80088e6:	617b      	str	r3, [r7, #20]
        break;
 80088e8:	e00c      	b.n	8008904 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ea:	f7fc ffa5 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 80088ee:	6178      	str	r0, [r7, #20]
        break;
 80088f0:	e008      	b.n	8008904 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f6:	617b      	str	r3, [r7, #20]
        break;
 80088f8:	e004      	b.n	8008904 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	76bb      	strb	r3, [r7, #26]
        break;
 8008902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 8084 	beq.w	8008a14 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	4a4a      	ldr	r2, [pc, #296]	; (8008a3c <UART_SetConfig+0x530>)
 8008912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008916:	461a      	mov	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	fbb3 f3f2 	udiv	r3, r3, r2
 800891e:	005a      	lsls	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	441a      	add	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b0f      	cmp	r3, #15
 8008936:	d916      	bls.n	8008966 <UART_SetConfig+0x45a>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893e:	d212      	bcs.n	8008966 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f023 030f 	bic.w	r3, r3, #15
 8008948:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	b29a      	uxth	r2, r3
 8008956:	89fb      	ldrh	r3, [r7, #14]
 8008958:	4313      	orrs	r3, r2
 800895a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	89fa      	ldrh	r2, [r7, #14]
 8008962:	60da      	str	r2, [r3, #12]
 8008964:	e056      	b.n	8008a14 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	76bb      	strb	r3, [r7, #26]
 800896a:	e053      	b.n	8008a14 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 800896c:	7efb      	ldrb	r3, [r7, #27]
 800896e:	2b08      	cmp	r3, #8
 8008970:	d827      	bhi.n	80089c2 <UART_SetConfig+0x4b6>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x46c>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089a5 	.word	0x080089a5
 8008980:	080089ad 	.word	0x080089ad
 8008984:	080089c3 	.word	0x080089c3
 8008988:	080089b3 	.word	0x080089b3
 800898c:	080089c3 	.word	0x080089c3
 8008990:	080089c3 	.word	0x080089c3
 8008994:	080089c3 	.word	0x080089c3
 8008998:	080089bb 	.word	0x080089bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fc ffba 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80089a0:	6178      	str	r0, [r7, #20]
        break;
 80089a2:	e013      	b.n	80089cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089a4:	f7fc ffcc 	bl	8005940 <HAL_RCC_GetPCLK2Freq>
 80089a8:	6178      	str	r0, [r7, #20]
        break;
 80089aa:	e00f      	b.n	80089cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ac:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <UART_SetConfig+0x534>)
 80089ae:	617b      	str	r3, [r7, #20]
        break;
 80089b0:	e00c      	b.n	80089cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b2:	f7fc ff41 	bl	8005838 <HAL_RCC_GetSysClockFreq>
 80089b6:	6178      	str	r0, [r7, #20]
        break;
 80089b8:	e008      	b.n	80089cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089be:	617b      	str	r3, [r7, #20]
        break;
 80089c0:	e004      	b.n	80089cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	76bb      	strb	r3, [r7, #26]
        break;
 80089ca:	bf00      	nop
    }

    if (pclk != 0U)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d020      	beq.n	8008a14 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	4a19      	ldr	r2, [pc, #100]	; (8008a3c <UART_SetConfig+0x530>)
 80089d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089dc:	461a      	mov	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	441a      	add	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b0f      	cmp	r3, #15
 80089fa:	d909      	bls.n	8008a10 <UART_SetConfig+0x504>
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a02:	d205      	bcs.n	8008a10 <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60da      	str	r2, [r3, #12]
 8008a0e:	e001      	b.n	8008a14 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a30:	7ebb      	ldrb	r3, [r7, #26]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08011474 	.word	0x08011474
 8008a40:	00f42400 	.word	0x00f42400

08008a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	f003 0308 	and.w	r3, r3, #8
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	f003 0320 	and.w	r3, r3, #32
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b42:	d10a      	bne.n	8008b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af02      	add	r7, sp, #8
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b98:	f7fa ff98 	bl	8003acc <HAL_GetTick>
 8008b9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d10e      	bne.n	8008bca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f82f 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e025      	b.n	8008c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b04      	cmp	r3, #4
 8008bd6:	d10e      	bne.n	8008bf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f819 	bl	8008c1e <UART_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e00f      	b.n	8008c16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b09c      	sub	sp, #112	; 0x70
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	603b      	str	r3, [r7, #0]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2e:	e0a9      	b.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	f000 80a5 	beq.w	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3a:	f7fa ff47 	bl	8003acc <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d140      	bne.n	8008cd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c64:	667b      	str	r3, [r7, #100]	; 0x64
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c76:	e841 2300 	strex	r3, r2, [r1]
 8008c7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1e6      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	f023 0301 	bic.w	r3, r3, #1
 8008c98:	663b      	str	r3, [r7, #96]	; 0x60
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3308      	adds	r3, #8
 8008ca0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ca2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ca4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e5      	bne.n	8008c82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e069      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d051      	beq.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cee:	d149      	bne.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	e853 3f00 	ldrex	r3, [r3]
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d18:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d20:	e841 2300 	strex	r3, r2, [r1]
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e6      	bne.n	8008cfa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3308      	adds	r3, #8
 8008d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f023 0301 	bic.w	r3, r3, #1
 8008d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d4c:	623a      	str	r2, [r7, #32]
 8008d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	69f9      	ldr	r1, [r7, #28]
 8008d52:	6a3a      	ldr	r2, [r7, #32]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e5      	bne.n	8008d2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e010      	b.n	8008da6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69da      	ldr	r2, [r3, #28]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	bf0c      	ite	eq
 8008d94:	2301      	moveq	r3, #1
 8008d96:	2300      	movne	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	f43f af46 	beq.w	8008c30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3770      	adds	r7, #112	; 0x70
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b096      	sub	sp, #88	; 0x58
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	88fa      	ldrh	r2, [r7, #6]
 8008dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2222      	movs	r2, #34	; 0x22
 8008dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d02c      	beq.n	8008e3e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008de8:	4a42      	ldr	r2, [pc, #264]	; (8008ef4 <UART_Start_Receive_DMA+0x144>)
 8008dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df0:	4a41      	ldr	r2, [pc, #260]	; (8008ef8 <UART_Start_Receive_DMA+0x148>)
 8008df2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df8:	4a40      	ldr	r2, [pc, #256]	; (8008efc <UART_Start_Receive_DMA+0x14c>)
 8008dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e00:	2200      	movs	r2, #0
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3324      	adds	r3, #36	; 0x24
 8008e0e:	4619      	mov	r1, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e14:	461a      	mov	r2, r3
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	f7fb f80e 	bl	8003e38 <HAL_DMA_Start_IT>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2210      	movs	r2, #16
 8008e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e055      	b.n	8008eea <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d018      	beq.n	8008e80 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e62:	657b      	str	r3, [r7, #84]	; 0x54
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e6e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e6      	bne.n	8008e4e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3308      	adds	r3, #8
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	f043 0301 	orr.w	r3, r3, #1
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8008ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e5      	bne.n	8008e80 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3308      	adds	r3, #8
 8008eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ed4:	623a      	str	r2, [r7, #32]
 8008ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69f9      	ldr	r1, [r7, #28]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e5      	bne.n	8008eb4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3758      	adds	r7, #88	; 0x58
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	0800904f 	.word	0x0800904f
 8008ef8:	08009175 	.word	0x08009175
 8008efc:	080091ad 	.word	0x080091ad

08008f00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b08f      	sub	sp, #60	; 0x3c
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f28:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e6      	bne.n	8008f08 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f50:	633b      	str	r3, [r7, #48]	; 0x30
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5a:	61ba      	str	r2, [r7, #24]
 8008f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	e841 2300 	strex	r3, r2, [r1]
 8008f66:	613b      	str	r3, [r7, #16]
   return(result);
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1e5      	bne.n	8008f3a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008f76:	bf00      	nop
 8008f78:	373c      	adds	r7, #60	; 0x3c
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b095      	sub	sp, #84	; 0x54
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8008faa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e6      	bne.n	8008f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	f023 0301 	bic.w	r3, r3, #1
 8008fd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3308      	adds	r3, #8
 8008fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e3      	bne.n	8008fbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d118      	bne.n	800902e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	60bb      	str	r3, [r7, #8]
   return(result);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f023 0310 	bic.w	r3, r3, #16
 8009010:	647b      	str	r3, [r7, #68]	; 0x44
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800901a:	61bb      	str	r3, [r7, #24]
 800901c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6979      	ldr	r1, [r7, #20]
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	613b      	str	r3, [r7, #16]
   return(result);
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e6      	bne.n	8008ffc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2220      	movs	r2, #32
 8009032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009042:	bf00      	nop
 8009044:	3754      	adds	r7, #84	; 0x54
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b09c      	sub	sp, #112	; 0x70
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0320 	and.w	r3, r3, #32
 8009066:	2b00      	cmp	r3, #0
 8009068:	d171      	bne.n	800914e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800906a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906c:	2200      	movs	r2, #0
 800906e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009086:	66bb      	str	r3, [r7, #104]	; 0x68
 8009088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	461a      	mov	r2, r3
 800908e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009090:	65bb      	str	r3, [r7, #88]	; 0x58
 8009092:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009096:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800909e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e6      	bne.n	8009072 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	667b      	str	r3, [r7, #100]	; 0x64
 80090bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80090c4:	647a      	str	r2, [r7, #68]	; 0x44
 80090c6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	623b      	str	r3, [r7, #32]
   return(result);
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ee:	663b      	str	r3, [r7, #96]	; 0x60
 80090f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3308      	adds	r3, #8
 80090f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80090f8:	633a      	str	r2, [r7, #48]	; 0x30
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e5      	bne.n	80090d8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800910c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910e:	2220      	movs	r2, #32
 8009110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d118      	bne.n	800914e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	60fb      	str	r3, [r7, #12]
   return(result);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f023 0310 	bic.w	r3, r3, #16
 8009130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800913a:	61fb      	str	r3, [r7, #28]
 800913c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	617b      	str	r3, [r7, #20]
   return(result);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e6      	bne.n	800911c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d107      	bne.n	8009166 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800915c:	4619      	mov	r1, r3
 800915e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009160:	f7ff f9c8 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009164:	e002      	b.n	800916c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009166:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009168:	f7f9 fb96 	bl	8002898 <HAL_UART_RxCpltCallback>
}
 800916c:	bf00      	nop
 800916e:	3770      	adds	r7, #112	; 0x70
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009186:	2b01      	cmp	r3, #1
 8009188:	d109      	bne.n	800919e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	4619      	mov	r1, r3
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff f9ac 	bl	80084f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800919c:	e002      	b.n	80091a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff f994 	bl	80084cc <HAL_UART_RxHalfCpltCallback>
}
 80091a4:	bf00      	nop
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d4:	2b80      	cmp	r3, #128	; 0x80
 80091d6:	d109      	bne.n	80091ec <UART_DMAError+0x40>
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b21      	cmp	r3, #33	; 0x21
 80091dc:	d106      	bne.n	80091ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80091e6:	6978      	ldr	r0, [r7, #20]
 80091e8:	f7ff fe8a 	bl	8008f00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d109      	bne.n	800920e <UART_DMAError+0x62>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b22      	cmp	r3, #34	; 0x22
 80091fe:	d106      	bne.n	800920e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2200      	movs	r2, #0
 8009204:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009208:	6978      	ldr	r0, [r7, #20]
 800920a:	f7ff feba 	bl	8008f82 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009214:	f043 0210 	orr.w	r2, r3, #16
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800921e:	6978      	ldr	r0, [r7, #20]
 8009220:	f7ff f95e 	bl	80084e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009224:	bf00      	nop
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_UARTEx_DisableFifoMode+0x16>
 800923e:	2302      	movs	r3, #2
 8009240:	e027      	b.n	8009292 <HAL_UARTEx_DisableFifoMode+0x66>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2224      	movs	r2, #36	; 0x24
 800924e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0201 	bic.w	r2, r2, #1
 8009268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e02d      	b.n	8009312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	; 0x24
 80092c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 f850 	bl	8009398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2220      	movs	r2, #32
 8009304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800932a:	2b01      	cmp	r3, #1
 800932c:	d101      	bne.n	8009332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800932e:	2302      	movs	r3, #2
 8009330:	e02d      	b.n	800938e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2224      	movs	r2, #36	; 0x24
 800933e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 0201 	bic.w	r2, r2, #1
 8009358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f812 	bl	8009398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d108      	bne.n	80093ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093b8:	e031      	b.n	800941e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093ba:	2308      	movs	r3, #8
 80093bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093be:	2308      	movs	r3, #8
 80093c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	0e5b      	lsrs	r3, r3, #25
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0307 	and.w	r3, r3, #7
 80093d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	0f5b      	lsrs	r3, r3, #29
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	7b3a      	ldrb	r2, [r7, #12]
 80093e6:	4911      	ldr	r1, [pc, #68]	; (800942c <UARTEx_SetNbDataToProcess+0x94>)
 80093e8:	5c8a      	ldrb	r2, [r1, r2]
 80093ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093ee:	7b3a      	ldrb	r2, [r7, #12]
 80093f0:	490f      	ldr	r1, [pc, #60]	; (8009430 <UARTEx_SetNbDataToProcess+0x98>)
 80093f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	7b7a      	ldrb	r2, [r7, #13]
 8009404:	4909      	ldr	r1, [pc, #36]	; (800942c <UARTEx_SetNbDataToProcess+0x94>)
 8009406:	5c8a      	ldrb	r2, [r1, r2]
 8009408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800940c:	7b7a      	ldrb	r2, [r7, #13]
 800940e:	4908      	ldr	r1, [pc, #32]	; (8009430 <UARTEx_SetNbDataToProcess+0x98>)
 8009410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009412:	fb93 f3f2 	sdiv	r3, r3, r2
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	0801148c 	.word	0x0801148c
 8009430:	08011494 	.word	0x08011494

08009434 <__NVIC_SetPriority>:
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009444:	2b00      	cmp	r3, #0
 8009446:	db0a      	blt.n	800945e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	b2da      	uxtb	r2, r3
 800944c:	490c      	ldr	r1, [pc, #48]	; (8009480 <__NVIC_SetPriority+0x4c>)
 800944e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009452:	0112      	lsls	r2, r2, #4
 8009454:	b2d2      	uxtb	r2, r2
 8009456:	440b      	add	r3, r1
 8009458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800945c:	e00a      	b.n	8009474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	4908      	ldr	r1, [pc, #32]	; (8009484 <__NVIC_SetPriority+0x50>)
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	3b04      	subs	r3, #4
 800946c:	0112      	lsls	r2, r2, #4
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	440b      	add	r3, r1
 8009472:	761a      	strb	r2, [r3, #24]
}
 8009474:	bf00      	nop
 8009476:	370c      	adds	r7, #12
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	e000e100 	.word	0xe000e100
 8009484:	e000ed00 	.word	0xe000ed00

08009488 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800948c:	4b05      	ldr	r3, [pc, #20]	; (80094a4 <SysTick_Handler+0x1c>)
 800948e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009490:	f001 ff12 	bl	800b2b8 <xTaskGetSchedulerState>
 8009494:	4603      	mov	r3, r0
 8009496:	2b01      	cmp	r3, #1
 8009498:	d001      	beq.n	800949e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800949a:	f002 fcfd 	bl	800be98 <xPortSysTickHandler>
  }
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	e000e010 	.word	0xe000e010

080094a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80094ac:	2100      	movs	r1, #0
 80094ae:	f06f 0004 	mvn.w	r0, #4
 80094b2:	f7ff ffbf 	bl	8009434 <__NVIC_SetPriority>
#endif
}
 80094b6:	bf00      	nop
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094c2:	f3ef 8305 	mrs	r3, IPSR
 80094c6:	603b      	str	r3, [r7, #0]
  return(result);
 80094c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80094ce:	f06f 0305 	mvn.w	r3, #5
 80094d2:	607b      	str	r3, [r7, #4]
 80094d4:	e00c      	b.n	80094f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <osKernelInitialize+0x44>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d105      	bne.n	80094ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80094de:	4b08      	ldr	r3, [pc, #32]	; (8009500 <osKernelInitialize+0x44>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	607b      	str	r3, [r7, #4]
 80094e8:	e002      	b.n	80094f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80094ea:	f04f 33ff 	mov.w	r3, #4294967295
 80094ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80094f0:	687b      	ldr	r3, [r7, #4]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000208 	.word	0x20000208

08009504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800950a:	f3ef 8305 	mrs	r3, IPSR
 800950e:	603b      	str	r3, [r7, #0]
  return(result);
 8009510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009516:	f06f 0305 	mvn.w	r3, #5
 800951a:	607b      	str	r3, [r7, #4]
 800951c:	e010      	b.n	8009540 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <osKernelStart+0x48>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d109      	bne.n	800953a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009526:	f7ff ffbf 	bl	80094a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <osKernelStart+0x48>)
 800952c:	2202      	movs	r2, #2
 800952e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009530:	f001 fa66 	bl	800aa00 <vTaskStartScheduler>
      stat = osOK;
 8009534:	2300      	movs	r3, #0
 8009536:	607b      	str	r3, [r7, #4]
 8009538:	e002      	b.n	8009540 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009540:	687b      	ldr	r3, [r7, #4]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000208 	.word	0x20000208

08009550 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009550:	b580      	push	{r7, lr}
 8009552:	b08e      	sub	sp, #56	; 0x38
 8009554:	af04      	add	r7, sp, #16
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009560:	f3ef 8305 	mrs	r3, IPSR
 8009564:	617b      	str	r3, [r7, #20]
  return(result);
 8009566:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009568:	2b00      	cmp	r3, #0
 800956a:	d17e      	bne.n	800966a <osThreadNew+0x11a>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d07b      	beq.n	800966a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009572:	2380      	movs	r3, #128	; 0x80
 8009574:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009576:	2318      	movs	r3, #24
 8009578:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800957e:	f04f 33ff 	mov.w	r3, #4294967295
 8009582:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d045      	beq.n	8009616 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <osThreadNew+0x48>
        name = attr->name;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <osThreadNew+0x6e>
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	2b38      	cmp	r3, #56	; 0x38
 80095b0:	d805      	bhi.n	80095be <osThreadNew+0x6e>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <osThreadNew+0x72>
        return (NULL);
 80095be:	2300      	movs	r3, #0
 80095c0:	e054      	b.n	800966c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d003      	beq.n	80095d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	089b      	lsrs	r3, r3, #2
 80095d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00e      	beq.n	80095f8 <osThreadNew+0xa8>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2bbb      	cmp	r3, #187	; 0xbb
 80095e0:	d90a      	bls.n	80095f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d006      	beq.n	80095f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <osThreadNew+0xa8>
        mem = 1;
 80095f2:	2301      	movs	r3, #1
 80095f4:	61bb      	str	r3, [r7, #24]
 80095f6:	e010      	b.n	800961a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10c      	bne.n	800961a <osThreadNew+0xca>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d108      	bne.n	800961a <osThreadNew+0xca>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d104      	bne.n	800961a <osThreadNew+0xca>
          mem = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	e001      	b.n	800961a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d110      	bne.n	8009642 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009628:	9202      	str	r2, [sp, #8]
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6a3a      	ldr	r2, [r7, #32]
 8009634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 fff6 	bl	800a628 <xTaskCreateStatic>
 800963c:	4603      	mov	r3, r0
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	e013      	b.n	800966a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d110      	bne.n	800966a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	b29a      	uxth	r2, r3
 800964c:	f107 0310 	add.w	r3, r7, #16
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f001 f841 	bl	800a6e2 <xTaskCreate>
 8009660:	4603      	mov	r3, r0
 8009662:	2b01      	cmp	r3, #1
 8009664:	d001      	beq.n	800966a <osThreadNew+0x11a>
            hTask = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800966a:	693b      	ldr	r3, [r7, #16]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3728      	adds	r7, #40	; 0x28
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800967c:	f3ef 8305 	mrs	r3, IPSR
 8009680:	60bb      	str	r3, [r7, #8]
  return(result);
 8009682:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <osDelay+0x1c>
    stat = osErrorISR;
 8009688:	f06f 0305 	mvn.w	r3, #5
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	e007      	b.n	80096a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f97c 	bl	800a998 <vTaskDelay>
    }
  }

  return (stat);
 80096a0:	68fb      	ldr	r3, [r7, #12]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b08a      	sub	sp, #40	; 0x28
 80096ae:	af02      	add	r7, sp, #8
 80096b0:	60f8      	str	r0, [r7, #12]
 80096b2:	60b9      	str	r1, [r7, #8]
 80096b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ba:	f3ef 8305 	mrs	r3, IPSR
 80096be:	613b      	str	r3, [r7, #16]
  return(result);
 80096c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d15f      	bne.n	8009786 <osMessageQueueNew+0xdc>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d05c      	beq.n	8009786 <osMessageQueueNew+0xdc>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d059      	beq.n	8009786 <osMessageQueueNew+0xdc>
    mem = -1;
 80096d2:	f04f 33ff 	mov.w	r3, #4294967295
 80096d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d029      	beq.n	8009732 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d012      	beq.n	800970c <osMessageQueueNew+0x62>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	2b4f      	cmp	r3, #79	; 0x4f
 80096ec:	d90e      	bls.n	800970c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695a      	ldr	r2, [r3, #20]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	429a      	cmp	r2, r3
 8009704:	d302      	bcc.n	800970c <osMessageQueueNew+0x62>
        mem = 1;
 8009706:	2301      	movs	r3, #1
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	e014      	b.n	8009736 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d110      	bne.n	8009736 <osMessageQueueNew+0x8c>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10c      	bne.n	8009736 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009720:	2b00      	cmp	r3, #0
 8009722:	d108      	bne.n	8009736 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <osMessageQueueNew+0x8c>
          mem = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	61bb      	str	r3, [r7, #24]
 8009730:	e001      	b.n	8009736 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009732:	2300      	movs	r3, #0
 8009734:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d10b      	bne.n	8009754 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691a      	ldr	r2, [r3, #16]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2100      	movs	r1, #0
 8009746:	9100      	str	r1, [sp, #0]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fa2e 	bl	8009bac <xQueueGenericCreateStatic>
 8009750:	61f8      	str	r0, [r7, #28]
 8009752:	e008      	b.n	8009766 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800975a:	2200      	movs	r2, #0
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fa9c 	bl	8009c9c <xQueueGenericCreate>
 8009764:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00c      	beq.n	8009786 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <osMessageQueueNew+0xd0>
        name = attr->name;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e001      	b.n	800977e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800977a:	2300      	movs	r3, #0
 800977c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800977e:	6979      	ldr	r1, [r7, #20]
 8009780:	69f8      	ldr	r0, [r7, #28]
 8009782:	f000 fef3 	bl	800a56c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009786:	69fb      	ldr	r3, [r7, #28]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	4613      	mov	r3, r2
 800979e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a8:	f3ef 8305 	mrs	r3, IPSR
 80097ac:	617b      	str	r3, [r7, #20]
  return(result);
 80097ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d028      	beq.n	8009806 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d005      	beq.n	80097c6 <osMessageQueuePut+0x36>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <osMessageQueuePut+0x36>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80097c6:	f06f 0303 	mvn.w	r3, #3
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	e038      	b.n	8009840 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80097d2:	f107 0210 	add.w	r2, r7, #16
 80097d6:	2300      	movs	r3, #0
 80097d8:	68b9      	ldr	r1, [r7, #8]
 80097da:	69b8      	ldr	r0, [r7, #24]
 80097dc:	f000 fbba 	bl	8009f54 <xQueueGenericSendFromISR>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d003      	beq.n	80097ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80097e6:	f06f 0302 	mvn.w	r3, #2
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	e028      	b.n	8009840 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d025      	beq.n	8009840 <osMessageQueuePut+0xb0>
 80097f4:	4b15      	ldr	r3, [pc, #84]	; (800984c <osMessageQueuePut+0xbc>)
 80097f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	e01c      	b.n	8009840 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <osMessageQueuePut+0x82>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d103      	bne.n	800981a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009812:	f06f 0303 	mvn.w	r3, #3
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e012      	b.n	8009840 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800981a:	2300      	movs	r3, #0
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	69b8      	ldr	r0, [r7, #24]
 8009822:	f000 fa99 	bl	8009d58 <xQueueGenericSend>
 8009826:	4603      	mov	r3, r0
 8009828:	2b01      	cmp	r3, #1
 800982a:	d009      	beq.n	8009840 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009832:	f06f 0301 	mvn.w	r3, #1
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	e002      	b.n	8009840 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800983a:	f06f 0302 	mvn.w	r3, #2
 800983e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009840:	69fb      	ldr	r3, [r7, #28]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009866:	f3ef 8305 	mrs	r3, IPSR
 800986a:	617b      	str	r3, [r7, #20]
  return(result);
 800986c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800986e:	2b00      	cmp	r3, #0
 8009870:	d028      	beq.n	80098c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <osMessageQueueGet+0x34>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <osMessageQueueGet+0x34>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009884:	f06f 0303 	mvn.w	r3, #3
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	e037      	b.n	80098fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800988c:	2300      	movs	r3, #0
 800988e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009890:	f107 0310 	add.w	r3, r7, #16
 8009894:	461a      	mov	r2, r3
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	69b8      	ldr	r0, [r7, #24]
 800989a:	f000 fcd7 	bl	800a24c <xQueueReceiveFromISR>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d003      	beq.n	80098ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80098a4:	f06f 0302 	mvn.w	r3, #2
 80098a8:	61fb      	str	r3, [r7, #28]
 80098aa:	e027      	b.n	80098fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d024      	beq.n	80098fc <osMessageQueueGet+0xac>
 80098b2:	4b15      	ldr	r3, [pc, #84]	; (8009908 <osMessageQueueGet+0xb8>)
 80098b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	e01b      	b.n	80098fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <osMessageQueueGet+0x80>
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d103      	bne.n	80098d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80098d0:	f06f 0303 	mvn.w	r3, #3
 80098d4:	61fb      	str	r3, [r7, #28]
 80098d6:	e011      	b.n	80098fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	69b8      	ldr	r0, [r7, #24]
 80098de:	f000 fbd5 	bl	800a08c <xQueueReceive>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d009      	beq.n	80098fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80098ee:	f06f 0301 	mvn.w	r3, #1
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	e002      	b.n	80098fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80098f6:	f06f 0302 	mvn.w	r3, #2
 80098fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80098fc:	69fb      	ldr	r3, [r7, #28]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	4a07      	ldr	r2, [pc, #28]	; (8009938 <vApplicationGetIdleTaskMemory+0x2c>)
 800991c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4a06      	ldr	r2, [pc, #24]	; (800993c <vApplicationGetIdleTaskMemory+0x30>)
 8009922:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2280      	movs	r2, #128	; 0x80
 8009928:	601a      	str	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	2000020c 	.word	0x2000020c
 800993c:	200002c8 	.word	0x200002c8

08009940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	4a07      	ldr	r2, [pc, #28]	; (800996c <vApplicationGetTimerTaskMemory+0x2c>)
 8009950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4a06      	ldr	r2, [pc, #24]	; (8009970 <vApplicationGetTimerTaskMemory+0x30>)
 8009956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800995e:	601a      	str	r2, [r3, #0]
}
 8009960:	bf00      	nop
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	200004c8 	.word	0x200004c8
 8009970:	20000584 	.word	0x20000584

08009974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f103 0208 	add.w	r2, r3, #8
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f04f 32ff 	mov.w	r2, #4294967295
 800998c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f103 0208 	add.w	r2, r3, #8
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f103 0208 	add.w	r2, r3, #8
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099c2:	bf00      	nop
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	601a      	str	r2, [r3, #0]
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a16:	b480      	push	{r7}
 8009a18:	b085      	sub	sp, #20
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2c:	d103      	bne.n	8009a36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e00c      	b.n	8009a50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e002      	b.n	8009a44 <vListInsert+0x2e>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d2f6      	bcs.n	8009a3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	601a      	str	r2, [r3, #0]
}
 8009a7c:	bf00      	nop
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	6892      	ldr	r2, [r2, #8]
 8009a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6852      	ldr	r2, [r2, #4]
 8009aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d103      	bne.n	8009abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	689a      	ldr	r2, [r3, #8]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	1e5a      	subs	r2, r3, #1
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10a      	bne.n	8009b06 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009b06:	f002 f935 	bl	800bd74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	68f9      	ldr	r1, [r7, #12]
 8009b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b16:	fb01 f303 	mul.w	r3, r1, r3
 8009b1a:	441a      	add	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b36:	3b01      	subs	r3, #1
 8009b38:	68f9      	ldr	r1, [r7, #12]
 8009b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b3c:	fb01 f303 	mul.w	r3, r1, r3
 8009b40:	441a      	add	r2, r3
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	22ff      	movs	r2, #255	; 0xff
 8009b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	22ff      	movs	r2, #255	; 0xff
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d114      	bne.n	8009b86 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01a      	beq.n	8009b9a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3310      	adds	r3, #16
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 f9e3 	bl	800af34 <xTaskRemoveFromEventList>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d012      	beq.n	8009b9a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <xQueueGenericReset+0xcc>)
 8009b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	e009      	b.n	8009b9a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3310      	adds	r3, #16
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7ff fef2 	bl	8009974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3324      	adds	r3, #36	; 0x24
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff feed 	bl	8009974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b9a:	f002 f91b 	bl	800bdd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b9e:	2301      	movs	r3, #1
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b08e      	sub	sp, #56	; 0x38
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bd2:	bf00      	nop
 8009bd4:	e7fe      	b.n	8009bd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <xQueueGenericCreateStatic+0x52>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <xQueueGenericCreateStatic+0x56>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <xQueueGenericCreateStatic+0x58>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	623b      	str	r3, [r7, #32]
}
 8009c1a:	bf00      	nop
 8009c1c:	e7fe      	b.n	8009c1c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <xQueueGenericCreateStatic+0x7e>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <xQueueGenericCreateStatic+0x82>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueGenericCreateStatic+0x84>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	61fb      	str	r3, [r7, #28]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c4a:	2350      	movs	r3, #80	; 0x50
 8009c4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b50      	cmp	r3, #80	; 0x50
 8009c52:	d00a      	beq.n	8009c6a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	61bb      	str	r3, [r7, #24]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c6a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00d      	beq.n	8009c92 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c7e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f83f 	bl	8009d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3730      	adds	r7, #48	; 0x30
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10a      	bne.n	8009cc6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	613b      	str	r3, [r7, #16]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	fb02 f303 	mul.w	r3, r2, r3
 8009cce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3350      	adds	r3, #80	; 0x50
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 f96f 	bl	800bfb8 <pvPortMalloc>
 8009cda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d011      	beq.n	8009d06 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	3350      	adds	r3, #80	; 0x50
 8009cea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cf4:	79fa      	ldrb	r2, [r7, #7]
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f805 	bl	8009d10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d06:	69bb      	ldr	r3, [r7, #24]
	}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3720      	adds	r7, #32
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	69ba      	ldr	r2, [r7, #24]
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e002      	b.n	8009d32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d3e:	2101      	movs	r1, #1
 8009d40:	69b8      	ldr	r0, [r7, #24]
 8009d42:	f7ff fecb 	bl	8009adc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08e      	sub	sp, #56	; 0x38
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d66:	2300      	movs	r3, #0
 8009d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d10a      	bne.n	8009d8a <xQueueGenericSend+0x32>
	__asm volatile
 8009d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d86:	bf00      	nop
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <xQueueGenericSend+0x40>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <xQueueGenericSend+0x44>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e000      	b.n	8009d9e <xQueueGenericSend+0x46>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <xQueueGenericSend+0x60>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d103      	bne.n	8009dc6 <xQueueGenericSend+0x6e>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d101      	bne.n	8009dca <xQueueGenericSend+0x72>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <xQueueGenericSend+0x74>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	623b      	str	r3, [r7, #32]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009de6:	f001 fa67 	bl	800b2b8 <xTaskGetSchedulerState>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d102      	bne.n	8009df6 <xQueueGenericSend+0x9e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <xQueueGenericSend+0xa2>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e000      	b.n	8009dfc <xQueueGenericSend+0xa4>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	61fb      	str	r3, [r7, #28]
}
 8009e12:	bf00      	nop
 8009e14:	e7fe      	b.n	8009e14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e16:	f001 ffad 	bl	800bd74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d302      	bcc.n	8009e2c <xQueueGenericSend+0xd4>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d129      	bne.n	8009e80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e2c:	683a      	ldr	r2, [r7, #0]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e32:	f000 fa8b 	bl	800a34c <prvCopyDataToQueue>
 8009e36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d010      	beq.n	8009e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	3324      	adds	r3, #36	; 0x24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f001 f875 	bl	800af34 <xTaskRemoveFromEventList>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d013      	beq.n	8009e78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e50:	4b3f      	ldr	r3, [pc, #252]	; (8009f50 <xQueueGenericSend+0x1f8>)
 8009e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	f3bf 8f4f 	dsb	sy
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	e00a      	b.n	8009e78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d007      	beq.n	8009e78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e68:	4b39      	ldr	r3, [pc, #228]	; (8009f50 <xQueueGenericSend+0x1f8>)
 8009e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e78:	f001 ffac 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e063      	b.n	8009f48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d103      	bne.n	8009e8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e86:	f001 ffa5 	bl	800bdd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e05c      	b.n	8009f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d106      	bne.n	8009ea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e94:	f107 0314 	add.w	r3, r7, #20
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 f8af 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ea2:	f001 ff97 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ea6:	f000 fe1b 	bl	800aae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eaa:	f001 ff63 	bl	800bd74 <vPortEnterCritical>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d103      	bne.n	8009ec4 <xQueueGenericSend+0x16c>
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eca:	b25b      	sxtb	r3, r3
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d103      	bne.n	8009eda <xQueueGenericSend+0x182>
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eda:	f001 ff7b 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ede:	1d3a      	adds	r2, r7, #4
 8009ee0:	f107 0314 	add.w	r3, r7, #20
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f89e 	bl	800b028 <xTaskCheckForTimeOut>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d124      	bne.n	8009f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef4:	f000 fb22 	bl	800a53c <prvIsQueueFull>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d018      	beq.n	8009f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	3310      	adds	r3, #16
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	4611      	mov	r1, r2
 8009f06:	4618      	mov	r0, r3
 8009f08:	f000 ffc4 	bl	800ae94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f0e:	f000 faad 	bl	800a46c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f12:	f000 fdf3 	bl	800aafc <xTaskResumeAll>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f47f af7c 	bne.w	8009e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <xQueueGenericSend+0x1f8>)
 8009f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	e772      	b.n	8009e16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f32:	f000 fa9b 	bl	800a46c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f36:	f000 fde1 	bl	800aafc <xTaskResumeAll>
 8009f3a:	e76c      	b.n	8009e16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f3e:	f000 fa95 	bl	800a46c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f42:	f000 fddb 	bl	800aafc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3738      	adds	r7, #56	; 0x38
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b090      	sub	sp, #64	; 0x40
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d103      	bne.n	8009f90 <xQueueGenericSendFromISR+0x3c>
 8009f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <xQueueGenericSendFromISR+0x40>
 8009f90:	2301      	movs	r3, #1
 8009f92:	e000      	b.n	8009f96 <xQueueGenericSendFromISR+0x42>
 8009f94:	2300      	movs	r3, #0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d103      	bne.n	8009fbe <xQueueGenericSendFromISR+0x6a>
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d101      	bne.n	8009fc2 <xQueueGenericSendFromISR+0x6e>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e000      	b.n	8009fc4 <xQueueGenericSendFromISR+0x70>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	623b      	str	r3, [r7, #32]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fde:	f001 ffab 	bl	800bf38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8009fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	61fa      	str	r2, [r7, #28]
 8009ff8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ffc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a006:	429a      	cmp	r2, r3
 800a008:	d302      	bcc.n	800a010 <xQueueGenericSendFromISR+0xbc>
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d12f      	bne.n	800a070 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a026:	f000 f991 	bl	800a34c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a02a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a032:	d112      	bne.n	800a05a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d016      	beq.n	800a06a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	3324      	adds	r3, #36	; 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f000 ff77 	bl	800af34 <xTaskRemoveFromEventList>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	e007      	b.n	800a06a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a05a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a05e:	3301      	adds	r3, #1
 800a060:	b2db      	uxtb	r3, r3
 800a062:	b25a      	sxtb	r2, r3
 800a064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a06a:	2301      	movs	r3, #1
 800a06c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a06e:	e001      	b.n	800a074 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a070:	2300      	movs	r3, #0
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a07e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a082:	4618      	mov	r0, r3
 800a084:	3740      	adds	r7, #64	; 0x40
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08c      	sub	sp, #48	; 0x30
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a098:	2300      	movs	r3, #0
 800a09a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <xQueueReceive+0x30>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	623b      	str	r3, [r7, #32]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <xQueueReceive+0x3e>
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <xQueueReceive+0x42>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e000      	b.n	800a0d0 <xQueueReceive+0x44>
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <xQueueReceive+0x5e>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	61fb      	str	r3, [r7, #28]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0ea:	f001 f8e5 	bl	800b2b8 <xTaskGetSchedulerState>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d102      	bne.n	800a0fa <xQueueReceive+0x6e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d101      	bne.n	800a0fe <xQueueReceive+0x72>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e000      	b.n	800a100 <xQueueReceive+0x74>
 800a0fe:	2300      	movs	r3, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10a      	bne.n	800a11a <xQueueReceive+0x8e>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a11a:	f001 fe2b 	bl	800bd74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	d01f      	beq.n	800a16a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a12a:	68b9      	ldr	r1, [r7, #8]
 800a12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a12e:	f000 f977 	bl	800a420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	1e5a      	subs	r2, r3, #1
 800a136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a138:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00f      	beq.n	800a162 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	3310      	adds	r3, #16
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fef4 	bl	800af34 <xTaskRemoveFromEventList>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d007      	beq.n	800a162 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a152:	4b3d      	ldr	r3, [pc, #244]	; (800a248 <xQueueReceive+0x1bc>)
 800a154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a162:	f001 fe37 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 800a166:	2301      	movs	r3, #1
 800a168:	e069      	b.n	800a23e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a170:	f001 fe30 	bl	800bdd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a174:	2300      	movs	r3, #0
 800a176:	e062      	b.n	800a23e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a17e:	f107 0310 	add.w	r3, r7, #16
 800a182:	4618      	mov	r0, r3
 800a184:	f000 ff3a 	bl	800affc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a18c:	f001 fe22 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a190:	f000 fca6 	bl	800aae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a194:	f001 fdee 	bl	800bd74 <vPortEnterCritical>
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a19e:	b25b      	sxtb	r3, r3
 800a1a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a4:	d103      	bne.n	800a1ae <xQueueReceive+0x122>
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1b4:	b25b      	sxtb	r3, r3
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d103      	bne.n	800a1c4 <xQueueReceive+0x138>
 800a1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1c4:	f001 fe06 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1c8:	1d3a      	adds	r2, r7, #4
 800a1ca:	f107 0310 	add.w	r3, r7, #16
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 ff29 	bl	800b028 <xTaskCheckForTimeOut>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d123      	bne.n	800a224 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1de:	f000 f997 	bl	800a510 <prvIsQueueEmpty>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d017      	beq.n	800a218 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	3324      	adds	r3, #36	; 0x24
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fe4f 	bl	800ae94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f8:	f000 f938 	bl	800a46c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1fc:	f000 fc7e 	bl	800aafc <xTaskResumeAll>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d189      	bne.n	800a11a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a206:	4b10      	ldr	r3, [pc, #64]	; (800a248 <xQueueReceive+0x1bc>)
 800a208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
 800a216:	e780      	b.n	800a11a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21a:	f000 f927 	bl	800a46c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a21e:	f000 fc6d 	bl	800aafc <xTaskResumeAll>
 800a222:	e77a      	b.n	800a11a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a226:	f000 f921 	bl	800a46c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a22a:	f000 fc67 	bl	800aafc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a230:	f000 f96e 	bl	800a510 <prvIsQueueEmpty>
 800a234:	4603      	mov	r3, r0
 800a236:	2b00      	cmp	r3, #0
 800a238:	f43f af6f 	beq.w	800a11a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a23c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3730      	adds	r7, #48	; 0x30
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08e      	sub	sp, #56	; 0x38
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	623b      	str	r3, [r7, #32]
}
 800a274:	bf00      	nop
 800a276:	e7fe      	b.n	800a276 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d103      	bne.n	800a286 <xQueueReceiveFromISR+0x3a>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <xQueueReceiveFromISR+0x3e>
 800a286:	2301      	movs	r3, #1
 800a288:	e000      	b.n	800a28c <xQueueReceiveFromISR+0x40>
 800a28a:	2300      	movs	r3, #0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	61fb      	str	r3, [r7, #28]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2a6:	f001 fe47 	bl	800bf38 <vPortValidateInterruptPriority>
	__asm volatile
 800a2aa:	f3ef 8211 	mrs	r2, BASEPRI
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	61ba      	str	r2, [r7, #24]
 800a2c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a2c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d02f      	beq.n	800a332 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2e0:	f000 f89e 	bl	800a420 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a2ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f4:	d112      	bne.n	800a31c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d016      	beq.n	800a32c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	3310      	adds	r3, #16
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fe16 	bl	800af34 <xTaskRemoveFromEventList>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00e      	beq.n	800a32c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	601a      	str	r2, [r3, #0]
 800a31a:	e007      	b.n	800a32c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a320:	3301      	adds	r3, #1
 800a322:	b2db      	uxtb	r3, r3
 800a324:	b25a      	sxtb	r2, r3
 800a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a32c:	2301      	movs	r3, #1
 800a32e:	637b      	str	r3, [r7, #52]	; 0x34
 800a330:	e001      	b.n	800a336 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a332:	2300      	movs	r3, #0
 800a334:	637b      	str	r3, [r7, #52]	; 0x34
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f383 8811 	msr	BASEPRI, r3
}
 800a340:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a344:	4618      	mov	r0, r3
 800a346:	3738      	adds	r7, #56	; 0x38
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10d      	bne.n	800a386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d14d      	bne.n	800a40e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 ffbc 	bl	800b2f4 <xTaskPriorityDisinherit>
 800a37c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	609a      	str	r2, [r3, #8]
 800a384:	e043      	b.n	800a40e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d119      	bne.n	800a3c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6858      	ldr	r0, [r3, #4]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a394:	461a      	mov	r2, r3
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	f002 f924 	bl	800c5e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	441a      	add	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d32b      	bcc.n	800a40e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	605a      	str	r2, [r3, #4]
 800a3be:	e026      	b.n	800a40e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68d8      	ldr	r0, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	f002 f90a 	bl	800c5e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	68da      	ldr	r2, [r3, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	425b      	negs	r3, r3
 800a3da:	441a      	add	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	68da      	ldr	r2, [r3, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d207      	bcs.n	800a3fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f4:	425b      	negs	r3, r3
 800a3f6:	441a      	add	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d105      	bne.n	800a40e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a416:	697b      	ldr	r3, [r7, #20]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d018      	beq.n	800a464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	441a      	add	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68da      	ldr	r2, [r3, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d303      	bcc.n	800a454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68d9      	ldr	r1, [r3, #12]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45c:	461a      	mov	r2, r3
 800a45e:	6838      	ldr	r0, [r7, #0]
 800a460:	f002 f8c0 	bl	800c5e4 <memcpy>
	}
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a474:	f001 fc7e 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a47e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a480:	e011      	b.n	800a4a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	2b00      	cmp	r3, #0
 800a488:	d012      	beq.n	800a4b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3324      	adds	r3, #36	; 0x24
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fd50 	bl	800af34 <xTaskRemoveFromEventList>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a49a:	f000 fe27 	bl	800b0ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dce9      	bgt.n	800a482 <prvUnlockQueue+0x16>
 800a4ae:	e000      	b.n	800a4b2 <prvUnlockQueue+0x46>
					break;
 800a4b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	22ff      	movs	r2, #255	; 0xff
 800a4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4ba:	f001 fc8b 	bl	800bdd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4be:	f001 fc59 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4ca:	e011      	b.n	800a4f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d012      	beq.n	800a4fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3310      	adds	r3, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fd2b 	bl	800af34 <xTaskRemoveFromEventList>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4e4:	f000 fe02 	bl	800b0ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	dce9      	bgt.n	800a4cc <prvUnlockQueue+0x60>
 800a4f8:	e000      	b.n	800a4fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	22ff      	movs	r2, #255	; 0xff
 800a500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a504:	f001 fc66 	bl	800bdd4 <vPortExitCritical>
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a518:	f001 fc2c 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	2b00      	cmp	r3, #0
 800a522:	d102      	bne.n	800a52a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e001      	b.n	800a52e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a52e:	f001 fc51 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a544:	f001 fc16 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a550:	429a      	cmp	r2, r3
 800a552:	d102      	bne.n	800a55a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a554:	2301      	movs	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e001      	b.n	800a55e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a55e:	f001 fc39 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a562:	68fb      	ldr	r3, [r7, #12]
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	e014      	b.n	800a5a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a57c:	4a0f      	ldr	r2, [pc, #60]	; (800a5bc <vQueueAddToRegistry+0x50>)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a588:	490c      	ldr	r1, [pc, #48]	; (800a5bc <vQueueAddToRegistry+0x50>)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a592:	4a0a      	ldr	r2, [pc, #40]	; (800a5bc <vQueueAddToRegistry+0x50>)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	4413      	add	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a59e:	e006      	b.n	800a5ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b07      	cmp	r3, #7
 800a5aa:	d9e7      	bls.n	800a57c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	3714      	adds	r7, #20
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	20004d0c 	.word	0x20004d0c

0800a5c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5d0:	f001 fbd0 	bl	800bd74 <vPortEnterCritical>
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5da:	b25b      	sxtb	r3, r3
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d103      	bne.n	800a5ea <vQueueWaitForMessageRestricted+0x2a>
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5f0:	b25b      	sxtb	r3, r3
 800a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f6:	d103      	bne.n	800a600 <vQueueWaitForMessageRestricted+0x40>
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a600:	f001 fbe8 	bl	800bdd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d106      	bne.n	800a61a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	3324      	adds	r3, #36	; 0x24
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	68b9      	ldr	r1, [r7, #8]
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fc61 	bl	800aedc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a61a:	6978      	ldr	r0, [r7, #20]
 800a61c:	f7ff ff26 	bl	800a46c <prvUnlockQueue>
	}
 800a620:	bf00      	nop
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08e      	sub	sp, #56	; 0x38
 800a62c:	af04      	add	r7, sp, #16
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10a      	bne.n	800a652 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	623b      	str	r3, [r7, #32]
}
 800a64e:	bf00      	nop
 800a650:	e7fe      	b.n	800a650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10a      	bne.n	800a66e <xTaskCreateStatic+0x46>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	61fb      	str	r3, [r7, #28]
}
 800a66a:	bf00      	nop
 800a66c:	e7fe      	b.n	800a66c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a66e:	23bc      	movs	r3, #188	; 0xbc
 800a670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2bbc      	cmp	r3, #188	; 0xbc
 800a676:	d00a      	beq.n	800a68e <xTaskCreateStatic+0x66>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	61bb      	str	r3, [r7, #24]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a68e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	2b00      	cmp	r3, #0
 800a694:	d01e      	beq.n	800a6d4 <xTaskCreateStatic+0xac>
 800a696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01b      	beq.n	800a6d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	9302      	str	r3, [sp, #8]
 800a6b6:	f107 0314 	add.w	r3, r7, #20
 800a6ba:	9301      	str	r3, [sp, #4]
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	68b9      	ldr	r1, [r7, #8]
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 f850 	bl	800a76c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6ce:	f000 f8f3 	bl	800a8b8 <prvAddNewTaskToReadyList>
 800a6d2:	e001      	b.n	800a6d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6d8:	697b      	ldr	r3, [r7, #20]
	}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3728      	adds	r7, #40	; 0x28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b08c      	sub	sp, #48	; 0x30
 800a6e6:	af04      	add	r7, sp, #16
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 fc5e 	bl	800bfb8 <pvPortMalloc>
 800a6fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00e      	beq.n	800a722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a704:	20bc      	movs	r0, #188	; 0xbc
 800a706:	f001 fc57 	bl	800bfb8 <pvPortMalloc>
 800a70a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	631a      	str	r2, [r3, #48]	; 0x30
 800a718:	e005      	b.n	800a726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a71a:	6978      	ldr	r0, [r7, #20]
 800a71c:	f001 fd18 	bl	800c150 <vPortFree>
 800a720:	e001      	b.n	800a726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a722:	2300      	movs	r3, #0
 800a724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d017      	beq.n	800a75c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a734:	88fa      	ldrh	r2, [r7, #6]
 800a736:	2300      	movs	r3, #0
 800a738:	9303      	str	r3, [sp, #12]
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	9302      	str	r3, [sp, #8]
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	68b9      	ldr	r1, [r7, #8]
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 f80e 	bl	800a76c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a750:	69f8      	ldr	r0, [r7, #28]
 800a752:	f000 f8b1 	bl	800a8b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a756:	2301      	movs	r3, #1
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	e002      	b.n	800a762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a75c:	f04f 33ff 	mov.w	r3, #4294967295
 800a760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a762:	69bb      	ldr	r3, [r7, #24]
	}
 800a764:	4618      	mov	r0, r3
 800a766:	3720      	adds	r7, #32
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	461a      	mov	r2, r3
 800a784:	21a5      	movs	r1, #165	; 0xa5
 800a786:	f001 ff3b 	bl	800c600 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a794:	3b01      	subs	r3, #1
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	f023 0307 	bic.w	r3, r3, #7
 800a7a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00a      	beq.n	800a7c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	617b      	str	r3, [r7, #20]
}
 800a7c0:	bf00      	nop
 800a7c2:	e7fe      	b.n	800a7c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01f      	beq.n	800a80a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	e012      	b.n	800a7f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	7819      	ldrb	r1, [r3, #0]
 800a7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	4413      	add	r3, r2
 800a7de:	3334      	adds	r3, #52	; 0x34
 800a7e0:	460a      	mov	r2, r1
 800a7e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b0f      	cmp	r3, #15
 800a7fa:	d9e9      	bls.n	800a7d0 <prvInitialiseNewTask+0x64>
 800a7fc:	e000      	b.n	800a800 <prvInitialiseNewTask+0x94>
			{
				break;
 800a7fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a808:	e003      	b.n	800a812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	2b37      	cmp	r3, #55	; 0x37
 800a816:	d901      	bls.n	800a81c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a818:	2337      	movs	r3, #55	; 0x37
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	2200      	movs	r2, #0
 800a82c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	3304      	adds	r3, #4
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f8be 	bl	80099b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	3318      	adds	r3, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff f8b9 	bl	80099b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	2200      	movs	r2, #0
 800a864:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	3354      	adds	r3, #84	; 0x54
 800a86c:	2260      	movs	r2, #96	; 0x60
 800a86e:	2100      	movs	r1, #0
 800a870:	4618      	mov	r0, r3
 800a872:	f001 fec5 	bl	800c600 <memset>
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <prvInitialiseNewTask+0x140>)
 800a87a:	659a      	str	r2, [r3, #88]	; 0x58
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	4a0c      	ldr	r2, [pc, #48]	; (800a8b0 <prvInitialiseNewTask+0x144>)
 800a880:	65da      	str	r2, [r3, #92]	; 0x5c
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	4a0b      	ldr	r2, [pc, #44]	; (800a8b4 <prvInitialiseNewTask+0x148>)
 800a886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	69b8      	ldr	r0, [r7, #24]
 800a88e:	f001 f941 	bl	800bb14 <pxPortInitialiseStack>
 800a892:	4602      	mov	r2, r0
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d002      	beq.n	800a8a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8a4:	bf00      	nop
 800a8a6:	3720      	adds	r7, #32
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	080114bc 	.word	0x080114bc
 800a8b0:	080114dc 	.word	0x080114dc
 800a8b4:	0801149c 	.word	0x0801149c

0800a8b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8c0:	f001 fa58 	bl	800bd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8c4:	4b2d      	ldr	r3, [pc, #180]	; (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a2c      	ldr	r2, [pc, #176]	; (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	; (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d109      	bne.n	800a8ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8d6:	4a2a      	ldr	r2, [pc, #168]	; (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8dc:	4b27      	ldr	r3, [pc, #156]	; (800a97c <prvAddNewTaskToReadyList+0xc4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d110      	bne.n	800a906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8e4:	f000 fc26 	bl	800b134 <prvInitialiseTaskLists>
 800a8e8:	e00d      	b.n	800a906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8ea:	4b26      	ldr	r3, [pc, #152]	; (800a984 <prvAddNewTaskToReadyList+0xcc>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8f2:	4b23      	ldr	r3, [pc, #140]	; (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d802      	bhi.n	800a906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a900:	4a1f      	ldr	r2, [pc, #124]	; (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a906:	4b20      	ldr	r3, [pc, #128]	; (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3301      	adds	r3, #1
 800a90c:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a90e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a910:	4b1d      	ldr	r3, [pc, #116]	; (800a988 <prvAddNewTaskToReadyList+0xd0>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91c:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <prvAddNewTaskToReadyList+0xd4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d903      	bls.n	800a92c <prvAddNewTaskToReadyList+0x74>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	4a18      	ldr	r2, [pc, #96]	; (800a98c <prvAddNewTaskToReadyList+0xd4>)
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	4613      	mov	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4a15      	ldr	r2, [pc, #84]	; (800a990 <prvAddNewTaskToReadyList+0xd8>)
 800a93a:	441a      	add	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3304      	adds	r3, #4
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f7ff f843 	bl	80099ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a948:	f001 fa44 	bl	800bdd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <prvAddNewTaskToReadyList+0xcc>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00e      	beq.n	800a972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <prvAddNewTaskToReadyList+0xc8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95e:	429a      	cmp	r2, r3
 800a960:	d207      	bcs.n	800a972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvAddNewTaskToReadyList+0xdc>)
 800a964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000e58 	.word	0x20000e58
 800a980:	20000984 	.word	0x20000984
 800a984:	20000e64 	.word	0x20000e64
 800a988:	20000e74 	.word	0x20000e74
 800a98c:	20000e60 	.word	0x20000e60
 800a990:	20000988 	.word	0x20000988
 800a994:	e000ed04 	.word	0xe000ed04

0800a998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d017      	beq.n	800a9da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9aa:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <vTaskDelay+0x60>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <vTaskDelay+0x30>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	60bb      	str	r3, [r7, #8]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9c8:	f000 f88a 	bl	800aae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 fcfe 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9d4:	f000 f892 	bl	800aafc <xTaskResumeAll>
 800a9d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d107      	bne.n	800a9f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <vTaskDelay+0x64>)
 800a9e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9e6:	601a      	str	r2, [r3, #0]
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20000e80 	.word	0x20000e80
 800a9fc:	e000ed04 	.word	0xe000ed04

0800aa00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	; 0x28
 800aa04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa0e:	463a      	mov	r2, r7
 800aa10:	1d39      	adds	r1, r7, #4
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe ff78 	bl	800990c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	9202      	str	r2, [sp, #8]
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	2300      	movs	r3, #0
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	460a      	mov	r2, r1
 800aa2e:	4924      	ldr	r1, [pc, #144]	; (800aac0 <vTaskStartScheduler+0xc0>)
 800aa30:	4824      	ldr	r0, [pc, #144]	; (800aac4 <vTaskStartScheduler+0xc4>)
 800aa32:	f7ff fdf9 	bl	800a628 <xTaskCreateStatic>
 800aa36:	4603      	mov	r3, r0
 800aa38:	4a23      	ldr	r2, [pc, #140]	; (800aac8 <vTaskStartScheduler+0xc8>)
 800aa3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa3c:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <vTaskStartScheduler+0xc8>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa44:	2301      	movs	r3, #1
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e001      	b.n	800aa4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d102      	bne.n	800aa5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa54:	f000 fd10 	bl	800b478 <xTimerCreateTimerTask>
 800aa58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d11b      	bne.n	800aa98 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	613b      	str	r3, [r7, #16]
}
 800aa72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa74:	4b15      	ldr	r3, [pc, #84]	; (800aacc <vTaskStartScheduler+0xcc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3354      	adds	r3, #84	; 0x54
 800aa7a:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <vTaskStartScheduler+0xd0>)
 800aa7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa7e:	4b15      	ldr	r3, [pc, #84]	; (800aad4 <vTaskStartScheduler+0xd4>)
 800aa80:	f04f 32ff 	mov.w	r2, #4294967295
 800aa84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <vTaskStartScheduler+0xd8>)
 800aa88:	2201      	movs	r2, #1
 800aa8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa8c:	4b13      	ldr	r3, [pc, #76]	; (800aadc <vTaskStartScheduler+0xdc>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa92:	f001 f8cd 	bl	800bc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa96:	e00e      	b.n	800aab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d10a      	bne.n	800aab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60fb      	str	r3, [r7, #12]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <vTaskStartScheduler+0xb4>
}
 800aab6:	bf00      	nop
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	080112f4 	.word	0x080112f4
 800aac4:	0800b105 	.word	0x0800b105
 800aac8:	20000e7c 	.word	0x20000e7c
 800aacc:	20000984 	.word	0x20000984
 800aad0:	20000010 	.word	0x20000010
 800aad4:	20000e78 	.word	0x20000e78
 800aad8:	20000e64 	.word	0x20000e64
 800aadc:	20000e5c 	.word	0x20000e5c

0800aae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <vTaskSuspendAll+0x18>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	4a03      	ldr	r2, [pc, #12]	; (800aaf8 <vTaskSuspendAll+0x18>)
 800aaec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aaee:	bf00      	nop
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000e80 	.word	0x20000e80

0800aafc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab0a:	4b42      	ldr	r3, [pc, #264]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10a      	bne.n	800ab28 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	603b      	str	r3, [r7, #0]
}
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab28:	f001 f924 	bl	800bd74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab2c:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	4a38      	ldr	r2, [pc, #224]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab36:	4b37      	ldr	r3, [pc, #220]	; (800ac14 <xTaskResumeAll+0x118>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d162      	bne.n	800ac04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab3e:	4b36      	ldr	r3, [pc, #216]	; (800ac18 <xTaskResumeAll+0x11c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d05e      	beq.n	800ac04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab46:	e02f      	b.n	800aba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab48:	4b34      	ldr	r3, [pc, #208]	; (800ac1c <xTaskResumeAll+0x120>)
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	3318      	adds	r3, #24
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe ff97 	bl	8009a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe ff92 	bl	8009a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab68:	4b2d      	ldr	r3, [pc, #180]	; (800ac20 <xTaskResumeAll+0x124>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d903      	bls.n	800ab78 <xTaskResumeAll+0x7c>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	4a2a      	ldr	r2, [pc, #168]	; (800ac20 <xTaskResumeAll+0x124>)
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4a27      	ldr	r2, [pc, #156]	; (800ac24 <xTaskResumeAll+0x128>)
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7fe ff1d 	bl	80099ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab98:	4b23      	ldr	r3, [pc, #140]	; (800ac28 <xTaskResumeAll+0x12c>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d302      	bcc.n	800aba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aba2:	4b22      	ldr	r3, [pc, #136]	; (800ac2c <xTaskResumeAll+0x130>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aba8:	4b1c      	ldr	r3, [pc, #112]	; (800ac1c <xTaskResumeAll+0x120>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1cb      	bne.n	800ab48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abb6:	f000 fb5f 	bl	800b278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abba:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <xTaskResumeAll+0x134>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d010      	beq.n	800abe8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abc6:	f000 f847 	bl	800ac58 <xTaskIncrementTick>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abd0:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <xTaskResumeAll+0x130>)
 800abd2:	2201      	movs	r2, #1
 800abd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3b01      	subs	r3, #1
 800abda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1f1      	bne.n	800abc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800abe2:	4b13      	ldr	r3, [pc, #76]	; (800ac30 <xTaskResumeAll+0x134>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <xTaskResumeAll+0x130>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d009      	beq.n	800ac04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abf0:	2301      	movs	r3, #1
 800abf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abf4:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <xTaskResumeAll+0x138>)
 800abf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac04:	f001 f8e6 	bl	800bdd4 <vPortExitCritical>

	return xAlreadyYielded;
 800ac08:	68bb      	ldr	r3, [r7, #8]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20000e80 	.word	0x20000e80
 800ac18:	20000e58 	.word	0x20000e58
 800ac1c:	20000e18 	.word	0x20000e18
 800ac20:	20000e60 	.word	0x20000e60
 800ac24:	20000988 	.word	0x20000988
 800ac28:	20000984 	.word	0x20000984
 800ac2c:	20000e6c 	.word	0x20000e6c
 800ac30:	20000e68 	.word	0x20000e68
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac3e:	4b05      	ldr	r3, [pc, #20]	; (800ac54 <xTaskGetTickCount+0x1c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac44:	687b      	ldr	r3, [r7, #4]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	20000e5c 	.word	0x20000e5c

0800ac58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac62:	4b4f      	ldr	r3, [pc, #316]	; (800ada0 <xTaskIncrementTick+0x148>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	f040 808f 	bne.w	800ad8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac6c:	4b4d      	ldr	r3, [pc, #308]	; (800ada4 <xTaskIncrementTick+0x14c>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3301      	adds	r3, #1
 800ac72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac74:	4a4b      	ldr	r2, [pc, #300]	; (800ada4 <xTaskIncrementTick+0x14c>)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d120      	bne.n	800acc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac80:	4b49      	ldr	r3, [pc, #292]	; (800ada8 <xTaskIncrementTick+0x150>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00a      	beq.n	800aca0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	603b      	str	r3, [r7, #0]
}
 800ac9c:	bf00      	nop
 800ac9e:	e7fe      	b.n	800ac9e <xTaskIncrementTick+0x46>
 800aca0:	4b41      	ldr	r3, [pc, #260]	; (800ada8 <xTaskIncrementTick+0x150>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	4b41      	ldr	r3, [pc, #260]	; (800adac <xTaskIncrementTick+0x154>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3f      	ldr	r2, [pc, #252]	; (800ada8 <xTaskIncrementTick+0x150>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	4a3f      	ldr	r2, [pc, #252]	; (800adac <xTaskIncrementTick+0x154>)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6013      	str	r3, [r2, #0]
 800acb4:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <xTaskIncrementTick+0x158>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	4a3d      	ldr	r2, [pc, #244]	; (800adb0 <xTaskIncrementTick+0x158>)
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	f000 fadb 	bl	800b278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acc2:	4b3c      	ldr	r3, [pc, #240]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d349      	bcc.n	800ad60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800accc:	4b36      	ldr	r3, [pc, #216]	; (800ada8 <xTaskIncrementTick+0x150>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd6:	4b37      	ldr	r3, [pc, #220]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acd8:	f04f 32ff 	mov.w	r2, #4294967295
 800acdc:	601a      	str	r2, [r3, #0]
					break;
 800acde:	e03f      	b.n	800ad60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ace0:	4b31      	ldr	r3, [pc, #196]	; (800ada8 <xTaskIncrementTick+0x150>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d203      	bcs.n	800ad00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800acf8:	4a2e      	ldr	r2, [pc, #184]	; (800adb4 <xTaskIncrementTick+0x15c>)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acfe:	e02f      	b.n	800ad60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe febf 	bl	8009a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d004      	beq.n	800ad1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	3318      	adds	r3, #24
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fe feb6 	bl	8009a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad20:	4b25      	ldr	r3, [pc, #148]	; (800adb8 <xTaskIncrementTick+0x160>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d903      	bls.n	800ad30 <xTaskIncrementTick+0xd8>
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2c:	4a22      	ldr	r2, [pc, #136]	; (800adb8 <xTaskIncrementTick+0x160>)
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad34:	4613      	mov	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	4413      	add	r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	4a1f      	ldr	r2, [pc, #124]	; (800adbc <xTaskIncrementTick+0x164>)
 800ad3e:	441a      	add	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3304      	adds	r3, #4
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fe fe41 	bl	80099ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4b1b      	ldr	r3, [pc, #108]	; (800adc0 <xTaskIncrementTick+0x168>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d3b8      	bcc.n	800accc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad5e:	e7b5      	b.n	800accc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad60:	4b17      	ldr	r3, [pc, #92]	; (800adc0 <xTaskIncrementTick+0x168>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad66:	4915      	ldr	r1, [pc, #84]	; (800adbc <xTaskIncrementTick+0x164>)
 800ad68:	4613      	mov	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d901      	bls.n	800ad7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad7c:	4b11      	ldr	r3, [pc, #68]	; (800adc4 <xTaskIncrementTick+0x16c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	e004      	b.n	800ad94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad8a:	4b0f      	ldr	r3, [pc, #60]	; (800adc8 <xTaskIncrementTick+0x170>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	4a0d      	ldr	r2, [pc, #52]	; (800adc8 <xTaskIncrementTick+0x170>)
 800ad92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad94:	697b      	ldr	r3, [r7, #20]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000e80 	.word	0x20000e80
 800ada4:	20000e5c 	.word	0x20000e5c
 800ada8:	20000e10 	.word	0x20000e10
 800adac:	20000e14 	.word	0x20000e14
 800adb0:	20000e70 	.word	0x20000e70
 800adb4:	20000e78 	.word	0x20000e78
 800adb8:	20000e60 	.word	0x20000e60
 800adbc:	20000988 	.word	0x20000988
 800adc0:	20000984 	.word	0x20000984
 800adc4:	20000e6c 	.word	0x20000e6c
 800adc8:	20000e68 	.word	0x20000e68

0800adcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800add2:	4b2a      	ldr	r3, [pc, #168]	; (800ae7c <vTaskSwitchContext+0xb0>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adda:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <vTaskSwitchContext+0xb4>)
 800addc:	2201      	movs	r2, #1
 800adde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ade0:	e046      	b.n	800ae70 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ade2:	4b27      	ldr	r3, [pc, #156]	; (800ae80 <vTaskSwitchContext+0xb4>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade8:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <vTaskSwitchContext+0xb8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e010      	b.n	800ae12 <vTaskSwitchContext+0x46>
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <vTaskSwitchContext+0x40>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	607b      	str	r3, [r7, #4]
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <vTaskSwitchContext+0x3e>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
 800ae12:	491d      	ldr	r1, [pc, #116]	; (800ae88 <vTaskSwitchContext+0xbc>)
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0e4      	beq.n	800adf0 <vTaskSwitchContext+0x24>
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	4413      	add	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4a15      	ldr	r2, [pc, #84]	; (800ae88 <vTaskSwitchContext+0xbc>)
 800ae32:	4413      	add	r3, r2
 800ae34:	60bb      	str	r3, [r7, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	605a      	str	r2, [r3, #4]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	3308      	adds	r3, #8
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d104      	bne.n	800ae56 <vTaskSwitchContext+0x8a>
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	685a      	ldr	r2, [r3, #4]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	605a      	str	r2, [r3, #4]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <vTaskSwitchContext+0xc0>)
 800ae5e:	6013      	str	r3, [r2, #0]
 800ae60:	4a08      	ldr	r2, [pc, #32]	; (800ae84 <vTaskSwitchContext+0xb8>)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae66:	4b09      	ldr	r3, [pc, #36]	; (800ae8c <vTaskSwitchContext+0xc0>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3354      	adds	r3, #84	; 0x54
 800ae6c:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <vTaskSwitchContext+0xc4>)
 800ae6e:	6013      	str	r3, [r2, #0]
}
 800ae70:	bf00      	nop
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	20000e80 	.word	0x20000e80
 800ae80:	20000e6c 	.word	0x20000e6c
 800ae84:	20000e60 	.word	0x20000e60
 800ae88:	20000988 	.word	0x20000988
 800ae8c:	20000984 	.word	0x20000984
 800ae90:	20000010 	.word	0x20000010

0800ae94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60fb      	str	r3, [r7, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	e7fe      	b.n	800aeb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <vTaskPlaceOnEventList+0x44>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3318      	adds	r3, #24
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fe fda7 	bl	8009a16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aec8:	2101      	movs	r1, #1
 800aeca:	6838      	ldr	r0, [r7, #0]
 800aecc:	f000 fa80 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
}
 800aed0:	bf00      	nop
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20000984 	.word	0x20000984

0800aedc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d10a      	bne.n	800af04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	617b      	str	r3, [r7, #20]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af04:	4b0a      	ldr	r3, [pc, #40]	; (800af30 <vTaskPlaceOnEventListRestricted+0x54>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3318      	adds	r3, #24
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f7fe fd5e 	bl	80099ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295
 800af1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	68b8      	ldr	r0, [r7, #8]
 800af22:	f000 fa55 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
	}
 800af26:	bf00      	nop
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	20000984 	.word	0x20000984

0800af34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10a      	bne.n	800af60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60fb      	str	r3, [r7, #12]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	3318      	adds	r3, #24
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fd8f 	bl	8009a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af6a:	4b1e      	ldr	r3, [pc, #120]	; (800afe4 <xTaskRemoveFromEventList+0xb0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d11d      	bne.n	800afae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	3304      	adds	r3, #4
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe fd86 	bl	8009a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af80:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <xTaskRemoveFromEventList+0xb4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d903      	bls.n	800af90 <xTaskRemoveFromEventList+0x5c>
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	4a16      	ldr	r2, [pc, #88]	; (800afe8 <xTaskRemoveFromEventList+0xb4>)
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4a13      	ldr	r2, [pc, #76]	; (800afec <xTaskRemoveFromEventList+0xb8>)
 800af9e:	441a      	add	r2, r3
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	3304      	adds	r3, #4
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	f7fe fd11 	bl	80099ce <vListInsertEnd>
 800afac:	e005      	b.n	800afba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	3318      	adds	r3, #24
 800afb2:	4619      	mov	r1, r3
 800afb4:	480e      	ldr	r0, [pc, #56]	; (800aff0 <xTaskRemoveFromEventList+0xbc>)
 800afb6:	f7fe fd0a 	bl	80099ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <xTaskRemoveFromEventList+0xc0>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d905      	bls.n	800afd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afc8:	2301      	movs	r3, #1
 800afca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afcc:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <xTaskRemoveFromEventList+0xc4>)
 800afce:	2201      	movs	r2, #1
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	e001      	b.n	800afd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afd8:	697b      	ldr	r3, [r7, #20]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000e80 	.word	0x20000e80
 800afe8:	20000e60 	.word	0x20000e60
 800afec:	20000988 	.word	0x20000988
 800aff0:	20000e18 	.word	0x20000e18
 800aff4:	20000984 	.word	0x20000984
 800aff8:	20000e6c 	.word	0x20000e6c

0800affc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <vTaskInternalSetTimeOutState+0x24>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b00c:	4b05      	ldr	r3, [pc, #20]	; (800b024 <vTaskInternalSetTimeOutState+0x28>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	605a      	str	r2, [r3, #4]
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	20000e70 	.word	0x20000e70
 800b024:	20000e5c 	.word	0x20000e5c

0800b028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b088      	sub	sp, #32
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	613b      	str	r3, [r7, #16]
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10a      	bne.n	800b06a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	60fb      	str	r3, [r7, #12]
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b06a:	f000 fe83 	bl	800bd74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b06e:	4b1d      	ldr	r3, [pc, #116]	; (800b0e4 <xTaskCheckForTimeOut+0xbc>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	69ba      	ldr	r2, [r7, #24]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d102      	bne.n	800b08e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b088:	2300      	movs	r3, #0
 800b08a:	61fb      	str	r3, [r7, #28]
 800b08c:	e023      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681a      	ldr	r2, [r3, #0]
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <xTaskCheckForTimeOut+0xc0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	429a      	cmp	r2, r3
 800b098:	d007      	beq.n	800b0aa <xTaskCheckForTimeOut+0x82>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	61fb      	str	r3, [r7, #28]
 800b0a8:	e015      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d20b      	bcs.n	800b0cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	1ad2      	subs	r2, r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff ff9b 	bl	800affc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	e004      	b.n	800b0d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0d6:	f000 fe7d 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800b0da:	69fb      	ldr	r3, [r7, #28]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3720      	adds	r7, #32
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	20000e5c 	.word	0x20000e5c
 800b0e8:	20000e70 	.word	0x20000e70

0800b0ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0f0:	4b03      	ldr	r3, [pc, #12]	; (800b100 <vTaskMissedYield+0x14>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000e6c 	.word	0x20000e6c

0800b104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b10c:	f000 f852 	bl	800b1b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b110:	4b06      	ldr	r3, [pc, #24]	; (800b12c <prvIdleTask+0x28>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d9f9      	bls.n	800b10c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <prvIdleTask+0x2c>)
 800b11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b128:	e7f0      	b.n	800b10c <prvIdleTask+0x8>
 800b12a:	bf00      	nop
 800b12c:	20000988 	.word	0x20000988
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	e00c      	b.n	800b15a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	4613      	mov	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	4a12      	ldr	r2, [pc, #72]	; (800b194 <prvInitialiseTaskLists+0x60>)
 800b14c:	4413      	add	r3, r2
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fc10 	bl	8009974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	607b      	str	r3, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b37      	cmp	r3, #55	; 0x37
 800b15e:	d9ef      	bls.n	800b140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b160:	480d      	ldr	r0, [pc, #52]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b162:	f7fe fc07 	bl	8009974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b166:	480d      	ldr	r0, [pc, #52]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b168:	f7fe fc04 	bl	8009974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b16c:	480c      	ldr	r0, [pc, #48]	; (800b1a0 <prvInitialiseTaskLists+0x6c>)
 800b16e:	f7fe fc01 	bl	8009974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b172:	480c      	ldr	r0, [pc, #48]	; (800b1a4 <prvInitialiseTaskLists+0x70>)
 800b174:	f7fe fbfe 	bl	8009974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b178:	480b      	ldr	r0, [pc, #44]	; (800b1a8 <prvInitialiseTaskLists+0x74>)
 800b17a:	f7fe fbfb 	bl	8009974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b17e:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <prvInitialiseTaskLists+0x78>)
 800b180:	4a05      	ldr	r2, [pc, #20]	; (800b198 <prvInitialiseTaskLists+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b184:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <prvInitialiseTaskLists+0x7c>)
 800b186:	4a05      	ldr	r2, [pc, #20]	; (800b19c <prvInitialiseTaskLists+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000988 	.word	0x20000988
 800b198:	20000de8 	.word	0x20000de8
 800b19c:	20000dfc 	.word	0x20000dfc
 800b1a0:	20000e18 	.word	0x20000e18
 800b1a4:	20000e2c 	.word	0x20000e2c
 800b1a8:	20000e44 	.word	0x20000e44
 800b1ac:	20000e10 	.word	0x20000e10
 800b1b0:	20000e14 	.word	0x20000e14

0800b1b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1ba:	e019      	b.n	800b1f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1bc:	f000 fdda 	bl	800bd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c0:	4b10      	ldr	r3, [pc, #64]	; (800b204 <prvCheckTasksWaitingTermination+0x50>)
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe fc5b 	bl	8009a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <prvCheckTasksWaitingTermination+0x54>)
 800b1da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1dc:	4b0b      	ldr	r3, [pc, #44]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	4a0a      	ldr	r2, [pc, #40]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1e6:	f000 fdf5 	bl	800bdd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f810 	bl	800b210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <prvCheckTasksWaitingTermination+0x58>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e1      	bne.n	800b1bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000e2c 	.word	0x20000e2c
 800b208:	20000e58 	.word	0x20000e58
 800b20c:	20000e40 	.word	0x20000e40

0800b210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	3354      	adds	r3, #84	; 0x54
 800b21c:	4618      	mov	r0, r3
 800b21e:	f001 ff19 	bl	800d054 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d108      	bne.n	800b23e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b230:	4618      	mov	r0, r3
 800b232:	f000 ff8d 	bl	800c150 <vPortFree>
				vPortFree( pxTCB );
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 ff8a 	bl	800c150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b23c:	e018      	b.n	800b270 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b244:	2b01      	cmp	r3, #1
 800b246:	d103      	bne.n	800b250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 ff81 	bl	800c150 <vPortFree>
	}
 800b24e:	e00f      	b.n	800b270 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b256:	2b02      	cmp	r3, #2
 800b258:	d00a      	beq.n	800b270 <prvDeleteTCB+0x60>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	60fb      	str	r3, [r7, #12]
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <prvDeleteTCB+0x5e>
	}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b290:	e008      	b.n	800b2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2a2:	6013      	str	r3, [r2, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000e10 	.word	0x20000e10
 800b2b4:	20000e78 	.word	0x20000e78

0800b2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <xTaskGetSchedulerState+0x34>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	607b      	str	r3, [r7, #4]
 800b2ca:	e008      	b.n	800b2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <xTaskGetSchedulerState+0x38>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	e001      	b.n	800b2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2de:	687b      	ldr	r3, [r7, #4]
	}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	20000e64 	.word	0x20000e64
 800b2f0:	20000e80 	.word	0x20000e80

0800b2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d056      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <xTaskPriorityDisinherit+0xd0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	429a      	cmp	r2, r3
 800b312:	d00a      	beq.n	800b32a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60bb      	str	r3, [r7, #8]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b34c:	1e5a      	subs	r2, r3, #1
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d02c      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b362:	2b00      	cmp	r3, #0
 800b364:	d128      	bne.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	3304      	adds	r3, #4
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fb8c 	bl	8009a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d903      	bls.n	800b398 <xTaskPriorityDisinherit+0xa4>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	4a0c      	ldr	r2, [pc, #48]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <xTaskPriorityDisinherit+0xd8>)
 800b3a6:	441a      	add	r2, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7fe fb0d 	bl	80099ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3b8:	697b      	ldr	r3, [r7, #20]
	}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000984 	.word	0x20000984
 800b3c8:	20000e60 	.word	0x20000e60
 800b3cc:	20000988 	.word	0x20000988

0800b3d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e0:	4b20      	ldr	r3, [pc, #128]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe fb4e 	bl	8009a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d10a      	bne.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3fa:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4819      	ldr	r0, [pc, #100]	; (800b468 <prvAddCurrentTaskToDelayedList+0x98>)
 800b404:	f7fe fae3 	bl	80099ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b408:	e026      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4413      	add	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b412:	4b14      	ldr	r3, [pc, #80]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d209      	bcs.n	800b436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fe faf1 	bl	8009a16 <vListInsert>
}
 800b434:	e010      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b436:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fae7 	bl	8009a16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d202      	bcs.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b452:	4a08      	ldr	r2, [pc, #32]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6013      	str	r3, [r2, #0]
}
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000e5c 	.word	0x20000e5c
 800b464:	20000984 	.word	0x20000984
 800b468:	20000e44 	.word	0x20000e44
 800b46c:	20000e14 	.word	0x20000e14
 800b470:	20000e10 	.word	0x20000e10
 800b474:	20000e78 	.word	0x20000e78

0800b478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b482:	f000 fb07 	bl	800ba94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b486:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <xTimerCreateTimerTask+0x80>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d021      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b496:	1d3a      	adds	r2, r7, #4
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fa4d 	bl	8009940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	9202      	str	r2, [sp, #8]
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	4910      	ldr	r1, [pc, #64]	; (800b4fc <xTimerCreateTimerTask+0x84>)
 800b4ba:	4811      	ldr	r0, [pc, #68]	; (800b500 <xTimerCreateTimerTask+0x88>)
 800b4bc:	f7ff f8b4 	bl	800a628 <xTaskCreateStatic>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	4a10      	ldr	r2, [pc, #64]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4ee:	697b      	ldr	r3, [r7, #20]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20000eb4 	.word	0x20000eb4
 800b4fc:	080112fc 	.word	0x080112fc
 800b500:	0800b63d 	.word	0x0800b63d
 800b504:	20000eb8 	.word	0x20000eb8

0800b508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d02a      	beq.n	800b594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b05      	cmp	r3, #5
 800b54e:	dc18      	bgt.n	800b582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b550:	f7ff feb2 	bl	800b2b8 <xTaskGetSchedulerState>
 800b554:	4603      	mov	r3, r0
 800b556:	2b02      	cmp	r3, #2
 800b558:	d109      	bne.n	800b56e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f107 0110 	add.w	r1, r7, #16
 800b562:	2300      	movs	r3, #0
 800b564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b566:	f7fe fbf7 	bl	8009d58 <xQueueGenericSend>
 800b56a:	6278      	str	r0, [r7, #36]	; 0x24
 800b56c:	e012      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f107 0110 	add.w	r1, r7, #16
 800b576:	2300      	movs	r3, #0
 800b578:	2200      	movs	r2, #0
 800b57a:	f7fe fbed 	bl	8009d58 <xQueueGenericSend>
 800b57e:	6278      	str	r0, [r7, #36]	; 0x24
 800b580:	e008      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b582:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f107 0110 	add.w	r1, r7, #16
 800b58a:	2300      	movs	r3, #0
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	f7fe fce1 	bl	8009f54 <xQueueGenericSendFromISR>
 800b592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b596:	4618      	mov	r0, r3
 800b598:	3728      	adds	r7, #40	; 0x28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000eb4 	.word	0x20000eb4

0800b5a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	4b22      	ldr	r3, [pc, #136]	; (800b638 <prvProcessExpiredTimer+0x94>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe fa63 	bl	8009a88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d022      	beq.n	800b616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	18d1      	adds	r1, r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f000 f8d1 	bl	800b784 <prvInsertTimerInActiveList>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01f      	beq.n	800b628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6978      	ldr	r0, [r7, #20]
 800b5f4:	f7ff ff88 	bl	800b508 <xTimerGenericCommand>
 800b5f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d113      	bne.n	800b628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61c:	f023 0301 	bic.w	r3, r3, #1
 800b620:	b2da      	uxtb	r2, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	6978      	ldr	r0, [r7, #20]
 800b62e:	4798      	blx	r3
}
 800b630:	bf00      	nop
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20000eac 	.word	0x20000eac

0800b63c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b644:	f107 0308 	add.w	r3, r7, #8
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 f857 	bl	800b6fc <prvGetNextExpireTime>
 800b64e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4619      	mov	r1, r3
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 f803 	bl	800b660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b65a:	f000 f8d5 	bl	800b808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b65e:	e7f1      	b.n	800b644 <prvTimerTask+0x8>

0800b660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b66a:	f7ff fa39 	bl	800aae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f866 	bl	800b744 <prvSampleTimeNow>
 800b678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d130      	bne.n	800b6e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d806      	bhi.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b68e:	f7ff fa35 	bl	800aafc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b692:	68f9      	ldr	r1, [r7, #12]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ff85 	bl	800b5a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b69a:	e024      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <prvProcessTimerOrBlockTask+0x90>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <prvProcessTimerOrBlockTask+0x50>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e000      	b.n	800b6b2 <prvProcessTimerOrBlockTask+0x52>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6b4:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <prvProcessTimerOrBlockTask+0x94>)
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f7fe ff7d 	bl	800a5c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6c6:	f7ff fa19 	bl	800aafc <xTaskResumeAll>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10a      	bne.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <prvProcessTimerOrBlockTask+0x98>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
}
 800b6e0:	e001      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6e2:	f7ff fa0b 	bl	800aafc <xTaskResumeAll>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000eb0 	.word	0x20000eb0
 800b6f4:	20000eb4 	.word	0x20000eb4
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <prvGetNextExpireTime+0x16>
 800b70e:	2201      	movs	r2, #1
 800b710:	e000      	b.n	800b714 <prvGetNextExpireTime+0x18>
 800b712:	2200      	movs	r2, #0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b720:	4b07      	ldr	r3, [pc, #28]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e001      	b.n	800b730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b730:	68fb      	ldr	r3, [r7, #12]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	20000eac 	.word	0x20000eac

0800b744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b74c:	f7ff fa74 	bl	800ac38 <xTaskGetTickCount>
 800b750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d205      	bcs.n	800b768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b75c:	f000 f936 	bl	800b9cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e002      	b.n	800b76e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b76e:	4a04      	ldr	r2, [pc, #16]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b774:	68fb      	ldr	r3, [r7, #12]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000ebc 	.word	0x20000ebc

0800b784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d812      	bhi.n	800b7d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e01b      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7be:	4b10      	ldr	r3, [pc, #64]	; (800b800 <prvInsertTimerInActiveList+0x7c>)
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f7fe f924 	bl	8009a16 <vListInsert>
 800b7ce:	e012      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d206      	bcs.n	800b7e6 <prvInsertTimerInActiveList+0x62>
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d302      	bcc.n	800b7e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e007      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <prvInsertTimerInActiveList+0x80>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	f7fe f910 	bl	8009a16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7f6:	697b      	ldr	r3, [r7, #20]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20000eb0 	.word	0x20000eb0
 800b804:	20000eac 	.word	0x20000eac

0800b808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	; 0x38
 800b80c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b80e:	e0ca      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da18      	bge.n	800b848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b816:	1d3b      	adds	r3, r7, #4
 800b818:	3304      	adds	r3, #4
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	61fb      	str	r3, [r7, #28]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83e:	6850      	ldr	r0, [r2, #4]
 800b840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b842:	6892      	ldr	r2, [r2, #8]
 800b844:	4611      	mov	r1, r2
 800b846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f2c0 80aa 	blt.w	800b9a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe f911 	bl	8009a88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b866:	463b      	mov	r3, r7
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ff6b 	bl	800b744 <prvSampleTimeNow>
 800b86e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b09      	cmp	r3, #9
 800b874:	f200 8097 	bhi.w	800b9a6 <prvProcessReceivedCommands+0x19e>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <prvProcessReceivedCommands+0x78>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b8a9 	.word	0x0800b8a9
 800b884:	0800b8a9 	.word	0x0800b8a9
 800b888:	0800b8a9 	.word	0x0800b8a9
 800b88c:	0800b91d 	.word	0x0800b91d
 800b890:	0800b931 	.word	0x0800b931
 800b894:	0800b97b 	.word	0x0800b97b
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8a9 	.word	0x0800b8a9
 800b8a0:	0800b91d 	.word	0x0800b91d
 800b8a4:	0800b931 	.word	0x0800b931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	18d1      	adds	r1, r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c8:	f7ff ff5c 	bl	800b784 <prvInsertTimerInActiveList>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d069      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d05e      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	441a      	add	r2, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f7ff fe05 	bl	800b508 <xTimerGenericCommand>
 800b8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d14f      	bne.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	61bb      	str	r3, [r7, #24]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b922:	f023 0301 	bic.w	r3, r3, #1
 800b926:	b2da      	uxtb	r2, r3
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b92e:	e03a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	617b      	str	r3, [r7, #20]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	18d1      	adds	r1, r2, r3
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b974:	f7ff ff06 	bl	800b784 <prvInsertTimerInActiveList>
					break;
 800b978:	e015      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98a:	f000 fbe1 	bl	800c150 <vPortFree>
 800b98e:	e00a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b996:	f023 0301 	bic.w	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9a2:	e000      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <prvProcessReceivedCommands+0x1c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1d39      	adds	r1, r7, #4
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fb6c 	bl	800a08c <xQueueReceive>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f47f af2a 	bne.w	800b810 <prvProcessReceivedCommands+0x8>
	}
}
 800b9bc:	bf00      	nop
 800b9be:	bf00      	nop
 800b9c0:	3730      	adds	r7, #48	; 0x30
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000eb4 	.word	0x20000eb4

0800b9cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9d2:	e048      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9d4:	4b2d      	ldr	r3, [pc, #180]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9de:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe f84b 	bl	8009a88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d02e      	beq.n	800ba66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d90e      	bls.n	800ba38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd fff0 	bl	8009a16 <vListInsert>
 800ba36:	e016      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	2100      	movs	r1, #0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fd60 	bl	800b508 <xTimerGenericCommand>
 800ba48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	603b      	str	r3, [r7, #0]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1b1      	bne.n	800b9d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba76:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a04      	ldr	r2, [pc, #16]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba7e:	4a04      	ldr	r2, [pc, #16]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	6013      	str	r3, [r2, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20000eac 	.word	0x20000eac
 800ba90:	20000eb0 	.word	0x20000eb0

0800ba94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba9a:	f000 f96b 	bl	800bd74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba9e:	4b15      	ldr	r3, [pc, #84]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d120      	bne.n	800bae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800baa6:	4814      	ldr	r0, [pc, #80]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800baa8:	f7fd ff64 	bl	8009974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800baac:	4813      	ldr	r0, [pc, #76]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800baae:	f7fd ff61 	bl	8009974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bab2:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <prvCheckForValidListAndQueue+0x6c>)
 800bab4:	4a10      	ldr	r2, [pc, #64]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800bab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bab8:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <prvCheckForValidListAndQueue+0x70>)
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800babc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800babe:	2300      	movs	r3, #0
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <prvCheckForValidListAndQueue+0x74>)
 800bac4:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <prvCheckForValidListAndQueue+0x78>)
 800bac6:	2110      	movs	r1, #16
 800bac8:	200a      	movs	r0, #10
 800baca:	f7fe f86f 	bl	8009bac <xQueueGenericCreateStatic>
 800bace:	4603      	mov	r3, r0
 800bad0:	4a08      	ldr	r2, [pc, #32]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	490b      	ldr	r1, [pc, #44]	; (800bb10 <prvCheckForValidListAndQueue+0x7c>)
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fd42 	bl	800a56c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bae8:	f000 f974 	bl	800bdd4 <vPortExitCritical>
}
 800baec:	bf00      	nop
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20000eb4 	.word	0x20000eb4
 800baf8:	20000e84 	.word	0x20000e84
 800bafc:	20000e98 	.word	0x20000e98
 800bb00:	20000eac 	.word	0x20000eac
 800bb04:	20000eb0 	.word	0x20000eb0
 800bb08:	20000f60 	.word	0x20000f60
 800bb0c:	20000ec0 	.word	0x20000ec0
 800bb10:	08011304 	.word	0x08011304

0800bb14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3b04      	subs	r3, #4
 800bb24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3b04      	subs	r3, #4
 800bb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f023 0201 	bic.w	r2, r3, #1
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3b04      	subs	r3, #4
 800bb42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb44:	4a0c      	ldr	r2, [pc, #48]	; (800bb78 <pxPortInitialiseStack+0x64>)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3b14      	subs	r3, #20
 800bb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b04      	subs	r3, #4
 800bb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f06f 0202 	mvn.w	r2, #2
 800bb62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3b20      	subs	r3, #32
 800bb68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	0800bb7d 	.word	0x0800bb7d

0800bb7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb86:	4b12      	ldr	r3, [pc, #72]	; (800bbd0 <prvTaskExitError+0x54>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8e:	d00a      	beq.n	800bba6 <prvTaskExitError+0x2a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	60fb      	str	r3, [r7, #12]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <prvTaskExitError+0x28>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbba:	bf00      	nop
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0fc      	beq.n	800bbbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	2000000c 	.word	0x2000000c
	...

0800bbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <pxCurrentTCBConst2>)
 800bbe2:	6819      	ldr	r1, [r3, #0]
 800bbe4:	6808      	ldr	r0, [r1, #0]
 800bbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	f380 8809 	msr	PSP, r0
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f04f 0000 	mov.w	r0, #0
 800bbf6:	f380 8811 	msr	BASEPRI, r0
 800bbfa:	4770      	bx	lr
 800bbfc:	f3af 8000 	nop.w

0800bc00 <pxCurrentTCBConst2>:
 800bc00:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop

0800bc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc08:	4808      	ldr	r0, [pc, #32]	; (800bc2c <prvPortStartFirstTask+0x24>)
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f380 8808 	msr	MSP, r0
 800bc12:	f04f 0000 	mov.w	r0, #0
 800bc16:	f380 8814 	msr	CONTROL, r0
 800bc1a:	b662      	cpsie	i
 800bc1c:	b661      	cpsie	f
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	df00      	svc	0
 800bc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed08 	.word	0xe000ed08

0800bc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc36:	4b46      	ldr	r3, [pc, #280]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a46      	ldr	r2, [pc, #280]	; (800bd54 <xPortStartScheduler+0x124>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10a      	bne.n	800bc56 <xPortStartScheduler+0x26>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a3f      	ldr	r2, [pc, #252]	; (800bd58 <xPortStartScheduler+0x128>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d10a      	bne.n	800bc76 <xPortStartScheduler+0x46>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc76:	4b39      	ldr	r3, [pc, #228]	; (800bd5c <xPortStartScheduler+0x12c>)
 800bc78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	22ff      	movs	r2, #255	; 0xff
 800bc86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <xPortStartScheduler+0x130>)
 800bc9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc9e:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bca4:	e009      	b.n	800bcba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bca6:	4b2f      	ldr	r3, [pc, #188]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc2:	2b80      	cmp	r3, #128	; 0x80
 800bcc4:	d0ef      	beq.n	800bca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcc6:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f1c3 0307 	rsb	r3, r3, #7
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d00a      	beq.n	800bce8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bce8:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcfa:	4a1a      	ldr	r2, [pc, #104]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd06:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd12:	4b15      	ldr	r3, [pc, #84]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a14      	ldr	r2, [pc, #80]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd1e:	f000 f8dd 	bl	800bedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <xPortStartScheduler+0x13c>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd28:	f000 f8fc 	bl	800bf24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0f      	ldr	r2, [pc, #60]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd38:	f7ff ff66 	bl	800bc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd3c:	f7ff f846 	bl	800adcc <vTaskSwitchContext>
	prvTaskExitError();
 800bd40:	f7ff ff1c 	bl	800bb7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	e000ed00 	.word	0xe000ed00
 800bd54:	410fc271 	.word	0x410fc271
 800bd58:	410fc270 	.word	0x410fc270
 800bd5c:	e000e400 	.word	0xe000e400
 800bd60:	20000fb0 	.word	0x20000fb0
 800bd64:	20000fb4 	.word	0x20000fb4
 800bd68:	e000ed20 	.word	0xe000ed20
 800bd6c:	2000000c 	.word	0x2000000c
 800bd70:	e000ef34 	.word	0xe000ef34

0800bd74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	607b      	str	r3, [r7, #4]
}
 800bd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10f      	bne.n	800bdc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <vPortEnterCritical+0x5c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	603b      	str	r3, [r7, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <vPortEnterCritical+0x4a>
	}
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	2000000c 	.word	0x2000000c
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdda:	4b12      	ldr	r3, [pc, #72]	; (800be24 <vPortExitCritical+0x50>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <vPortExitCritical+0x24>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	607b      	str	r3, [r7, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <vPortExitCritical+0x50>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4a09      	ldr	r2, [pc, #36]	; (800be24 <vPortExitCritical+0x50>)
 800be00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be02:	4b08      	ldr	r3, [pc, #32]	; (800be24 <vPortExitCritical+0x50>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <vPortExitCritical+0x42>
 800be0a:	2300      	movs	r3, #0
 800be0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f383 8811 	msr	BASEPRI, r3
}
 800be14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	2000000c 	.word	0x2000000c
	...

0800be30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be30:	f3ef 8009 	mrs	r0, PSP
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	4b15      	ldr	r3, [pc, #84]	; (800be90 <pxCurrentTCBConst>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	f01e 0f10 	tst.w	lr, #16
 800be40:	bf08      	it	eq
 800be42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	6010      	str	r0, [r2, #0]
 800be4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be54:	f380 8811 	msr	BASEPRI, r0
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f7fe ffb4 	bl	800adcc <vTaskSwitchContext>
 800be64:	f04f 0000 	mov.w	r0, #0
 800be68:	f380 8811 	msr	BASEPRI, r0
 800be6c:	bc09      	pop	{r0, r3}
 800be6e:	6819      	ldr	r1, [r3, #0]
 800be70:	6808      	ldr	r0, [r1, #0]
 800be72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be76:	f01e 0f10 	tst.w	lr, #16
 800be7a:	bf08      	it	eq
 800be7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be80:	f380 8809 	msr	PSP, r0
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst>:
 800be90:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
}
 800beb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800beb2:	f7fe fed1 	bl	800ac58 <xTaskIncrementTick>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <xPortSysTickHandler+0x40>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	2300      	movs	r3, #0
 800bec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f383 8811 	msr	BASEPRI, r3
}
 800bece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <vPortSetupTimerInterrupt+0x38>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <vPortSetupTimerInterrupt+0x3c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a0a      	ldr	r2, [pc, #40]	; (800bf1c <vPortSetupTimerInterrupt+0x40>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	099b      	lsrs	r3, r3, #6
 800bef8:	4a09      	ldr	r2, [pc, #36]	; (800bf20 <vPortSetupTimerInterrupt+0x44>)
 800befa:	3b01      	subs	r3, #1
 800befc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bf00:	2207      	movs	r2, #7
 800bf02:	601a      	str	r2, [r3, #0]
}
 800bf04:	bf00      	nop
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	e000e010 	.word	0xe000e010
 800bf14:	e000e018 	.word	0xe000e018
 800bf18:	20000000 	.word	0x20000000
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	e000e014 	.word	0xe000e014

0800bf24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf34 <vPortEnableVFP+0x10>
 800bf28:	6801      	ldr	r1, [r0, #0]
 800bf2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf2e:	6001      	str	r1, [r0, #0]
 800bf30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf32:	bf00      	nop
 800bf34:	e000ed88 	.word	0xe000ed88

0800bf38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf3e:	f3ef 8305 	mrs	r3, IPSR
 800bf42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d914      	bls.n	800bf74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <vPortValidateInterruptPriority+0x70>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf54:	4b15      	ldr	r3, [pc, #84]	; (800bfac <vPortValidateInterruptPriority+0x74>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	7afa      	ldrb	r2, [r7, #11]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d20a      	bcs.n	800bf74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf74:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <vPortValidateInterruptPriority+0x78>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <vPortValidateInterruptPriority+0x7c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d90a      	bls.n	800bf9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	603b      	str	r3, [r7, #0]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <vPortValidateInterruptPriority+0x60>
	}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	e000e3f0 	.word	0xe000e3f0
 800bfac:	20000fb0 	.word	0x20000fb0
 800bfb0:	e000ed0c 	.word	0xe000ed0c
 800bfb4:	20000fb4 	.word	0x20000fb4

0800bfb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfc4:	f7fe fd8c 	bl	800aae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfc8:	4b5b      	ldr	r3, [pc, #364]	; (800c138 <pvPortMalloc+0x180>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfd0:	f000 f920 	bl	800c214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfd4:	4b59      	ldr	r3, [pc, #356]	; (800c13c <pvPortMalloc+0x184>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8093 	bne.w	800c108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01d      	beq.n	800c024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfe8:	2208      	movs	r2, #8
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d014      	beq.n	800c024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f023 0307 	bic.w	r3, r3, #7
 800c000:	3308      	adds	r3, #8
 800c002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00a      	beq.n	800c024 <pvPortMalloc+0x6c>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	617b      	str	r3, [r7, #20]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06e      	beq.n	800c108 <pvPortMalloc+0x150>
 800c02a:	4b45      	ldr	r3, [pc, #276]	; (800c140 <pvPortMalloc+0x188>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d869      	bhi.n	800c108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c034:	4b43      	ldr	r3, [pc, #268]	; (800c144 <pvPortMalloc+0x18c>)
 800c036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c038:	4b42      	ldr	r3, [pc, #264]	; (800c144 <pvPortMalloc+0x18c>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c03e:	e004      	b.n	800c04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	429a      	cmp	r2, r3
 800c052:	d903      	bls.n	800c05c <pvPortMalloc+0xa4>
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c05c:	4b36      	ldr	r3, [pc, #216]	; (800c138 <pvPortMalloc+0x180>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	429a      	cmp	r2, r3
 800c064:	d050      	beq.n	800c108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2208      	movs	r2, #8
 800c06c:	4413      	add	r3, r2
 800c06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	2308      	movs	r3, #8
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	429a      	cmp	r2, r3
 800c086:	d91f      	bls.n	800c0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	613b      	str	r3, [r7, #16]
}
 800c0ac:	bf00      	nop
 800c0ae:	e7fe      	b.n	800c0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0c2:	69b8      	ldr	r0, [r7, #24]
 800c0c4:	f000 f908 	bl	800c2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <pvPortMalloc+0x188>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	4a1b      	ldr	r2, [pc, #108]	; (800c140 <pvPortMalloc+0x188>)
 800c0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0d6:	4b1a      	ldr	r3, [pc, #104]	; (800c140 <pvPortMalloc+0x188>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <pvPortMalloc+0x190>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d203      	bcs.n	800c0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0e2:	4b17      	ldr	r3, [pc, #92]	; (800c140 <pvPortMalloc+0x188>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a18      	ldr	r2, [pc, #96]	; (800c148 <pvPortMalloc+0x190>)
 800c0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <pvPortMalloc+0x184>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <pvPortMalloc+0x194>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3301      	adds	r3, #1
 800c104:	4a11      	ldr	r2, [pc, #68]	; (800c14c <pvPortMalloc+0x194>)
 800c106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c108:	f7fe fcf8 	bl	800aafc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <pvPortMalloc+0x174>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <pvPortMalloc+0x172>
	return pvReturn;
 800c12c:	69fb      	ldr	r3, [r7, #28]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3728      	adds	r7, #40	; 0x28
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20001bc0 	.word	0x20001bc0
 800c13c:	20001bd4 	.word	0x20001bd4
 800c140:	20001bc4 	.word	0x20001bc4
 800c144:	20001bb8 	.word	0x20001bb8
 800c148:	20001bc8 	.word	0x20001bc8
 800c14c:	20001bcc 	.word	0x20001bcc

0800c150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d04d      	beq.n	800c1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c162:	2308      	movs	r3, #8
 800c164:	425b      	negs	r3, r3
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	4413      	add	r3, r2
 800c16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	4b24      	ldr	r3, [pc, #144]	; (800c208 <vPortFree+0xb8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4013      	ands	r3, r2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <vPortFree+0x44>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	60fb      	str	r3, [r7, #12]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00a      	beq.n	800c1b2 <vPortFree+0x62>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60bb      	str	r3, [r7, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	4b14      	ldr	r3, [pc, #80]	; (800c208 <vPortFree+0xb8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01e      	beq.n	800c1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d11a      	bne.n	800c1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <vPortFree+0xb8>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1d8:	f7fe fc82 	bl	800aae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <vPortFree+0xbc>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	4a09      	ldr	r2, [pc, #36]	; (800c20c <vPortFree+0xbc>)
 800c1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ea:	6938      	ldr	r0, [r7, #16]
 800c1ec:	f000 f874 	bl	800c2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <vPortFree+0xc0>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	4a06      	ldr	r2, [pc, #24]	; (800c210 <vPortFree+0xc0>)
 800c1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1fa:	f7fe fc7f 	bl	800aafc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1fe:	bf00      	nop
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20001bd4 	.word	0x20001bd4
 800c20c:	20001bc4 	.word	0x20001bc4
 800c210:	20001bd0 	.word	0x20001bd0

0800c214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c21a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c220:	4b27      	ldr	r3, [pc, #156]	; (800c2c0 <prvHeapInit+0xac>)
 800c222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00c      	beq.n	800c248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3307      	adds	r3, #7
 800c232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0307 	bic.w	r3, r3, #7
 800c23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	4a1f      	ldr	r2, [pc, #124]	; (800c2c0 <prvHeapInit+0xac>)
 800c244:	4413      	add	r3, r2
 800c246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c24c:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <prvHeapInit+0xb0>)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <prvHeapInit+0xb0>)
 800c254:	2200      	movs	r2, #0
 800c256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c260:	2208      	movs	r2, #8
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f023 0307 	bic.w	r3, r3, #7
 800c26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <prvHeapInit+0xb4>)
 800c274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c276:	4b14      	ldr	r3, [pc, #80]	; (800c2c8 <prvHeapInit+0xb4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c27e:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <prvHeapInit+0xb4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c294:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <prvHeapInit+0xb4>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <prvHeapInit+0xb8>)
 800c2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <prvHeapInit+0xbc>)
 800c2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <prvHeapInit+0xc0>)
 800c2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2b2:	601a      	str	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20000fb8 	.word	0x20000fb8
 800c2c4:	20001bb8 	.word	0x20001bb8
 800c2c8:	20001bc0 	.word	0x20001bc0
 800c2cc:	20001bc8 	.word	0x20001bc8
 800c2d0:	20001bc4 	.word	0x20001bc4
 800c2d4:	20001bd4 	.word	0x20001bd4

0800c2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2e0:	4b28      	ldr	r3, [pc, #160]	; (800c384 <prvInsertBlockIntoFreeList+0xac>)
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e002      	b.n	800c2ec <prvInsertBlockIntoFreeList+0x14>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d8f7      	bhi.n	800c2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	4413      	add	r3, r2
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	429a      	cmp	r2, r3
 800c306:	d108      	bne.n	800c31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	441a      	add	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d118      	bne.n	800c360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <prvInsertBlockIntoFreeList+0xb0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d00d      	beq.n	800c356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	441a      	add	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e008      	b.n	800c368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <prvInsertBlockIntoFreeList+0xb0>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e003      	b.n	800c368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d002      	beq.n	800c376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	20001bb8 	.word	0x20001bb8
 800c388:	20001bc0 	.word	0x20001bc0

0800c38c <__errno>:
 800c38c:	4b01      	ldr	r3, [pc, #4]	; (800c394 <__errno+0x8>)
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20000010 	.word	0x20000010

0800c398 <std>:
 800c398:	2300      	movs	r3, #0
 800c39a:	b510      	push	{r4, lr}
 800c39c:	4604      	mov	r4, r0
 800c39e:	e9c0 3300 	strd	r3, r3, [r0]
 800c3a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3a6:	6083      	str	r3, [r0, #8]
 800c3a8:	8181      	strh	r1, [r0, #12]
 800c3aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c3ac:	81c2      	strh	r2, [r0, #14]
 800c3ae:	6183      	str	r3, [r0, #24]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	2208      	movs	r2, #8
 800c3b4:	305c      	adds	r0, #92	; 0x5c
 800c3b6:	f000 f923 	bl	800c600 <memset>
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <std+0x38>)
 800c3bc:	6263      	str	r3, [r4, #36]	; 0x24
 800c3be:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <std+0x3c>)
 800c3c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3c2:	4b05      	ldr	r3, [pc, #20]	; (800c3d8 <std+0x40>)
 800c3c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3c6:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <std+0x44>)
 800c3c8:	6224      	str	r4, [r4, #32]
 800c3ca:	6323      	str	r3, [r4, #48]	; 0x30
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	0800d12d 	.word	0x0800d12d
 800c3d4:	0800d14f 	.word	0x0800d14f
 800c3d8:	0800d187 	.word	0x0800d187
 800c3dc:	0800d1ab 	.word	0x0800d1ab

0800c3e0 <_cleanup_r>:
 800c3e0:	4901      	ldr	r1, [pc, #4]	; (800c3e8 <_cleanup_r+0x8>)
 800c3e2:	f000 b8af 	b.w	800c544 <_fwalk_reent>
 800c3e6:	bf00      	nop
 800c3e8:	0800dff5 	.word	0x0800dff5

0800c3ec <__sfmoreglue>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	1e4a      	subs	r2, r1, #1
 800c3f0:	2568      	movs	r5, #104	; 0x68
 800c3f2:	4355      	muls	r5, r2
 800c3f4:	460e      	mov	r6, r1
 800c3f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3fa:	f000 f959 	bl	800c6b0 <_malloc_r>
 800c3fe:	4604      	mov	r4, r0
 800c400:	b140      	cbz	r0, 800c414 <__sfmoreglue+0x28>
 800c402:	2100      	movs	r1, #0
 800c404:	e9c0 1600 	strd	r1, r6, [r0]
 800c408:	300c      	adds	r0, #12
 800c40a:	60a0      	str	r0, [r4, #8]
 800c40c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c410:	f000 f8f6 	bl	800c600 <memset>
 800c414:	4620      	mov	r0, r4
 800c416:	bd70      	pop	{r4, r5, r6, pc}

0800c418 <__sfp_lock_acquire>:
 800c418:	4801      	ldr	r0, [pc, #4]	; (800c420 <__sfp_lock_acquire+0x8>)
 800c41a:	f000 b8d8 	b.w	800c5ce <__retarget_lock_acquire_recursive>
 800c41e:	bf00      	nop
 800c420:	20004d54 	.word	0x20004d54

0800c424 <__sfp_lock_release>:
 800c424:	4801      	ldr	r0, [pc, #4]	; (800c42c <__sfp_lock_release+0x8>)
 800c426:	f000 b8d3 	b.w	800c5d0 <__retarget_lock_release_recursive>
 800c42a:	bf00      	nop
 800c42c:	20004d54 	.word	0x20004d54

0800c430 <__sinit_lock_acquire>:
 800c430:	4801      	ldr	r0, [pc, #4]	; (800c438 <__sinit_lock_acquire+0x8>)
 800c432:	f000 b8cc 	b.w	800c5ce <__retarget_lock_acquire_recursive>
 800c436:	bf00      	nop
 800c438:	20004d4f 	.word	0x20004d4f

0800c43c <__sinit_lock_release>:
 800c43c:	4801      	ldr	r0, [pc, #4]	; (800c444 <__sinit_lock_release+0x8>)
 800c43e:	f000 b8c7 	b.w	800c5d0 <__retarget_lock_release_recursive>
 800c442:	bf00      	nop
 800c444:	20004d4f 	.word	0x20004d4f

0800c448 <__sinit>:
 800c448:	b510      	push	{r4, lr}
 800c44a:	4604      	mov	r4, r0
 800c44c:	f7ff fff0 	bl	800c430 <__sinit_lock_acquire>
 800c450:	69a3      	ldr	r3, [r4, #24]
 800c452:	b11b      	cbz	r3, 800c45c <__sinit+0x14>
 800c454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c458:	f7ff bff0 	b.w	800c43c <__sinit_lock_release>
 800c45c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c460:	6523      	str	r3, [r4, #80]	; 0x50
 800c462:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <__sinit+0x68>)
 800c464:	4a13      	ldr	r2, [pc, #76]	; (800c4b4 <__sinit+0x6c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	62a2      	str	r2, [r4, #40]	; 0x28
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	bf04      	itt	eq
 800c46e:	2301      	moveq	r3, #1
 800c470:	61a3      	streq	r3, [r4, #24]
 800c472:	4620      	mov	r0, r4
 800c474:	f000 f820 	bl	800c4b8 <__sfp>
 800c478:	6060      	str	r0, [r4, #4]
 800c47a:	4620      	mov	r0, r4
 800c47c:	f000 f81c 	bl	800c4b8 <__sfp>
 800c480:	60a0      	str	r0, [r4, #8]
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f818 	bl	800c4b8 <__sfp>
 800c488:	2200      	movs	r2, #0
 800c48a:	60e0      	str	r0, [r4, #12]
 800c48c:	2104      	movs	r1, #4
 800c48e:	6860      	ldr	r0, [r4, #4]
 800c490:	f7ff ff82 	bl	800c398 <std>
 800c494:	68a0      	ldr	r0, [r4, #8]
 800c496:	2201      	movs	r2, #1
 800c498:	2109      	movs	r1, #9
 800c49a:	f7ff ff7d 	bl	800c398 <std>
 800c49e:	68e0      	ldr	r0, [r4, #12]
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	2112      	movs	r1, #18
 800c4a4:	f7ff ff78 	bl	800c398 <std>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	61a3      	str	r3, [r4, #24]
 800c4ac:	e7d2      	b.n	800c454 <__sinit+0xc>
 800c4ae:	bf00      	nop
 800c4b0:	080114fc 	.word	0x080114fc
 800c4b4:	0800c3e1 	.word	0x0800c3e1

0800c4b8 <__sfp>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	f7ff ffac 	bl	800c418 <__sfp_lock_acquire>
 800c4c0:	4b1e      	ldr	r3, [pc, #120]	; (800c53c <__sfp+0x84>)
 800c4c2:	681e      	ldr	r6, [r3, #0]
 800c4c4:	69b3      	ldr	r3, [r6, #24]
 800c4c6:	b913      	cbnz	r3, 800c4ce <__sfp+0x16>
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f7ff ffbd 	bl	800c448 <__sinit>
 800c4ce:	3648      	adds	r6, #72	; 0x48
 800c4d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	d503      	bpl.n	800c4e0 <__sfp+0x28>
 800c4d8:	6833      	ldr	r3, [r6, #0]
 800c4da:	b30b      	cbz	r3, 800c520 <__sfp+0x68>
 800c4dc:	6836      	ldr	r6, [r6, #0]
 800c4de:	e7f7      	b.n	800c4d0 <__sfp+0x18>
 800c4e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4e4:	b9d5      	cbnz	r5, 800c51c <__sfp+0x64>
 800c4e6:	4b16      	ldr	r3, [pc, #88]	; (800c540 <__sfp+0x88>)
 800c4e8:	60e3      	str	r3, [r4, #12]
 800c4ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ee:	6665      	str	r5, [r4, #100]	; 0x64
 800c4f0:	f000 f86c 	bl	800c5cc <__retarget_lock_init_recursive>
 800c4f4:	f7ff ff96 	bl	800c424 <__sfp_lock_release>
 800c4f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c500:	6025      	str	r5, [r4, #0]
 800c502:	61a5      	str	r5, [r4, #24]
 800c504:	2208      	movs	r2, #8
 800c506:	4629      	mov	r1, r5
 800c508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c50c:	f000 f878 	bl	800c600 <memset>
 800c510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c518:	4620      	mov	r0, r4
 800c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51c:	3468      	adds	r4, #104	; 0x68
 800c51e:	e7d9      	b.n	800c4d4 <__sfp+0x1c>
 800c520:	2104      	movs	r1, #4
 800c522:	4638      	mov	r0, r7
 800c524:	f7ff ff62 	bl	800c3ec <__sfmoreglue>
 800c528:	4604      	mov	r4, r0
 800c52a:	6030      	str	r0, [r6, #0]
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1d5      	bne.n	800c4dc <__sfp+0x24>
 800c530:	f7ff ff78 	bl	800c424 <__sfp_lock_release>
 800c534:	230c      	movs	r3, #12
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	e7ee      	b.n	800c518 <__sfp+0x60>
 800c53a:	bf00      	nop
 800c53c:	080114fc 	.word	0x080114fc
 800c540:	ffff0001 	.word	0xffff0001

0800c544 <_fwalk_reent>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4606      	mov	r6, r0
 800c54a:	4688      	mov	r8, r1
 800c54c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c550:	2700      	movs	r7, #0
 800c552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c556:	f1b9 0901 	subs.w	r9, r9, #1
 800c55a:	d505      	bpl.n	800c568 <_fwalk_reent+0x24>
 800c55c:	6824      	ldr	r4, [r4, #0]
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d1f7      	bne.n	800c552 <_fwalk_reent+0xe>
 800c562:	4638      	mov	r0, r7
 800c564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d907      	bls.n	800c57e <_fwalk_reent+0x3a>
 800c56e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c572:	3301      	adds	r3, #1
 800c574:	d003      	beq.n	800c57e <_fwalk_reent+0x3a>
 800c576:	4629      	mov	r1, r5
 800c578:	4630      	mov	r0, r6
 800c57a:	47c0      	blx	r8
 800c57c:	4307      	orrs	r7, r0
 800c57e:	3568      	adds	r5, #104	; 0x68
 800c580:	e7e9      	b.n	800c556 <_fwalk_reent+0x12>
	...

0800c584 <__libc_init_array>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	4d0d      	ldr	r5, [pc, #52]	; (800c5bc <__libc_init_array+0x38>)
 800c588:	4c0d      	ldr	r4, [pc, #52]	; (800c5c0 <__libc_init_array+0x3c>)
 800c58a:	1b64      	subs	r4, r4, r5
 800c58c:	10a4      	asrs	r4, r4, #2
 800c58e:	2600      	movs	r6, #0
 800c590:	42a6      	cmp	r6, r4
 800c592:	d109      	bne.n	800c5a8 <__libc_init_array+0x24>
 800c594:	4d0b      	ldr	r5, [pc, #44]	; (800c5c4 <__libc_init_array+0x40>)
 800c596:	4c0c      	ldr	r4, [pc, #48]	; (800c5c8 <__libc_init_array+0x44>)
 800c598:	f004 fe64 	bl	8011264 <_init>
 800c59c:	1b64      	subs	r4, r4, r5
 800c59e:	10a4      	asrs	r4, r4, #2
 800c5a0:	2600      	movs	r6, #0
 800c5a2:	42a6      	cmp	r6, r4
 800c5a4:	d105      	bne.n	800c5b2 <__libc_init_array+0x2e>
 800c5a6:	bd70      	pop	{r4, r5, r6, pc}
 800c5a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ac:	4798      	blx	r3
 800c5ae:	3601      	adds	r6, #1
 800c5b0:	e7ee      	b.n	800c590 <__libc_init_array+0xc>
 800c5b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b6:	4798      	blx	r3
 800c5b8:	3601      	adds	r6, #1
 800c5ba:	e7f2      	b.n	800c5a2 <__libc_init_array+0x1e>
 800c5bc:	08011b10 	.word	0x08011b10
 800c5c0:	08011b10 	.word	0x08011b10
 800c5c4:	08011b10 	.word	0x08011b10
 800c5c8:	08011b14 	.word	0x08011b14

0800c5cc <__retarget_lock_init_recursive>:
 800c5cc:	4770      	bx	lr

0800c5ce <__retarget_lock_acquire_recursive>:
 800c5ce:	4770      	bx	lr

0800c5d0 <__retarget_lock_release_recursive>:
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <malloc>:
 800c5d4:	4b02      	ldr	r3, [pc, #8]	; (800c5e0 <malloc+0xc>)
 800c5d6:	4601      	mov	r1, r0
 800c5d8:	6818      	ldr	r0, [r3, #0]
 800c5da:	f000 b869 	b.w	800c6b0 <_malloc_r>
 800c5de:	bf00      	nop
 800c5e0:	20000010 	.word	0x20000010

0800c5e4 <memcpy>:
 800c5e4:	440a      	add	r2, r1
 800c5e6:	4291      	cmp	r1, r2
 800c5e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5ec:	d100      	bne.n	800c5f0 <memcpy+0xc>
 800c5ee:	4770      	bx	lr
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5fa:	4291      	cmp	r1, r2
 800c5fc:	d1f9      	bne.n	800c5f2 <memcpy+0xe>
 800c5fe:	bd10      	pop	{r4, pc}

0800c600 <memset>:
 800c600:	4402      	add	r2, r0
 800c602:	4603      	mov	r3, r0
 800c604:	4293      	cmp	r3, r2
 800c606:	d100      	bne.n	800c60a <memset+0xa>
 800c608:	4770      	bx	lr
 800c60a:	f803 1b01 	strb.w	r1, [r3], #1
 800c60e:	e7f9      	b.n	800c604 <memset+0x4>

0800c610 <_free_r>:
 800c610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c612:	2900      	cmp	r1, #0
 800c614:	d048      	beq.n	800c6a8 <_free_r+0x98>
 800c616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c61a:	9001      	str	r0, [sp, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f1a1 0404 	sub.w	r4, r1, #4
 800c622:	bfb8      	it	lt
 800c624:	18e4      	addlt	r4, r4, r3
 800c626:	f001 fd37 	bl	800e098 <__malloc_lock>
 800c62a:	4a20      	ldr	r2, [pc, #128]	; (800c6ac <_free_r+0x9c>)
 800c62c:	9801      	ldr	r0, [sp, #4]
 800c62e:	6813      	ldr	r3, [r2, #0]
 800c630:	4615      	mov	r5, r2
 800c632:	b933      	cbnz	r3, 800c642 <_free_r+0x32>
 800c634:	6063      	str	r3, [r4, #4]
 800c636:	6014      	str	r4, [r2, #0]
 800c638:	b003      	add	sp, #12
 800c63a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c63e:	f001 bd31 	b.w	800e0a4 <__malloc_unlock>
 800c642:	42a3      	cmp	r3, r4
 800c644:	d90b      	bls.n	800c65e <_free_r+0x4e>
 800c646:	6821      	ldr	r1, [r4, #0]
 800c648:	1862      	adds	r2, r4, r1
 800c64a:	4293      	cmp	r3, r2
 800c64c:	bf04      	itt	eq
 800c64e:	681a      	ldreq	r2, [r3, #0]
 800c650:	685b      	ldreq	r3, [r3, #4]
 800c652:	6063      	str	r3, [r4, #4]
 800c654:	bf04      	itt	eq
 800c656:	1852      	addeq	r2, r2, r1
 800c658:	6022      	streq	r2, [r4, #0]
 800c65a:	602c      	str	r4, [r5, #0]
 800c65c:	e7ec      	b.n	800c638 <_free_r+0x28>
 800c65e:	461a      	mov	r2, r3
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	b10b      	cbz	r3, 800c668 <_free_r+0x58>
 800c664:	42a3      	cmp	r3, r4
 800c666:	d9fa      	bls.n	800c65e <_free_r+0x4e>
 800c668:	6811      	ldr	r1, [r2, #0]
 800c66a:	1855      	adds	r5, r2, r1
 800c66c:	42a5      	cmp	r5, r4
 800c66e:	d10b      	bne.n	800c688 <_free_r+0x78>
 800c670:	6824      	ldr	r4, [r4, #0]
 800c672:	4421      	add	r1, r4
 800c674:	1854      	adds	r4, r2, r1
 800c676:	42a3      	cmp	r3, r4
 800c678:	6011      	str	r1, [r2, #0]
 800c67a:	d1dd      	bne.n	800c638 <_free_r+0x28>
 800c67c:	681c      	ldr	r4, [r3, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	6053      	str	r3, [r2, #4]
 800c682:	4421      	add	r1, r4
 800c684:	6011      	str	r1, [r2, #0]
 800c686:	e7d7      	b.n	800c638 <_free_r+0x28>
 800c688:	d902      	bls.n	800c690 <_free_r+0x80>
 800c68a:	230c      	movs	r3, #12
 800c68c:	6003      	str	r3, [r0, #0]
 800c68e:	e7d3      	b.n	800c638 <_free_r+0x28>
 800c690:	6825      	ldr	r5, [r4, #0]
 800c692:	1961      	adds	r1, r4, r5
 800c694:	428b      	cmp	r3, r1
 800c696:	bf04      	itt	eq
 800c698:	6819      	ldreq	r1, [r3, #0]
 800c69a:	685b      	ldreq	r3, [r3, #4]
 800c69c:	6063      	str	r3, [r4, #4]
 800c69e:	bf04      	itt	eq
 800c6a0:	1949      	addeq	r1, r1, r5
 800c6a2:	6021      	streq	r1, [r4, #0]
 800c6a4:	6054      	str	r4, [r2, #4]
 800c6a6:	e7c7      	b.n	800c638 <_free_r+0x28>
 800c6a8:	b003      	add	sp, #12
 800c6aa:	bd30      	pop	{r4, r5, pc}
 800c6ac:	20001bd8 	.word	0x20001bd8

0800c6b0 <_malloc_r>:
 800c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b2:	1ccd      	adds	r5, r1, #3
 800c6b4:	f025 0503 	bic.w	r5, r5, #3
 800c6b8:	3508      	adds	r5, #8
 800c6ba:	2d0c      	cmp	r5, #12
 800c6bc:	bf38      	it	cc
 800c6be:	250c      	movcc	r5, #12
 800c6c0:	2d00      	cmp	r5, #0
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	db01      	blt.n	800c6ca <_malloc_r+0x1a>
 800c6c6:	42a9      	cmp	r1, r5
 800c6c8:	d903      	bls.n	800c6d2 <_malloc_r+0x22>
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	6033      	str	r3, [r6, #0]
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6d2:	f001 fce1 	bl	800e098 <__malloc_lock>
 800c6d6:	4921      	ldr	r1, [pc, #132]	; (800c75c <_malloc_r+0xac>)
 800c6d8:	680a      	ldr	r2, [r1, #0]
 800c6da:	4614      	mov	r4, r2
 800c6dc:	b99c      	cbnz	r4, 800c706 <_malloc_r+0x56>
 800c6de:	4f20      	ldr	r7, [pc, #128]	; (800c760 <_malloc_r+0xb0>)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	b923      	cbnz	r3, 800c6ee <_malloc_r+0x3e>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f000 fd10 	bl	800d10c <_sbrk_r>
 800c6ec:	6038      	str	r0, [r7, #0]
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4630      	mov	r0, r6
 800c6f2:	f000 fd0b 	bl	800d10c <_sbrk_r>
 800c6f6:	1c43      	adds	r3, r0, #1
 800c6f8:	d123      	bne.n	800c742 <_malloc_r+0x92>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	6033      	str	r3, [r6, #0]
 800c6fe:	4630      	mov	r0, r6
 800c700:	f001 fcd0 	bl	800e0a4 <__malloc_unlock>
 800c704:	e7e3      	b.n	800c6ce <_malloc_r+0x1e>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	1b5b      	subs	r3, r3, r5
 800c70a:	d417      	bmi.n	800c73c <_malloc_r+0x8c>
 800c70c:	2b0b      	cmp	r3, #11
 800c70e:	d903      	bls.n	800c718 <_malloc_r+0x68>
 800c710:	6023      	str	r3, [r4, #0]
 800c712:	441c      	add	r4, r3
 800c714:	6025      	str	r5, [r4, #0]
 800c716:	e004      	b.n	800c722 <_malloc_r+0x72>
 800c718:	6863      	ldr	r3, [r4, #4]
 800c71a:	42a2      	cmp	r2, r4
 800c71c:	bf0c      	ite	eq
 800c71e:	600b      	streq	r3, [r1, #0]
 800c720:	6053      	strne	r3, [r2, #4]
 800c722:	4630      	mov	r0, r6
 800c724:	f001 fcbe 	bl	800e0a4 <__malloc_unlock>
 800c728:	f104 000b 	add.w	r0, r4, #11
 800c72c:	1d23      	adds	r3, r4, #4
 800c72e:	f020 0007 	bic.w	r0, r0, #7
 800c732:	1ac2      	subs	r2, r0, r3
 800c734:	d0cc      	beq.n	800c6d0 <_malloc_r+0x20>
 800c736:	1a1b      	subs	r3, r3, r0
 800c738:	50a3      	str	r3, [r4, r2]
 800c73a:	e7c9      	b.n	800c6d0 <_malloc_r+0x20>
 800c73c:	4622      	mov	r2, r4
 800c73e:	6864      	ldr	r4, [r4, #4]
 800c740:	e7cc      	b.n	800c6dc <_malloc_r+0x2c>
 800c742:	1cc4      	adds	r4, r0, #3
 800c744:	f024 0403 	bic.w	r4, r4, #3
 800c748:	42a0      	cmp	r0, r4
 800c74a:	d0e3      	beq.n	800c714 <_malloc_r+0x64>
 800c74c:	1a21      	subs	r1, r4, r0
 800c74e:	4630      	mov	r0, r6
 800c750:	f000 fcdc 	bl	800d10c <_sbrk_r>
 800c754:	3001      	adds	r0, #1
 800c756:	d1dd      	bne.n	800c714 <_malloc_r+0x64>
 800c758:	e7cf      	b.n	800c6fa <_malloc_r+0x4a>
 800c75a:	bf00      	nop
 800c75c:	20001bd8 	.word	0x20001bd8
 800c760:	20001bdc 	.word	0x20001bdc

0800c764 <__cvt>:
 800c764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	ec55 4b10 	vmov	r4, r5, d0
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	460e      	mov	r6, r1
 800c770:	4619      	mov	r1, r3
 800c772:	462b      	mov	r3, r5
 800c774:	bfbb      	ittet	lt
 800c776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c77a:	461d      	movlt	r5, r3
 800c77c:	2300      	movge	r3, #0
 800c77e:	232d      	movlt	r3, #45	; 0x2d
 800c780:	700b      	strb	r3, [r1, #0]
 800c782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c784:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c788:	4691      	mov	r9, r2
 800c78a:	f023 0820 	bic.w	r8, r3, #32
 800c78e:	bfbc      	itt	lt
 800c790:	4622      	movlt	r2, r4
 800c792:	4614      	movlt	r4, r2
 800c794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c798:	d005      	beq.n	800c7a6 <__cvt+0x42>
 800c79a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c79e:	d100      	bne.n	800c7a2 <__cvt+0x3e>
 800c7a0:	3601      	adds	r6, #1
 800c7a2:	2102      	movs	r1, #2
 800c7a4:	e000      	b.n	800c7a8 <__cvt+0x44>
 800c7a6:	2103      	movs	r1, #3
 800c7a8:	ab03      	add	r3, sp, #12
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	ab02      	add	r3, sp, #8
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	ec45 4b10 	vmov	d0, r4, r5
 800c7b4:	4653      	mov	r3, sl
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	f000 fdaa 	bl	800d310 <_dtoa_r>
 800c7bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	d102      	bne.n	800c7ca <__cvt+0x66>
 800c7c4:	f019 0f01 	tst.w	r9, #1
 800c7c8:	d022      	beq.n	800c810 <__cvt+0xac>
 800c7ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7ce:	eb07 0906 	add.w	r9, r7, r6
 800c7d2:	d110      	bne.n	800c7f6 <__cvt+0x92>
 800c7d4:	783b      	ldrb	r3, [r7, #0]
 800c7d6:	2b30      	cmp	r3, #48	; 0x30
 800c7d8:	d10a      	bne.n	800c7f0 <__cvt+0x8c>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7f4 f999 	bl	8000b18 <__aeabi_dcmpeq>
 800c7e6:	b918      	cbnz	r0, 800c7f0 <__cvt+0x8c>
 800c7e8:	f1c6 0601 	rsb	r6, r6, #1
 800c7ec:	f8ca 6000 	str.w	r6, [sl]
 800c7f0:	f8da 3000 	ldr.w	r3, [sl]
 800c7f4:	4499      	add	r9, r3
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f4 f98b 	bl	8000b18 <__aeabi_dcmpeq>
 800c802:	b108      	cbz	r0, 800c808 <__cvt+0xa4>
 800c804:	f8cd 900c 	str.w	r9, [sp, #12]
 800c808:	2230      	movs	r2, #48	; 0x30
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	454b      	cmp	r3, r9
 800c80e:	d307      	bcc.n	800c820 <__cvt+0xbc>
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c814:	1bdb      	subs	r3, r3, r7
 800c816:	4638      	mov	r0, r7
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	b004      	add	sp, #16
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	1c59      	adds	r1, r3, #1
 800c822:	9103      	str	r1, [sp, #12]
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	e7f0      	b.n	800c80a <__cvt+0xa6>

0800c828 <__exponent>:
 800c828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c82a:	4603      	mov	r3, r0
 800c82c:	2900      	cmp	r1, #0
 800c82e:	bfb8      	it	lt
 800c830:	4249      	neglt	r1, r1
 800c832:	f803 2b02 	strb.w	r2, [r3], #2
 800c836:	bfb4      	ite	lt
 800c838:	222d      	movlt	r2, #45	; 0x2d
 800c83a:	222b      	movge	r2, #43	; 0x2b
 800c83c:	2909      	cmp	r1, #9
 800c83e:	7042      	strb	r2, [r0, #1]
 800c840:	dd2a      	ble.n	800c898 <__exponent+0x70>
 800c842:	f10d 0407 	add.w	r4, sp, #7
 800c846:	46a4      	mov	ip, r4
 800c848:	270a      	movs	r7, #10
 800c84a:	46a6      	mov	lr, r4
 800c84c:	460a      	mov	r2, r1
 800c84e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c852:	fb07 1516 	mls	r5, r7, r6, r1
 800c856:	3530      	adds	r5, #48	; 0x30
 800c858:	2a63      	cmp	r2, #99	; 0x63
 800c85a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c85e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c862:	4631      	mov	r1, r6
 800c864:	dcf1      	bgt.n	800c84a <__exponent+0x22>
 800c866:	3130      	adds	r1, #48	; 0x30
 800c868:	f1ae 0502 	sub.w	r5, lr, #2
 800c86c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c870:	1c44      	adds	r4, r0, #1
 800c872:	4629      	mov	r1, r5
 800c874:	4561      	cmp	r1, ip
 800c876:	d30a      	bcc.n	800c88e <__exponent+0x66>
 800c878:	f10d 0209 	add.w	r2, sp, #9
 800c87c:	eba2 020e 	sub.w	r2, r2, lr
 800c880:	4565      	cmp	r5, ip
 800c882:	bf88      	it	hi
 800c884:	2200      	movhi	r2, #0
 800c886:	4413      	add	r3, r2
 800c888:	1a18      	subs	r0, r3, r0
 800c88a:	b003      	add	sp, #12
 800c88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c892:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c896:	e7ed      	b.n	800c874 <__exponent+0x4c>
 800c898:	2330      	movs	r3, #48	; 0x30
 800c89a:	3130      	adds	r1, #48	; 0x30
 800c89c:	7083      	strb	r3, [r0, #2]
 800c89e:	70c1      	strb	r1, [r0, #3]
 800c8a0:	1d03      	adds	r3, r0, #4
 800c8a2:	e7f1      	b.n	800c888 <__exponent+0x60>

0800c8a4 <_printf_float>:
 800c8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a8:	ed2d 8b02 	vpush	{d8}
 800c8ac:	b08d      	sub	sp, #52	; 0x34
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	461f      	mov	r7, r3
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	f001 fbd7 	bl	800e06c <_localeconv_r>
 800c8be:	f8d0 a000 	ldr.w	sl, [r0]
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f7f3 fcac 	bl	8000220 <strlen>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8d8:	3307      	adds	r3, #7
 800c8da:	f023 0307 	bic.w	r3, r3, #7
 800c8de:	f103 0208 	add.w	r2, r3, #8
 800c8e2:	f8c8 2000 	str.w	r2, [r8]
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8fc:	ee08 0a10 	vmov	s16, r0
 800c900:	4b9f      	ldr	r3, [pc, #636]	; (800cb80 <_printf_float+0x2dc>)
 800c902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c906:	f04f 32ff 	mov.w	r2, #4294967295
 800c90a:	f7f4 f937 	bl	8000b7c <__aeabi_dcmpun>
 800c90e:	bb88      	cbnz	r0, 800c974 <_printf_float+0xd0>
 800c910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c914:	4b9a      	ldr	r3, [pc, #616]	; (800cb80 <_printf_float+0x2dc>)
 800c916:	f04f 32ff 	mov.w	r2, #4294967295
 800c91a:	f7f4 f911 	bl	8000b40 <__aeabi_dcmple>
 800c91e:	bb48      	cbnz	r0, 800c974 <_printf_float+0xd0>
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f4 f900 	bl	8000b2c <__aeabi_dcmplt>
 800c92c:	b110      	cbz	r0, 800c934 <_printf_float+0x90>
 800c92e:	232d      	movs	r3, #45	; 0x2d
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c934:	4b93      	ldr	r3, [pc, #588]	; (800cb84 <_printf_float+0x2e0>)
 800c936:	4894      	ldr	r0, [pc, #592]	; (800cb88 <_printf_float+0x2e4>)
 800c938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c93c:	bf94      	ite	ls
 800c93e:	4698      	movls	r8, r3
 800c940:	4680      	movhi	r8, r0
 800c942:	2303      	movs	r3, #3
 800c944:	6123      	str	r3, [r4, #16]
 800c946:	9b05      	ldr	r3, [sp, #20]
 800c948:	f023 0204 	bic.w	r2, r3, #4
 800c94c:	6022      	str	r2, [r4, #0]
 800c94e:	f04f 0900 	mov.w	r9, #0
 800c952:	9700      	str	r7, [sp, #0]
 800c954:	4633      	mov	r3, r6
 800c956:	aa0b      	add	r2, sp, #44	; 0x2c
 800c958:	4621      	mov	r1, r4
 800c95a:	4628      	mov	r0, r5
 800c95c:	f000 f9d8 	bl	800cd10 <_printf_common>
 800c960:	3001      	adds	r0, #1
 800c962:	f040 8090 	bne.w	800ca86 <_printf_float+0x1e2>
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	b00d      	add	sp, #52	; 0x34
 800c96c:	ecbd 8b02 	vpop	{d8}
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	4642      	mov	r2, r8
 800c976:	464b      	mov	r3, r9
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	f7f4 f8fe 	bl	8000b7c <__aeabi_dcmpun>
 800c980:	b140      	cbz	r0, 800c994 <_printf_float+0xf0>
 800c982:	464b      	mov	r3, r9
 800c984:	2b00      	cmp	r3, #0
 800c986:	bfbc      	itt	lt
 800c988:	232d      	movlt	r3, #45	; 0x2d
 800c98a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c98e:	487f      	ldr	r0, [pc, #508]	; (800cb8c <_printf_float+0x2e8>)
 800c990:	4b7f      	ldr	r3, [pc, #508]	; (800cb90 <_printf_float+0x2ec>)
 800c992:	e7d1      	b.n	800c938 <_printf_float+0x94>
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c99a:	9206      	str	r2, [sp, #24]
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	d13f      	bne.n	800ca20 <_printf_float+0x17c>
 800c9a0:	2306      	movs	r3, #6
 800c9a2:	6063      	str	r3, [r4, #4]
 800c9a4:	9b05      	ldr	r3, [sp, #20]
 800c9a6:	6861      	ldr	r1, [r4, #4]
 800c9a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	ab0a      	add	r3, sp, #40	; 0x28
 800c9b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c9b6:	ab09      	add	r3, sp, #36	; 0x24
 800c9b8:	ec49 8b10 	vmov	d0, r8, r9
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	6022      	str	r2, [r4, #0]
 800c9c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fecd 	bl	800c764 <__cvt>
 800c9ca:	9b06      	ldr	r3, [sp, #24]
 800c9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9ce:	2b47      	cmp	r3, #71	; 0x47
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	d108      	bne.n	800c9e6 <_printf_float+0x142>
 800c9d4:	1cc8      	adds	r0, r1, #3
 800c9d6:	db02      	blt.n	800c9de <_printf_float+0x13a>
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	dd41      	ble.n	800ca62 <_printf_float+0x1be>
 800c9de:	f1ab 0b02 	sub.w	fp, fp, #2
 800c9e2:	fa5f fb8b 	uxtb.w	fp, fp
 800c9e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9ea:	d820      	bhi.n	800ca2e <_printf_float+0x18a>
 800c9ec:	3901      	subs	r1, #1
 800c9ee:	465a      	mov	r2, fp
 800c9f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9f4:	9109      	str	r1, [sp, #36]	; 0x24
 800c9f6:	f7ff ff17 	bl	800c828 <__exponent>
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fc:	1813      	adds	r3, r2, r0
 800c9fe:	2a01      	cmp	r2, #1
 800ca00:	4681      	mov	r9, r0
 800ca02:	6123      	str	r3, [r4, #16]
 800ca04:	dc02      	bgt.n	800ca0c <_printf_float+0x168>
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	07d2      	lsls	r2, r2, #31
 800ca0a:	d501      	bpl.n	800ca10 <_printf_float+0x16c>
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d09c      	beq.n	800c952 <_printf_float+0xae>
 800ca18:	232d      	movs	r3, #45	; 0x2d
 800ca1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca1e:	e798      	b.n	800c952 <_printf_float+0xae>
 800ca20:	9a06      	ldr	r2, [sp, #24]
 800ca22:	2a47      	cmp	r2, #71	; 0x47
 800ca24:	d1be      	bne.n	800c9a4 <_printf_float+0x100>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1bc      	bne.n	800c9a4 <_printf_float+0x100>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e7b9      	b.n	800c9a2 <_printf_float+0xfe>
 800ca2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca32:	d118      	bne.n	800ca66 <_printf_float+0x1c2>
 800ca34:	2900      	cmp	r1, #0
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	dd0b      	ble.n	800ca52 <_printf_float+0x1ae>
 800ca3a:	6121      	str	r1, [r4, #16]
 800ca3c:	b913      	cbnz	r3, 800ca44 <_printf_float+0x1a0>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	07d0      	lsls	r0, r2, #31
 800ca42:	d502      	bpl.n	800ca4a <_printf_float+0x1a6>
 800ca44:	3301      	adds	r3, #1
 800ca46:	440b      	add	r3, r1
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca4c:	f04f 0900 	mov.w	r9, #0
 800ca50:	e7de      	b.n	800ca10 <_printf_float+0x16c>
 800ca52:	b913      	cbnz	r3, 800ca5a <_printf_float+0x1b6>
 800ca54:	6822      	ldr	r2, [r4, #0]
 800ca56:	07d2      	lsls	r2, r2, #31
 800ca58:	d501      	bpl.n	800ca5e <_printf_float+0x1ba>
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	e7f4      	b.n	800ca48 <_printf_float+0x1a4>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e7f2      	b.n	800ca48 <_printf_float+0x1a4>
 800ca62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca68:	4299      	cmp	r1, r3
 800ca6a:	db05      	blt.n	800ca78 <_printf_float+0x1d4>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	6121      	str	r1, [r4, #16]
 800ca70:	07d8      	lsls	r0, r3, #31
 800ca72:	d5ea      	bpl.n	800ca4a <_printf_float+0x1a6>
 800ca74:	1c4b      	adds	r3, r1, #1
 800ca76:	e7e7      	b.n	800ca48 <_printf_float+0x1a4>
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	bfd4      	ite	le
 800ca7c:	f1c1 0202 	rsble	r2, r1, #2
 800ca80:	2201      	movgt	r2, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	e7e0      	b.n	800ca48 <_printf_float+0x1a4>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	055a      	lsls	r2, r3, #21
 800ca8a:	d407      	bmi.n	800ca9c <_printf_float+0x1f8>
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	4642      	mov	r2, r8
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	47b8      	blx	r7
 800ca96:	3001      	adds	r0, #1
 800ca98:	d12c      	bne.n	800caf4 <_printf_float+0x250>
 800ca9a:	e764      	b.n	800c966 <_printf_float+0xc2>
 800ca9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800caa0:	f240 80e0 	bls.w	800cc64 <_printf_float+0x3c0>
 800caa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	f7f4 f834 	bl	8000b18 <__aeabi_dcmpeq>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d034      	beq.n	800cb1e <_printf_float+0x27a>
 800cab4:	4a37      	ldr	r2, [pc, #220]	; (800cb94 <_printf_float+0x2f0>)
 800cab6:	2301      	movs	r3, #1
 800cab8:	4631      	mov	r1, r6
 800caba:	4628      	mov	r0, r5
 800cabc:	47b8      	blx	r7
 800cabe:	3001      	adds	r0, #1
 800cac0:	f43f af51 	beq.w	800c966 <_printf_float+0xc2>
 800cac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cac8:	429a      	cmp	r2, r3
 800caca:	db02      	blt.n	800cad2 <_printf_float+0x22e>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	07d8      	lsls	r0, r3, #31
 800cad0:	d510      	bpl.n	800caf4 <_printf_float+0x250>
 800cad2:	ee18 3a10 	vmov	r3, s16
 800cad6:	4652      	mov	r2, sl
 800cad8:	4631      	mov	r1, r6
 800cada:	4628      	mov	r0, r5
 800cadc:	47b8      	blx	r7
 800cade:	3001      	adds	r0, #1
 800cae0:	f43f af41 	beq.w	800c966 <_printf_float+0xc2>
 800cae4:	f04f 0800 	mov.w	r8, #0
 800cae8:	f104 091a 	add.w	r9, r4, #26
 800caec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caee:	3b01      	subs	r3, #1
 800caf0:	4543      	cmp	r3, r8
 800caf2:	dc09      	bgt.n	800cb08 <_printf_float+0x264>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	079b      	lsls	r3, r3, #30
 800caf8:	f100 8105 	bmi.w	800cd06 <_printf_float+0x462>
 800cafc:	68e0      	ldr	r0, [r4, #12]
 800cafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb00:	4298      	cmp	r0, r3
 800cb02:	bfb8      	it	lt
 800cb04:	4618      	movlt	r0, r3
 800cb06:	e730      	b.n	800c96a <_printf_float+0xc6>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	464a      	mov	r2, r9
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f af27 	beq.w	800c966 <_printf_float+0xc2>
 800cb18:	f108 0801 	add.w	r8, r8, #1
 800cb1c:	e7e6      	b.n	800caec <_printf_float+0x248>
 800cb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dc39      	bgt.n	800cb98 <_printf_float+0x2f4>
 800cb24:	4a1b      	ldr	r2, [pc, #108]	; (800cb94 <_printf_float+0x2f0>)
 800cb26:	2301      	movs	r3, #1
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	f43f af19 	beq.w	800c966 <_printf_float+0xc2>
 800cb34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	d102      	bne.n	800cb42 <_printf_float+0x29e>
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	07d9      	lsls	r1, r3, #31
 800cb40:	d5d8      	bpl.n	800caf4 <_printf_float+0x250>
 800cb42:	ee18 3a10 	vmov	r3, s16
 800cb46:	4652      	mov	r2, sl
 800cb48:	4631      	mov	r1, r6
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b8      	blx	r7
 800cb4e:	3001      	adds	r0, #1
 800cb50:	f43f af09 	beq.w	800c966 <_printf_float+0xc2>
 800cb54:	f04f 0900 	mov.w	r9, #0
 800cb58:	f104 0a1a 	add.w	sl, r4, #26
 800cb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5e:	425b      	negs	r3, r3
 800cb60:	454b      	cmp	r3, r9
 800cb62:	dc01      	bgt.n	800cb68 <_printf_float+0x2c4>
 800cb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb66:	e792      	b.n	800ca8e <_printf_float+0x1ea>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	4628      	mov	r0, r5
 800cb70:	47b8      	blx	r7
 800cb72:	3001      	adds	r0, #1
 800cb74:	f43f aef7 	beq.w	800c966 <_printf_float+0xc2>
 800cb78:	f109 0901 	add.w	r9, r9, #1
 800cb7c:	e7ee      	b.n	800cb5c <_printf_float+0x2b8>
 800cb7e:	bf00      	nop
 800cb80:	7fefffff 	.word	0x7fefffff
 800cb84:	08011500 	.word	0x08011500
 800cb88:	08011504 	.word	0x08011504
 800cb8c:	0801150c 	.word	0x0801150c
 800cb90:	08011508 	.word	0x08011508
 800cb94:	08011510 	.word	0x08011510
 800cb98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	bfa8      	it	ge
 800cba0:	461a      	movge	r2, r3
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	4691      	mov	r9, r2
 800cba6:	dc37      	bgt.n	800cc18 <_printf_float+0x374>
 800cba8:	f04f 0b00 	mov.w	fp, #0
 800cbac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbb0:	f104 021a 	add.w	r2, r4, #26
 800cbb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbb6:	9305      	str	r3, [sp, #20]
 800cbb8:	eba3 0309 	sub.w	r3, r3, r9
 800cbbc:	455b      	cmp	r3, fp
 800cbbe:	dc33      	bgt.n	800cc28 <_printf_float+0x384>
 800cbc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	db3b      	blt.n	800cc40 <_printf_float+0x39c>
 800cbc8:	6823      	ldr	r3, [r4, #0]
 800cbca:	07da      	lsls	r2, r3, #31
 800cbcc:	d438      	bmi.n	800cc40 <_printf_float+0x39c>
 800cbce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbd0:	9b05      	ldr	r3, [sp, #20]
 800cbd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	eba2 0901 	sub.w	r9, r2, r1
 800cbda:	4599      	cmp	r9, r3
 800cbdc:	bfa8      	it	ge
 800cbde:	4699      	movge	r9, r3
 800cbe0:	f1b9 0f00 	cmp.w	r9, #0
 800cbe4:	dc35      	bgt.n	800cc52 <_printf_float+0x3ae>
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbee:	f104 0a1a 	add.w	sl, r4, #26
 800cbf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	eba3 0309 	sub.w	r3, r3, r9
 800cbfc:	4543      	cmp	r3, r8
 800cbfe:	f77f af79 	ble.w	800caf4 <_printf_float+0x250>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4652      	mov	r2, sl
 800cc06:	4631      	mov	r1, r6
 800cc08:	4628      	mov	r0, r5
 800cc0a:	47b8      	blx	r7
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	f43f aeaa 	beq.w	800c966 <_printf_float+0xc2>
 800cc12:	f108 0801 	add.w	r8, r8, #1
 800cc16:	e7ec      	b.n	800cbf2 <_printf_float+0x34e>
 800cc18:	4613      	mov	r3, r2
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	d1c0      	bne.n	800cba8 <_printf_float+0x304>
 800cc26:	e69e      	b.n	800c966 <_printf_float+0xc2>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	9205      	str	r2, [sp, #20]
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	f43f ae97 	beq.w	800c966 <_printf_float+0xc2>
 800cc38:	9a05      	ldr	r2, [sp, #20]
 800cc3a:	f10b 0b01 	add.w	fp, fp, #1
 800cc3e:	e7b9      	b.n	800cbb4 <_printf_float+0x310>
 800cc40:	ee18 3a10 	vmov	r3, s16
 800cc44:	4652      	mov	r2, sl
 800cc46:	4631      	mov	r1, r6
 800cc48:	4628      	mov	r0, r5
 800cc4a:	47b8      	blx	r7
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d1be      	bne.n	800cbce <_printf_float+0x32a>
 800cc50:	e689      	b.n	800c966 <_printf_float+0xc2>
 800cc52:	9a05      	ldr	r2, [sp, #20]
 800cc54:	464b      	mov	r3, r9
 800cc56:	4442      	add	r2, r8
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d1c1      	bne.n	800cbe6 <_printf_float+0x342>
 800cc62:	e680      	b.n	800c966 <_printf_float+0xc2>
 800cc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc66:	2a01      	cmp	r2, #1
 800cc68:	dc01      	bgt.n	800cc6e <_printf_float+0x3ca>
 800cc6a:	07db      	lsls	r3, r3, #31
 800cc6c:	d538      	bpl.n	800cce0 <_printf_float+0x43c>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	4642      	mov	r2, r8
 800cc72:	4631      	mov	r1, r6
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b8      	blx	r7
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f43f ae74 	beq.w	800c966 <_printf_float+0xc2>
 800cc7e:	ee18 3a10 	vmov	r3, s16
 800cc82:	4652      	mov	r2, sl
 800cc84:	4631      	mov	r1, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f43f ae6b 	beq.w	800c966 <_printf_float+0xc2>
 800cc90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	f7f3 ff3e 	bl	8000b18 <__aeabi_dcmpeq>
 800cc9c:	b9d8      	cbnz	r0, 800ccd6 <_printf_float+0x432>
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	f108 0201 	add.w	r2, r8, #1
 800cca4:	3b01      	subs	r3, #1
 800cca6:	4631      	mov	r1, r6
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b8      	blx	r7
 800ccac:	3001      	adds	r0, #1
 800ccae:	d10e      	bne.n	800ccce <_printf_float+0x42a>
 800ccb0:	e659      	b.n	800c966 <_printf_float+0xc2>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	f43f ae52 	beq.w	800c966 <_printf_float+0xc2>
 800ccc2:	f108 0801 	add.w	r8, r8, #1
 800ccc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	4543      	cmp	r3, r8
 800cccc:	dcf1      	bgt.n	800ccb2 <_printf_float+0x40e>
 800ccce:	464b      	mov	r3, r9
 800ccd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ccd4:	e6dc      	b.n	800ca90 <_printf_float+0x1ec>
 800ccd6:	f04f 0800 	mov.w	r8, #0
 800ccda:	f104 0a1a 	add.w	sl, r4, #26
 800ccde:	e7f2      	b.n	800ccc6 <_printf_float+0x422>
 800cce0:	2301      	movs	r3, #1
 800cce2:	4642      	mov	r2, r8
 800cce4:	e7df      	b.n	800cca6 <_printf_float+0x402>
 800cce6:	2301      	movs	r3, #1
 800cce8:	464a      	mov	r2, r9
 800ccea:	4631      	mov	r1, r6
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b8      	blx	r7
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f43f ae38 	beq.w	800c966 <_printf_float+0xc2>
 800ccf6:	f108 0801 	add.w	r8, r8, #1
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccfe:	1a5b      	subs	r3, r3, r1
 800cd00:	4543      	cmp	r3, r8
 800cd02:	dcf0      	bgt.n	800cce6 <_printf_float+0x442>
 800cd04:	e6fa      	b.n	800cafc <_printf_float+0x258>
 800cd06:	f04f 0800 	mov.w	r8, #0
 800cd0a:	f104 0919 	add.w	r9, r4, #25
 800cd0e:	e7f4      	b.n	800ccfa <_printf_float+0x456>

0800cd10 <_printf_common>:
 800cd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	4616      	mov	r6, r2
 800cd16:	4699      	mov	r9, r3
 800cd18:	688a      	ldr	r2, [r1, #8]
 800cd1a:	690b      	ldr	r3, [r1, #16]
 800cd1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd20:	4293      	cmp	r3, r2
 800cd22:	bfb8      	it	lt
 800cd24:	4613      	movlt	r3, r2
 800cd26:	6033      	str	r3, [r6, #0]
 800cd28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	b10a      	cbz	r2, 800cd36 <_printf_common+0x26>
 800cd32:	3301      	adds	r3, #1
 800cd34:	6033      	str	r3, [r6, #0]
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	0699      	lsls	r1, r3, #26
 800cd3a:	bf42      	ittt	mi
 800cd3c:	6833      	ldrmi	r3, [r6, #0]
 800cd3e:	3302      	addmi	r3, #2
 800cd40:	6033      	strmi	r3, [r6, #0]
 800cd42:	6825      	ldr	r5, [r4, #0]
 800cd44:	f015 0506 	ands.w	r5, r5, #6
 800cd48:	d106      	bne.n	800cd58 <_printf_common+0x48>
 800cd4a:	f104 0a19 	add.w	sl, r4, #25
 800cd4e:	68e3      	ldr	r3, [r4, #12]
 800cd50:	6832      	ldr	r2, [r6, #0]
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	42ab      	cmp	r3, r5
 800cd56:	dc26      	bgt.n	800cda6 <_printf_common+0x96>
 800cd58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd5c:	1e13      	subs	r3, r2, #0
 800cd5e:	6822      	ldr	r2, [r4, #0]
 800cd60:	bf18      	it	ne
 800cd62:	2301      	movne	r3, #1
 800cd64:	0692      	lsls	r2, r2, #26
 800cd66:	d42b      	bmi.n	800cdc0 <_printf_common+0xb0>
 800cd68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	4638      	mov	r0, r7
 800cd70:	47c0      	blx	r8
 800cd72:	3001      	adds	r0, #1
 800cd74:	d01e      	beq.n	800cdb4 <_printf_common+0xa4>
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	68e5      	ldr	r5, [r4, #12]
 800cd7a:	6832      	ldr	r2, [r6, #0]
 800cd7c:	f003 0306 	and.w	r3, r3, #6
 800cd80:	2b04      	cmp	r3, #4
 800cd82:	bf08      	it	eq
 800cd84:	1aad      	subeq	r5, r5, r2
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	6922      	ldr	r2, [r4, #16]
 800cd8a:	bf0c      	ite	eq
 800cd8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd90:	2500      	movne	r5, #0
 800cd92:	4293      	cmp	r3, r2
 800cd94:	bfc4      	itt	gt
 800cd96:	1a9b      	subgt	r3, r3, r2
 800cd98:	18ed      	addgt	r5, r5, r3
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	341a      	adds	r4, #26
 800cd9e:	42b5      	cmp	r5, r6
 800cda0:	d11a      	bne.n	800cdd8 <_printf_common+0xc8>
 800cda2:	2000      	movs	r0, #0
 800cda4:	e008      	b.n	800cdb8 <_printf_common+0xa8>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4649      	mov	r1, r9
 800cdac:	4638      	mov	r0, r7
 800cdae:	47c0      	blx	r8
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d103      	bne.n	800cdbc <_printf_common+0xac>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbc:	3501      	adds	r5, #1
 800cdbe:	e7c6      	b.n	800cd4e <_printf_common+0x3e>
 800cdc0:	18e1      	adds	r1, r4, r3
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	2030      	movs	r0, #48	; 0x30
 800cdc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdca:	4422      	add	r2, r4
 800cdcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	e7c7      	b.n	800cd68 <_printf_common+0x58>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4622      	mov	r2, r4
 800cddc:	4649      	mov	r1, r9
 800cdde:	4638      	mov	r0, r7
 800cde0:	47c0      	blx	r8
 800cde2:	3001      	adds	r0, #1
 800cde4:	d0e6      	beq.n	800cdb4 <_printf_common+0xa4>
 800cde6:	3601      	adds	r6, #1
 800cde8:	e7d9      	b.n	800cd9e <_printf_common+0x8e>
	...

0800cdec <_printf_i>:
 800cdec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf0:	460c      	mov	r4, r1
 800cdf2:	4691      	mov	r9, r2
 800cdf4:	7e27      	ldrb	r7, [r4, #24]
 800cdf6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cdf8:	2f78      	cmp	r7, #120	; 0x78
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	469a      	mov	sl, r3
 800cdfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce02:	d807      	bhi.n	800ce14 <_printf_i+0x28>
 800ce04:	2f62      	cmp	r7, #98	; 0x62
 800ce06:	d80a      	bhi.n	800ce1e <_printf_i+0x32>
 800ce08:	2f00      	cmp	r7, #0
 800ce0a:	f000 80d8 	beq.w	800cfbe <_printf_i+0x1d2>
 800ce0e:	2f58      	cmp	r7, #88	; 0x58
 800ce10:	f000 80a3 	beq.w	800cf5a <_printf_i+0x16e>
 800ce14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce1c:	e03a      	b.n	800ce94 <_printf_i+0xa8>
 800ce1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce22:	2b15      	cmp	r3, #21
 800ce24:	d8f6      	bhi.n	800ce14 <_printf_i+0x28>
 800ce26:	a001      	add	r0, pc, #4	; (adr r0, 800ce2c <_printf_i+0x40>)
 800ce28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ce2c:	0800ce85 	.word	0x0800ce85
 800ce30:	0800ce99 	.word	0x0800ce99
 800ce34:	0800ce15 	.word	0x0800ce15
 800ce38:	0800ce15 	.word	0x0800ce15
 800ce3c:	0800ce15 	.word	0x0800ce15
 800ce40:	0800ce15 	.word	0x0800ce15
 800ce44:	0800ce99 	.word	0x0800ce99
 800ce48:	0800ce15 	.word	0x0800ce15
 800ce4c:	0800ce15 	.word	0x0800ce15
 800ce50:	0800ce15 	.word	0x0800ce15
 800ce54:	0800ce15 	.word	0x0800ce15
 800ce58:	0800cfa5 	.word	0x0800cfa5
 800ce5c:	0800cec9 	.word	0x0800cec9
 800ce60:	0800cf87 	.word	0x0800cf87
 800ce64:	0800ce15 	.word	0x0800ce15
 800ce68:	0800ce15 	.word	0x0800ce15
 800ce6c:	0800cfc7 	.word	0x0800cfc7
 800ce70:	0800ce15 	.word	0x0800ce15
 800ce74:	0800cec9 	.word	0x0800cec9
 800ce78:	0800ce15 	.word	0x0800ce15
 800ce7c:	0800ce15 	.word	0x0800ce15
 800ce80:	0800cf8f 	.word	0x0800cf8f
 800ce84:	680b      	ldr	r3, [r1, #0]
 800ce86:	1d1a      	adds	r2, r3, #4
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	600a      	str	r2, [r1, #0]
 800ce8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce94:	2301      	movs	r3, #1
 800ce96:	e0a3      	b.n	800cfe0 <_printf_i+0x1f4>
 800ce98:	6825      	ldr	r5, [r4, #0]
 800ce9a:	6808      	ldr	r0, [r1, #0]
 800ce9c:	062e      	lsls	r6, r5, #24
 800ce9e:	f100 0304 	add.w	r3, r0, #4
 800cea2:	d50a      	bpl.n	800ceba <_printf_i+0xce>
 800cea4:	6805      	ldr	r5, [r0, #0]
 800cea6:	600b      	str	r3, [r1, #0]
 800cea8:	2d00      	cmp	r5, #0
 800ceaa:	da03      	bge.n	800ceb4 <_printf_i+0xc8>
 800ceac:	232d      	movs	r3, #45	; 0x2d
 800ceae:	426d      	negs	r5, r5
 800ceb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb4:	485e      	ldr	r0, [pc, #376]	; (800d030 <_printf_i+0x244>)
 800ceb6:	230a      	movs	r3, #10
 800ceb8:	e019      	b.n	800ceee <_printf_i+0x102>
 800ceba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cebe:	6805      	ldr	r5, [r0, #0]
 800cec0:	600b      	str	r3, [r1, #0]
 800cec2:	bf18      	it	ne
 800cec4:	b22d      	sxthne	r5, r5
 800cec6:	e7ef      	b.n	800cea8 <_printf_i+0xbc>
 800cec8:	680b      	ldr	r3, [r1, #0]
 800ceca:	6825      	ldr	r5, [r4, #0]
 800cecc:	1d18      	adds	r0, r3, #4
 800cece:	6008      	str	r0, [r1, #0]
 800ced0:	0628      	lsls	r0, r5, #24
 800ced2:	d501      	bpl.n	800ced8 <_printf_i+0xec>
 800ced4:	681d      	ldr	r5, [r3, #0]
 800ced6:	e002      	b.n	800cede <_printf_i+0xf2>
 800ced8:	0669      	lsls	r1, r5, #25
 800ceda:	d5fb      	bpl.n	800ced4 <_printf_i+0xe8>
 800cedc:	881d      	ldrh	r5, [r3, #0]
 800cede:	4854      	ldr	r0, [pc, #336]	; (800d030 <_printf_i+0x244>)
 800cee0:	2f6f      	cmp	r7, #111	; 0x6f
 800cee2:	bf0c      	ite	eq
 800cee4:	2308      	moveq	r3, #8
 800cee6:	230a      	movne	r3, #10
 800cee8:	2100      	movs	r1, #0
 800ceea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceee:	6866      	ldr	r6, [r4, #4]
 800cef0:	60a6      	str	r6, [r4, #8]
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	bfa2      	ittt	ge
 800cef6:	6821      	ldrge	r1, [r4, #0]
 800cef8:	f021 0104 	bicge.w	r1, r1, #4
 800cefc:	6021      	strge	r1, [r4, #0]
 800cefe:	b90d      	cbnz	r5, 800cf04 <_printf_i+0x118>
 800cf00:	2e00      	cmp	r6, #0
 800cf02:	d04d      	beq.n	800cfa0 <_printf_i+0x1b4>
 800cf04:	4616      	mov	r6, r2
 800cf06:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf0a:	fb03 5711 	mls	r7, r3, r1, r5
 800cf0e:	5dc7      	ldrb	r7, [r0, r7]
 800cf10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf14:	462f      	mov	r7, r5
 800cf16:	42bb      	cmp	r3, r7
 800cf18:	460d      	mov	r5, r1
 800cf1a:	d9f4      	bls.n	800cf06 <_printf_i+0x11a>
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	d10b      	bne.n	800cf38 <_printf_i+0x14c>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	07df      	lsls	r7, r3, #31
 800cf24:	d508      	bpl.n	800cf38 <_printf_i+0x14c>
 800cf26:	6923      	ldr	r3, [r4, #16]
 800cf28:	6861      	ldr	r1, [r4, #4]
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	bfde      	ittt	le
 800cf2e:	2330      	movle	r3, #48	; 0x30
 800cf30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf38:	1b92      	subs	r2, r2, r6
 800cf3a:	6122      	str	r2, [r4, #16]
 800cf3c:	f8cd a000 	str.w	sl, [sp]
 800cf40:	464b      	mov	r3, r9
 800cf42:	aa03      	add	r2, sp, #12
 800cf44:	4621      	mov	r1, r4
 800cf46:	4640      	mov	r0, r8
 800cf48:	f7ff fee2 	bl	800cd10 <_printf_common>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d14c      	bne.n	800cfea <_printf_i+0x1fe>
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	b004      	add	sp, #16
 800cf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5a:	4835      	ldr	r0, [pc, #212]	; (800d030 <_printf_i+0x244>)
 800cf5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	680e      	ldr	r6, [r1, #0]
 800cf64:	061f      	lsls	r7, r3, #24
 800cf66:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf6a:	600e      	str	r6, [r1, #0]
 800cf6c:	d514      	bpl.n	800cf98 <_printf_i+0x1ac>
 800cf6e:	07d9      	lsls	r1, r3, #31
 800cf70:	bf44      	itt	mi
 800cf72:	f043 0320 	orrmi.w	r3, r3, #32
 800cf76:	6023      	strmi	r3, [r4, #0]
 800cf78:	b91d      	cbnz	r5, 800cf82 <_printf_i+0x196>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f023 0320 	bic.w	r3, r3, #32
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	2310      	movs	r3, #16
 800cf84:	e7b0      	b.n	800cee8 <_printf_i+0xfc>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f043 0320 	orr.w	r3, r3, #32
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	2378      	movs	r3, #120	; 0x78
 800cf90:	4828      	ldr	r0, [pc, #160]	; (800d034 <_printf_i+0x248>)
 800cf92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf96:	e7e3      	b.n	800cf60 <_printf_i+0x174>
 800cf98:	065e      	lsls	r6, r3, #25
 800cf9a:	bf48      	it	mi
 800cf9c:	b2ad      	uxthmi	r5, r5
 800cf9e:	e7e6      	b.n	800cf6e <_printf_i+0x182>
 800cfa0:	4616      	mov	r6, r2
 800cfa2:	e7bb      	b.n	800cf1c <_printf_i+0x130>
 800cfa4:	680b      	ldr	r3, [r1, #0]
 800cfa6:	6826      	ldr	r6, [r4, #0]
 800cfa8:	6960      	ldr	r0, [r4, #20]
 800cfaa:	1d1d      	adds	r5, r3, #4
 800cfac:	600d      	str	r5, [r1, #0]
 800cfae:	0635      	lsls	r5, r6, #24
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	d501      	bpl.n	800cfb8 <_printf_i+0x1cc>
 800cfb4:	6018      	str	r0, [r3, #0]
 800cfb6:	e002      	b.n	800cfbe <_printf_i+0x1d2>
 800cfb8:	0671      	lsls	r1, r6, #25
 800cfba:	d5fb      	bpl.n	800cfb4 <_printf_i+0x1c8>
 800cfbc:	8018      	strh	r0, [r3, #0]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	6123      	str	r3, [r4, #16]
 800cfc2:	4616      	mov	r6, r2
 800cfc4:	e7ba      	b.n	800cf3c <_printf_i+0x150>
 800cfc6:	680b      	ldr	r3, [r1, #0]
 800cfc8:	1d1a      	adds	r2, r3, #4
 800cfca:	600a      	str	r2, [r1, #0]
 800cfcc:	681e      	ldr	r6, [r3, #0]
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4630      	mov	r0, r6
 800cfd4:	f7f3 f92c 	bl	8000230 <memchr>
 800cfd8:	b108      	cbz	r0, 800cfde <_printf_i+0x1f2>
 800cfda:	1b80      	subs	r0, r0, r6
 800cfdc:	6060      	str	r0, [r4, #4]
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	6123      	str	r3, [r4, #16]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe8:	e7a8      	b.n	800cf3c <_printf_i+0x150>
 800cfea:	6923      	ldr	r3, [r4, #16]
 800cfec:	4632      	mov	r2, r6
 800cfee:	4649      	mov	r1, r9
 800cff0:	4640      	mov	r0, r8
 800cff2:	47d0      	blx	sl
 800cff4:	3001      	adds	r0, #1
 800cff6:	d0ab      	beq.n	800cf50 <_printf_i+0x164>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	079b      	lsls	r3, r3, #30
 800cffc:	d413      	bmi.n	800d026 <_printf_i+0x23a>
 800cffe:	68e0      	ldr	r0, [r4, #12]
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	4298      	cmp	r0, r3
 800d004:	bfb8      	it	lt
 800d006:	4618      	movlt	r0, r3
 800d008:	e7a4      	b.n	800cf54 <_printf_i+0x168>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4632      	mov	r2, r6
 800d00e:	4649      	mov	r1, r9
 800d010:	4640      	mov	r0, r8
 800d012:	47d0      	blx	sl
 800d014:	3001      	adds	r0, #1
 800d016:	d09b      	beq.n	800cf50 <_printf_i+0x164>
 800d018:	3501      	adds	r5, #1
 800d01a:	68e3      	ldr	r3, [r4, #12]
 800d01c:	9903      	ldr	r1, [sp, #12]
 800d01e:	1a5b      	subs	r3, r3, r1
 800d020:	42ab      	cmp	r3, r5
 800d022:	dcf2      	bgt.n	800d00a <_printf_i+0x21e>
 800d024:	e7eb      	b.n	800cffe <_printf_i+0x212>
 800d026:	2500      	movs	r5, #0
 800d028:	f104 0619 	add.w	r6, r4, #25
 800d02c:	e7f5      	b.n	800d01a <_printf_i+0x22e>
 800d02e:	bf00      	nop
 800d030:	08011512 	.word	0x08011512
 800d034:	08011523 	.word	0x08011523

0800d038 <cleanup_glue>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	460c      	mov	r4, r1
 800d03c:	6809      	ldr	r1, [r1, #0]
 800d03e:	4605      	mov	r5, r0
 800d040:	b109      	cbz	r1, 800d046 <cleanup_glue+0xe>
 800d042:	f7ff fff9 	bl	800d038 <cleanup_glue>
 800d046:	4621      	mov	r1, r4
 800d048:	4628      	mov	r0, r5
 800d04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04e:	f7ff badf 	b.w	800c610 <_free_r>
	...

0800d054 <_reclaim_reent>:
 800d054:	4b2c      	ldr	r3, [pc, #176]	; (800d108 <_reclaim_reent+0xb4>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4283      	cmp	r3, r0
 800d05a:	b570      	push	{r4, r5, r6, lr}
 800d05c:	4604      	mov	r4, r0
 800d05e:	d051      	beq.n	800d104 <_reclaim_reent+0xb0>
 800d060:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d062:	b143      	cbz	r3, 800d076 <_reclaim_reent+0x22>
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d14a      	bne.n	800d100 <_reclaim_reent+0xac>
 800d06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	b111      	cbz	r1, 800d076 <_reclaim_reent+0x22>
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff facd 	bl	800c610 <_free_r>
 800d076:	6961      	ldr	r1, [r4, #20]
 800d078:	b111      	cbz	r1, 800d080 <_reclaim_reent+0x2c>
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7ff fac8 	bl	800c610 <_free_r>
 800d080:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d082:	b111      	cbz	r1, 800d08a <_reclaim_reent+0x36>
 800d084:	4620      	mov	r0, r4
 800d086:	f7ff fac3 	bl	800c610 <_free_r>
 800d08a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d08c:	b111      	cbz	r1, 800d094 <_reclaim_reent+0x40>
 800d08e:	4620      	mov	r0, r4
 800d090:	f7ff fabe 	bl	800c610 <_free_r>
 800d094:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d096:	b111      	cbz	r1, 800d09e <_reclaim_reent+0x4a>
 800d098:	4620      	mov	r0, r4
 800d09a:	f7ff fab9 	bl	800c610 <_free_r>
 800d09e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d0a0:	b111      	cbz	r1, 800d0a8 <_reclaim_reent+0x54>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f7ff fab4 	bl	800c610 <_free_r>
 800d0a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d0aa:	b111      	cbz	r1, 800d0b2 <_reclaim_reent+0x5e>
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	f7ff faaf 	bl	800c610 <_free_r>
 800d0b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d0b4:	b111      	cbz	r1, 800d0bc <_reclaim_reent+0x68>
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	f7ff faaa 	bl	800c610 <_free_r>
 800d0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0be:	b111      	cbz	r1, 800d0c6 <_reclaim_reent+0x72>
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f7ff faa5 	bl	800c610 <_free_r>
 800d0c6:	69a3      	ldr	r3, [r4, #24]
 800d0c8:	b1e3      	cbz	r3, 800d104 <_reclaim_reent+0xb0>
 800d0ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4798      	blx	r3
 800d0d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0d2:	b1b9      	cbz	r1, 800d104 <_reclaim_reent+0xb0>
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0da:	f7ff bfad 	b.w	800d038 <cleanup_glue>
 800d0de:	5949      	ldr	r1, [r1, r5]
 800d0e0:	b941      	cbnz	r1, 800d0f4 <_reclaim_reent+0xa0>
 800d0e2:	3504      	adds	r5, #4
 800d0e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0e6:	2d80      	cmp	r5, #128	; 0x80
 800d0e8:	68d9      	ldr	r1, [r3, #12]
 800d0ea:	d1f8      	bne.n	800d0de <_reclaim_reent+0x8a>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f7ff fa8f 	bl	800c610 <_free_r>
 800d0f2:	e7ba      	b.n	800d06a <_reclaim_reent+0x16>
 800d0f4:	680e      	ldr	r6, [r1, #0]
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff fa8a 	bl	800c610 <_free_r>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	e7ef      	b.n	800d0e0 <_reclaim_reent+0x8c>
 800d100:	2500      	movs	r5, #0
 800d102:	e7ef      	b.n	800d0e4 <_reclaim_reent+0x90>
 800d104:	bd70      	pop	{r4, r5, r6, pc}
 800d106:	bf00      	nop
 800d108:	20000010 	.word	0x20000010

0800d10c <_sbrk_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	4d06      	ldr	r5, [pc, #24]	; (800d128 <_sbrk_r+0x1c>)
 800d110:	2300      	movs	r3, #0
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	602b      	str	r3, [r5, #0]
 800d118:	f7f6 fc3c 	bl	8003994 <_sbrk>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d102      	bne.n	800d126 <_sbrk_r+0x1a>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	b103      	cbz	r3, 800d126 <_sbrk_r+0x1a>
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	20004d58 	.word	0x20004d58

0800d12c <__sread>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f001 fb4a 	bl	800e7cc <_read_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	bfab      	itete	ge
 800d13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d13e:	89a3      	ldrhlt	r3, [r4, #12]
 800d140:	181b      	addge	r3, r3, r0
 800d142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d146:	bfac      	ite	ge
 800d148:	6563      	strge	r3, [r4, #84]	; 0x54
 800d14a:	81a3      	strhlt	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__swrite>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	05db      	lsls	r3, r3, #23
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	d505      	bpl.n	800d16c <__swrite+0x1e>
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2302      	movs	r3, #2
 800d166:	2200      	movs	r2, #0
 800d168:	f000 ff84 	bl	800e074 <_lseek_r>
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f000 b817 	b.w	800d1b4 <_write_r>

0800d186 <__sseek>:
 800d186:	b510      	push	{r4, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 ff71 	bl	800e074 <_lseek_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	bf15      	itete	ne
 800d198:	6560      	strne	r0, [r4, #84]	; 0x54
 800d19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1a2:	81a3      	strheq	r3, [r4, #12]
 800d1a4:	bf18      	it	ne
 800d1a6:	81a3      	strhne	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__sclose>:
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 b813 	b.w	800d1d8 <_close_r>
	...

0800d1b4 <_write_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d07      	ldr	r5, [pc, #28]	; (800d1d4 <_write_r+0x20>)
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	4608      	mov	r0, r1
 800d1bc:	4611      	mov	r1, r2
 800d1be:	2200      	movs	r2, #0
 800d1c0:	602a      	str	r2, [r5, #0]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f7f6 fb95 	bl	80038f2 <_write>
 800d1c8:	1c43      	adds	r3, r0, #1
 800d1ca:	d102      	bne.n	800d1d2 <_write_r+0x1e>
 800d1cc:	682b      	ldr	r3, [r5, #0]
 800d1ce:	b103      	cbz	r3, 800d1d2 <_write_r+0x1e>
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	20004d58 	.word	0x20004d58

0800d1d8 <_close_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	4d06      	ldr	r5, [pc, #24]	; (800d1f4 <_close_r+0x1c>)
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	602b      	str	r3, [r5, #0]
 800d1e4:	f7f6 fba1 	bl	800392a <_close>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_close_r+0x1a>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_close_r+0x1a>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	20004d58 	.word	0x20004d58

0800d1f8 <quorem>:
 800d1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	6903      	ldr	r3, [r0, #16]
 800d1fe:	690c      	ldr	r4, [r1, #16]
 800d200:	42a3      	cmp	r3, r4
 800d202:	4607      	mov	r7, r0
 800d204:	f2c0 8081 	blt.w	800d30a <quorem+0x112>
 800d208:	3c01      	subs	r4, #1
 800d20a:	f101 0814 	add.w	r8, r1, #20
 800d20e:	f100 0514 	add.w	r5, r0, #20
 800d212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d216:	9301      	str	r3, [sp, #4]
 800d218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d21c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d220:	3301      	adds	r3, #1
 800d222:	429a      	cmp	r2, r3
 800d224:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d22c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d230:	d331      	bcc.n	800d296 <quorem+0x9e>
 800d232:	f04f 0e00 	mov.w	lr, #0
 800d236:	4640      	mov	r0, r8
 800d238:	46ac      	mov	ip, r5
 800d23a:	46f2      	mov	sl, lr
 800d23c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d240:	b293      	uxth	r3, r2
 800d242:	fb06 e303 	mla	r3, r6, r3, lr
 800d246:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	ebaa 0303 	sub.w	r3, sl, r3
 800d250:	0c12      	lsrs	r2, r2, #16
 800d252:	f8dc a000 	ldr.w	sl, [ip]
 800d256:	fb06 e202 	mla	r2, r6, r2, lr
 800d25a:	fa13 f38a 	uxtah	r3, r3, sl
 800d25e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d262:	fa1f fa82 	uxth.w	sl, r2
 800d266:	f8dc 2000 	ldr.w	r2, [ip]
 800d26a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d26e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d272:	b29b      	uxth	r3, r3
 800d274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d278:	4581      	cmp	r9, r0
 800d27a:	f84c 3b04 	str.w	r3, [ip], #4
 800d27e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d282:	d2db      	bcs.n	800d23c <quorem+0x44>
 800d284:	f855 300b 	ldr.w	r3, [r5, fp]
 800d288:	b92b      	cbnz	r3, 800d296 <quorem+0x9e>
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	3b04      	subs	r3, #4
 800d28e:	429d      	cmp	r5, r3
 800d290:	461a      	mov	r2, r3
 800d292:	d32e      	bcc.n	800d2f2 <quorem+0xfa>
 800d294:	613c      	str	r4, [r7, #16]
 800d296:	4638      	mov	r0, r7
 800d298:	f001 f988 	bl	800e5ac <__mcmp>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	db24      	blt.n	800d2ea <quorem+0xf2>
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f04f 0c00 	mov.w	ip, #0
 800d2a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d2ac:	f8d0 e000 	ldr.w	lr, [r0]
 800d2b0:	b293      	uxth	r3, r2
 800d2b2:	ebac 0303 	sub.w	r3, ip, r3
 800d2b6:	0c12      	lsrs	r2, r2, #16
 800d2b8:	fa13 f38e 	uxtah	r3, r3, lr
 800d2bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d2c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2ca:	45c1      	cmp	r9, r8
 800d2cc:	f840 3b04 	str.w	r3, [r0], #4
 800d2d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d2d4:	d2e8      	bcs.n	800d2a8 <quorem+0xb0>
 800d2d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2de:	b922      	cbnz	r2, 800d2ea <quorem+0xf2>
 800d2e0:	3b04      	subs	r3, #4
 800d2e2:	429d      	cmp	r5, r3
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	d30a      	bcc.n	800d2fe <quorem+0x106>
 800d2e8:	613c      	str	r4, [r7, #16]
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	b003      	add	sp, #12
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f2:	6812      	ldr	r2, [r2, #0]
 800d2f4:	3b04      	subs	r3, #4
 800d2f6:	2a00      	cmp	r2, #0
 800d2f8:	d1cc      	bne.n	800d294 <quorem+0x9c>
 800d2fa:	3c01      	subs	r4, #1
 800d2fc:	e7c7      	b.n	800d28e <quorem+0x96>
 800d2fe:	6812      	ldr	r2, [r2, #0]
 800d300:	3b04      	subs	r3, #4
 800d302:	2a00      	cmp	r2, #0
 800d304:	d1f0      	bne.n	800d2e8 <quorem+0xf0>
 800d306:	3c01      	subs	r4, #1
 800d308:	e7eb      	b.n	800d2e2 <quorem+0xea>
 800d30a:	2000      	movs	r0, #0
 800d30c:	e7ee      	b.n	800d2ec <quorem+0xf4>
	...

0800d310 <_dtoa_r>:
 800d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d314:	ed2d 8b02 	vpush	{d8}
 800d318:	ec57 6b10 	vmov	r6, r7, d0
 800d31c:	b095      	sub	sp, #84	; 0x54
 800d31e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d320:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d324:	9105      	str	r1, [sp, #20]
 800d326:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d32a:	4604      	mov	r4, r0
 800d32c:	9209      	str	r2, [sp, #36]	; 0x24
 800d32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d330:	b975      	cbnz	r5, 800d350 <_dtoa_r+0x40>
 800d332:	2010      	movs	r0, #16
 800d334:	f7ff f94e 	bl	800c5d4 <malloc>
 800d338:	4602      	mov	r2, r0
 800d33a:	6260      	str	r0, [r4, #36]	; 0x24
 800d33c:	b920      	cbnz	r0, 800d348 <_dtoa_r+0x38>
 800d33e:	4bb2      	ldr	r3, [pc, #712]	; (800d608 <_dtoa_r+0x2f8>)
 800d340:	21ea      	movs	r1, #234	; 0xea
 800d342:	48b2      	ldr	r0, [pc, #712]	; (800d60c <_dtoa_r+0x2fc>)
 800d344:	f001 fa54 	bl	800e7f0 <__assert_func>
 800d348:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d34c:	6005      	str	r5, [r0, #0]
 800d34e:	60c5      	str	r5, [r0, #12]
 800d350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d352:	6819      	ldr	r1, [r3, #0]
 800d354:	b151      	cbz	r1, 800d36c <_dtoa_r+0x5c>
 800d356:	685a      	ldr	r2, [r3, #4]
 800d358:	604a      	str	r2, [r1, #4]
 800d35a:	2301      	movs	r3, #1
 800d35c:	4093      	lsls	r3, r2
 800d35e:	608b      	str	r3, [r1, #8]
 800d360:	4620      	mov	r0, r4
 800d362:	f000 fee5 	bl	800e130 <_Bfree>
 800d366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	1e3b      	subs	r3, r7, #0
 800d36e:	bfb9      	ittee	lt
 800d370:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d374:	9303      	strlt	r3, [sp, #12]
 800d376:	2300      	movge	r3, #0
 800d378:	f8c8 3000 	strge.w	r3, [r8]
 800d37c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d380:	4ba3      	ldr	r3, [pc, #652]	; (800d610 <_dtoa_r+0x300>)
 800d382:	bfbc      	itt	lt
 800d384:	2201      	movlt	r2, #1
 800d386:	f8c8 2000 	strlt.w	r2, [r8]
 800d38a:	ea33 0309 	bics.w	r3, r3, r9
 800d38e:	d11b      	bne.n	800d3c8 <_dtoa_r+0xb8>
 800d390:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d392:	f242 730f 	movw	r3, #9999	; 0x270f
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d39c:	4333      	orrs	r3, r6
 800d39e:	f000 857a 	beq.w	800de96 <_dtoa_r+0xb86>
 800d3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3a4:	b963      	cbnz	r3, 800d3c0 <_dtoa_r+0xb0>
 800d3a6:	4b9b      	ldr	r3, [pc, #620]	; (800d614 <_dtoa_r+0x304>)
 800d3a8:	e024      	b.n	800d3f4 <_dtoa_r+0xe4>
 800d3aa:	4b9b      	ldr	r3, [pc, #620]	; (800d618 <_dtoa_r+0x308>)
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	9800      	ldr	r0, [sp, #0]
 800d3b6:	b015      	add	sp, #84	; 0x54
 800d3b8:	ecbd 8b02 	vpop	{d8}
 800d3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c0:	4b94      	ldr	r3, [pc, #592]	; (800d614 <_dtoa_r+0x304>)
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	3303      	adds	r3, #3
 800d3c6:	e7f3      	b.n	800d3b0 <_dtoa_r+0xa0>
 800d3c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	ec51 0b17 	vmov	r0, r1, d7
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d3d8:	f7f3 fb9e 	bl	8000b18 <__aeabi_dcmpeq>
 800d3dc:	4680      	mov	r8, r0
 800d3de:	b158      	cbz	r0, 800d3f8 <_dtoa_r+0xe8>
 800d3e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 8551 	beq.w	800de90 <_dtoa_r+0xb80>
 800d3ee:	488b      	ldr	r0, [pc, #556]	; (800d61c <_dtoa_r+0x30c>)
 800d3f0:	6018      	str	r0, [r3, #0]
 800d3f2:	1e43      	subs	r3, r0, #1
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	e7dd      	b.n	800d3b4 <_dtoa_r+0xa4>
 800d3f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d3fc:	aa12      	add	r2, sp, #72	; 0x48
 800d3fe:	a913      	add	r1, sp, #76	; 0x4c
 800d400:	4620      	mov	r0, r4
 800d402:	f001 f977 	bl	800e6f4 <__d2b>
 800d406:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d40a:	4683      	mov	fp, r0
 800d40c:	2d00      	cmp	r5, #0
 800d40e:	d07c      	beq.n	800d50a <_dtoa_r+0x1fa>
 800d410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d412:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d41a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d41e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d422:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d42a:	4b7d      	ldr	r3, [pc, #500]	; (800d620 <_dtoa_r+0x310>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	4630      	mov	r0, r6
 800d430:	4639      	mov	r1, r7
 800d432:	f7f2 ff51 	bl	80002d8 <__aeabi_dsub>
 800d436:	a36e      	add	r3, pc, #440	; (adr r3, 800d5f0 <_dtoa_r+0x2e0>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f3 f904 	bl	8000648 <__aeabi_dmul>
 800d440:	a36d      	add	r3, pc, #436	; (adr r3, 800d5f8 <_dtoa_r+0x2e8>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 ff49 	bl	80002dc <__adddf3>
 800d44a:	4606      	mov	r6, r0
 800d44c:	4628      	mov	r0, r5
 800d44e:	460f      	mov	r7, r1
 800d450:	f7f3 f890 	bl	8000574 <__aeabi_i2d>
 800d454:	a36a      	add	r3, pc, #424	; (adr r3, 800d600 <_dtoa_r+0x2f0>)
 800d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45a:	f7f3 f8f5 	bl	8000648 <__aeabi_dmul>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	4630      	mov	r0, r6
 800d464:	4639      	mov	r1, r7
 800d466:	f7f2 ff39 	bl	80002dc <__adddf3>
 800d46a:	4606      	mov	r6, r0
 800d46c:	460f      	mov	r7, r1
 800d46e:	f7f3 fb9b 	bl	8000ba8 <__aeabi_d2iz>
 800d472:	2200      	movs	r2, #0
 800d474:	4682      	mov	sl, r0
 800d476:	2300      	movs	r3, #0
 800d478:	4630      	mov	r0, r6
 800d47a:	4639      	mov	r1, r7
 800d47c:	f7f3 fb56 	bl	8000b2c <__aeabi_dcmplt>
 800d480:	b148      	cbz	r0, 800d496 <_dtoa_r+0x186>
 800d482:	4650      	mov	r0, sl
 800d484:	f7f3 f876 	bl	8000574 <__aeabi_i2d>
 800d488:	4632      	mov	r2, r6
 800d48a:	463b      	mov	r3, r7
 800d48c:	f7f3 fb44 	bl	8000b18 <__aeabi_dcmpeq>
 800d490:	b908      	cbnz	r0, 800d496 <_dtoa_r+0x186>
 800d492:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d496:	f1ba 0f16 	cmp.w	sl, #22
 800d49a:	d854      	bhi.n	800d546 <_dtoa_r+0x236>
 800d49c:	4b61      	ldr	r3, [pc, #388]	; (800d624 <_dtoa_r+0x314>)
 800d49e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d4aa:	f7f3 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d04b      	beq.n	800d54a <_dtoa_r+0x23a>
 800d4b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	930e      	str	r3, [sp, #56]	; 0x38
 800d4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4bc:	1b5d      	subs	r5, r3, r5
 800d4be:	1e6b      	subs	r3, r5, #1
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	bf43      	ittte	mi
 800d4c4:	2300      	movmi	r3, #0
 800d4c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800d4ca:	9304      	strmi	r3, [sp, #16]
 800d4cc:	f04f 0800 	movpl.w	r8, #0
 800d4d0:	f1ba 0f00 	cmp.w	sl, #0
 800d4d4:	db3b      	blt.n	800d54e <_dtoa_r+0x23e>
 800d4d6:	9b04      	ldr	r3, [sp, #16]
 800d4d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d4dc:	4453      	add	r3, sl
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	9306      	str	r3, [sp, #24]
 800d4e4:	9b05      	ldr	r3, [sp, #20]
 800d4e6:	2b09      	cmp	r3, #9
 800d4e8:	d869      	bhi.n	800d5be <_dtoa_r+0x2ae>
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	bfc4      	itt	gt
 800d4ee:	3b04      	subgt	r3, #4
 800d4f0:	9305      	strgt	r3, [sp, #20]
 800d4f2:	9b05      	ldr	r3, [sp, #20]
 800d4f4:	f1a3 0302 	sub.w	r3, r3, #2
 800d4f8:	bfcc      	ite	gt
 800d4fa:	2500      	movgt	r5, #0
 800d4fc:	2501      	movle	r5, #1
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d869      	bhi.n	800d5d6 <_dtoa_r+0x2c6>
 800d502:	e8df f003 	tbb	[pc, r3]
 800d506:	4e2c      	.short	0x4e2c
 800d508:	5a4c      	.short	0x5a4c
 800d50a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d50e:	441d      	add	r5, r3
 800d510:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d514:	2b20      	cmp	r3, #32
 800d516:	bfc1      	itttt	gt
 800d518:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d51c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d520:	fa09 f303 	lslgt.w	r3, r9, r3
 800d524:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d528:	bfda      	itte	le
 800d52a:	f1c3 0320 	rsble	r3, r3, #32
 800d52e:	fa06 f003 	lslle.w	r0, r6, r3
 800d532:	4318      	orrgt	r0, r3
 800d534:	f7f3 f80e 	bl	8000554 <__aeabi_ui2d>
 800d538:	2301      	movs	r3, #1
 800d53a:	4606      	mov	r6, r0
 800d53c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d540:	3d01      	subs	r5, #1
 800d542:	9310      	str	r3, [sp, #64]	; 0x40
 800d544:	e771      	b.n	800d42a <_dtoa_r+0x11a>
 800d546:	2301      	movs	r3, #1
 800d548:	e7b6      	b.n	800d4b8 <_dtoa_r+0x1a8>
 800d54a:	900e      	str	r0, [sp, #56]	; 0x38
 800d54c:	e7b5      	b.n	800d4ba <_dtoa_r+0x1aa>
 800d54e:	f1ca 0300 	rsb	r3, sl, #0
 800d552:	9306      	str	r3, [sp, #24]
 800d554:	2300      	movs	r3, #0
 800d556:	eba8 080a 	sub.w	r8, r8, sl
 800d55a:	930d      	str	r3, [sp, #52]	; 0x34
 800d55c:	e7c2      	b.n	800d4e4 <_dtoa_r+0x1d4>
 800d55e:	2300      	movs	r3, #0
 800d560:	9308      	str	r3, [sp, #32]
 800d562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d564:	2b00      	cmp	r3, #0
 800d566:	dc39      	bgt.n	800d5dc <_dtoa_r+0x2cc>
 800d568:	f04f 0901 	mov.w	r9, #1
 800d56c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d570:	464b      	mov	r3, r9
 800d572:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d576:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d578:	2200      	movs	r2, #0
 800d57a:	6042      	str	r2, [r0, #4]
 800d57c:	2204      	movs	r2, #4
 800d57e:	f102 0614 	add.w	r6, r2, #20
 800d582:	429e      	cmp	r6, r3
 800d584:	6841      	ldr	r1, [r0, #4]
 800d586:	d92f      	bls.n	800d5e8 <_dtoa_r+0x2d8>
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 fd91 	bl	800e0b0 <_Balloc>
 800d58e:	9000      	str	r0, [sp, #0]
 800d590:	2800      	cmp	r0, #0
 800d592:	d14b      	bne.n	800d62c <_dtoa_r+0x31c>
 800d594:	4b24      	ldr	r3, [pc, #144]	; (800d628 <_dtoa_r+0x318>)
 800d596:	4602      	mov	r2, r0
 800d598:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d59c:	e6d1      	b.n	800d342 <_dtoa_r+0x32>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e7de      	b.n	800d560 <_dtoa_r+0x250>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9308      	str	r3, [sp, #32]
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	eb0a 0903 	add.w	r9, sl, r3
 800d5ac:	f109 0301 	add.w	r3, r9, #1
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	bfb8      	it	lt
 800d5b6:	2301      	movlt	r3, #1
 800d5b8:	e7dd      	b.n	800d576 <_dtoa_r+0x266>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e7f2      	b.n	800d5a4 <_dtoa_r+0x294>
 800d5be:	2501      	movs	r5, #1
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	9305      	str	r3, [sp, #20]
 800d5c4:	9508      	str	r5, [sp, #32]
 800d5c6:	f04f 39ff 	mov.w	r9, #4294967295
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800d5d0:	2312      	movs	r3, #18
 800d5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5d4:	e7cf      	b.n	800d576 <_dtoa_r+0x266>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	9308      	str	r3, [sp, #32]
 800d5da:	e7f4      	b.n	800d5c6 <_dtoa_r+0x2b6>
 800d5dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d5e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d5e4:	464b      	mov	r3, r9
 800d5e6:	e7c6      	b.n	800d576 <_dtoa_r+0x266>
 800d5e8:	3101      	adds	r1, #1
 800d5ea:	6041      	str	r1, [r0, #4]
 800d5ec:	0052      	lsls	r2, r2, #1
 800d5ee:	e7c6      	b.n	800d57e <_dtoa_r+0x26e>
 800d5f0:	636f4361 	.word	0x636f4361
 800d5f4:	3fd287a7 	.word	0x3fd287a7
 800d5f8:	8b60c8b3 	.word	0x8b60c8b3
 800d5fc:	3fc68a28 	.word	0x3fc68a28
 800d600:	509f79fb 	.word	0x509f79fb
 800d604:	3fd34413 	.word	0x3fd34413
 800d608:	08011541 	.word	0x08011541
 800d60c:	08011558 	.word	0x08011558
 800d610:	7ff00000 	.word	0x7ff00000
 800d614:	0801153d 	.word	0x0801153d
 800d618:	08011534 	.word	0x08011534
 800d61c:	08011511 	.word	0x08011511
 800d620:	3ff80000 	.word	0x3ff80000
 800d624:	08011650 	.word	0x08011650
 800d628:	080115b7 	.word	0x080115b7
 800d62c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d62e:	9a00      	ldr	r2, [sp, #0]
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	9b01      	ldr	r3, [sp, #4]
 800d634:	2b0e      	cmp	r3, #14
 800d636:	f200 80ad 	bhi.w	800d794 <_dtoa_r+0x484>
 800d63a:	2d00      	cmp	r5, #0
 800d63c:	f000 80aa 	beq.w	800d794 <_dtoa_r+0x484>
 800d640:	f1ba 0f00 	cmp.w	sl, #0
 800d644:	dd36      	ble.n	800d6b4 <_dtoa_r+0x3a4>
 800d646:	4ac3      	ldr	r2, [pc, #780]	; (800d954 <_dtoa_r+0x644>)
 800d648:	f00a 030f 	and.w	r3, sl, #15
 800d64c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d650:	ed93 7b00 	vldr	d7, [r3]
 800d654:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d658:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d65c:	eeb0 8a47 	vmov.f32	s16, s14
 800d660:	eef0 8a67 	vmov.f32	s17, s15
 800d664:	d016      	beq.n	800d694 <_dtoa_r+0x384>
 800d666:	4bbc      	ldr	r3, [pc, #752]	; (800d958 <_dtoa_r+0x648>)
 800d668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d66c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d670:	f7f3 f914 	bl	800089c <__aeabi_ddiv>
 800d674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d678:	f007 070f 	and.w	r7, r7, #15
 800d67c:	2503      	movs	r5, #3
 800d67e:	4eb6      	ldr	r6, [pc, #728]	; (800d958 <_dtoa_r+0x648>)
 800d680:	b957      	cbnz	r7, 800d698 <_dtoa_r+0x388>
 800d682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d686:	ec53 2b18 	vmov	r2, r3, d8
 800d68a:	f7f3 f907 	bl	800089c <__aeabi_ddiv>
 800d68e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d692:	e029      	b.n	800d6e8 <_dtoa_r+0x3d8>
 800d694:	2502      	movs	r5, #2
 800d696:	e7f2      	b.n	800d67e <_dtoa_r+0x36e>
 800d698:	07f9      	lsls	r1, r7, #31
 800d69a:	d508      	bpl.n	800d6ae <_dtoa_r+0x39e>
 800d69c:	ec51 0b18 	vmov	r0, r1, d8
 800d6a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d6a4:	f7f2 ffd0 	bl	8000648 <__aeabi_dmul>
 800d6a8:	ec41 0b18 	vmov	d8, r0, r1
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	107f      	asrs	r7, r7, #1
 800d6b0:	3608      	adds	r6, #8
 800d6b2:	e7e5      	b.n	800d680 <_dtoa_r+0x370>
 800d6b4:	f000 80a6 	beq.w	800d804 <_dtoa_r+0x4f4>
 800d6b8:	f1ca 0600 	rsb	r6, sl, #0
 800d6bc:	4ba5      	ldr	r3, [pc, #660]	; (800d954 <_dtoa_r+0x644>)
 800d6be:	4fa6      	ldr	r7, [pc, #664]	; (800d958 <_dtoa_r+0x648>)
 800d6c0:	f006 020f 	and.w	r2, r6, #15
 800d6c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d6d0:	f7f2 ffba 	bl	8000648 <__aeabi_dmul>
 800d6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6d8:	1136      	asrs	r6, r6, #4
 800d6da:	2300      	movs	r3, #0
 800d6dc:	2502      	movs	r5, #2
 800d6de:	2e00      	cmp	r6, #0
 800d6e0:	f040 8085 	bne.w	800d7ee <_dtoa_r+0x4de>
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1d2      	bne.n	800d68e <_dtoa_r+0x37e>
 800d6e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f000 808c 	beq.w	800d808 <_dtoa_r+0x4f8>
 800d6f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d6f4:	4b99      	ldr	r3, [pc, #612]	; (800d95c <_dtoa_r+0x64c>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f7f3 fa16 	bl	8000b2c <__aeabi_dcmplt>
 800d700:	2800      	cmp	r0, #0
 800d702:	f000 8081 	beq.w	800d808 <_dtoa_r+0x4f8>
 800d706:	9b01      	ldr	r3, [sp, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d07d      	beq.n	800d808 <_dtoa_r+0x4f8>
 800d70c:	f1b9 0f00 	cmp.w	r9, #0
 800d710:	dd3c      	ble.n	800d78c <_dtoa_r+0x47c>
 800d712:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	2200      	movs	r2, #0
 800d71a:	4b91      	ldr	r3, [pc, #580]	; (800d960 <_dtoa_r+0x650>)
 800d71c:	4630      	mov	r0, r6
 800d71e:	4639      	mov	r1, r7
 800d720:	f7f2 ff92 	bl	8000648 <__aeabi_dmul>
 800d724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d728:	3501      	adds	r5, #1
 800d72a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d72e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d732:	4628      	mov	r0, r5
 800d734:	f7f2 ff1e 	bl	8000574 <__aeabi_i2d>
 800d738:	4632      	mov	r2, r6
 800d73a:	463b      	mov	r3, r7
 800d73c:	f7f2 ff84 	bl	8000648 <__aeabi_dmul>
 800d740:	4b88      	ldr	r3, [pc, #544]	; (800d964 <_dtoa_r+0x654>)
 800d742:	2200      	movs	r2, #0
 800d744:	f7f2 fdca 	bl	80002dc <__adddf3>
 800d748:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d74c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d754:	2b00      	cmp	r3, #0
 800d756:	d15c      	bne.n	800d812 <_dtoa_r+0x502>
 800d758:	4b83      	ldr	r3, [pc, #524]	; (800d968 <_dtoa_r+0x658>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	4630      	mov	r0, r6
 800d75e:	4639      	mov	r1, r7
 800d760:	f7f2 fdba 	bl	80002d8 <__aeabi_dsub>
 800d764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d768:	4606      	mov	r6, r0
 800d76a:	460f      	mov	r7, r1
 800d76c:	f7f3 f9fc 	bl	8000b68 <__aeabi_dcmpgt>
 800d770:	2800      	cmp	r0, #0
 800d772:	f040 8296 	bne.w	800dca2 <_dtoa_r+0x992>
 800d776:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d77a:	4630      	mov	r0, r6
 800d77c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d780:	4639      	mov	r1, r7
 800d782:	f7f3 f9d3 	bl	8000b2c <__aeabi_dcmplt>
 800d786:	2800      	cmp	r0, #0
 800d788:	f040 8288 	bne.w	800dc9c <_dtoa_r+0x98c>
 800d78c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d790:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d796:	2b00      	cmp	r3, #0
 800d798:	f2c0 8158 	blt.w	800da4c <_dtoa_r+0x73c>
 800d79c:	f1ba 0f0e 	cmp.w	sl, #14
 800d7a0:	f300 8154 	bgt.w	800da4c <_dtoa_r+0x73c>
 800d7a4:	4b6b      	ldr	r3, [pc, #428]	; (800d954 <_dtoa_r+0x644>)
 800d7a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d7aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f280 80e3 	bge.w	800d97c <_dtoa_r+0x66c>
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f300 80df 	bgt.w	800d97c <_dtoa_r+0x66c>
 800d7be:	f040 826d 	bne.w	800dc9c <_dtoa_r+0x98c>
 800d7c2:	4b69      	ldr	r3, [pc, #420]	; (800d968 <_dtoa_r+0x658>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	4649      	mov	r1, r9
 800d7ca:	f7f2 ff3d 	bl	8000648 <__aeabi_dmul>
 800d7ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7d2:	f7f3 f9bf 	bl	8000b54 <__aeabi_dcmpge>
 800d7d6:	9e01      	ldr	r6, [sp, #4]
 800d7d8:	4637      	mov	r7, r6
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	f040 8243 	bne.w	800dc66 <_dtoa_r+0x956>
 800d7e0:	9d00      	ldr	r5, [sp, #0]
 800d7e2:	2331      	movs	r3, #49	; 0x31
 800d7e4:	f805 3b01 	strb.w	r3, [r5], #1
 800d7e8:	f10a 0a01 	add.w	sl, sl, #1
 800d7ec:	e23f      	b.n	800dc6e <_dtoa_r+0x95e>
 800d7ee:	07f2      	lsls	r2, r6, #31
 800d7f0:	d505      	bpl.n	800d7fe <_dtoa_r+0x4ee>
 800d7f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d7f6:	f7f2 ff27 	bl	8000648 <__aeabi_dmul>
 800d7fa:	3501      	adds	r5, #1
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	1076      	asrs	r6, r6, #1
 800d800:	3708      	adds	r7, #8
 800d802:	e76c      	b.n	800d6de <_dtoa_r+0x3ce>
 800d804:	2502      	movs	r5, #2
 800d806:	e76f      	b.n	800d6e8 <_dtoa_r+0x3d8>
 800d808:	9b01      	ldr	r3, [sp, #4]
 800d80a:	f8cd a01c 	str.w	sl, [sp, #28]
 800d80e:	930c      	str	r3, [sp, #48]	; 0x30
 800d810:	e78d      	b.n	800d72e <_dtoa_r+0x41e>
 800d812:	9900      	ldr	r1, [sp, #0]
 800d814:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d816:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d818:	4b4e      	ldr	r3, [pc, #312]	; (800d954 <_dtoa_r+0x644>)
 800d81a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d81e:	4401      	add	r1, r0
 800d820:	9102      	str	r1, [sp, #8]
 800d822:	9908      	ldr	r1, [sp, #32]
 800d824:	eeb0 8a47 	vmov.f32	s16, s14
 800d828:	eef0 8a67 	vmov.f32	s17, s15
 800d82c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d834:	2900      	cmp	r1, #0
 800d836:	d045      	beq.n	800d8c4 <_dtoa_r+0x5b4>
 800d838:	494c      	ldr	r1, [pc, #304]	; (800d96c <_dtoa_r+0x65c>)
 800d83a:	2000      	movs	r0, #0
 800d83c:	f7f3 f82e 	bl	800089c <__aeabi_ddiv>
 800d840:	ec53 2b18 	vmov	r2, r3, d8
 800d844:	f7f2 fd48 	bl	80002d8 <__aeabi_dsub>
 800d848:	9d00      	ldr	r5, [sp, #0]
 800d84a:	ec41 0b18 	vmov	d8, r0, r1
 800d84e:	4639      	mov	r1, r7
 800d850:	4630      	mov	r0, r6
 800d852:	f7f3 f9a9 	bl	8000ba8 <__aeabi_d2iz>
 800d856:	900c      	str	r0, [sp, #48]	; 0x30
 800d858:	f7f2 fe8c 	bl	8000574 <__aeabi_i2d>
 800d85c:	4602      	mov	r2, r0
 800d85e:	460b      	mov	r3, r1
 800d860:	4630      	mov	r0, r6
 800d862:	4639      	mov	r1, r7
 800d864:	f7f2 fd38 	bl	80002d8 <__aeabi_dsub>
 800d868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d86a:	3330      	adds	r3, #48	; 0x30
 800d86c:	f805 3b01 	strb.w	r3, [r5], #1
 800d870:	ec53 2b18 	vmov	r2, r3, d8
 800d874:	4606      	mov	r6, r0
 800d876:	460f      	mov	r7, r1
 800d878:	f7f3 f958 	bl	8000b2c <__aeabi_dcmplt>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d165      	bne.n	800d94c <_dtoa_r+0x63c>
 800d880:	4632      	mov	r2, r6
 800d882:	463b      	mov	r3, r7
 800d884:	4935      	ldr	r1, [pc, #212]	; (800d95c <_dtoa_r+0x64c>)
 800d886:	2000      	movs	r0, #0
 800d888:	f7f2 fd26 	bl	80002d8 <__aeabi_dsub>
 800d88c:	ec53 2b18 	vmov	r2, r3, d8
 800d890:	f7f3 f94c 	bl	8000b2c <__aeabi_dcmplt>
 800d894:	2800      	cmp	r0, #0
 800d896:	f040 80b9 	bne.w	800da0c <_dtoa_r+0x6fc>
 800d89a:	9b02      	ldr	r3, [sp, #8]
 800d89c:	429d      	cmp	r5, r3
 800d89e:	f43f af75 	beq.w	800d78c <_dtoa_r+0x47c>
 800d8a2:	4b2f      	ldr	r3, [pc, #188]	; (800d960 <_dtoa_r+0x650>)
 800d8a4:	ec51 0b18 	vmov	r0, r1, d8
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f7f2 fecd 	bl	8000648 <__aeabi_dmul>
 800d8ae:	4b2c      	ldr	r3, [pc, #176]	; (800d960 <_dtoa_r+0x650>)
 800d8b0:	ec41 0b18 	vmov	d8, r0, r1
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	4639      	mov	r1, r7
 800d8ba:	f7f2 fec5 	bl	8000648 <__aeabi_dmul>
 800d8be:	4606      	mov	r6, r0
 800d8c0:	460f      	mov	r7, r1
 800d8c2:	e7c4      	b.n	800d84e <_dtoa_r+0x53e>
 800d8c4:	ec51 0b17 	vmov	r0, r1, d7
 800d8c8:	f7f2 febe 	bl	8000648 <__aeabi_dmul>
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	9d00      	ldr	r5, [sp, #0]
 800d8d0:	930c      	str	r3, [sp, #48]	; 0x30
 800d8d2:	ec41 0b18 	vmov	d8, r0, r1
 800d8d6:	4639      	mov	r1, r7
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7f3 f965 	bl	8000ba8 <__aeabi_d2iz>
 800d8de:	9011      	str	r0, [sp, #68]	; 0x44
 800d8e0:	f7f2 fe48 	bl	8000574 <__aeabi_i2d>
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f7f2 fcf4 	bl	80002d8 <__aeabi_dsub>
 800d8f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d8f2:	3330      	adds	r3, #48	; 0x30
 800d8f4:	f805 3b01 	strb.w	r3, [r5], #1
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	429d      	cmp	r5, r3
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	460f      	mov	r7, r1
 800d900:	f04f 0200 	mov.w	r2, #0
 800d904:	d134      	bne.n	800d970 <_dtoa_r+0x660>
 800d906:	4b19      	ldr	r3, [pc, #100]	; (800d96c <_dtoa_r+0x65c>)
 800d908:	ec51 0b18 	vmov	r0, r1, d8
 800d90c:	f7f2 fce6 	bl	80002dc <__adddf3>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	4630      	mov	r0, r6
 800d916:	4639      	mov	r1, r7
 800d918:	f7f3 f926 	bl	8000b68 <__aeabi_dcmpgt>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d175      	bne.n	800da0c <_dtoa_r+0x6fc>
 800d920:	ec53 2b18 	vmov	r2, r3, d8
 800d924:	4911      	ldr	r1, [pc, #68]	; (800d96c <_dtoa_r+0x65c>)
 800d926:	2000      	movs	r0, #0
 800d928:	f7f2 fcd6 	bl	80002d8 <__aeabi_dsub>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f3 f8fa 	bl	8000b2c <__aeabi_dcmplt>
 800d938:	2800      	cmp	r0, #0
 800d93a:	f43f af27 	beq.w	800d78c <_dtoa_r+0x47c>
 800d93e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d940:	1e6b      	subs	r3, r5, #1
 800d942:	930c      	str	r3, [sp, #48]	; 0x30
 800d944:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d948:	2b30      	cmp	r3, #48	; 0x30
 800d94a:	d0f8      	beq.n	800d93e <_dtoa_r+0x62e>
 800d94c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d950:	e04a      	b.n	800d9e8 <_dtoa_r+0x6d8>
 800d952:	bf00      	nop
 800d954:	08011650 	.word	0x08011650
 800d958:	08011628 	.word	0x08011628
 800d95c:	3ff00000 	.word	0x3ff00000
 800d960:	40240000 	.word	0x40240000
 800d964:	401c0000 	.word	0x401c0000
 800d968:	40140000 	.word	0x40140000
 800d96c:	3fe00000 	.word	0x3fe00000
 800d970:	4baf      	ldr	r3, [pc, #700]	; (800dc30 <_dtoa_r+0x920>)
 800d972:	f7f2 fe69 	bl	8000648 <__aeabi_dmul>
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	e7ac      	b.n	800d8d6 <_dtoa_r+0x5c6>
 800d97c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d980:	9d00      	ldr	r5, [sp, #0]
 800d982:	4642      	mov	r2, r8
 800d984:	464b      	mov	r3, r9
 800d986:	4630      	mov	r0, r6
 800d988:	4639      	mov	r1, r7
 800d98a:	f7f2 ff87 	bl	800089c <__aeabi_ddiv>
 800d98e:	f7f3 f90b 	bl	8000ba8 <__aeabi_d2iz>
 800d992:	9002      	str	r0, [sp, #8]
 800d994:	f7f2 fdee 	bl	8000574 <__aeabi_i2d>
 800d998:	4642      	mov	r2, r8
 800d99a:	464b      	mov	r3, r9
 800d99c:	f7f2 fe54 	bl	8000648 <__aeabi_dmul>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	f7f2 fc96 	bl	80002d8 <__aeabi_dsub>
 800d9ac:	9e02      	ldr	r6, [sp, #8]
 800d9ae:	9f01      	ldr	r7, [sp, #4]
 800d9b0:	3630      	adds	r6, #48	; 0x30
 800d9b2:	f805 6b01 	strb.w	r6, [r5], #1
 800d9b6:	9e00      	ldr	r6, [sp, #0]
 800d9b8:	1bae      	subs	r6, r5, r6
 800d9ba:	42b7      	cmp	r7, r6
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	d137      	bne.n	800da32 <_dtoa_r+0x722>
 800d9c2:	f7f2 fc8b 	bl	80002dc <__adddf3>
 800d9c6:	4642      	mov	r2, r8
 800d9c8:	464b      	mov	r3, r9
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	f7f3 f8cb 	bl	8000b68 <__aeabi_dcmpgt>
 800d9d2:	b9c8      	cbnz	r0, 800da08 <_dtoa_r+0x6f8>
 800d9d4:	4642      	mov	r2, r8
 800d9d6:	464b      	mov	r3, r9
 800d9d8:	4630      	mov	r0, r6
 800d9da:	4639      	mov	r1, r7
 800d9dc:	f7f3 f89c 	bl	8000b18 <__aeabi_dcmpeq>
 800d9e0:	b110      	cbz	r0, 800d9e8 <_dtoa_r+0x6d8>
 800d9e2:	9b02      	ldr	r3, [sp, #8]
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	d40f      	bmi.n	800da08 <_dtoa_r+0x6f8>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	4659      	mov	r1, fp
 800d9ec:	f000 fba0 	bl	800e130 <_Bfree>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	702b      	strb	r3, [r5, #0]
 800d9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9f6:	f10a 0001 	add.w	r0, sl, #1
 800d9fa:	6018      	str	r0, [r3, #0]
 800d9fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f43f acd8 	beq.w	800d3b4 <_dtoa_r+0xa4>
 800da04:	601d      	str	r5, [r3, #0]
 800da06:	e4d5      	b.n	800d3b4 <_dtoa_r+0xa4>
 800da08:	f8cd a01c 	str.w	sl, [sp, #28]
 800da0c:	462b      	mov	r3, r5
 800da0e:	461d      	mov	r5, r3
 800da10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da14:	2a39      	cmp	r2, #57	; 0x39
 800da16:	d108      	bne.n	800da2a <_dtoa_r+0x71a>
 800da18:	9a00      	ldr	r2, [sp, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d1f7      	bne.n	800da0e <_dtoa_r+0x6fe>
 800da1e:	9a07      	ldr	r2, [sp, #28]
 800da20:	9900      	ldr	r1, [sp, #0]
 800da22:	3201      	adds	r2, #1
 800da24:	9207      	str	r2, [sp, #28]
 800da26:	2230      	movs	r2, #48	; 0x30
 800da28:	700a      	strb	r2, [r1, #0]
 800da2a:	781a      	ldrb	r2, [r3, #0]
 800da2c:	3201      	adds	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	e78c      	b.n	800d94c <_dtoa_r+0x63c>
 800da32:	4b7f      	ldr	r3, [pc, #508]	; (800dc30 <_dtoa_r+0x920>)
 800da34:	2200      	movs	r2, #0
 800da36:	f7f2 fe07 	bl	8000648 <__aeabi_dmul>
 800da3a:	2200      	movs	r2, #0
 800da3c:	2300      	movs	r3, #0
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	f7f3 f869 	bl	8000b18 <__aeabi_dcmpeq>
 800da46:	2800      	cmp	r0, #0
 800da48:	d09b      	beq.n	800d982 <_dtoa_r+0x672>
 800da4a:	e7cd      	b.n	800d9e8 <_dtoa_r+0x6d8>
 800da4c:	9a08      	ldr	r2, [sp, #32]
 800da4e:	2a00      	cmp	r2, #0
 800da50:	f000 80c4 	beq.w	800dbdc <_dtoa_r+0x8cc>
 800da54:	9a05      	ldr	r2, [sp, #20]
 800da56:	2a01      	cmp	r2, #1
 800da58:	f300 80a8 	bgt.w	800dbac <_dtoa_r+0x89c>
 800da5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da5e:	2a00      	cmp	r2, #0
 800da60:	f000 80a0 	beq.w	800dba4 <_dtoa_r+0x894>
 800da64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800da68:	9e06      	ldr	r6, [sp, #24]
 800da6a:	4645      	mov	r5, r8
 800da6c:	9a04      	ldr	r2, [sp, #16]
 800da6e:	2101      	movs	r1, #1
 800da70:	441a      	add	r2, r3
 800da72:	4620      	mov	r0, r4
 800da74:	4498      	add	r8, r3
 800da76:	9204      	str	r2, [sp, #16]
 800da78:	f000 fc16 	bl	800e2a8 <__i2b>
 800da7c:	4607      	mov	r7, r0
 800da7e:	2d00      	cmp	r5, #0
 800da80:	dd0b      	ble.n	800da9a <_dtoa_r+0x78a>
 800da82:	9b04      	ldr	r3, [sp, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	dd08      	ble.n	800da9a <_dtoa_r+0x78a>
 800da88:	42ab      	cmp	r3, r5
 800da8a:	9a04      	ldr	r2, [sp, #16]
 800da8c:	bfa8      	it	ge
 800da8e:	462b      	movge	r3, r5
 800da90:	eba8 0803 	sub.w	r8, r8, r3
 800da94:	1aed      	subs	r5, r5, r3
 800da96:	1ad3      	subs	r3, r2, r3
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	9b06      	ldr	r3, [sp, #24]
 800da9c:	b1fb      	cbz	r3, 800dade <_dtoa_r+0x7ce>
 800da9e:	9b08      	ldr	r3, [sp, #32]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	f000 809f 	beq.w	800dbe4 <_dtoa_r+0x8d4>
 800daa6:	2e00      	cmp	r6, #0
 800daa8:	dd11      	ble.n	800dace <_dtoa_r+0x7be>
 800daaa:	4639      	mov	r1, r7
 800daac:	4632      	mov	r2, r6
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fcb6 	bl	800e420 <__pow5mult>
 800dab4:	465a      	mov	r2, fp
 800dab6:	4601      	mov	r1, r0
 800dab8:	4607      	mov	r7, r0
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fc0a 	bl	800e2d4 <__multiply>
 800dac0:	4659      	mov	r1, fp
 800dac2:	9007      	str	r0, [sp, #28]
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fb33 	bl	800e130 <_Bfree>
 800daca:	9b07      	ldr	r3, [sp, #28]
 800dacc:	469b      	mov	fp, r3
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	1b9a      	subs	r2, r3, r6
 800dad2:	d004      	beq.n	800dade <_dtoa_r+0x7ce>
 800dad4:	4659      	mov	r1, fp
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 fca2 	bl	800e420 <__pow5mult>
 800dadc:	4683      	mov	fp, r0
 800dade:	2101      	movs	r1, #1
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 fbe1 	bl	800e2a8 <__i2b>
 800dae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dae8:	2b00      	cmp	r3, #0
 800daea:	4606      	mov	r6, r0
 800daec:	dd7c      	ble.n	800dbe8 <_dtoa_r+0x8d8>
 800daee:	461a      	mov	r2, r3
 800daf0:	4601      	mov	r1, r0
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fc94 	bl	800e420 <__pow5mult>
 800daf8:	9b05      	ldr	r3, [sp, #20]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	4606      	mov	r6, r0
 800dafe:	dd76      	ble.n	800dbee <_dtoa_r+0x8de>
 800db00:	2300      	movs	r3, #0
 800db02:	9306      	str	r3, [sp, #24]
 800db04:	6933      	ldr	r3, [r6, #16]
 800db06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db0a:	6918      	ldr	r0, [r3, #16]
 800db0c:	f000 fb7c 	bl	800e208 <__hi0bits>
 800db10:	f1c0 0020 	rsb	r0, r0, #32
 800db14:	9b04      	ldr	r3, [sp, #16]
 800db16:	4418      	add	r0, r3
 800db18:	f010 001f 	ands.w	r0, r0, #31
 800db1c:	f000 8086 	beq.w	800dc2c <_dtoa_r+0x91c>
 800db20:	f1c0 0320 	rsb	r3, r0, #32
 800db24:	2b04      	cmp	r3, #4
 800db26:	dd7f      	ble.n	800dc28 <_dtoa_r+0x918>
 800db28:	f1c0 001c 	rsb	r0, r0, #28
 800db2c:	9b04      	ldr	r3, [sp, #16]
 800db2e:	4403      	add	r3, r0
 800db30:	4480      	add	r8, r0
 800db32:	4405      	add	r5, r0
 800db34:	9304      	str	r3, [sp, #16]
 800db36:	f1b8 0f00 	cmp.w	r8, #0
 800db3a:	dd05      	ble.n	800db48 <_dtoa_r+0x838>
 800db3c:	4659      	mov	r1, fp
 800db3e:	4642      	mov	r2, r8
 800db40:	4620      	mov	r0, r4
 800db42:	f000 fcc7 	bl	800e4d4 <__lshift>
 800db46:	4683      	mov	fp, r0
 800db48:	9b04      	ldr	r3, [sp, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dd05      	ble.n	800db5a <_dtoa_r+0x84a>
 800db4e:	4631      	mov	r1, r6
 800db50:	461a      	mov	r2, r3
 800db52:	4620      	mov	r0, r4
 800db54:	f000 fcbe 	bl	800e4d4 <__lshift>
 800db58:	4606      	mov	r6, r0
 800db5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d069      	beq.n	800dc34 <_dtoa_r+0x924>
 800db60:	4631      	mov	r1, r6
 800db62:	4658      	mov	r0, fp
 800db64:	f000 fd22 	bl	800e5ac <__mcmp>
 800db68:	2800      	cmp	r0, #0
 800db6a:	da63      	bge.n	800dc34 <_dtoa_r+0x924>
 800db6c:	2300      	movs	r3, #0
 800db6e:	4659      	mov	r1, fp
 800db70:	220a      	movs	r2, #10
 800db72:	4620      	mov	r0, r4
 800db74:	f000 fafe 	bl	800e174 <__multadd>
 800db78:	9b08      	ldr	r3, [sp, #32]
 800db7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db7e:	4683      	mov	fp, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 818f 	beq.w	800dea4 <_dtoa_r+0xb94>
 800db86:	4639      	mov	r1, r7
 800db88:	2300      	movs	r3, #0
 800db8a:	220a      	movs	r2, #10
 800db8c:	4620      	mov	r0, r4
 800db8e:	f000 faf1 	bl	800e174 <__multadd>
 800db92:	f1b9 0f00 	cmp.w	r9, #0
 800db96:	4607      	mov	r7, r0
 800db98:	f300 808e 	bgt.w	800dcb8 <_dtoa_r+0x9a8>
 800db9c:	9b05      	ldr	r3, [sp, #20]
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	dc50      	bgt.n	800dc44 <_dtoa_r+0x934>
 800dba2:	e089      	b.n	800dcb8 <_dtoa_r+0x9a8>
 800dba4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dba6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dbaa:	e75d      	b.n	800da68 <_dtoa_r+0x758>
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	1e5e      	subs	r6, r3, #1
 800dbb0:	9b06      	ldr	r3, [sp, #24]
 800dbb2:	42b3      	cmp	r3, r6
 800dbb4:	bfbf      	itttt	lt
 800dbb6:	9b06      	ldrlt	r3, [sp, #24]
 800dbb8:	9606      	strlt	r6, [sp, #24]
 800dbba:	1af2      	sublt	r2, r6, r3
 800dbbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800dbbe:	bfb6      	itet	lt
 800dbc0:	189b      	addlt	r3, r3, r2
 800dbc2:	1b9e      	subge	r6, r3, r6
 800dbc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	bfb8      	it	lt
 800dbca:	2600      	movlt	r6, #0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfb5      	itete	lt
 800dbd0:	eba8 0503 	sublt.w	r5, r8, r3
 800dbd4:	9b01      	ldrge	r3, [sp, #4]
 800dbd6:	2300      	movlt	r3, #0
 800dbd8:	4645      	movge	r5, r8
 800dbda:	e747      	b.n	800da6c <_dtoa_r+0x75c>
 800dbdc:	9e06      	ldr	r6, [sp, #24]
 800dbde:	9f08      	ldr	r7, [sp, #32]
 800dbe0:	4645      	mov	r5, r8
 800dbe2:	e74c      	b.n	800da7e <_dtoa_r+0x76e>
 800dbe4:	9a06      	ldr	r2, [sp, #24]
 800dbe6:	e775      	b.n	800dad4 <_dtoa_r+0x7c4>
 800dbe8:	9b05      	ldr	r3, [sp, #20]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	dc18      	bgt.n	800dc20 <_dtoa_r+0x910>
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	b9b3      	cbnz	r3, 800dc20 <_dtoa_r+0x910>
 800dbf2:	9b03      	ldr	r3, [sp, #12]
 800dbf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbf8:	b9a3      	cbnz	r3, 800dc24 <_dtoa_r+0x914>
 800dbfa:	9b03      	ldr	r3, [sp, #12]
 800dbfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc00:	0d1b      	lsrs	r3, r3, #20
 800dc02:	051b      	lsls	r3, r3, #20
 800dc04:	b12b      	cbz	r3, 800dc12 <_dtoa_r+0x902>
 800dc06:	9b04      	ldr	r3, [sp, #16]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	f108 0801 	add.w	r8, r8, #1
 800dc10:	2301      	movs	r3, #1
 800dc12:	9306      	str	r3, [sp, #24]
 800dc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f47f af74 	bne.w	800db04 <_dtoa_r+0x7f4>
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	e779      	b.n	800db14 <_dtoa_r+0x804>
 800dc20:	2300      	movs	r3, #0
 800dc22:	e7f6      	b.n	800dc12 <_dtoa_r+0x902>
 800dc24:	9b02      	ldr	r3, [sp, #8]
 800dc26:	e7f4      	b.n	800dc12 <_dtoa_r+0x902>
 800dc28:	d085      	beq.n	800db36 <_dtoa_r+0x826>
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	301c      	adds	r0, #28
 800dc2e:	e77d      	b.n	800db2c <_dtoa_r+0x81c>
 800dc30:	40240000 	.word	0x40240000
 800dc34:	9b01      	ldr	r3, [sp, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	dc38      	bgt.n	800dcac <_dtoa_r+0x99c>
 800dc3a:	9b05      	ldr	r3, [sp, #20]
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	dd35      	ble.n	800dcac <_dtoa_r+0x99c>
 800dc40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dc44:	f1b9 0f00 	cmp.w	r9, #0
 800dc48:	d10d      	bne.n	800dc66 <_dtoa_r+0x956>
 800dc4a:	4631      	mov	r1, r6
 800dc4c:	464b      	mov	r3, r9
 800dc4e:	2205      	movs	r2, #5
 800dc50:	4620      	mov	r0, r4
 800dc52:	f000 fa8f 	bl	800e174 <__multadd>
 800dc56:	4601      	mov	r1, r0
 800dc58:	4606      	mov	r6, r0
 800dc5a:	4658      	mov	r0, fp
 800dc5c:	f000 fca6 	bl	800e5ac <__mcmp>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	f73f adbd 	bgt.w	800d7e0 <_dtoa_r+0x4d0>
 800dc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc68:	9d00      	ldr	r5, [sp, #0]
 800dc6a:	ea6f 0a03 	mvn.w	sl, r3
 800dc6e:	f04f 0800 	mov.w	r8, #0
 800dc72:	4631      	mov	r1, r6
 800dc74:	4620      	mov	r0, r4
 800dc76:	f000 fa5b 	bl	800e130 <_Bfree>
 800dc7a:	2f00      	cmp	r7, #0
 800dc7c:	f43f aeb4 	beq.w	800d9e8 <_dtoa_r+0x6d8>
 800dc80:	f1b8 0f00 	cmp.w	r8, #0
 800dc84:	d005      	beq.n	800dc92 <_dtoa_r+0x982>
 800dc86:	45b8      	cmp	r8, r7
 800dc88:	d003      	beq.n	800dc92 <_dtoa_r+0x982>
 800dc8a:	4641      	mov	r1, r8
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f000 fa4f 	bl	800e130 <_Bfree>
 800dc92:	4639      	mov	r1, r7
 800dc94:	4620      	mov	r0, r4
 800dc96:	f000 fa4b 	bl	800e130 <_Bfree>
 800dc9a:	e6a5      	b.n	800d9e8 <_dtoa_r+0x6d8>
 800dc9c:	2600      	movs	r6, #0
 800dc9e:	4637      	mov	r7, r6
 800dca0:	e7e1      	b.n	800dc66 <_dtoa_r+0x956>
 800dca2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dca4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dca8:	4637      	mov	r7, r6
 800dcaa:	e599      	b.n	800d7e0 <_dtoa_r+0x4d0>
 800dcac:	9b08      	ldr	r3, [sp, #32]
 800dcae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 80fd 	beq.w	800deb2 <_dtoa_r+0xba2>
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	dd05      	ble.n	800dcc8 <_dtoa_r+0x9b8>
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f000 fc07 	bl	800e4d4 <__lshift>
 800dcc6:	4607      	mov	r7, r0
 800dcc8:	9b06      	ldr	r3, [sp, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d05c      	beq.n	800dd88 <_dtoa_r+0xa78>
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 f9ed 	bl	800e0b0 <_Balloc>
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	b928      	cbnz	r0, 800dce6 <_dtoa_r+0x9d6>
 800dcda:	4b80      	ldr	r3, [pc, #512]	; (800dedc <_dtoa_r+0xbcc>)
 800dcdc:	4602      	mov	r2, r0
 800dcde:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dce2:	f7ff bb2e 	b.w	800d342 <_dtoa_r+0x32>
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	3202      	adds	r2, #2
 800dcea:	0092      	lsls	r2, r2, #2
 800dcec:	f107 010c 	add.w	r1, r7, #12
 800dcf0:	300c      	adds	r0, #12
 800dcf2:	f7fe fc77 	bl	800c5e4 <memcpy>
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	4629      	mov	r1, r5
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 fbea 	bl	800e4d4 <__lshift>
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	3301      	adds	r3, #1
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	9b00      	ldr	r3, [sp, #0]
 800dd08:	444b      	add	r3, r9
 800dd0a:	9307      	str	r3, [sp, #28]
 800dd0c:	9b02      	ldr	r3, [sp, #8]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	46b8      	mov	r8, r7
 800dd14:	9306      	str	r3, [sp, #24]
 800dd16:	4607      	mov	r7, r0
 800dd18:	9b01      	ldr	r3, [sp, #4]
 800dd1a:	4631      	mov	r1, r6
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	4658      	mov	r0, fp
 800dd20:	9302      	str	r3, [sp, #8]
 800dd22:	f7ff fa69 	bl	800d1f8 <quorem>
 800dd26:	4603      	mov	r3, r0
 800dd28:	3330      	adds	r3, #48	; 0x30
 800dd2a:	9004      	str	r0, [sp, #16]
 800dd2c:	4641      	mov	r1, r8
 800dd2e:	4658      	mov	r0, fp
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	f000 fc3b 	bl	800e5ac <__mcmp>
 800dd36:	463a      	mov	r2, r7
 800dd38:	4681      	mov	r9, r0
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 fc51 	bl	800e5e4 <__mdiff>
 800dd42:	68c2      	ldr	r2, [r0, #12]
 800dd44:	9b08      	ldr	r3, [sp, #32]
 800dd46:	4605      	mov	r5, r0
 800dd48:	bb02      	cbnz	r2, 800dd8c <_dtoa_r+0xa7c>
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	4658      	mov	r0, fp
 800dd4e:	f000 fc2d 	bl	800e5ac <__mcmp>
 800dd52:	9b08      	ldr	r3, [sp, #32]
 800dd54:	4602      	mov	r2, r0
 800dd56:	4629      	mov	r1, r5
 800dd58:	4620      	mov	r0, r4
 800dd5a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800dd5e:	f000 f9e7 	bl	800e130 <_Bfree>
 800dd62:	9b05      	ldr	r3, [sp, #20]
 800dd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd66:	9d01      	ldr	r5, [sp, #4]
 800dd68:	ea43 0102 	orr.w	r1, r3, r2
 800dd6c:	9b06      	ldr	r3, [sp, #24]
 800dd6e:	430b      	orrs	r3, r1
 800dd70:	9b08      	ldr	r3, [sp, #32]
 800dd72:	d10d      	bne.n	800dd90 <_dtoa_r+0xa80>
 800dd74:	2b39      	cmp	r3, #57	; 0x39
 800dd76:	d029      	beq.n	800ddcc <_dtoa_r+0xabc>
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	dd01      	ble.n	800dd82 <_dtoa_r+0xa72>
 800dd7e:	9b04      	ldr	r3, [sp, #16]
 800dd80:	3331      	adds	r3, #49	; 0x31
 800dd82:	9a02      	ldr	r2, [sp, #8]
 800dd84:	7013      	strb	r3, [r2, #0]
 800dd86:	e774      	b.n	800dc72 <_dtoa_r+0x962>
 800dd88:	4638      	mov	r0, r7
 800dd8a:	e7b9      	b.n	800dd00 <_dtoa_r+0x9f0>
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	e7e2      	b.n	800dd56 <_dtoa_r+0xa46>
 800dd90:	f1b9 0f00 	cmp.w	r9, #0
 800dd94:	db06      	blt.n	800dda4 <_dtoa_r+0xa94>
 800dd96:	9905      	ldr	r1, [sp, #20]
 800dd98:	ea41 0909 	orr.w	r9, r1, r9
 800dd9c:	9906      	ldr	r1, [sp, #24]
 800dd9e:	ea59 0101 	orrs.w	r1, r9, r1
 800dda2:	d120      	bne.n	800dde6 <_dtoa_r+0xad6>
 800dda4:	2a00      	cmp	r2, #0
 800dda6:	ddec      	ble.n	800dd82 <_dtoa_r+0xa72>
 800dda8:	4659      	mov	r1, fp
 800ddaa:	2201      	movs	r2, #1
 800ddac:	4620      	mov	r0, r4
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	f000 fb90 	bl	800e4d4 <__lshift>
 800ddb4:	4631      	mov	r1, r6
 800ddb6:	4683      	mov	fp, r0
 800ddb8:	f000 fbf8 	bl	800e5ac <__mcmp>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	dc02      	bgt.n	800ddc8 <_dtoa_r+0xab8>
 800ddc2:	d1de      	bne.n	800dd82 <_dtoa_r+0xa72>
 800ddc4:	07da      	lsls	r2, r3, #31
 800ddc6:	d5dc      	bpl.n	800dd82 <_dtoa_r+0xa72>
 800ddc8:	2b39      	cmp	r3, #57	; 0x39
 800ddca:	d1d8      	bne.n	800dd7e <_dtoa_r+0xa6e>
 800ddcc:	9a02      	ldr	r2, [sp, #8]
 800ddce:	2339      	movs	r3, #57	; 0x39
 800ddd0:	7013      	strb	r3, [r2, #0]
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	461d      	mov	r5, r3
 800ddd6:	3b01      	subs	r3, #1
 800ddd8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dddc:	2a39      	cmp	r2, #57	; 0x39
 800ddde:	d050      	beq.n	800de82 <_dtoa_r+0xb72>
 800dde0:	3201      	adds	r2, #1
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	e745      	b.n	800dc72 <_dtoa_r+0x962>
 800dde6:	2a00      	cmp	r2, #0
 800dde8:	dd03      	ble.n	800ddf2 <_dtoa_r+0xae2>
 800ddea:	2b39      	cmp	r3, #57	; 0x39
 800ddec:	d0ee      	beq.n	800ddcc <_dtoa_r+0xabc>
 800ddee:	3301      	adds	r3, #1
 800ddf0:	e7c7      	b.n	800dd82 <_dtoa_r+0xa72>
 800ddf2:	9a01      	ldr	r2, [sp, #4]
 800ddf4:	9907      	ldr	r1, [sp, #28]
 800ddf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddfa:	428a      	cmp	r2, r1
 800ddfc:	d02a      	beq.n	800de54 <_dtoa_r+0xb44>
 800ddfe:	4659      	mov	r1, fp
 800de00:	2300      	movs	r3, #0
 800de02:	220a      	movs	r2, #10
 800de04:	4620      	mov	r0, r4
 800de06:	f000 f9b5 	bl	800e174 <__multadd>
 800de0a:	45b8      	cmp	r8, r7
 800de0c:	4683      	mov	fp, r0
 800de0e:	f04f 0300 	mov.w	r3, #0
 800de12:	f04f 020a 	mov.w	r2, #10
 800de16:	4641      	mov	r1, r8
 800de18:	4620      	mov	r0, r4
 800de1a:	d107      	bne.n	800de2c <_dtoa_r+0xb1c>
 800de1c:	f000 f9aa 	bl	800e174 <__multadd>
 800de20:	4680      	mov	r8, r0
 800de22:	4607      	mov	r7, r0
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	3301      	adds	r3, #1
 800de28:	9301      	str	r3, [sp, #4]
 800de2a:	e775      	b.n	800dd18 <_dtoa_r+0xa08>
 800de2c:	f000 f9a2 	bl	800e174 <__multadd>
 800de30:	4639      	mov	r1, r7
 800de32:	4680      	mov	r8, r0
 800de34:	2300      	movs	r3, #0
 800de36:	220a      	movs	r2, #10
 800de38:	4620      	mov	r0, r4
 800de3a:	f000 f99b 	bl	800e174 <__multadd>
 800de3e:	4607      	mov	r7, r0
 800de40:	e7f0      	b.n	800de24 <_dtoa_r+0xb14>
 800de42:	f1b9 0f00 	cmp.w	r9, #0
 800de46:	9a00      	ldr	r2, [sp, #0]
 800de48:	bfcc      	ite	gt
 800de4a:	464d      	movgt	r5, r9
 800de4c:	2501      	movle	r5, #1
 800de4e:	4415      	add	r5, r2
 800de50:	f04f 0800 	mov.w	r8, #0
 800de54:	4659      	mov	r1, fp
 800de56:	2201      	movs	r2, #1
 800de58:	4620      	mov	r0, r4
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	f000 fb3a 	bl	800e4d4 <__lshift>
 800de60:	4631      	mov	r1, r6
 800de62:	4683      	mov	fp, r0
 800de64:	f000 fba2 	bl	800e5ac <__mcmp>
 800de68:	2800      	cmp	r0, #0
 800de6a:	dcb2      	bgt.n	800ddd2 <_dtoa_r+0xac2>
 800de6c:	d102      	bne.n	800de74 <_dtoa_r+0xb64>
 800de6e:	9b01      	ldr	r3, [sp, #4]
 800de70:	07db      	lsls	r3, r3, #31
 800de72:	d4ae      	bmi.n	800ddd2 <_dtoa_r+0xac2>
 800de74:	462b      	mov	r3, r5
 800de76:	461d      	mov	r5, r3
 800de78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de7c:	2a30      	cmp	r2, #48	; 0x30
 800de7e:	d0fa      	beq.n	800de76 <_dtoa_r+0xb66>
 800de80:	e6f7      	b.n	800dc72 <_dtoa_r+0x962>
 800de82:	9a00      	ldr	r2, [sp, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d1a5      	bne.n	800ddd4 <_dtoa_r+0xac4>
 800de88:	f10a 0a01 	add.w	sl, sl, #1
 800de8c:	2331      	movs	r3, #49	; 0x31
 800de8e:	e779      	b.n	800dd84 <_dtoa_r+0xa74>
 800de90:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <_dtoa_r+0xbd0>)
 800de92:	f7ff baaf 	b.w	800d3f4 <_dtoa_r+0xe4>
 800de96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f47f aa86 	bne.w	800d3aa <_dtoa_r+0x9a>
 800de9e:	4b11      	ldr	r3, [pc, #68]	; (800dee4 <_dtoa_r+0xbd4>)
 800dea0:	f7ff baa8 	b.w	800d3f4 <_dtoa_r+0xe4>
 800dea4:	f1b9 0f00 	cmp.w	r9, #0
 800dea8:	dc03      	bgt.n	800deb2 <_dtoa_r+0xba2>
 800deaa:	9b05      	ldr	r3, [sp, #20]
 800deac:	2b02      	cmp	r3, #2
 800deae:	f73f aec9 	bgt.w	800dc44 <_dtoa_r+0x934>
 800deb2:	9d00      	ldr	r5, [sp, #0]
 800deb4:	4631      	mov	r1, r6
 800deb6:	4658      	mov	r0, fp
 800deb8:	f7ff f99e 	bl	800d1f8 <quorem>
 800debc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dec0:	f805 3b01 	strb.w	r3, [r5], #1
 800dec4:	9a00      	ldr	r2, [sp, #0]
 800dec6:	1aaa      	subs	r2, r5, r2
 800dec8:	4591      	cmp	r9, r2
 800deca:	ddba      	ble.n	800de42 <_dtoa_r+0xb32>
 800decc:	4659      	mov	r1, fp
 800dece:	2300      	movs	r3, #0
 800ded0:	220a      	movs	r2, #10
 800ded2:	4620      	mov	r0, r4
 800ded4:	f000 f94e 	bl	800e174 <__multadd>
 800ded8:	4683      	mov	fp, r0
 800deda:	e7eb      	b.n	800deb4 <_dtoa_r+0xba4>
 800dedc:	080115b7 	.word	0x080115b7
 800dee0:	08011510 	.word	0x08011510
 800dee4:	08011534 	.word	0x08011534

0800dee8 <__sflush_r>:
 800dee8:	898a      	ldrh	r2, [r1, #12]
 800deea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deee:	4605      	mov	r5, r0
 800def0:	0710      	lsls	r0, r2, #28
 800def2:	460c      	mov	r4, r1
 800def4:	d458      	bmi.n	800dfa8 <__sflush_r+0xc0>
 800def6:	684b      	ldr	r3, [r1, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	dc05      	bgt.n	800df08 <__sflush_r+0x20>
 800defc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	dc02      	bgt.n	800df08 <__sflush_r+0x20>
 800df02:	2000      	movs	r0, #0
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df0a:	2e00      	cmp	r6, #0
 800df0c:	d0f9      	beq.n	800df02 <__sflush_r+0x1a>
 800df0e:	2300      	movs	r3, #0
 800df10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df14:	682f      	ldr	r7, [r5, #0]
 800df16:	602b      	str	r3, [r5, #0]
 800df18:	d032      	beq.n	800df80 <__sflush_r+0x98>
 800df1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df1c:	89a3      	ldrh	r3, [r4, #12]
 800df1e:	075a      	lsls	r2, r3, #29
 800df20:	d505      	bpl.n	800df2e <__sflush_r+0x46>
 800df22:	6863      	ldr	r3, [r4, #4]
 800df24:	1ac0      	subs	r0, r0, r3
 800df26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df28:	b10b      	cbz	r3, 800df2e <__sflush_r+0x46>
 800df2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df2c:	1ac0      	subs	r0, r0, r3
 800df2e:	2300      	movs	r3, #0
 800df30:	4602      	mov	r2, r0
 800df32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df34:	6a21      	ldr	r1, [r4, #32]
 800df36:	4628      	mov	r0, r5
 800df38:	47b0      	blx	r6
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	d106      	bne.n	800df4e <__sflush_r+0x66>
 800df40:	6829      	ldr	r1, [r5, #0]
 800df42:	291d      	cmp	r1, #29
 800df44:	d82c      	bhi.n	800dfa0 <__sflush_r+0xb8>
 800df46:	4a2a      	ldr	r2, [pc, #168]	; (800dff0 <__sflush_r+0x108>)
 800df48:	40ca      	lsrs	r2, r1
 800df4a:	07d6      	lsls	r6, r2, #31
 800df4c:	d528      	bpl.n	800dfa0 <__sflush_r+0xb8>
 800df4e:	2200      	movs	r2, #0
 800df50:	6062      	str	r2, [r4, #4]
 800df52:	04d9      	lsls	r1, r3, #19
 800df54:	6922      	ldr	r2, [r4, #16]
 800df56:	6022      	str	r2, [r4, #0]
 800df58:	d504      	bpl.n	800df64 <__sflush_r+0x7c>
 800df5a:	1c42      	adds	r2, r0, #1
 800df5c:	d101      	bne.n	800df62 <__sflush_r+0x7a>
 800df5e:	682b      	ldr	r3, [r5, #0]
 800df60:	b903      	cbnz	r3, 800df64 <__sflush_r+0x7c>
 800df62:	6560      	str	r0, [r4, #84]	; 0x54
 800df64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df66:	602f      	str	r7, [r5, #0]
 800df68:	2900      	cmp	r1, #0
 800df6a:	d0ca      	beq.n	800df02 <__sflush_r+0x1a>
 800df6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df70:	4299      	cmp	r1, r3
 800df72:	d002      	beq.n	800df7a <__sflush_r+0x92>
 800df74:	4628      	mov	r0, r5
 800df76:	f7fe fb4b 	bl	800c610 <_free_r>
 800df7a:	2000      	movs	r0, #0
 800df7c:	6360      	str	r0, [r4, #52]	; 0x34
 800df7e:	e7c1      	b.n	800df04 <__sflush_r+0x1c>
 800df80:	6a21      	ldr	r1, [r4, #32]
 800df82:	2301      	movs	r3, #1
 800df84:	4628      	mov	r0, r5
 800df86:	47b0      	blx	r6
 800df88:	1c41      	adds	r1, r0, #1
 800df8a:	d1c7      	bne.n	800df1c <__sflush_r+0x34>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d0c4      	beq.n	800df1c <__sflush_r+0x34>
 800df92:	2b1d      	cmp	r3, #29
 800df94:	d001      	beq.n	800df9a <__sflush_r+0xb2>
 800df96:	2b16      	cmp	r3, #22
 800df98:	d101      	bne.n	800df9e <__sflush_r+0xb6>
 800df9a:	602f      	str	r7, [r5, #0]
 800df9c:	e7b1      	b.n	800df02 <__sflush_r+0x1a>
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	e7ad      	b.n	800df04 <__sflush_r+0x1c>
 800dfa8:	690f      	ldr	r7, [r1, #16]
 800dfaa:	2f00      	cmp	r7, #0
 800dfac:	d0a9      	beq.n	800df02 <__sflush_r+0x1a>
 800dfae:	0793      	lsls	r3, r2, #30
 800dfb0:	680e      	ldr	r6, [r1, #0]
 800dfb2:	bf08      	it	eq
 800dfb4:	694b      	ldreq	r3, [r1, #20]
 800dfb6:	600f      	str	r7, [r1, #0]
 800dfb8:	bf18      	it	ne
 800dfba:	2300      	movne	r3, #0
 800dfbc:	eba6 0807 	sub.w	r8, r6, r7
 800dfc0:	608b      	str	r3, [r1, #8]
 800dfc2:	f1b8 0f00 	cmp.w	r8, #0
 800dfc6:	dd9c      	ble.n	800df02 <__sflush_r+0x1a>
 800dfc8:	6a21      	ldr	r1, [r4, #32]
 800dfca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dfcc:	4643      	mov	r3, r8
 800dfce:	463a      	mov	r2, r7
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	47b0      	blx	r6
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	dc06      	bgt.n	800dfe6 <__sflush_r+0xfe>
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfde:	81a3      	strh	r3, [r4, #12]
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe4:	e78e      	b.n	800df04 <__sflush_r+0x1c>
 800dfe6:	4407      	add	r7, r0
 800dfe8:	eba8 0800 	sub.w	r8, r8, r0
 800dfec:	e7e9      	b.n	800dfc2 <__sflush_r+0xda>
 800dfee:	bf00      	nop
 800dff0:	20400001 	.word	0x20400001

0800dff4 <_fflush_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	690b      	ldr	r3, [r1, #16]
 800dff8:	4605      	mov	r5, r0
 800dffa:	460c      	mov	r4, r1
 800dffc:	b913      	cbnz	r3, 800e004 <_fflush_r+0x10>
 800dffe:	2500      	movs	r5, #0
 800e000:	4628      	mov	r0, r5
 800e002:	bd38      	pop	{r3, r4, r5, pc}
 800e004:	b118      	cbz	r0, 800e00e <_fflush_r+0x1a>
 800e006:	6983      	ldr	r3, [r0, #24]
 800e008:	b90b      	cbnz	r3, 800e00e <_fflush_r+0x1a>
 800e00a:	f7fe fa1d 	bl	800c448 <__sinit>
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <_fflush_r+0x6c>)
 800e010:	429c      	cmp	r4, r3
 800e012:	d11b      	bne.n	800e04c <_fflush_r+0x58>
 800e014:	686c      	ldr	r4, [r5, #4]
 800e016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d0ef      	beq.n	800dffe <_fflush_r+0xa>
 800e01e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e020:	07d0      	lsls	r0, r2, #31
 800e022:	d404      	bmi.n	800e02e <_fflush_r+0x3a>
 800e024:	0599      	lsls	r1, r3, #22
 800e026:	d402      	bmi.n	800e02e <_fflush_r+0x3a>
 800e028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e02a:	f7fe fad0 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800e02e:	4628      	mov	r0, r5
 800e030:	4621      	mov	r1, r4
 800e032:	f7ff ff59 	bl	800dee8 <__sflush_r>
 800e036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e038:	07da      	lsls	r2, r3, #31
 800e03a:	4605      	mov	r5, r0
 800e03c:	d4e0      	bmi.n	800e000 <_fflush_r+0xc>
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	059b      	lsls	r3, r3, #22
 800e042:	d4dd      	bmi.n	800e000 <_fflush_r+0xc>
 800e044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e046:	f7fe fac3 	bl	800c5d0 <__retarget_lock_release_recursive>
 800e04a:	e7d9      	b.n	800e000 <_fflush_r+0xc>
 800e04c:	4b05      	ldr	r3, [pc, #20]	; (800e064 <_fflush_r+0x70>)
 800e04e:	429c      	cmp	r4, r3
 800e050:	d101      	bne.n	800e056 <_fflush_r+0x62>
 800e052:	68ac      	ldr	r4, [r5, #8]
 800e054:	e7df      	b.n	800e016 <_fflush_r+0x22>
 800e056:	4b04      	ldr	r3, [pc, #16]	; (800e068 <_fflush_r+0x74>)
 800e058:	429c      	cmp	r4, r3
 800e05a:	bf08      	it	eq
 800e05c:	68ec      	ldreq	r4, [r5, #12]
 800e05e:	e7da      	b.n	800e016 <_fflush_r+0x22>
 800e060:	080114bc 	.word	0x080114bc
 800e064:	080114dc 	.word	0x080114dc
 800e068:	0801149c 	.word	0x0801149c

0800e06c <_localeconv_r>:
 800e06c:	4800      	ldr	r0, [pc, #0]	; (800e070 <_localeconv_r+0x4>)
 800e06e:	4770      	bx	lr
 800e070:	20000164 	.word	0x20000164

0800e074 <_lseek_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	; (800e094 <_lseek_r+0x20>)
 800e078:	4604      	mov	r4, r0
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	602a      	str	r2, [r5, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	f7f5 fc78 	bl	8003978 <_lseek>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d102      	bne.n	800e092 <_lseek_r+0x1e>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b103      	cbz	r3, 800e092 <_lseek_r+0x1e>
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	20004d58 	.word	0x20004d58

0800e098 <__malloc_lock>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__malloc_lock+0x8>)
 800e09a:	f7fe ba98 	b.w	800c5ce <__retarget_lock_acquire_recursive>
 800e09e:	bf00      	nop
 800e0a0:	20004d50 	.word	0x20004d50

0800e0a4 <__malloc_unlock>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__malloc_unlock+0x8>)
 800e0a6:	f7fe ba93 	b.w	800c5d0 <__retarget_lock_release_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	20004d50 	.word	0x20004d50

0800e0b0 <_Balloc>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	460d      	mov	r5, r1
 800e0b8:	b976      	cbnz	r6, 800e0d8 <_Balloc+0x28>
 800e0ba:	2010      	movs	r0, #16
 800e0bc:	f7fe fa8a 	bl	800c5d4 <malloc>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	6260      	str	r0, [r4, #36]	; 0x24
 800e0c4:	b920      	cbnz	r0, 800e0d0 <_Balloc+0x20>
 800e0c6:	4b18      	ldr	r3, [pc, #96]	; (800e128 <_Balloc+0x78>)
 800e0c8:	4818      	ldr	r0, [pc, #96]	; (800e12c <_Balloc+0x7c>)
 800e0ca:	2166      	movs	r1, #102	; 0x66
 800e0cc:	f000 fb90 	bl	800e7f0 <__assert_func>
 800e0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0d4:	6006      	str	r6, [r0, #0]
 800e0d6:	60c6      	str	r6, [r0, #12]
 800e0d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0da:	68f3      	ldr	r3, [r6, #12]
 800e0dc:	b183      	cbz	r3, 800e100 <_Balloc+0x50>
 800e0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0e0:	68db      	ldr	r3, [r3, #12]
 800e0e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0e6:	b9b8      	cbnz	r0, 800e118 <_Balloc+0x68>
 800e0e8:	2101      	movs	r1, #1
 800e0ea:	fa01 f605 	lsl.w	r6, r1, r5
 800e0ee:	1d72      	adds	r2, r6, #5
 800e0f0:	0092      	lsls	r2, r2, #2
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 fb5a 	bl	800e7ac <_calloc_r>
 800e0f8:	b160      	cbz	r0, 800e114 <_Balloc+0x64>
 800e0fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0fe:	e00e      	b.n	800e11e <_Balloc+0x6e>
 800e100:	2221      	movs	r2, #33	; 0x21
 800e102:	2104      	movs	r1, #4
 800e104:	4620      	mov	r0, r4
 800e106:	f000 fb51 	bl	800e7ac <_calloc_r>
 800e10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e10c:	60f0      	str	r0, [r6, #12]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1e4      	bne.n	800e0de <_Balloc+0x2e>
 800e114:	2000      	movs	r0, #0
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	6802      	ldr	r2, [r0, #0]
 800e11a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e11e:	2300      	movs	r3, #0
 800e120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e124:	e7f7      	b.n	800e116 <_Balloc+0x66>
 800e126:	bf00      	nop
 800e128:	08011541 	.word	0x08011541
 800e12c:	080115c8 	.word	0x080115c8

0800e130 <_Bfree>:
 800e130:	b570      	push	{r4, r5, r6, lr}
 800e132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e134:	4605      	mov	r5, r0
 800e136:	460c      	mov	r4, r1
 800e138:	b976      	cbnz	r6, 800e158 <_Bfree+0x28>
 800e13a:	2010      	movs	r0, #16
 800e13c:	f7fe fa4a 	bl	800c5d4 <malloc>
 800e140:	4602      	mov	r2, r0
 800e142:	6268      	str	r0, [r5, #36]	; 0x24
 800e144:	b920      	cbnz	r0, 800e150 <_Bfree+0x20>
 800e146:	4b09      	ldr	r3, [pc, #36]	; (800e16c <_Bfree+0x3c>)
 800e148:	4809      	ldr	r0, [pc, #36]	; (800e170 <_Bfree+0x40>)
 800e14a:	218a      	movs	r1, #138	; 0x8a
 800e14c:	f000 fb50 	bl	800e7f0 <__assert_func>
 800e150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e154:	6006      	str	r6, [r0, #0]
 800e156:	60c6      	str	r6, [r0, #12]
 800e158:	b13c      	cbz	r4, 800e16a <_Bfree+0x3a>
 800e15a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e15c:	6862      	ldr	r2, [r4, #4]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e164:	6021      	str	r1, [r4, #0]
 800e166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	08011541 	.word	0x08011541
 800e170:	080115c8 	.word	0x080115c8

0800e174 <__multadd>:
 800e174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e178:	690e      	ldr	r6, [r1, #16]
 800e17a:	4607      	mov	r7, r0
 800e17c:	4698      	mov	r8, r3
 800e17e:	460c      	mov	r4, r1
 800e180:	f101 0014 	add.w	r0, r1, #20
 800e184:	2300      	movs	r3, #0
 800e186:	6805      	ldr	r5, [r0, #0]
 800e188:	b2a9      	uxth	r1, r5
 800e18a:	fb02 8101 	mla	r1, r2, r1, r8
 800e18e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e192:	0c2d      	lsrs	r5, r5, #16
 800e194:	fb02 c505 	mla	r5, r2, r5, ip
 800e198:	b289      	uxth	r1, r1
 800e19a:	3301      	adds	r3, #1
 800e19c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e1a0:	429e      	cmp	r6, r3
 800e1a2:	f840 1b04 	str.w	r1, [r0], #4
 800e1a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e1aa:	dcec      	bgt.n	800e186 <__multadd+0x12>
 800e1ac:	f1b8 0f00 	cmp.w	r8, #0
 800e1b0:	d022      	beq.n	800e1f8 <__multadd+0x84>
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	42b3      	cmp	r3, r6
 800e1b6:	dc19      	bgt.n	800e1ec <__multadd+0x78>
 800e1b8:	6861      	ldr	r1, [r4, #4]
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	3101      	adds	r1, #1
 800e1be:	f7ff ff77 	bl	800e0b0 <_Balloc>
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	b928      	cbnz	r0, 800e1d2 <__multadd+0x5e>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b0d      	ldr	r3, [pc, #52]	; (800e200 <__multadd+0x8c>)
 800e1ca:	480e      	ldr	r0, [pc, #56]	; (800e204 <__multadd+0x90>)
 800e1cc:	21b5      	movs	r1, #181	; 0xb5
 800e1ce:	f000 fb0f 	bl	800e7f0 <__assert_func>
 800e1d2:	6922      	ldr	r2, [r4, #16]
 800e1d4:	3202      	adds	r2, #2
 800e1d6:	f104 010c 	add.w	r1, r4, #12
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	300c      	adds	r0, #12
 800e1de:	f7fe fa01 	bl	800c5e4 <memcpy>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff ffa3 	bl	800e130 <_Bfree>
 800e1ea:	462c      	mov	r4, r5
 800e1ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e1f0:	3601      	adds	r6, #1
 800e1f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800e1f6:	6126      	str	r6, [r4, #16]
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1fe:	bf00      	nop
 800e200:	080115b7 	.word	0x080115b7
 800e204:	080115c8 	.word	0x080115c8

0800e208 <__hi0bits>:
 800e208:	0c03      	lsrs	r3, r0, #16
 800e20a:	041b      	lsls	r3, r3, #16
 800e20c:	b9d3      	cbnz	r3, 800e244 <__hi0bits+0x3c>
 800e20e:	0400      	lsls	r0, r0, #16
 800e210:	2310      	movs	r3, #16
 800e212:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e216:	bf04      	itt	eq
 800e218:	0200      	lsleq	r0, r0, #8
 800e21a:	3308      	addeq	r3, #8
 800e21c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e220:	bf04      	itt	eq
 800e222:	0100      	lsleq	r0, r0, #4
 800e224:	3304      	addeq	r3, #4
 800e226:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e22a:	bf04      	itt	eq
 800e22c:	0080      	lsleq	r0, r0, #2
 800e22e:	3302      	addeq	r3, #2
 800e230:	2800      	cmp	r0, #0
 800e232:	db05      	blt.n	800e240 <__hi0bits+0x38>
 800e234:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e238:	f103 0301 	add.w	r3, r3, #1
 800e23c:	bf08      	it	eq
 800e23e:	2320      	moveq	r3, #32
 800e240:	4618      	mov	r0, r3
 800e242:	4770      	bx	lr
 800e244:	2300      	movs	r3, #0
 800e246:	e7e4      	b.n	800e212 <__hi0bits+0xa>

0800e248 <__lo0bits>:
 800e248:	6803      	ldr	r3, [r0, #0]
 800e24a:	f013 0207 	ands.w	r2, r3, #7
 800e24e:	4601      	mov	r1, r0
 800e250:	d00b      	beq.n	800e26a <__lo0bits+0x22>
 800e252:	07da      	lsls	r2, r3, #31
 800e254:	d424      	bmi.n	800e2a0 <__lo0bits+0x58>
 800e256:	0798      	lsls	r0, r3, #30
 800e258:	bf49      	itett	mi
 800e25a:	085b      	lsrmi	r3, r3, #1
 800e25c:	089b      	lsrpl	r3, r3, #2
 800e25e:	2001      	movmi	r0, #1
 800e260:	600b      	strmi	r3, [r1, #0]
 800e262:	bf5c      	itt	pl
 800e264:	600b      	strpl	r3, [r1, #0]
 800e266:	2002      	movpl	r0, #2
 800e268:	4770      	bx	lr
 800e26a:	b298      	uxth	r0, r3
 800e26c:	b9b0      	cbnz	r0, 800e29c <__lo0bits+0x54>
 800e26e:	0c1b      	lsrs	r3, r3, #16
 800e270:	2010      	movs	r0, #16
 800e272:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e276:	bf04      	itt	eq
 800e278:	0a1b      	lsreq	r3, r3, #8
 800e27a:	3008      	addeq	r0, #8
 800e27c:	071a      	lsls	r2, r3, #28
 800e27e:	bf04      	itt	eq
 800e280:	091b      	lsreq	r3, r3, #4
 800e282:	3004      	addeq	r0, #4
 800e284:	079a      	lsls	r2, r3, #30
 800e286:	bf04      	itt	eq
 800e288:	089b      	lsreq	r3, r3, #2
 800e28a:	3002      	addeq	r0, #2
 800e28c:	07da      	lsls	r2, r3, #31
 800e28e:	d403      	bmi.n	800e298 <__lo0bits+0x50>
 800e290:	085b      	lsrs	r3, r3, #1
 800e292:	f100 0001 	add.w	r0, r0, #1
 800e296:	d005      	beq.n	800e2a4 <__lo0bits+0x5c>
 800e298:	600b      	str	r3, [r1, #0]
 800e29a:	4770      	bx	lr
 800e29c:	4610      	mov	r0, r2
 800e29e:	e7e8      	b.n	800e272 <__lo0bits+0x2a>
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	4770      	bx	lr
 800e2a4:	2020      	movs	r0, #32
 800e2a6:	4770      	bx	lr

0800e2a8 <__i2b>:
 800e2a8:	b510      	push	{r4, lr}
 800e2aa:	460c      	mov	r4, r1
 800e2ac:	2101      	movs	r1, #1
 800e2ae:	f7ff feff 	bl	800e0b0 <_Balloc>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	b928      	cbnz	r0, 800e2c2 <__i2b+0x1a>
 800e2b6:	4b05      	ldr	r3, [pc, #20]	; (800e2cc <__i2b+0x24>)
 800e2b8:	4805      	ldr	r0, [pc, #20]	; (800e2d0 <__i2b+0x28>)
 800e2ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2be:	f000 fa97 	bl	800e7f0 <__assert_func>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	6144      	str	r4, [r0, #20]
 800e2c6:	6103      	str	r3, [r0, #16]
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	bf00      	nop
 800e2cc:	080115b7 	.word	0x080115b7
 800e2d0:	080115c8 	.word	0x080115c8

0800e2d4 <__multiply>:
 800e2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d8:	4614      	mov	r4, r2
 800e2da:	690a      	ldr	r2, [r1, #16]
 800e2dc:	6923      	ldr	r3, [r4, #16]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	bfb8      	it	lt
 800e2e2:	460b      	movlt	r3, r1
 800e2e4:	460d      	mov	r5, r1
 800e2e6:	bfbc      	itt	lt
 800e2e8:	4625      	movlt	r5, r4
 800e2ea:	461c      	movlt	r4, r3
 800e2ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e2f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e2f4:	68ab      	ldr	r3, [r5, #8]
 800e2f6:	6869      	ldr	r1, [r5, #4]
 800e2f8:	eb0a 0709 	add.w	r7, sl, r9
 800e2fc:	42bb      	cmp	r3, r7
 800e2fe:	b085      	sub	sp, #20
 800e300:	bfb8      	it	lt
 800e302:	3101      	addlt	r1, #1
 800e304:	f7ff fed4 	bl	800e0b0 <_Balloc>
 800e308:	b930      	cbnz	r0, 800e318 <__multiply+0x44>
 800e30a:	4602      	mov	r2, r0
 800e30c:	4b42      	ldr	r3, [pc, #264]	; (800e418 <__multiply+0x144>)
 800e30e:	4843      	ldr	r0, [pc, #268]	; (800e41c <__multiply+0x148>)
 800e310:	f240 115d 	movw	r1, #349	; 0x15d
 800e314:	f000 fa6c 	bl	800e7f0 <__assert_func>
 800e318:	f100 0614 	add.w	r6, r0, #20
 800e31c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e320:	4633      	mov	r3, r6
 800e322:	2200      	movs	r2, #0
 800e324:	4543      	cmp	r3, r8
 800e326:	d31e      	bcc.n	800e366 <__multiply+0x92>
 800e328:	f105 0c14 	add.w	ip, r5, #20
 800e32c:	f104 0314 	add.w	r3, r4, #20
 800e330:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e334:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e338:	9202      	str	r2, [sp, #8]
 800e33a:	ebac 0205 	sub.w	r2, ip, r5
 800e33e:	3a15      	subs	r2, #21
 800e340:	f022 0203 	bic.w	r2, r2, #3
 800e344:	3204      	adds	r2, #4
 800e346:	f105 0115 	add.w	r1, r5, #21
 800e34a:	458c      	cmp	ip, r1
 800e34c:	bf38      	it	cc
 800e34e:	2204      	movcc	r2, #4
 800e350:	9201      	str	r2, [sp, #4]
 800e352:	9a02      	ldr	r2, [sp, #8]
 800e354:	9303      	str	r3, [sp, #12]
 800e356:	429a      	cmp	r2, r3
 800e358:	d808      	bhi.n	800e36c <__multiply+0x98>
 800e35a:	2f00      	cmp	r7, #0
 800e35c:	dc55      	bgt.n	800e40a <__multiply+0x136>
 800e35e:	6107      	str	r7, [r0, #16]
 800e360:	b005      	add	sp, #20
 800e362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e366:	f843 2b04 	str.w	r2, [r3], #4
 800e36a:	e7db      	b.n	800e324 <__multiply+0x50>
 800e36c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e370:	f1ba 0f00 	cmp.w	sl, #0
 800e374:	d020      	beq.n	800e3b8 <__multiply+0xe4>
 800e376:	f105 0e14 	add.w	lr, r5, #20
 800e37a:	46b1      	mov	r9, r6
 800e37c:	2200      	movs	r2, #0
 800e37e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e382:	f8d9 b000 	ldr.w	fp, [r9]
 800e386:	b2a1      	uxth	r1, r4
 800e388:	fa1f fb8b 	uxth.w	fp, fp
 800e38c:	fb0a b101 	mla	r1, sl, r1, fp
 800e390:	4411      	add	r1, r2
 800e392:	f8d9 2000 	ldr.w	r2, [r9]
 800e396:	0c24      	lsrs	r4, r4, #16
 800e398:	0c12      	lsrs	r2, r2, #16
 800e39a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e39e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e3a2:	b289      	uxth	r1, r1
 800e3a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e3a8:	45f4      	cmp	ip, lr
 800e3aa:	f849 1b04 	str.w	r1, [r9], #4
 800e3ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e3b2:	d8e4      	bhi.n	800e37e <__multiply+0xaa>
 800e3b4:	9901      	ldr	r1, [sp, #4]
 800e3b6:	5072      	str	r2, [r6, r1]
 800e3b8:	9a03      	ldr	r2, [sp, #12]
 800e3ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	d01f      	beq.n	800e406 <__multiply+0x132>
 800e3c6:	6834      	ldr	r4, [r6, #0]
 800e3c8:	f105 0114 	add.w	r1, r5, #20
 800e3cc:	46b6      	mov	lr, r6
 800e3ce:	f04f 0a00 	mov.w	sl, #0
 800e3d2:	880a      	ldrh	r2, [r1, #0]
 800e3d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e3d8:	fb09 b202 	mla	r2, r9, r2, fp
 800e3dc:	4492      	add	sl, r2
 800e3de:	b2a4      	uxth	r4, r4
 800e3e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e3e4:	f84e 4b04 	str.w	r4, [lr], #4
 800e3e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800e3ec:	f8be 2000 	ldrh.w	r2, [lr]
 800e3f0:	0c24      	lsrs	r4, r4, #16
 800e3f2:	fb09 2404 	mla	r4, r9, r4, r2
 800e3f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e3fa:	458c      	cmp	ip, r1
 800e3fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e400:	d8e7      	bhi.n	800e3d2 <__multiply+0xfe>
 800e402:	9a01      	ldr	r2, [sp, #4]
 800e404:	50b4      	str	r4, [r6, r2]
 800e406:	3604      	adds	r6, #4
 800e408:	e7a3      	b.n	800e352 <__multiply+0x7e>
 800e40a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1a5      	bne.n	800e35e <__multiply+0x8a>
 800e412:	3f01      	subs	r7, #1
 800e414:	e7a1      	b.n	800e35a <__multiply+0x86>
 800e416:	bf00      	nop
 800e418:	080115b7 	.word	0x080115b7
 800e41c:	080115c8 	.word	0x080115c8

0800e420 <__pow5mult>:
 800e420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e424:	4615      	mov	r5, r2
 800e426:	f012 0203 	ands.w	r2, r2, #3
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	d007      	beq.n	800e440 <__pow5mult+0x20>
 800e430:	4c25      	ldr	r4, [pc, #148]	; (800e4c8 <__pow5mult+0xa8>)
 800e432:	3a01      	subs	r2, #1
 800e434:	2300      	movs	r3, #0
 800e436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43a:	f7ff fe9b 	bl	800e174 <__multadd>
 800e43e:	4607      	mov	r7, r0
 800e440:	10ad      	asrs	r5, r5, #2
 800e442:	d03d      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e446:	b97c      	cbnz	r4, 800e468 <__pow5mult+0x48>
 800e448:	2010      	movs	r0, #16
 800e44a:	f7fe f8c3 	bl	800c5d4 <malloc>
 800e44e:	4602      	mov	r2, r0
 800e450:	6270      	str	r0, [r6, #36]	; 0x24
 800e452:	b928      	cbnz	r0, 800e460 <__pow5mult+0x40>
 800e454:	4b1d      	ldr	r3, [pc, #116]	; (800e4cc <__pow5mult+0xac>)
 800e456:	481e      	ldr	r0, [pc, #120]	; (800e4d0 <__pow5mult+0xb0>)
 800e458:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e45c:	f000 f9c8 	bl	800e7f0 <__assert_func>
 800e460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e464:	6004      	str	r4, [r0, #0]
 800e466:	60c4      	str	r4, [r0, #12]
 800e468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e46c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e470:	b94c      	cbnz	r4, 800e486 <__pow5mult+0x66>
 800e472:	f240 2171 	movw	r1, #625	; 0x271
 800e476:	4630      	mov	r0, r6
 800e478:	f7ff ff16 	bl	800e2a8 <__i2b>
 800e47c:	2300      	movs	r3, #0
 800e47e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e482:	4604      	mov	r4, r0
 800e484:	6003      	str	r3, [r0, #0]
 800e486:	f04f 0900 	mov.w	r9, #0
 800e48a:	07eb      	lsls	r3, r5, #31
 800e48c:	d50a      	bpl.n	800e4a4 <__pow5mult+0x84>
 800e48e:	4639      	mov	r1, r7
 800e490:	4622      	mov	r2, r4
 800e492:	4630      	mov	r0, r6
 800e494:	f7ff ff1e 	bl	800e2d4 <__multiply>
 800e498:	4639      	mov	r1, r7
 800e49a:	4680      	mov	r8, r0
 800e49c:	4630      	mov	r0, r6
 800e49e:	f7ff fe47 	bl	800e130 <_Bfree>
 800e4a2:	4647      	mov	r7, r8
 800e4a4:	106d      	asrs	r5, r5, #1
 800e4a6:	d00b      	beq.n	800e4c0 <__pow5mult+0xa0>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	b938      	cbnz	r0, 800e4bc <__pow5mult+0x9c>
 800e4ac:	4622      	mov	r2, r4
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7ff ff0f 	bl	800e2d4 <__multiply>
 800e4b6:	6020      	str	r0, [r4, #0]
 800e4b8:	f8c0 9000 	str.w	r9, [r0]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	e7e4      	b.n	800e48a <__pow5mult+0x6a>
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	bf00      	nop
 800e4c8:	08011718 	.word	0x08011718
 800e4cc:	08011541 	.word	0x08011541
 800e4d0:	080115c8 	.word	0x080115c8

0800e4d4 <__lshift>:
 800e4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d8:	460c      	mov	r4, r1
 800e4da:	6849      	ldr	r1, [r1, #4]
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e2:	68a3      	ldr	r3, [r4, #8]
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4ec:	f108 0601 	add.w	r6, r8, #1
 800e4f0:	42b3      	cmp	r3, r6
 800e4f2:	db0b      	blt.n	800e50c <__lshift+0x38>
 800e4f4:	4638      	mov	r0, r7
 800e4f6:	f7ff fddb 	bl	800e0b0 <_Balloc>
 800e4fa:	4605      	mov	r5, r0
 800e4fc:	b948      	cbnz	r0, 800e512 <__lshift+0x3e>
 800e4fe:	4602      	mov	r2, r0
 800e500:	4b28      	ldr	r3, [pc, #160]	; (800e5a4 <__lshift+0xd0>)
 800e502:	4829      	ldr	r0, [pc, #164]	; (800e5a8 <__lshift+0xd4>)
 800e504:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e508:	f000 f972 	bl	800e7f0 <__assert_func>
 800e50c:	3101      	adds	r1, #1
 800e50e:	005b      	lsls	r3, r3, #1
 800e510:	e7ee      	b.n	800e4f0 <__lshift+0x1c>
 800e512:	2300      	movs	r3, #0
 800e514:	f100 0114 	add.w	r1, r0, #20
 800e518:	f100 0210 	add.w	r2, r0, #16
 800e51c:	4618      	mov	r0, r3
 800e51e:	4553      	cmp	r3, sl
 800e520:	db33      	blt.n	800e58a <__lshift+0xb6>
 800e522:	6920      	ldr	r0, [r4, #16]
 800e524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e528:	f104 0314 	add.w	r3, r4, #20
 800e52c:	f019 091f 	ands.w	r9, r9, #31
 800e530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e538:	d02b      	beq.n	800e592 <__lshift+0xbe>
 800e53a:	f1c9 0e20 	rsb	lr, r9, #32
 800e53e:	468a      	mov	sl, r1
 800e540:	2200      	movs	r2, #0
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	fa00 f009 	lsl.w	r0, r0, r9
 800e548:	4302      	orrs	r2, r0
 800e54a:	f84a 2b04 	str.w	r2, [sl], #4
 800e54e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e552:	459c      	cmp	ip, r3
 800e554:	fa22 f20e 	lsr.w	r2, r2, lr
 800e558:	d8f3      	bhi.n	800e542 <__lshift+0x6e>
 800e55a:	ebac 0304 	sub.w	r3, ip, r4
 800e55e:	3b15      	subs	r3, #21
 800e560:	f023 0303 	bic.w	r3, r3, #3
 800e564:	3304      	adds	r3, #4
 800e566:	f104 0015 	add.w	r0, r4, #21
 800e56a:	4584      	cmp	ip, r0
 800e56c:	bf38      	it	cc
 800e56e:	2304      	movcc	r3, #4
 800e570:	50ca      	str	r2, [r1, r3]
 800e572:	b10a      	cbz	r2, 800e578 <__lshift+0xa4>
 800e574:	f108 0602 	add.w	r6, r8, #2
 800e578:	3e01      	subs	r6, #1
 800e57a:	4638      	mov	r0, r7
 800e57c:	612e      	str	r6, [r5, #16]
 800e57e:	4621      	mov	r1, r4
 800e580:	f7ff fdd6 	bl	800e130 <_Bfree>
 800e584:	4628      	mov	r0, r5
 800e586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e58a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e58e:	3301      	adds	r3, #1
 800e590:	e7c5      	b.n	800e51e <__lshift+0x4a>
 800e592:	3904      	subs	r1, #4
 800e594:	f853 2b04 	ldr.w	r2, [r3], #4
 800e598:	f841 2f04 	str.w	r2, [r1, #4]!
 800e59c:	459c      	cmp	ip, r3
 800e59e:	d8f9      	bhi.n	800e594 <__lshift+0xc0>
 800e5a0:	e7ea      	b.n	800e578 <__lshift+0xa4>
 800e5a2:	bf00      	nop
 800e5a4:	080115b7 	.word	0x080115b7
 800e5a8:	080115c8 	.word	0x080115c8

0800e5ac <__mcmp>:
 800e5ac:	b530      	push	{r4, r5, lr}
 800e5ae:	6902      	ldr	r2, [r0, #16]
 800e5b0:	690c      	ldr	r4, [r1, #16]
 800e5b2:	1b12      	subs	r2, r2, r4
 800e5b4:	d10e      	bne.n	800e5d4 <__mcmp+0x28>
 800e5b6:	f100 0314 	add.w	r3, r0, #20
 800e5ba:	3114      	adds	r1, #20
 800e5bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5cc:	42a5      	cmp	r5, r4
 800e5ce:	d003      	beq.n	800e5d8 <__mcmp+0x2c>
 800e5d0:	d305      	bcc.n	800e5de <__mcmp+0x32>
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	bd30      	pop	{r4, r5, pc}
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	d3f3      	bcc.n	800e5c4 <__mcmp+0x18>
 800e5dc:	e7fa      	b.n	800e5d4 <__mcmp+0x28>
 800e5de:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e2:	e7f7      	b.n	800e5d4 <__mcmp+0x28>

0800e5e4 <__mdiff>:
 800e5e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	4611      	mov	r1, r2
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	4617      	mov	r7, r2
 800e5f2:	f7ff ffdb 	bl	800e5ac <__mcmp>
 800e5f6:	1e05      	subs	r5, r0, #0
 800e5f8:	d110      	bne.n	800e61c <__mdiff+0x38>
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	f7ff fd57 	bl	800e0b0 <_Balloc>
 800e602:	b930      	cbnz	r0, 800e612 <__mdiff+0x2e>
 800e604:	4b39      	ldr	r3, [pc, #228]	; (800e6ec <__mdiff+0x108>)
 800e606:	4602      	mov	r2, r0
 800e608:	f240 2132 	movw	r1, #562	; 0x232
 800e60c:	4838      	ldr	r0, [pc, #224]	; (800e6f0 <__mdiff+0x10c>)
 800e60e:	f000 f8ef 	bl	800e7f0 <__assert_func>
 800e612:	2301      	movs	r3, #1
 800e614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e61c:	bfa4      	itt	ge
 800e61e:	463b      	movge	r3, r7
 800e620:	4627      	movge	r7, r4
 800e622:	4630      	mov	r0, r6
 800e624:	6879      	ldr	r1, [r7, #4]
 800e626:	bfa6      	itte	ge
 800e628:	461c      	movge	r4, r3
 800e62a:	2500      	movge	r5, #0
 800e62c:	2501      	movlt	r5, #1
 800e62e:	f7ff fd3f 	bl	800e0b0 <_Balloc>
 800e632:	b920      	cbnz	r0, 800e63e <__mdiff+0x5a>
 800e634:	4b2d      	ldr	r3, [pc, #180]	; (800e6ec <__mdiff+0x108>)
 800e636:	4602      	mov	r2, r0
 800e638:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e63c:	e7e6      	b.n	800e60c <__mdiff+0x28>
 800e63e:	693e      	ldr	r6, [r7, #16]
 800e640:	60c5      	str	r5, [r0, #12]
 800e642:	6925      	ldr	r5, [r4, #16]
 800e644:	f107 0114 	add.w	r1, r7, #20
 800e648:	f104 0914 	add.w	r9, r4, #20
 800e64c:	f100 0e14 	add.w	lr, r0, #20
 800e650:	f107 0210 	add.w	r2, r7, #16
 800e654:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e658:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e65c:	46f2      	mov	sl, lr
 800e65e:	2700      	movs	r7, #0
 800e660:	f859 3b04 	ldr.w	r3, [r9], #4
 800e664:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e668:	fa1f f883 	uxth.w	r8, r3
 800e66c:	fa17 f78b 	uxtah	r7, r7, fp
 800e670:	0c1b      	lsrs	r3, r3, #16
 800e672:	eba7 0808 	sub.w	r8, r7, r8
 800e676:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e67a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e67e:	fa1f f888 	uxth.w	r8, r8
 800e682:	141f      	asrs	r7, r3, #16
 800e684:	454d      	cmp	r5, r9
 800e686:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e68a:	f84a 3b04 	str.w	r3, [sl], #4
 800e68e:	d8e7      	bhi.n	800e660 <__mdiff+0x7c>
 800e690:	1b2b      	subs	r3, r5, r4
 800e692:	3b15      	subs	r3, #21
 800e694:	f023 0303 	bic.w	r3, r3, #3
 800e698:	3304      	adds	r3, #4
 800e69a:	3415      	adds	r4, #21
 800e69c:	42a5      	cmp	r5, r4
 800e69e:	bf38      	it	cc
 800e6a0:	2304      	movcc	r3, #4
 800e6a2:	4419      	add	r1, r3
 800e6a4:	4473      	add	r3, lr
 800e6a6:	469e      	mov	lr, r3
 800e6a8:	460d      	mov	r5, r1
 800e6aa:	4565      	cmp	r5, ip
 800e6ac:	d30e      	bcc.n	800e6cc <__mdiff+0xe8>
 800e6ae:	f10c 0203 	add.w	r2, ip, #3
 800e6b2:	1a52      	subs	r2, r2, r1
 800e6b4:	f022 0203 	bic.w	r2, r2, #3
 800e6b8:	3903      	subs	r1, #3
 800e6ba:	458c      	cmp	ip, r1
 800e6bc:	bf38      	it	cc
 800e6be:	2200      	movcc	r2, #0
 800e6c0:	441a      	add	r2, r3
 800e6c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6c6:	b17b      	cbz	r3, 800e6e8 <__mdiff+0x104>
 800e6c8:	6106      	str	r6, [r0, #16]
 800e6ca:	e7a5      	b.n	800e618 <__mdiff+0x34>
 800e6cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800e6d0:	fa17 f488 	uxtah	r4, r7, r8
 800e6d4:	1422      	asrs	r2, r4, #16
 800e6d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e6da:	b2a4      	uxth	r4, r4
 800e6dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e6e0:	f84e 4b04 	str.w	r4, [lr], #4
 800e6e4:	1417      	asrs	r7, r2, #16
 800e6e6:	e7e0      	b.n	800e6aa <__mdiff+0xc6>
 800e6e8:	3e01      	subs	r6, #1
 800e6ea:	e7ea      	b.n	800e6c2 <__mdiff+0xde>
 800e6ec:	080115b7 	.word	0x080115b7
 800e6f0:	080115c8 	.word	0x080115c8

0800e6f4 <__d2b>:
 800e6f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	4689      	mov	r9, r1
 800e6fa:	2101      	movs	r1, #1
 800e6fc:	ec57 6b10 	vmov	r6, r7, d0
 800e700:	4690      	mov	r8, r2
 800e702:	f7ff fcd5 	bl	800e0b0 <_Balloc>
 800e706:	4604      	mov	r4, r0
 800e708:	b930      	cbnz	r0, 800e718 <__d2b+0x24>
 800e70a:	4602      	mov	r2, r0
 800e70c:	4b25      	ldr	r3, [pc, #148]	; (800e7a4 <__d2b+0xb0>)
 800e70e:	4826      	ldr	r0, [pc, #152]	; (800e7a8 <__d2b+0xb4>)
 800e710:	f240 310a 	movw	r1, #778	; 0x30a
 800e714:	f000 f86c 	bl	800e7f0 <__assert_func>
 800e718:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e71c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e720:	bb35      	cbnz	r5, 800e770 <__d2b+0x7c>
 800e722:	2e00      	cmp	r6, #0
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	d028      	beq.n	800e77a <__d2b+0x86>
 800e728:	4668      	mov	r0, sp
 800e72a:	9600      	str	r6, [sp, #0]
 800e72c:	f7ff fd8c 	bl	800e248 <__lo0bits>
 800e730:	9900      	ldr	r1, [sp, #0]
 800e732:	b300      	cbz	r0, 800e776 <__d2b+0x82>
 800e734:	9a01      	ldr	r2, [sp, #4]
 800e736:	f1c0 0320 	rsb	r3, r0, #32
 800e73a:	fa02 f303 	lsl.w	r3, r2, r3
 800e73e:	430b      	orrs	r3, r1
 800e740:	40c2      	lsrs	r2, r0
 800e742:	6163      	str	r3, [r4, #20]
 800e744:	9201      	str	r2, [sp, #4]
 800e746:	9b01      	ldr	r3, [sp, #4]
 800e748:	61a3      	str	r3, [r4, #24]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	bf14      	ite	ne
 800e74e:	2202      	movne	r2, #2
 800e750:	2201      	moveq	r2, #1
 800e752:	6122      	str	r2, [r4, #16]
 800e754:	b1d5      	cbz	r5, 800e78c <__d2b+0x98>
 800e756:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e75a:	4405      	add	r5, r0
 800e75c:	f8c9 5000 	str.w	r5, [r9]
 800e760:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e764:	f8c8 0000 	str.w	r0, [r8]
 800e768:	4620      	mov	r0, r4
 800e76a:	b003      	add	sp, #12
 800e76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e774:	e7d5      	b.n	800e722 <__d2b+0x2e>
 800e776:	6161      	str	r1, [r4, #20]
 800e778:	e7e5      	b.n	800e746 <__d2b+0x52>
 800e77a:	a801      	add	r0, sp, #4
 800e77c:	f7ff fd64 	bl	800e248 <__lo0bits>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	6163      	str	r3, [r4, #20]
 800e784:	2201      	movs	r2, #1
 800e786:	6122      	str	r2, [r4, #16]
 800e788:	3020      	adds	r0, #32
 800e78a:	e7e3      	b.n	800e754 <__d2b+0x60>
 800e78c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e790:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e794:	f8c9 0000 	str.w	r0, [r9]
 800e798:	6918      	ldr	r0, [r3, #16]
 800e79a:	f7ff fd35 	bl	800e208 <__hi0bits>
 800e79e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7a2:	e7df      	b.n	800e764 <__d2b+0x70>
 800e7a4:	080115b7 	.word	0x080115b7
 800e7a8:	080115c8 	.word	0x080115c8

0800e7ac <_calloc_r>:
 800e7ac:	b513      	push	{r0, r1, r4, lr}
 800e7ae:	434a      	muls	r2, r1
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	9201      	str	r2, [sp, #4]
 800e7b4:	f7fd ff7c 	bl	800c6b0 <_malloc_r>
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	b118      	cbz	r0, 800e7c4 <_calloc_r+0x18>
 800e7bc:	9a01      	ldr	r2, [sp, #4]
 800e7be:	2100      	movs	r1, #0
 800e7c0:	f7fd ff1e 	bl	800c600 <memset>
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	b002      	add	sp, #8
 800e7c8:	bd10      	pop	{r4, pc}
	...

0800e7cc <_read_r>:
 800e7cc:	b538      	push	{r3, r4, r5, lr}
 800e7ce:	4d07      	ldr	r5, [pc, #28]	; (800e7ec <_read_r+0x20>)
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	4608      	mov	r0, r1
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	602a      	str	r2, [r5, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	f7f5 f86c 	bl	80038b8 <_read>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d102      	bne.n	800e7ea <_read_r+0x1e>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	b103      	cbz	r3, 800e7ea <_read_r+0x1e>
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	bd38      	pop	{r3, r4, r5, pc}
 800e7ec:	20004d58 	.word	0x20004d58

0800e7f0 <__assert_func>:
 800e7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7f2:	4614      	mov	r4, r2
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	4b09      	ldr	r3, [pc, #36]	; (800e81c <__assert_func+0x2c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4605      	mov	r5, r0
 800e7fc:	68d8      	ldr	r0, [r3, #12]
 800e7fe:	b14c      	cbz	r4, 800e814 <__assert_func+0x24>
 800e800:	4b07      	ldr	r3, [pc, #28]	; (800e820 <__assert_func+0x30>)
 800e802:	9100      	str	r1, [sp, #0]
 800e804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e808:	4906      	ldr	r1, [pc, #24]	; (800e824 <__assert_func+0x34>)
 800e80a:	462b      	mov	r3, r5
 800e80c:	f000 f80e 	bl	800e82c <fiprintf>
 800e810:	f000 fa58 	bl	800ecc4 <abort>
 800e814:	4b04      	ldr	r3, [pc, #16]	; (800e828 <__assert_func+0x38>)
 800e816:	461c      	mov	r4, r3
 800e818:	e7f3      	b.n	800e802 <__assert_func+0x12>
 800e81a:	bf00      	nop
 800e81c:	20000010 	.word	0x20000010
 800e820:	08011724 	.word	0x08011724
 800e824:	08011731 	.word	0x08011731
 800e828:	0801175f 	.word	0x0801175f

0800e82c <fiprintf>:
 800e82c:	b40e      	push	{r1, r2, r3}
 800e82e:	b503      	push	{r0, r1, lr}
 800e830:	4601      	mov	r1, r0
 800e832:	ab03      	add	r3, sp, #12
 800e834:	4805      	ldr	r0, [pc, #20]	; (800e84c <fiprintf+0x20>)
 800e836:	f853 2b04 	ldr.w	r2, [r3], #4
 800e83a:	6800      	ldr	r0, [r0, #0]
 800e83c:	9301      	str	r3, [sp, #4]
 800e83e:	f000 f843 	bl	800e8c8 <_vfiprintf_r>
 800e842:	b002      	add	sp, #8
 800e844:	f85d eb04 	ldr.w	lr, [sp], #4
 800e848:	b003      	add	sp, #12
 800e84a:	4770      	bx	lr
 800e84c:	20000010 	.word	0x20000010

0800e850 <__ascii_mbtowc>:
 800e850:	b082      	sub	sp, #8
 800e852:	b901      	cbnz	r1, 800e856 <__ascii_mbtowc+0x6>
 800e854:	a901      	add	r1, sp, #4
 800e856:	b142      	cbz	r2, 800e86a <__ascii_mbtowc+0x1a>
 800e858:	b14b      	cbz	r3, 800e86e <__ascii_mbtowc+0x1e>
 800e85a:	7813      	ldrb	r3, [r2, #0]
 800e85c:	600b      	str	r3, [r1, #0]
 800e85e:	7812      	ldrb	r2, [r2, #0]
 800e860:	1e10      	subs	r0, r2, #0
 800e862:	bf18      	it	ne
 800e864:	2001      	movne	r0, #1
 800e866:	b002      	add	sp, #8
 800e868:	4770      	bx	lr
 800e86a:	4610      	mov	r0, r2
 800e86c:	e7fb      	b.n	800e866 <__ascii_mbtowc+0x16>
 800e86e:	f06f 0001 	mvn.w	r0, #1
 800e872:	e7f8      	b.n	800e866 <__ascii_mbtowc+0x16>

0800e874 <__sfputc_r>:
 800e874:	6893      	ldr	r3, [r2, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	b410      	push	{r4}
 800e87c:	6093      	str	r3, [r2, #8]
 800e87e:	da08      	bge.n	800e892 <__sfputc_r+0x1e>
 800e880:	6994      	ldr	r4, [r2, #24]
 800e882:	42a3      	cmp	r3, r4
 800e884:	db01      	blt.n	800e88a <__sfputc_r+0x16>
 800e886:	290a      	cmp	r1, #10
 800e888:	d103      	bne.n	800e892 <__sfputc_r+0x1e>
 800e88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88e:	f000 b94b 	b.w	800eb28 <__swbuf_r>
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	7019      	strb	r1, [r3, #0]
 800e89a:	4608      	mov	r0, r1
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <__sfputs_r>:
 800e8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	18d5      	adds	r5, r2, r3
 800e8ac:	42ac      	cmp	r4, r5
 800e8ae:	d101      	bne.n	800e8b4 <__sfputs_r+0x12>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e007      	b.n	800e8c4 <__sfputs_r+0x22>
 800e8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b8:	463a      	mov	r2, r7
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffda 	bl	800e874 <__sfputc_r>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d1f3      	bne.n	800e8ac <__sfputs_r+0xa>
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8c8 <_vfiprintf_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	b09d      	sub	sp, #116	; 0x74
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	4698      	mov	r8, r3
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	b118      	cbz	r0, 800e8e0 <_vfiprintf_r+0x18>
 800e8d8:	6983      	ldr	r3, [r0, #24]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <_vfiprintf_r+0x18>
 800e8dc:	f7fd fdb4 	bl	800c448 <__sinit>
 800e8e0:	4b89      	ldr	r3, [pc, #548]	; (800eb08 <_vfiprintf_r+0x240>)
 800e8e2:	429d      	cmp	r5, r3
 800e8e4:	d11b      	bne.n	800e91e <_vfiprintf_r+0x56>
 800e8e6:	6875      	ldr	r5, [r6, #4]
 800e8e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8ea:	07d9      	lsls	r1, r3, #31
 800e8ec:	d405      	bmi.n	800e8fa <_vfiprintf_r+0x32>
 800e8ee:	89ab      	ldrh	r3, [r5, #12]
 800e8f0:	059a      	lsls	r2, r3, #22
 800e8f2:	d402      	bmi.n	800e8fa <_vfiprintf_r+0x32>
 800e8f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8f6:	f7fd fe6a 	bl	800c5ce <__retarget_lock_acquire_recursive>
 800e8fa:	89ab      	ldrh	r3, [r5, #12]
 800e8fc:	071b      	lsls	r3, r3, #28
 800e8fe:	d501      	bpl.n	800e904 <_vfiprintf_r+0x3c>
 800e900:	692b      	ldr	r3, [r5, #16]
 800e902:	b9eb      	cbnz	r3, 800e940 <_vfiprintf_r+0x78>
 800e904:	4629      	mov	r1, r5
 800e906:	4630      	mov	r0, r6
 800e908:	f000 f96e 	bl	800ebe8 <__swsetup_r>
 800e90c:	b1c0      	cbz	r0, 800e940 <_vfiprintf_r+0x78>
 800e90e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e910:	07dc      	lsls	r4, r3, #31
 800e912:	d50e      	bpl.n	800e932 <_vfiprintf_r+0x6a>
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	b01d      	add	sp, #116	; 0x74
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	4b7b      	ldr	r3, [pc, #492]	; (800eb0c <_vfiprintf_r+0x244>)
 800e920:	429d      	cmp	r5, r3
 800e922:	d101      	bne.n	800e928 <_vfiprintf_r+0x60>
 800e924:	68b5      	ldr	r5, [r6, #8]
 800e926:	e7df      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e928:	4b79      	ldr	r3, [pc, #484]	; (800eb10 <_vfiprintf_r+0x248>)
 800e92a:	429d      	cmp	r5, r3
 800e92c:	bf08      	it	eq
 800e92e:	68f5      	ldreq	r5, [r6, #12]
 800e930:	e7da      	b.n	800e8e8 <_vfiprintf_r+0x20>
 800e932:	89ab      	ldrh	r3, [r5, #12]
 800e934:	0598      	lsls	r0, r3, #22
 800e936:	d4ed      	bmi.n	800e914 <_vfiprintf_r+0x4c>
 800e938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e93a:	f7fd fe49 	bl	800c5d0 <__retarget_lock_release_recursive>
 800e93e:	e7e9      	b.n	800e914 <_vfiprintf_r+0x4c>
 800e940:	2300      	movs	r3, #0
 800e942:	9309      	str	r3, [sp, #36]	; 0x24
 800e944:	2320      	movs	r3, #32
 800e946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e94e:	2330      	movs	r3, #48	; 0x30
 800e950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eb14 <_vfiprintf_r+0x24c>
 800e954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e958:	f04f 0901 	mov.w	r9, #1
 800e95c:	4623      	mov	r3, r4
 800e95e:	469a      	mov	sl, r3
 800e960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e964:	b10a      	cbz	r2, 800e96a <_vfiprintf_r+0xa2>
 800e966:	2a25      	cmp	r2, #37	; 0x25
 800e968:	d1f9      	bne.n	800e95e <_vfiprintf_r+0x96>
 800e96a:	ebba 0b04 	subs.w	fp, sl, r4
 800e96e:	d00b      	beq.n	800e988 <_vfiprintf_r+0xc0>
 800e970:	465b      	mov	r3, fp
 800e972:	4622      	mov	r2, r4
 800e974:	4629      	mov	r1, r5
 800e976:	4630      	mov	r0, r6
 800e978:	f7ff ff93 	bl	800e8a2 <__sfputs_r>
 800e97c:	3001      	adds	r0, #1
 800e97e:	f000 80aa 	beq.w	800ead6 <_vfiprintf_r+0x20e>
 800e982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e984:	445a      	add	r2, fp
 800e986:	9209      	str	r2, [sp, #36]	; 0x24
 800e988:	f89a 3000 	ldrb.w	r3, [sl]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 80a2 	beq.w	800ead6 <_vfiprintf_r+0x20e>
 800e992:	2300      	movs	r3, #0
 800e994:	f04f 32ff 	mov.w	r2, #4294967295
 800e998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e99c:	f10a 0a01 	add.w	sl, sl, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	9307      	str	r3, [sp, #28]
 800e9a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9a8:	931a      	str	r3, [sp, #104]	; 0x68
 800e9aa:	4654      	mov	r4, sl
 800e9ac:	2205      	movs	r2, #5
 800e9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b2:	4858      	ldr	r0, [pc, #352]	; (800eb14 <_vfiprintf_r+0x24c>)
 800e9b4:	f7f1 fc3c 	bl	8000230 <memchr>
 800e9b8:	9a04      	ldr	r2, [sp, #16]
 800e9ba:	b9d8      	cbnz	r0, 800e9f4 <_vfiprintf_r+0x12c>
 800e9bc:	06d1      	lsls	r1, r2, #27
 800e9be:	bf44      	itt	mi
 800e9c0:	2320      	movmi	r3, #32
 800e9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c6:	0713      	lsls	r3, r2, #28
 800e9c8:	bf44      	itt	mi
 800e9ca:	232b      	movmi	r3, #43	; 0x2b
 800e9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d4:	2b2a      	cmp	r3, #42	; 0x2a
 800e9d6:	d015      	beq.n	800ea04 <_vfiprintf_r+0x13c>
 800e9d8:	9a07      	ldr	r2, [sp, #28]
 800e9da:	4654      	mov	r4, sl
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f04f 0c0a 	mov.w	ip, #10
 800e9e2:	4621      	mov	r1, r4
 800e9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9e8:	3b30      	subs	r3, #48	; 0x30
 800e9ea:	2b09      	cmp	r3, #9
 800e9ec:	d94e      	bls.n	800ea8c <_vfiprintf_r+0x1c4>
 800e9ee:	b1b0      	cbz	r0, 800ea1e <_vfiprintf_r+0x156>
 800e9f0:	9207      	str	r2, [sp, #28]
 800e9f2:	e014      	b.n	800ea1e <_vfiprintf_r+0x156>
 800e9f4:	eba0 0308 	sub.w	r3, r0, r8
 800e9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	9304      	str	r3, [sp, #16]
 800ea00:	46a2      	mov	sl, r4
 800ea02:	e7d2      	b.n	800e9aa <_vfiprintf_r+0xe2>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	1d19      	adds	r1, r3, #4
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9103      	str	r1, [sp, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfbb      	ittet	lt
 800ea10:	425b      	neglt	r3, r3
 800ea12:	f042 0202 	orrlt.w	r2, r2, #2
 800ea16:	9307      	strge	r3, [sp, #28]
 800ea18:	9307      	strlt	r3, [sp, #28]
 800ea1a:	bfb8      	it	lt
 800ea1c:	9204      	strlt	r2, [sp, #16]
 800ea1e:	7823      	ldrb	r3, [r4, #0]
 800ea20:	2b2e      	cmp	r3, #46	; 0x2e
 800ea22:	d10c      	bne.n	800ea3e <_vfiprintf_r+0x176>
 800ea24:	7863      	ldrb	r3, [r4, #1]
 800ea26:	2b2a      	cmp	r3, #42	; 0x2a
 800ea28:	d135      	bne.n	800ea96 <_vfiprintf_r+0x1ce>
 800ea2a:	9b03      	ldr	r3, [sp, #12]
 800ea2c:	1d1a      	adds	r2, r3, #4
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	9203      	str	r2, [sp, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	bfb8      	it	lt
 800ea36:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea3a:	3402      	adds	r4, #2
 800ea3c:	9305      	str	r3, [sp, #20]
 800ea3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eb24 <_vfiprintf_r+0x25c>
 800ea42:	7821      	ldrb	r1, [r4, #0]
 800ea44:	2203      	movs	r2, #3
 800ea46:	4650      	mov	r0, sl
 800ea48:	f7f1 fbf2 	bl	8000230 <memchr>
 800ea4c:	b140      	cbz	r0, 800ea60 <_vfiprintf_r+0x198>
 800ea4e:	2340      	movs	r3, #64	; 0x40
 800ea50:	eba0 000a 	sub.w	r0, r0, sl
 800ea54:	fa03 f000 	lsl.w	r0, r3, r0
 800ea58:	9b04      	ldr	r3, [sp, #16]
 800ea5a:	4303      	orrs	r3, r0
 800ea5c:	3401      	adds	r4, #1
 800ea5e:	9304      	str	r3, [sp, #16]
 800ea60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea64:	482c      	ldr	r0, [pc, #176]	; (800eb18 <_vfiprintf_r+0x250>)
 800ea66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea6a:	2206      	movs	r2, #6
 800ea6c:	f7f1 fbe0 	bl	8000230 <memchr>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d03f      	beq.n	800eaf4 <_vfiprintf_r+0x22c>
 800ea74:	4b29      	ldr	r3, [pc, #164]	; (800eb1c <_vfiprintf_r+0x254>)
 800ea76:	bb1b      	cbnz	r3, 800eac0 <_vfiprintf_r+0x1f8>
 800ea78:	9b03      	ldr	r3, [sp, #12]
 800ea7a:	3307      	adds	r3, #7
 800ea7c:	f023 0307 	bic.w	r3, r3, #7
 800ea80:	3308      	adds	r3, #8
 800ea82:	9303      	str	r3, [sp, #12]
 800ea84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea86:	443b      	add	r3, r7
 800ea88:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8a:	e767      	b.n	800e95c <_vfiprintf_r+0x94>
 800ea8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea90:	460c      	mov	r4, r1
 800ea92:	2001      	movs	r0, #1
 800ea94:	e7a5      	b.n	800e9e2 <_vfiprintf_r+0x11a>
 800ea96:	2300      	movs	r3, #0
 800ea98:	3401      	adds	r4, #1
 800ea9a:	9305      	str	r3, [sp, #20]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	f04f 0c0a 	mov.w	ip, #10
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaa8:	3a30      	subs	r2, #48	; 0x30
 800eaaa:	2a09      	cmp	r2, #9
 800eaac:	d903      	bls.n	800eab6 <_vfiprintf_r+0x1ee>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d0c5      	beq.n	800ea3e <_vfiprintf_r+0x176>
 800eab2:	9105      	str	r1, [sp, #20]
 800eab4:	e7c3      	b.n	800ea3e <_vfiprintf_r+0x176>
 800eab6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaba:	4604      	mov	r4, r0
 800eabc:	2301      	movs	r3, #1
 800eabe:	e7f0      	b.n	800eaa2 <_vfiprintf_r+0x1da>
 800eac0:	ab03      	add	r3, sp, #12
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	462a      	mov	r2, r5
 800eac6:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <_vfiprintf_r+0x258>)
 800eac8:	a904      	add	r1, sp, #16
 800eaca:	4630      	mov	r0, r6
 800eacc:	f7fd feea 	bl	800c8a4 <_printf_float>
 800ead0:	4607      	mov	r7, r0
 800ead2:	1c78      	adds	r0, r7, #1
 800ead4:	d1d6      	bne.n	800ea84 <_vfiprintf_r+0x1bc>
 800ead6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ead8:	07d9      	lsls	r1, r3, #31
 800eada:	d405      	bmi.n	800eae8 <_vfiprintf_r+0x220>
 800eadc:	89ab      	ldrh	r3, [r5, #12]
 800eade:	059a      	lsls	r2, r3, #22
 800eae0:	d402      	bmi.n	800eae8 <_vfiprintf_r+0x220>
 800eae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eae4:	f7fd fd74 	bl	800c5d0 <__retarget_lock_release_recursive>
 800eae8:	89ab      	ldrh	r3, [r5, #12]
 800eaea:	065b      	lsls	r3, r3, #25
 800eaec:	f53f af12 	bmi.w	800e914 <_vfiprintf_r+0x4c>
 800eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaf2:	e711      	b.n	800e918 <_vfiprintf_r+0x50>
 800eaf4:	ab03      	add	r3, sp, #12
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	462a      	mov	r2, r5
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <_vfiprintf_r+0x258>)
 800eafc:	a904      	add	r1, sp, #16
 800eafe:	4630      	mov	r0, r6
 800eb00:	f7fe f974 	bl	800cdec <_printf_i>
 800eb04:	e7e4      	b.n	800ead0 <_vfiprintf_r+0x208>
 800eb06:	bf00      	nop
 800eb08:	080114bc 	.word	0x080114bc
 800eb0c:	080114dc 	.word	0x080114dc
 800eb10:	0801149c 	.word	0x0801149c
 800eb14:	0801176a 	.word	0x0801176a
 800eb18:	08011774 	.word	0x08011774
 800eb1c:	0800c8a5 	.word	0x0800c8a5
 800eb20:	0800e8a3 	.word	0x0800e8a3
 800eb24:	08011770 	.word	0x08011770

0800eb28 <__swbuf_r>:
 800eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2a:	460e      	mov	r6, r1
 800eb2c:	4614      	mov	r4, r2
 800eb2e:	4605      	mov	r5, r0
 800eb30:	b118      	cbz	r0, 800eb3a <__swbuf_r+0x12>
 800eb32:	6983      	ldr	r3, [r0, #24]
 800eb34:	b90b      	cbnz	r3, 800eb3a <__swbuf_r+0x12>
 800eb36:	f7fd fc87 	bl	800c448 <__sinit>
 800eb3a:	4b21      	ldr	r3, [pc, #132]	; (800ebc0 <__swbuf_r+0x98>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	d12b      	bne.n	800eb98 <__swbuf_r+0x70>
 800eb40:	686c      	ldr	r4, [r5, #4]
 800eb42:	69a3      	ldr	r3, [r4, #24]
 800eb44:	60a3      	str	r3, [r4, #8]
 800eb46:	89a3      	ldrh	r3, [r4, #12]
 800eb48:	071a      	lsls	r2, r3, #28
 800eb4a:	d52f      	bpl.n	800ebac <__swbuf_r+0x84>
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	b36b      	cbz	r3, 800ebac <__swbuf_r+0x84>
 800eb50:	6923      	ldr	r3, [r4, #16]
 800eb52:	6820      	ldr	r0, [r4, #0]
 800eb54:	1ac0      	subs	r0, r0, r3
 800eb56:	6963      	ldr	r3, [r4, #20]
 800eb58:	b2f6      	uxtb	r6, r6
 800eb5a:	4283      	cmp	r3, r0
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	dc04      	bgt.n	800eb6a <__swbuf_r+0x42>
 800eb60:	4621      	mov	r1, r4
 800eb62:	4628      	mov	r0, r5
 800eb64:	f7ff fa46 	bl	800dff4 <_fflush_r>
 800eb68:	bb30      	cbnz	r0, 800ebb8 <__swbuf_r+0x90>
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	60a3      	str	r3, [r4, #8]
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	1c5a      	adds	r2, r3, #1
 800eb74:	6022      	str	r2, [r4, #0]
 800eb76:	701e      	strb	r6, [r3, #0]
 800eb78:	6963      	ldr	r3, [r4, #20]
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	4283      	cmp	r3, r0
 800eb7e:	d004      	beq.n	800eb8a <__swbuf_r+0x62>
 800eb80:	89a3      	ldrh	r3, [r4, #12]
 800eb82:	07db      	lsls	r3, r3, #31
 800eb84:	d506      	bpl.n	800eb94 <__swbuf_r+0x6c>
 800eb86:	2e0a      	cmp	r6, #10
 800eb88:	d104      	bne.n	800eb94 <__swbuf_r+0x6c>
 800eb8a:	4621      	mov	r1, r4
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	f7ff fa31 	bl	800dff4 <_fflush_r>
 800eb92:	b988      	cbnz	r0, 800ebb8 <__swbuf_r+0x90>
 800eb94:	4638      	mov	r0, r7
 800eb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb98:	4b0a      	ldr	r3, [pc, #40]	; (800ebc4 <__swbuf_r+0x9c>)
 800eb9a:	429c      	cmp	r4, r3
 800eb9c:	d101      	bne.n	800eba2 <__swbuf_r+0x7a>
 800eb9e:	68ac      	ldr	r4, [r5, #8]
 800eba0:	e7cf      	b.n	800eb42 <__swbuf_r+0x1a>
 800eba2:	4b09      	ldr	r3, [pc, #36]	; (800ebc8 <__swbuf_r+0xa0>)
 800eba4:	429c      	cmp	r4, r3
 800eba6:	bf08      	it	eq
 800eba8:	68ec      	ldreq	r4, [r5, #12]
 800ebaa:	e7ca      	b.n	800eb42 <__swbuf_r+0x1a>
 800ebac:	4621      	mov	r1, r4
 800ebae:	4628      	mov	r0, r5
 800ebb0:	f000 f81a 	bl	800ebe8 <__swsetup_r>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d0cb      	beq.n	800eb50 <__swbuf_r+0x28>
 800ebb8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebbc:	e7ea      	b.n	800eb94 <__swbuf_r+0x6c>
 800ebbe:	bf00      	nop
 800ebc0:	080114bc 	.word	0x080114bc
 800ebc4:	080114dc 	.word	0x080114dc
 800ebc8:	0801149c 	.word	0x0801149c

0800ebcc <__ascii_wctomb>:
 800ebcc:	b149      	cbz	r1, 800ebe2 <__ascii_wctomb+0x16>
 800ebce:	2aff      	cmp	r2, #255	; 0xff
 800ebd0:	bf85      	ittet	hi
 800ebd2:	238a      	movhi	r3, #138	; 0x8a
 800ebd4:	6003      	strhi	r3, [r0, #0]
 800ebd6:	700a      	strbls	r2, [r1, #0]
 800ebd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ebdc:	bf98      	it	ls
 800ebde:	2001      	movls	r0, #1
 800ebe0:	4770      	bx	lr
 800ebe2:	4608      	mov	r0, r1
 800ebe4:	4770      	bx	lr
	...

0800ebe8 <__swsetup_r>:
 800ebe8:	4b32      	ldr	r3, [pc, #200]	; (800ecb4 <__swsetup_r+0xcc>)
 800ebea:	b570      	push	{r4, r5, r6, lr}
 800ebec:	681d      	ldr	r5, [r3, #0]
 800ebee:	4606      	mov	r6, r0
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	b125      	cbz	r5, 800ebfe <__swsetup_r+0x16>
 800ebf4:	69ab      	ldr	r3, [r5, #24]
 800ebf6:	b913      	cbnz	r3, 800ebfe <__swsetup_r+0x16>
 800ebf8:	4628      	mov	r0, r5
 800ebfa:	f7fd fc25 	bl	800c448 <__sinit>
 800ebfe:	4b2e      	ldr	r3, [pc, #184]	; (800ecb8 <__swsetup_r+0xd0>)
 800ec00:	429c      	cmp	r4, r3
 800ec02:	d10f      	bne.n	800ec24 <__swsetup_r+0x3c>
 800ec04:	686c      	ldr	r4, [r5, #4]
 800ec06:	89a3      	ldrh	r3, [r4, #12]
 800ec08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec0c:	0719      	lsls	r1, r3, #28
 800ec0e:	d42c      	bmi.n	800ec6a <__swsetup_r+0x82>
 800ec10:	06dd      	lsls	r5, r3, #27
 800ec12:	d411      	bmi.n	800ec38 <__swsetup_r+0x50>
 800ec14:	2309      	movs	r3, #9
 800ec16:	6033      	str	r3, [r6, #0]
 800ec18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec1c:	81a3      	strh	r3, [r4, #12]
 800ec1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec22:	e03e      	b.n	800eca2 <__swsetup_r+0xba>
 800ec24:	4b25      	ldr	r3, [pc, #148]	; (800ecbc <__swsetup_r+0xd4>)
 800ec26:	429c      	cmp	r4, r3
 800ec28:	d101      	bne.n	800ec2e <__swsetup_r+0x46>
 800ec2a:	68ac      	ldr	r4, [r5, #8]
 800ec2c:	e7eb      	b.n	800ec06 <__swsetup_r+0x1e>
 800ec2e:	4b24      	ldr	r3, [pc, #144]	; (800ecc0 <__swsetup_r+0xd8>)
 800ec30:	429c      	cmp	r4, r3
 800ec32:	bf08      	it	eq
 800ec34:	68ec      	ldreq	r4, [r5, #12]
 800ec36:	e7e6      	b.n	800ec06 <__swsetup_r+0x1e>
 800ec38:	0758      	lsls	r0, r3, #29
 800ec3a:	d512      	bpl.n	800ec62 <__swsetup_r+0x7a>
 800ec3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec3e:	b141      	cbz	r1, 800ec52 <__swsetup_r+0x6a>
 800ec40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec44:	4299      	cmp	r1, r3
 800ec46:	d002      	beq.n	800ec4e <__swsetup_r+0x66>
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f7fd fce1 	bl	800c610 <_free_r>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	6363      	str	r3, [r4, #52]	; 0x34
 800ec52:	89a3      	ldrh	r3, [r4, #12]
 800ec54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec58:	81a3      	strh	r3, [r4, #12]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	6063      	str	r3, [r4, #4]
 800ec5e:	6923      	ldr	r3, [r4, #16]
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	f043 0308 	orr.w	r3, r3, #8
 800ec68:	81a3      	strh	r3, [r4, #12]
 800ec6a:	6923      	ldr	r3, [r4, #16]
 800ec6c:	b94b      	cbnz	r3, 800ec82 <__swsetup_r+0x9a>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec78:	d003      	beq.n	800ec82 <__swsetup_r+0x9a>
 800ec7a:	4621      	mov	r1, r4
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f000 f84d 	bl	800ed1c <__smakebuf_r>
 800ec82:	89a0      	ldrh	r0, [r4, #12]
 800ec84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec88:	f010 0301 	ands.w	r3, r0, #1
 800ec8c:	d00a      	beq.n	800eca4 <__swsetup_r+0xbc>
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60a3      	str	r3, [r4, #8]
 800ec92:	6963      	ldr	r3, [r4, #20]
 800ec94:	425b      	negs	r3, r3
 800ec96:	61a3      	str	r3, [r4, #24]
 800ec98:	6923      	ldr	r3, [r4, #16]
 800ec9a:	b943      	cbnz	r3, 800ecae <__swsetup_r+0xc6>
 800ec9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eca0:	d1ba      	bne.n	800ec18 <__swsetup_r+0x30>
 800eca2:	bd70      	pop	{r4, r5, r6, pc}
 800eca4:	0781      	lsls	r1, r0, #30
 800eca6:	bf58      	it	pl
 800eca8:	6963      	ldrpl	r3, [r4, #20]
 800ecaa:	60a3      	str	r3, [r4, #8]
 800ecac:	e7f4      	b.n	800ec98 <__swsetup_r+0xb0>
 800ecae:	2000      	movs	r0, #0
 800ecb0:	e7f7      	b.n	800eca2 <__swsetup_r+0xba>
 800ecb2:	bf00      	nop
 800ecb4:	20000010 	.word	0x20000010
 800ecb8:	080114bc 	.word	0x080114bc
 800ecbc:	080114dc 	.word	0x080114dc
 800ecc0:	0801149c 	.word	0x0801149c

0800ecc4 <abort>:
 800ecc4:	b508      	push	{r3, lr}
 800ecc6:	2006      	movs	r0, #6
 800ecc8:	f000 f890 	bl	800edec <raise>
 800eccc:	2001      	movs	r0, #1
 800ecce:	f7f4 fde9 	bl	80038a4 <_exit>

0800ecd2 <__swhatbuf_r>:
 800ecd2:	b570      	push	{r4, r5, r6, lr}
 800ecd4:	460e      	mov	r6, r1
 800ecd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecda:	2900      	cmp	r1, #0
 800ecdc:	b096      	sub	sp, #88	; 0x58
 800ecde:	4614      	mov	r4, r2
 800ece0:	461d      	mov	r5, r3
 800ece2:	da07      	bge.n	800ecf4 <__swhatbuf_r+0x22>
 800ece4:	2300      	movs	r3, #0
 800ece6:	602b      	str	r3, [r5, #0]
 800ece8:	89b3      	ldrh	r3, [r6, #12]
 800ecea:	061a      	lsls	r2, r3, #24
 800ecec:	d410      	bmi.n	800ed10 <__swhatbuf_r+0x3e>
 800ecee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecf2:	e00e      	b.n	800ed12 <__swhatbuf_r+0x40>
 800ecf4:	466a      	mov	r2, sp
 800ecf6:	f000 f895 	bl	800ee24 <_fstat_r>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	dbf2      	blt.n	800ece4 <__swhatbuf_r+0x12>
 800ecfe:	9a01      	ldr	r2, [sp, #4]
 800ed00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed08:	425a      	negs	r2, r3
 800ed0a:	415a      	adcs	r2, r3
 800ed0c:	602a      	str	r2, [r5, #0]
 800ed0e:	e7ee      	b.n	800ecee <__swhatbuf_r+0x1c>
 800ed10:	2340      	movs	r3, #64	; 0x40
 800ed12:	2000      	movs	r0, #0
 800ed14:	6023      	str	r3, [r4, #0]
 800ed16:	b016      	add	sp, #88	; 0x58
 800ed18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed1c <__smakebuf_r>:
 800ed1c:	898b      	ldrh	r3, [r1, #12]
 800ed1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed20:	079d      	lsls	r5, r3, #30
 800ed22:	4606      	mov	r6, r0
 800ed24:	460c      	mov	r4, r1
 800ed26:	d507      	bpl.n	800ed38 <__smakebuf_r+0x1c>
 800ed28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed2c:	6023      	str	r3, [r4, #0]
 800ed2e:	6123      	str	r3, [r4, #16]
 800ed30:	2301      	movs	r3, #1
 800ed32:	6163      	str	r3, [r4, #20]
 800ed34:	b002      	add	sp, #8
 800ed36:	bd70      	pop	{r4, r5, r6, pc}
 800ed38:	ab01      	add	r3, sp, #4
 800ed3a:	466a      	mov	r2, sp
 800ed3c:	f7ff ffc9 	bl	800ecd2 <__swhatbuf_r>
 800ed40:	9900      	ldr	r1, [sp, #0]
 800ed42:	4605      	mov	r5, r0
 800ed44:	4630      	mov	r0, r6
 800ed46:	f7fd fcb3 	bl	800c6b0 <_malloc_r>
 800ed4a:	b948      	cbnz	r0, 800ed60 <__smakebuf_r+0x44>
 800ed4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed50:	059a      	lsls	r2, r3, #22
 800ed52:	d4ef      	bmi.n	800ed34 <__smakebuf_r+0x18>
 800ed54:	f023 0303 	bic.w	r3, r3, #3
 800ed58:	f043 0302 	orr.w	r3, r3, #2
 800ed5c:	81a3      	strh	r3, [r4, #12]
 800ed5e:	e7e3      	b.n	800ed28 <__smakebuf_r+0xc>
 800ed60:	4b0d      	ldr	r3, [pc, #52]	; (800ed98 <__smakebuf_r+0x7c>)
 800ed62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	6020      	str	r0, [r4, #0]
 800ed68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6c:	81a3      	strh	r3, [r4, #12]
 800ed6e:	9b00      	ldr	r3, [sp, #0]
 800ed70:	6163      	str	r3, [r4, #20]
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	6120      	str	r0, [r4, #16]
 800ed76:	b15b      	cbz	r3, 800ed90 <__smakebuf_r+0x74>
 800ed78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	f000 f863 	bl	800ee48 <_isatty_r>
 800ed82:	b128      	cbz	r0, 800ed90 <__smakebuf_r+0x74>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	f023 0303 	bic.w	r3, r3, #3
 800ed8a:	f043 0301 	orr.w	r3, r3, #1
 800ed8e:	81a3      	strh	r3, [r4, #12]
 800ed90:	89a0      	ldrh	r0, [r4, #12]
 800ed92:	4305      	orrs	r5, r0
 800ed94:	81a5      	strh	r5, [r4, #12]
 800ed96:	e7cd      	b.n	800ed34 <__smakebuf_r+0x18>
 800ed98:	0800c3e1 	.word	0x0800c3e1

0800ed9c <_raise_r>:
 800ed9c:	291f      	cmp	r1, #31
 800ed9e:	b538      	push	{r3, r4, r5, lr}
 800eda0:	4604      	mov	r4, r0
 800eda2:	460d      	mov	r5, r1
 800eda4:	d904      	bls.n	800edb0 <_raise_r+0x14>
 800eda6:	2316      	movs	r3, #22
 800eda8:	6003      	str	r3, [r0, #0]
 800edaa:	f04f 30ff 	mov.w	r0, #4294967295
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edb2:	b112      	cbz	r2, 800edba <_raise_r+0x1e>
 800edb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edb8:	b94b      	cbnz	r3, 800edce <_raise_r+0x32>
 800edba:	4620      	mov	r0, r4
 800edbc:	f000 f830 	bl	800ee20 <_getpid_r>
 800edc0:	462a      	mov	r2, r5
 800edc2:	4601      	mov	r1, r0
 800edc4:	4620      	mov	r0, r4
 800edc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edca:	f000 b817 	b.w	800edfc <_kill_r>
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d00a      	beq.n	800ede8 <_raise_r+0x4c>
 800edd2:	1c59      	adds	r1, r3, #1
 800edd4:	d103      	bne.n	800edde <_raise_r+0x42>
 800edd6:	2316      	movs	r3, #22
 800edd8:	6003      	str	r3, [r0, #0]
 800edda:	2001      	movs	r0, #1
 800eddc:	e7e7      	b.n	800edae <_raise_r+0x12>
 800edde:	2400      	movs	r4, #0
 800ede0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ede4:	4628      	mov	r0, r5
 800ede6:	4798      	blx	r3
 800ede8:	2000      	movs	r0, #0
 800edea:	e7e0      	b.n	800edae <_raise_r+0x12>

0800edec <raise>:
 800edec:	4b02      	ldr	r3, [pc, #8]	; (800edf8 <raise+0xc>)
 800edee:	4601      	mov	r1, r0
 800edf0:	6818      	ldr	r0, [r3, #0]
 800edf2:	f7ff bfd3 	b.w	800ed9c <_raise_r>
 800edf6:	bf00      	nop
 800edf8:	20000010 	.word	0x20000010

0800edfc <_kill_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4d07      	ldr	r5, [pc, #28]	; (800ee1c <_kill_r+0x20>)
 800ee00:	2300      	movs	r3, #0
 800ee02:	4604      	mov	r4, r0
 800ee04:	4608      	mov	r0, r1
 800ee06:	4611      	mov	r1, r2
 800ee08:	602b      	str	r3, [r5, #0]
 800ee0a:	f7f4 fd3b 	bl	8003884 <_kill>
 800ee0e:	1c43      	adds	r3, r0, #1
 800ee10:	d102      	bne.n	800ee18 <_kill_r+0x1c>
 800ee12:	682b      	ldr	r3, [r5, #0]
 800ee14:	b103      	cbz	r3, 800ee18 <_kill_r+0x1c>
 800ee16:	6023      	str	r3, [r4, #0]
 800ee18:	bd38      	pop	{r3, r4, r5, pc}
 800ee1a:	bf00      	nop
 800ee1c:	20004d58 	.word	0x20004d58

0800ee20 <_getpid_r>:
 800ee20:	f7f4 bd28 	b.w	8003874 <_getpid>

0800ee24 <_fstat_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4d07      	ldr	r5, [pc, #28]	; (800ee44 <_fstat_r+0x20>)
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	4608      	mov	r0, r1
 800ee2e:	4611      	mov	r1, r2
 800ee30:	602b      	str	r3, [r5, #0]
 800ee32:	f7f4 fd86 	bl	8003942 <_fstat>
 800ee36:	1c43      	adds	r3, r0, #1
 800ee38:	d102      	bne.n	800ee40 <_fstat_r+0x1c>
 800ee3a:	682b      	ldr	r3, [r5, #0]
 800ee3c:	b103      	cbz	r3, 800ee40 <_fstat_r+0x1c>
 800ee3e:	6023      	str	r3, [r4, #0]
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	bf00      	nop
 800ee44:	20004d58 	.word	0x20004d58

0800ee48 <_isatty_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d06      	ldr	r5, [pc, #24]	; (800ee64 <_isatty_r+0x1c>)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	4608      	mov	r0, r1
 800ee52:	602b      	str	r3, [r5, #0]
 800ee54:	f7f4 fd85 	bl	8003962 <_isatty>
 800ee58:	1c43      	adds	r3, r0, #1
 800ee5a:	d102      	bne.n	800ee62 <_isatty_r+0x1a>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	b103      	cbz	r3, 800ee62 <_isatty_r+0x1a>
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	bd38      	pop	{r3, r4, r5, pc}
 800ee64:	20004d58 	.word	0x20004d58

0800ee68 <sin>:
 800ee68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee6a:	ec53 2b10 	vmov	r2, r3, d0
 800ee6e:	4826      	ldr	r0, [pc, #152]	; (800ef08 <sin+0xa0>)
 800ee70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ee74:	4281      	cmp	r1, r0
 800ee76:	dc07      	bgt.n	800ee88 <sin+0x20>
 800ee78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ef00 <sin+0x98>
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	f001 fde3 	bl	8010a48 <__kernel_sin>
 800ee82:	ec51 0b10 	vmov	r0, r1, d0
 800ee86:	e007      	b.n	800ee98 <sin+0x30>
 800ee88:	4820      	ldr	r0, [pc, #128]	; (800ef0c <sin+0xa4>)
 800ee8a:	4281      	cmp	r1, r0
 800ee8c:	dd09      	ble.n	800eea2 <sin+0x3a>
 800ee8e:	ee10 0a10 	vmov	r0, s0
 800ee92:	4619      	mov	r1, r3
 800ee94:	f7f1 fa20 	bl	80002d8 <__aeabi_dsub>
 800ee98:	ec41 0b10 	vmov	d0, r0, r1
 800ee9c:	b005      	add	sp, #20
 800ee9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800eea2:	4668      	mov	r0, sp
 800eea4:	f000 ff08 	bl	800fcb8 <__ieee754_rem_pio2>
 800eea8:	f000 0003 	and.w	r0, r0, #3
 800eeac:	2801      	cmp	r0, #1
 800eeae:	d008      	beq.n	800eec2 <sin+0x5a>
 800eeb0:	2802      	cmp	r0, #2
 800eeb2:	d00d      	beq.n	800eed0 <sin+0x68>
 800eeb4:	b9d0      	cbnz	r0, 800eeec <sin+0x84>
 800eeb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eeba:	ed9d 0b00 	vldr	d0, [sp]
 800eebe:	2001      	movs	r0, #1
 800eec0:	e7dd      	b.n	800ee7e <sin+0x16>
 800eec2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eec6:	ed9d 0b00 	vldr	d0, [sp]
 800eeca:	f001 f9b5 	bl	8010238 <__kernel_cos>
 800eece:	e7d8      	b.n	800ee82 <sin+0x1a>
 800eed0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eed4:	ed9d 0b00 	vldr	d0, [sp]
 800eed8:	2001      	movs	r0, #1
 800eeda:	f001 fdb5 	bl	8010a48 <__kernel_sin>
 800eede:	ec53 2b10 	vmov	r2, r3, d0
 800eee2:	ee10 0a10 	vmov	r0, s0
 800eee6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eeea:	e7d5      	b.n	800ee98 <sin+0x30>
 800eeec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eef0:	ed9d 0b00 	vldr	d0, [sp]
 800eef4:	f001 f9a0 	bl	8010238 <__kernel_cos>
 800eef8:	e7f1      	b.n	800eede <sin+0x76>
 800eefa:	bf00      	nop
 800eefc:	f3af 8000 	nop.w
	...
 800ef08:	3fe921fb 	.word	0x3fe921fb
 800ef0c:	7fefffff 	.word	0x7fefffff

0800ef10 <atan2>:
 800ef10:	f000 b8e2 	b.w	800f0d8 <__ieee754_atan2>

0800ef14 <pow>:
 800ef14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef18:	ec59 8b10 	vmov	r8, r9, d0
 800ef1c:	ec57 6b11 	vmov	r6, r7, d1
 800ef20:	f000 f9a6 	bl	800f270 <__ieee754_pow>
 800ef24:	4b4e      	ldr	r3, [pc, #312]	; (800f060 <pow+0x14c>)
 800ef26:	f993 3000 	ldrsb.w	r3, [r3]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	ec55 4b10 	vmov	r4, r5, d0
 800ef30:	d015      	beq.n	800ef5e <pow+0x4a>
 800ef32:	4632      	mov	r2, r6
 800ef34:	463b      	mov	r3, r7
 800ef36:	4630      	mov	r0, r6
 800ef38:	4639      	mov	r1, r7
 800ef3a:	f7f1 fe1f 	bl	8000b7c <__aeabi_dcmpun>
 800ef3e:	b970      	cbnz	r0, 800ef5e <pow+0x4a>
 800ef40:	4642      	mov	r2, r8
 800ef42:	464b      	mov	r3, r9
 800ef44:	4640      	mov	r0, r8
 800ef46:	4649      	mov	r1, r9
 800ef48:	f7f1 fe18 	bl	8000b7c <__aeabi_dcmpun>
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	2300      	movs	r3, #0
 800ef50:	b148      	cbz	r0, 800ef66 <pow+0x52>
 800ef52:	4630      	mov	r0, r6
 800ef54:	4639      	mov	r1, r7
 800ef56:	f7f1 fddf 	bl	8000b18 <__aeabi_dcmpeq>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d17d      	bne.n	800f05a <pow+0x146>
 800ef5e:	ec45 4b10 	vmov	d0, r4, r5
 800ef62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef66:	4640      	mov	r0, r8
 800ef68:	4649      	mov	r1, r9
 800ef6a:	f7f1 fdd5 	bl	8000b18 <__aeabi_dcmpeq>
 800ef6e:	b1e0      	cbz	r0, 800efaa <pow+0x96>
 800ef70:	2200      	movs	r2, #0
 800ef72:	2300      	movs	r3, #0
 800ef74:	4630      	mov	r0, r6
 800ef76:	4639      	mov	r1, r7
 800ef78:	f7f1 fdce 	bl	8000b18 <__aeabi_dcmpeq>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d16c      	bne.n	800f05a <pow+0x146>
 800ef80:	ec47 6b10 	vmov	d0, r6, r7
 800ef84:	f001 ffc9 	bl	8010f1a <finite>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d0e8      	beq.n	800ef5e <pow+0x4a>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2300      	movs	r3, #0
 800ef90:	4630      	mov	r0, r6
 800ef92:	4639      	mov	r1, r7
 800ef94:	f7f1 fdca 	bl	8000b2c <__aeabi_dcmplt>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d0e0      	beq.n	800ef5e <pow+0x4a>
 800ef9c:	f7fd f9f6 	bl	800c38c <__errno>
 800efa0:	2321      	movs	r3, #33	; 0x21
 800efa2:	6003      	str	r3, [r0, #0]
 800efa4:	2400      	movs	r4, #0
 800efa6:	4d2f      	ldr	r5, [pc, #188]	; (800f064 <pow+0x150>)
 800efa8:	e7d9      	b.n	800ef5e <pow+0x4a>
 800efaa:	ec45 4b10 	vmov	d0, r4, r5
 800efae:	f001 ffb4 	bl	8010f1a <finite>
 800efb2:	bbb8      	cbnz	r0, 800f024 <pow+0x110>
 800efb4:	ec49 8b10 	vmov	d0, r8, r9
 800efb8:	f001 ffaf 	bl	8010f1a <finite>
 800efbc:	b390      	cbz	r0, 800f024 <pow+0x110>
 800efbe:	ec47 6b10 	vmov	d0, r6, r7
 800efc2:	f001 ffaa 	bl	8010f1a <finite>
 800efc6:	b368      	cbz	r0, 800f024 <pow+0x110>
 800efc8:	4622      	mov	r2, r4
 800efca:	462b      	mov	r3, r5
 800efcc:	4620      	mov	r0, r4
 800efce:	4629      	mov	r1, r5
 800efd0:	f7f1 fdd4 	bl	8000b7c <__aeabi_dcmpun>
 800efd4:	b160      	cbz	r0, 800eff0 <pow+0xdc>
 800efd6:	f7fd f9d9 	bl	800c38c <__errno>
 800efda:	2321      	movs	r3, #33	; 0x21
 800efdc:	6003      	str	r3, [r0, #0]
 800efde:	2200      	movs	r2, #0
 800efe0:	2300      	movs	r3, #0
 800efe2:	4610      	mov	r0, r2
 800efe4:	4619      	mov	r1, r3
 800efe6:	f7f1 fc59 	bl	800089c <__aeabi_ddiv>
 800efea:	4604      	mov	r4, r0
 800efec:	460d      	mov	r5, r1
 800efee:	e7b6      	b.n	800ef5e <pow+0x4a>
 800eff0:	f7fd f9cc 	bl	800c38c <__errno>
 800eff4:	2322      	movs	r3, #34	; 0x22
 800eff6:	6003      	str	r3, [r0, #0]
 800eff8:	2200      	movs	r2, #0
 800effa:	2300      	movs	r3, #0
 800effc:	4640      	mov	r0, r8
 800effe:	4649      	mov	r1, r9
 800f000:	f7f1 fd94 	bl	8000b2c <__aeabi_dcmplt>
 800f004:	2400      	movs	r4, #0
 800f006:	b158      	cbz	r0, 800f020 <pow+0x10c>
 800f008:	ec47 6b10 	vmov	d0, r6, r7
 800f00c:	f002 f818 	bl	8011040 <rint>
 800f010:	4632      	mov	r2, r6
 800f012:	ec51 0b10 	vmov	r0, r1, d0
 800f016:	463b      	mov	r3, r7
 800f018:	f7f1 fd7e 	bl	8000b18 <__aeabi_dcmpeq>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d0c2      	beq.n	800efa6 <pow+0x92>
 800f020:	4d11      	ldr	r5, [pc, #68]	; (800f068 <pow+0x154>)
 800f022:	e79c      	b.n	800ef5e <pow+0x4a>
 800f024:	2200      	movs	r2, #0
 800f026:	2300      	movs	r3, #0
 800f028:	4620      	mov	r0, r4
 800f02a:	4629      	mov	r1, r5
 800f02c:	f7f1 fd74 	bl	8000b18 <__aeabi_dcmpeq>
 800f030:	2800      	cmp	r0, #0
 800f032:	d094      	beq.n	800ef5e <pow+0x4a>
 800f034:	ec49 8b10 	vmov	d0, r8, r9
 800f038:	f001 ff6f 	bl	8010f1a <finite>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	d08e      	beq.n	800ef5e <pow+0x4a>
 800f040:	ec47 6b10 	vmov	d0, r6, r7
 800f044:	f001 ff69 	bl	8010f1a <finite>
 800f048:	2800      	cmp	r0, #0
 800f04a:	d088      	beq.n	800ef5e <pow+0x4a>
 800f04c:	f7fd f99e 	bl	800c38c <__errno>
 800f050:	2322      	movs	r3, #34	; 0x22
 800f052:	6003      	str	r3, [r0, #0]
 800f054:	2400      	movs	r4, #0
 800f056:	2500      	movs	r5, #0
 800f058:	e781      	b.n	800ef5e <pow+0x4a>
 800f05a:	4d04      	ldr	r5, [pc, #16]	; (800f06c <pow+0x158>)
 800f05c:	2400      	movs	r4, #0
 800f05e:	e77e      	b.n	800ef5e <pow+0x4a>
 800f060:	200001e0 	.word	0x200001e0
 800f064:	fff00000 	.word	0xfff00000
 800f068:	7ff00000 	.word	0x7ff00000
 800f06c:	3ff00000 	.word	0x3ff00000

0800f070 <sqrt>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	ed2d 8b02 	vpush	{d8}
 800f076:	ec55 4b10 	vmov	r4, r5, d0
 800f07a:	f001 f827 	bl	80100cc <__ieee754_sqrt>
 800f07e:	4b15      	ldr	r3, [pc, #84]	; (800f0d4 <sqrt+0x64>)
 800f080:	eeb0 8a40 	vmov.f32	s16, s0
 800f084:	eef0 8a60 	vmov.f32	s17, s1
 800f088:	f993 3000 	ldrsb.w	r3, [r3]
 800f08c:	3301      	adds	r3, #1
 800f08e:	d019      	beq.n	800f0c4 <sqrt+0x54>
 800f090:	4622      	mov	r2, r4
 800f092:	462b      	mov	r3, r5
 800f094:	4620      	mov	r0, r4
 800f096:	4629      	mov	r1, r5
 800f098:	f7f1 fd70 	bl	8000b7c <__aeabi_dcmpun>
 800f09c:	b990      	cbnz	r0, 800f0c4 <sqrt+0x54>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	f7f1 fd41 	bl	8000b2c <__aeabi_dcmplt>
 800f0aa:	b158      	cbz	r0, 800f0c4 <sqrt+0x54>
 800f0ac:	f7fd f96e 	bl	800c38c <__errno>
 800f0b0:	2321      	movs	r3, #33	; 0x21
 800f0b2:	6003      	str	r3, [r0, #0]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	f7f1 fbee 	bl	800089c <__aeabi_ddiv>
 800f0c0:	ec41 0b18 	vmov	d8, r0, r1
 800f0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f0c8:	eef0 0a68 	vmov.f32	s1, s17
 800f0cc:	ecbd 8b02 	vpop	{d8}
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	bf00      	nop
 800f0d4:	200001e0 	.word	0x200001e0

0800f0d8 <__ieee754_atan2>:
 800f0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	ec57 6b11 	vmov	r6, r7, d1
 800f0e0:	4273      	negs	r3, r6
 800f0e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800f268 <__ieee754_atan2+0x190>
 800f0e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f0ea:	4333      	orrs	r3, r6
 800f0ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f0f0:	4573      	cmp	r3, lr
 800f0f2:	ec51 0b10 	vmov	r0, r1, d0
 800f0f6:	ee11 8a10 	vmov	r8, s2
 800f0fa:	d80a      	bhi.n	800f112 <__ieee754_atan2+0x3a>
 800f0fc:	4244      	negs	r4, r0
 800f0fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f102:	4304      	orrs	r4, r0
 800f104:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f108:	4574      	cmp	r4, lr
 800f10a:	ee10 9a10 	vmov	r9, s0
 800f10e:	468c      	mov	ip, r1
 800f110:	d907      	bls.n	800f122 <__ieee754_atan2+0x4a>
 800f112:	4632      	mov	r2, r6
 800f114:	463b      	mov	r3, r7
 800f116:	f7f1 f8e1 	bl	80002dc <__adddf3>
 800f11a:	ec41 0b10 	vmov	d0, r0, r1
 800f11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f122:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f12a:	4334      	orrs	r4, r6
 800f12c:	d103      	bne.n	800f136 <__ieee754_atan2+0x5e>
 800f12e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f132:	f001 bd49 	b.w	8010bc8 <atan>
 800f136:	17bc      	asrs	r4, r7, #30
 800f138:	f004 0402 	and.w	r4, r4, #2
 800f13c:	ea53 0909 	orrs.w	r9, r3, r9
 800f140:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f144:	d107      	bne.n	800f156 <__ieee754_atan2+0x7e>
 800f146:	2c02      	cmp	r4, #2
 800f148:	d060      	beq.n	800f20c <__ieee754_atan2+0x134>
 800f14a:	2c03      	cmp	r4, #3
 800f14c:	d1e5      	bne.n	800f11a <__ieee754_atan2+0x42>
 800f14e:	a142      	add	r1, pc, #264	; (adr r1, 800f258 <__ieee754_atan2+0x180>)
 800f150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f154:	e7e1      	b.n	800f11a <__ieee754_atan2+0x42>
 800f156:	ea52 0808 	orrs.w	r8, r2, r8
 800f15a:	d106      	bne.n	800f16a <__ieee754_atan2+0x92>
 800f15c:	f1bc 0f00 	cmp.w	ip, #0
 800f160:	da5f      	bge.n	800f222 <__ieee754_atan2+0x14a>
 800f162:	a13f      	add	r1, pc, #252	; (adr r1, 800f260 <__ieee754_atan2+0x188>)
 800f164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f168:	e7d7      	b.n	800f11a <__ieee754_atan2+0x42>
 800f16a:	4572      	cmp	r2, lr
 800f16c:	d10f      	bne.n	800f18e <__ieee754_atan2+0xb6>
 800f16e:	4293      	cmp	r3, r2
 800f170:	f104 34ff 	add.w	r4, r4, #4294967295
 800f174:	d107      	bne.n	800f186 <__ieee754_atan2+0xae>
 800f176:	2c02      	cmp	r4, #2
 800f178:	d84c      	bhi.n	800f214 <__ieee754_atan2+0x13c>
 800f17a:	4b35      	ldr	r3, [pc, #212]	; (800f250 <__ieee754_atan2+0x178>)
 800f17c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f180:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f184:	e7c9      	b.n	800f11a <__ieee754_atan2+0x42>
 800f186:	2c02      	cmp	r4, #2
 800f188:	d848      	bhi.n	800f21c <__ieee754_atan2+0x144>
 800f18a:	4b32      	ldr	r3, [pc, #200]	; (800f254 <__ieee754_atan2+0x17c>)
 800f18c:	e7f6      	b.n	800f17c <__ieee754_atan2+0xa4>
 800f18e:	4573      	cmp	r3, lr
 800f190:	d0e4      	beq.n	800f15c <__ieee754_atan2+0x84>
 800f192:	1a9b      	subs	r3, r3, r2
 800f194:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f198:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f19c:	da1e      	bge.n	800f1dc <__ieee754_atan2+0x104>
 800f19e:	2f00      	cmp	r7, #0
 800f1a0:	da01      	bge.n	800f1a6 <__ieee754_atan2+0xce>
 800f1a2:	323c      	adds	r2, #60	; 0x3c
 800f1a4:	db1e      	blt.n	800f1e4 <__ieee754_atan2+0x10c>
 800f1a6:	4632      	mov	r2, r6
 800f1a8:	463b      	mov	r3, r7
 800f1aa:	f7f1 fb77 	bl	800089c <__aeabi_ddiv>
 800f1ae:	ec41 0b10 	vmov	d0, r0, r1
 800f1b2:	f001 fea9 	bl	8010f08 <fabs>
 800f1b6:	f001 fd07 	bl	8010bc8 <atan>
 800f1ba:	ec51 0b10 	vmov	r0, r1, d0
 800f1be:	2c01      	cmp	r4, #1
 800f1c0:	d013      	beq.n	800f1ea <__ieee754_atan2+0x112>
 800f1c2:	2c02      	cmp	r4, #2
 800f1c4:	d015      	beq.n	800f1f2 <__ieee754_atan2+0x11a>
 800f1c6:	2c00      	cmp	r4, #0
 800f1c8:	d0a7      	beq.n	800f11a <__ieee754_atan2+0x42>
 800f1ca:	a319      	add	r3, pc, #100	; (adr r3, 800f230 <__ieee754_atan2+0x158>)
 800f1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d0:	f7f1 f882 	bl	80002d8 <__aeabi_dsub>
 800f1d4:	a318      	add	r3, pc, #96	; (adr r3, 800f238 <__ieee754_atan2+0x160>)
 800f1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1da:	e014      	b.n	800f206 <__ieee754_atan2+0x12e>
 800f1dc:	a118      	add	r1, pc, #96	; (adr r1, 800f240 <__ieee754_atan2+0x168>)
 800f1de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1e2:	e7ec      	b.n	800f1be <__ieee754_atan2+0xe6>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	e7e9      	b.n	800f1be <__ieee754_atan2+0xe6>
 800f1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	e793      	b.n	800f11a <__ieee754_atan2+0x42>
 800f1f2:	a30f      	add	r3, pc, #60	; (adr r3, 800f230 <__ieee754_atan2+0x158>)
 800f1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f8:	f7f1 f86e 	bl	80002d8 <__aeabi_dsub>
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	a10d      	add	r1, pc, #52	; (adr r1, 800f238 <__ieee754_atan2+0x160>)
 800f202:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f206:	f7f1 f867 	bl	80002d8 <__aeabi_dsub>
 800f20a:	e786      	b.n	800f11a <__ieee754_atan2+0x42>
 800f20c:	a10a      	add	r1, pc, #40	; (adr r1, 800f238 <__ieee754_atan2+0x160>)
 800f20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f212:	e782      	b.n	800f11a <__ieee754_atan2+0x42>
 800f214:	a10c      	add	r1, pc, #48	; (adr r1, 800f248 <__ieee754_atan2+0x170>)
 800f216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f21a:	e77e      	b.n	800f11a <__ieee754_atan2+0x42>
 800f21c:	2000      	movs	r0, #0
 800f21e:	2100      	movs	r1, #0
 800f220:	e77b      	b.n	800f11a <__ieee754_atan2+0x42>
 800f222:	a107      	add	r1, pc, #28	; (adr r1, 800f240 <__ieee754_atan2+0x168>)
 800f224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f228:	e777      	b.n	800f11a <__ieee754_atan2+0x42>
 800f22a:	bf00      	nop
 800f22c:	f3af 8000 	nop.w
 800f230:	33145c07 	.word	0x33145c07
 800f234:	3ca1a626 	.word	0x3ca1a626
 800f238:	54442d18 	.word	0x54442d18
 800f23c:	400921fb 	.word	0x400921fb
 800f240:	54442d18 	.word	0x54442d18
 800f244:	3ff921fb 	.word	0x3ff921fb
 800f248:	54442d18 	.word	0x54442d18
 800f24c:	3fe921fb 	.word	0x3fe921fb
 800f250:	08011880 	.word	0x08011880
 800f254:	08011898 	.word	0x08011898
 800f258:	54442d18 	.word	0x54442d18
 800f25c:	c00921fb 	.word	0xc00921fb
 800f260:	54442d18 	.word	0x54442d18
 800f264:	bff921fb 	.word	0xbff921fb
 800f268:	7ff00000 	.word	0x7ff00000
 800f26c:	00000000 	.word	0x00000000

0800f270 <__ieee754_pow>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	ed2d 8b06 	vpush	{d8-d10}
 800f278:	b08d      	sub	sp, #52	; 0x34
 800f27a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f27e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800f282:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800f286:	ea56 0100 	orrs.w	r1, r6, r0
 800f28a:	ec53 2b10 	vmov	r2, r3, d0
 800f28e:	f000 84d1 	beq.w	800fc34 <__ieee754_pow+0x9c4>
 800f292:	497f      	ldr	r1, [pc, #508]	; (800f490 <__ieee754_pow+0x220>)
 800f294:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800f298:	428c      	cmp	r4, r1
 800f29a:	ee10 8a10 	vmov	r8, s0
 800f29e:	4699      	mov	r9, r3
 800f2a0:	dc09      	bgt.n	800f2b6 <__ieee754_pow+0x46>
 800f2a2:	d103      	bne.n	800f2ac <__ieee754_pow+0x3c>
 800f2a4:	b97a      	cbnz	r2, 800f2c6 <__ieee754_pow+0x56>
 800f2a6:	42a6      	cmp	r6, r4
 800f2a8:	dd02      	ble.n	800f2b0 <__ieee754_pow+0x40>
 800f2aa:	e00c      	b.n	800f2c6 <__ieee754_pow+0x56>
 800f2ac:	428e      	cmp	r6, r1
 800f2ae:	dc02      	bgt.n	800f2b6 <__ieee754_pow+0x46>
 800f2b0:	428e      	cmp	r6, r1
 800f2b2:	d110      	bne.n	800f2d6 <__ieee754_pow+0x66>
 800f2b4:	b178      	cbz	r0, 800f2d6 <__ieee754_pow+0x66>
 800f2b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f2ba:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f2be:	ea54 0308 	orrs.w	r3, r4, r8
 800f2c2:	f000 84b7 	beq.w	800fc34 <__ieee754_pow+0x9c4>
 800f2c6:	4873      	ldr	r0, [pc, #460]	; (800f494 <__ieee754_pow+0x224>)
 800f2c8:	b00d      	add	sp, #52	; 0x34
 800f2ca:	ecbd 8b06 	vpop	{d8-d10}
 800f2ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d2:	f001 bead 	b.w	8011030 <nan>
 800f2d6:	f1b9 0f00 	cmp.w	r9, #0
 800f2da:	da36      	bge.n	800f34a <__ieee754_pow+0xda>
 800f2dc:	496e      	ldr	r1, [pc, #440]	; (800f498 <__ieee754_pow+0x228>)
 800f2de:	428e      	cmp	r6, r1
 800f2e0:	dc51      	bgt.n	800f386 <__ieee754_pow+0x116>
 800f2e2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800f2e6:	428e      	cmp	r6, r1
 800f2e8:	f340 84af 	ble.w	800fc4a <__ieee754_pow+0x9da>
 800f2ec:	1531      	asrs	r1, r6, #20
 800f2ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f2f2:	2914      	cmp	r1, #20
 800f2f4:	dd0f      	ble.n	800f316 <__ieee754_pow+0xa6>
 800f2f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800f2fa:	fa20 fc01 	lsr.w	ip, r0, r1
 800f2fe:	fa0c f101 	lsl.w	r1, ip, r1
 800f302:	4281      	cmp	r1, r0
 800f304:	f040 84a1 	bne.w	800fc4a <__ieee754_pow+0x9da>
 800f308:	f00c 0c01 	and.w	ip, ip, #1
 800f30c:	f1cc 0102 	rsb	r1, ip, #2
 800f310:	9100      	str	r1, [sp, #0]
 800f312:	b180      	cbz	r0, 800f336 <__ieee754_pow+0xc6>
 800f314:	e059      	b.n	800f3ca <__ieee754_pow+0x15a>
 800f316:	2800      	cmp	r0, #0
 800f318:	d155      	bne.n	800f3c6 <__ieee754_pow+0x156>
 800f31a:	f1c1 0114 	rsb	r1, r1, #20
 800f31e:	fa46 fc01 	asr.w	ip, r6, r1
 800f322:	fa0c f101 	lsl.w	r1, ip, r1
 800f326:	42b1      	cmp	r1, r6
 800f328:	f040 848c 	bne.w	800fc44 <__ieee754_pow+0x9d4>
 800f32c:	f00c 0c01 	and.w	ip, ip, #1
 800f330:	f1cc 0102 	rsb	r1, ip, #2
 800f334:	9100      	str	r1, [sp, #0]
 800f336:	4959      	ldr	r1, [pc, #356]	; (800f49c <__ieee754_pow+0x22c>)
 800f338:	428e      	cmp	r6, r1
 800f33a:	d12d      	bne.n	800f398 <__ieee754_pow+0x128>
 800f33c:	2f00      	cmp	r7, #0
 800f33e:	da79      	bge.n	800f434 <__ieee754_pow+0x1c4>
 800f340:	4956      	ldr	r1, [pc, #344]	; (800f49c <__ieee754_pow+0x22c>)
 800f342:	2000      	movs	r0, #0
 800f344:	f7f1 faaa 	bl	800089c <__aeabi_ddiv>
 800f348:	e016      	b.n	800f378 <__ieee754_pow+0x108>
 800f34a:	2100      	movs	r1, #0
 800f34c:	9100      	str	r1, [sp, #0]
 800f34e:	2800      	cmp	r0, #0
 800f350:	d13b      	bne.n	800f3ca <__ieee754_pow+0x15a>
 800f352:	494f      	ldr	r1, [pc, #316]	; (800f490 <__ieee754_pow+0x220>)
 800f354:	428e      	cmp	r6, r1
 800f356:	d1ee      	bne.n	800f336 <__ieee754_pow+0xc6>
 800f358:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f35c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f360:	ea53 0308 	orrs.w	r3, r3, r8
 800f364:	f000 8466 	beq.w	800fc34 <__ieee754_pow+0x9c4>
 800f368:	4b4d      	ldr	r3, [pc, #308]	; (800f4a0 <__ieee754_pow+0x230>)
 800f36a:	429c      	cmp	r4, r3
 800f36c:	dd0d      	ble.n	800f38a <__ieee754_pow+0x11a>
 800f36e:	2f00      	cmp	r7, #0
 800f370:	f280 8464 	bge.w	800fc3c <__ieee754_pow+0x9cc>
 800f374:	2000      	movs	r0, #0
 800f376:	2100      	movs	r1, #0
 800f378:	ec41 0b10 	vmov	d0, r0, r1
 800f37c:	b00d      	add	sp, #52	; 0x34
 800f37e:	ecbd 8b06 	vpop	{d8-d10}
 800f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f386:	2102      	movs	r1, #2
 800f388:	e7e0      	b.n	800f34c <__ieee754_pow+0xdc>
 800f38a:	2f00      	cmp	r7, #0
 800f38c:	daf2      	bge.n	800f374 <__ieee754_pow+0x104>
 800f38e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800f392:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f396:	e7ef      	b.n	800f378 <__ieee754_pow+0x108>
 800f398:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800f39c:	d104      	bne.n	800f3a8 <__ieee754_pow+0x138>
 800f39e:	4610      	mov	r0, r2
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	f7f1 f951 	bl	8000648 <__aeabi_dmul>
 800f3a6:	e7e7      	b.n	800f378 <__ieee754_pow+0x108>
 800f3a8:	493e      	ldr	r1, [pc, #248]	; (800f4a4 <__ieee754_pow+0x234>)
 800f3aa:	428f      	cmp	r7, r1
 800f3ac:	d10d      	bne.n	800f3ca <__ieee754_pow+0x15a>
 800f3ae:	f1b9 0f00 	cmp.w	r9, #0
 800f3b2:	db0a      	blt.n	800f3ca <__ieee754_pow+0x15a>
 800f3b4:	ec43 2b10 	vmov	d0, r2, r3
 800f3b8:	b00d      	add	sp, #52	; 0x34
 800f3ba:	ecbd 8b06 	vpop	{d8-d10}
 800f3be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c2:	f000 be83 	b.w	80100cc <__ieee754_sqrt>
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	9100      	str	r1, [sp, #0]
 800f3ca:	ec43 2b10 	vmov	d0, r2, r3
 800f3ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f3d2:	f001 fd99 	bl	8010f08 <fabs>
 800f3d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3da:	ec51 0b10 	vmov	r0, r1, d0
 800f3de:	f1b8 0f00 	cmp.w	r8, #0
 800f3e2:	d12a      	bne.n	800f43a <__ieee754_pow+0x1ca>
 800f3e4:	b12c      	cbz	r4, 800f3f2 <__ieee754_pow+0x182>
 800f3e6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800f49c <__ieee754_pow+0x22c>
 800f3ea:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800f3ee:	45e6      	cmp	lr, ip
 800f3f0:	d123      	bne.n	800f43a <__ieee754_pow+0x1ca>
 800f3f2:	2f00      	cmp	r7, #0
 800f3f4:	da05      	bge.n	800f402 <__ieee754_pow+0x192>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	4927      	ldr	r1, [pc, #156]	; (800f49c <__ieee754_pow+0x22c>)
 800f3fe:	f7f1 fa4d 	bl	800089c <__aeabi_ddiv>
 800f402:	f1b9 0f00 	cmp.w	r9, #0
 800f406:	dab7      	bge.n	800f378 <__ieee754_pow+0x108>
 800f408:	9b00      	ldr	r3, [sp, #0]
 800f40a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f40e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f412:	4323      	orrs	r3, r4
 800f414:	d108      	bne.n	800f428 <__ieee754_pow+0x1b8>
 800f416:	4602      	mov	r2, r0
 800f418:	460b      	mov	r3, r1
 800f41a:	4610      	mov	r0, r2
 800f41c:	4619      	mov	r1, r3
 800f41e:	f7f0 ff5b 	bl	80002d8 <__aeabi_dsub>
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	e78d      	b.n	800f344 <__ieee754_pow+0xd4>
 800f428:	9b00      	ldr	r3, [sp, #0]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d1a4      	bne.n	800f378 <__ieee754_pow+0x108>
 800f42e:	4602      	mov	r2, r0
 800f430:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f434:	4610      	mov	r0, r2
 800f436:	4619      	mov	r1, r3
 800f438:	e79e      	b.n	800f378 <__ieee754_pow+0x108>
 800f43a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800f43e:	f10c 35ff 	add.w	r5, ip, #4294967295
 800f442:	950a      	str	r5, [sp, #40]	; 0x28
 800f444:	9d00      	ldr	r5, [sp, #0]
 800f446:	46ac      	mov	ip, r5
 800f448:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f44a:	ea5c 0505 	orrs.w	r5, ip, r5
 800f44e:	d0e4      	beq.n	800f41a <__ieee754_pow+0x1aa>
 800f450:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <__ieee754_pow+0x238>)
 800f452:	429e      	cmp	r6, r3
 800f454:	f340 80fc 	ble.w	800f650 <__ieee754_pow+0x3e0>
 800f458:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f45c:	429e      	cmp	r6, r3
 800f45e:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <__ieee754_pow+0x230>)
 800f460:	dd07      	ble.n	800f472 <__ieee754_pow+0x202>
 800f462:	429c      	cmp	r4, r3
 800f464:	dc0a      	bgt.n	800f47c <__ieee754_pow+0x20c>
 800f466:	2f00      	cmp	r7, #0
 800f468:	da84      	bge.n	800f374 <__ieee754_pow+0x104>
 800f46a:	a307      	add	r3, pc, #28	; (adr r3, 800f488 <__ieee754_pow+0x218>)
 800f46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f470:	e795      	b.n	800f39e <__ieee754_pow+0x12e>
 800f472:	429c      	cmp	r4, r3
 800f474:	dbf7      	blt.n	800f466 <__ieee754_pow+0x1f6>
 800f476:	4b09      	ldr	r3, [pc, #36]	; (800f49c <__ieee754_pow+0x22c>)
 800f478:	429c      	cmp	r4, r3
 800f47a:	dd17      	ble.n	800f4ac <__ieee754_pow+0x23c>
 800f47c:	2f00      	cmp	r7, #0
 800f47e:	dcf4      	bgt.n	800f46a <__ieee754_pow+0x1fa>
 800f480:	e778      	b.n	800f374 <__ieee754_pow+0x104>
 800f482:	bf00      	nop
 800f484:	f3af 8000 	nop.w
 800f488:	8800759c 	.word	0x8800759c
 800f48c:	7e37e43c 	.word	0x7e37e43c
 800f490:	7ff00000 	.word	0x7ff00000
 800f494:	0801175f 	.word	0x0801175f
 800f498:	433fffff 	.word	0x433fffff
 800f49c:	3ff00000 	.word	0x3ff00000
 800f4a0:	3fefffff 	.word	0x3fefffff
 800f4a4:	3fe00000 	.word	0x3fe00000
 800f4a8:	41e00000 	.word	0x41e00000
 800f4ac:	4b64      	ldr	r3, [pc, #400]	; (800f640 <__ieee754_pow+0x3d0>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f7f0 ff12 	bl	80002d8 <__aeabi_dsub>
 800f4b4:	a356      	add	r3, pc, #344	; (adr r3, 800f610 <__ieee754_pow+0x3a0>)
 800f4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	460d      	mov	r5, r1
 800f4be:	f7f1 f8c3 	bl	8000648 <__aeabi_dmul>
 800f4c2:	a355      	add	r3, pc, #340	; (adr r3, 800f618 <__ieee754_pow+0x3a8>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	460f      	mov	r7, r1
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	4629      	mov	r1, r5
 800f4d0:	f7f1 f8ba 	bl	8000648 <__aeabi_dmul>
 800f4d4:	4b5b      	ldr	r3, [pc, #364]	; (800f644 <__ieee754_pow+0x3d4>)
 800f4d6:	4682      	mov	sl, r0
 800f4d8:	468b      	mov	fp, r1
 800f4da:	2200      	movs	r2, #0
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	f7f1 f8b2 	bl	8000648 <__aeabi_dmul>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	460b      	mov	r3, r1
 800f4e8:	a14d      	add	r1, pc, #308	; (adr r1, 800f620 <__ieee754_pow+0x3b0>)
 800f4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ee:	f7f0 fef3 	bl	80002d8 <__aeabi_dsub>
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	462b      	mov	r3, r5
 800f4f6:	f7f1 f8a7 	bl	8000648 <__aeabi_dmul>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	2000      	movs	r0, #0
 800f500:	4951      	ldr	r1, [pc, #324]	; (800f648 <__ieee754_pow+0x3d8>)
 800f502:	f7f0 fee9 	bl	80002d8 <__aeabi_dsub>
 800f506:	4622      	mov	r2, r4
 800f508:	4680      	mov	r8, r0
 800f50a:	4689      	mov	r9, r1
 800f50c:	462b      	mov	r3, r5
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	f7f1 f899 	bl	8000648 <__aeabi_dmul>
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4640      	mov	r0, r8
 800f51c:	4649      	mov	r1, r9
 800f51e:	f7f1 f893 	bl	8000648 <__aeabi_dmul>
 800f522:	a341      	add	r3, pc, #260	; (adr r3, 800f628 <__ieee754_pow+0x3b8>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	f7f1 f88e 	bl	8000648 <__aeabi_dmul>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	4650      	mov	r0, sl
 800f532:	4659      	mov	r1, fp
 800f534:	f7f0 fed0 	bl	80002d8 <__aeabi_dsub>
 800f538:	4602      	mov	r2, r0
 800f53a:	460b      	mov	r3, r1
 800f53c:	4680      	mov	r8, r0
 800f53e:	4689      	mov	r9, r1
 800f540:	4630      	mov	r0, r6
 800f542:	4639      	mov	r1, r7
 800f544:	f7f0 feca 	bl	80002dc <__adddf3>
 800f548:	2400      	movs	r4, #0
 800f54a:	4632      	mov	r2, r6
 800f54c:	463b      	mov	r3, r7
 800f54e:	4620      	mov	r0, r4
 800f550:	460d      	mov	r5, r1
 800f552:	f7f0 fec1 	bl	80002d8 <__aeabi_dsub>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4640      	mov	r0, r8
 800f55c:	4649      	mov	r1, r9
 800f55e:	f7f0 febb 	bl	80002d8 <__aeabi_dsub>
 800f562:	9b00      	ldr	r3, [sp, #0]
 800f564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f566:	3b01      	subs	r3, #1
 800f568:	4313      	orrs	r3, r2
 800f56a:	4682      	mov	sl, r0
 800f56c:	468b      	mov	fp, r1
 800f56e:	f040 81f1 	bne.w	800f954 <__ieee754_pow+0x6e4>
 800f572:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f630 <__ieee754_pow+0x3c0>
 800f576:	eeb0 8a47 	vmov.f32	s16, s14
 800f57a:	eef0 8a67 	vmov.f32	s17, s15
 800f57e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f582:	2600      	movs	r6, #0
 800f584:	4632      	mov	r2, r6
 800f586:	463b      	mov	r3, r7
 800f588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f58c:	f7f0 fea4 	bl	80002d8 <__aeabi_dsub>
 800f590:	4622      	mov	r2, r4
 800f592:	462b      	mov	r3, r5
 800f594:	f7f1 f858 	bl	8000648 <__aeabi_dmul>
 800f598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f59c:	4680      	mov	r8, r0
 800f59e:	4689      	mov	r9, r1
 800f5a0:	4650      	mov	r0, sl
 800f5a2:	4659      	mov	r1, fp
 800f5a4:	f7f1 f850 	bl	8000648 <__aeabi_dmul>
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	4640      	mov	r0, r8
 800f5ae:	4649      	mov	r1, r9
 800f5b0:	f7f0 fe94 	bl	80002dc <__adddf3>
 800f5b4:	4632      	mov	r2, r6
 800f5b6:	463b      	mov	r3, r7
 800f5b8:	4680      	mov	r8, r0
 800f5ba:	4689      	mov	r9, r1
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4629      	mov	r1, r5
 800f5c0:	f7f1 f842 	bl	8000648 <__aeabi_dmul>
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	460d      	mov	r5, r1
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	4640      	mov	r0, r8
 800f5d0:	f7f0 fe84 	bl	80002dc <__adddf3>
 800f5d4:	4b1d      	ldr	r3, [pc, #116]	; (800f64c <__ieee754_pow+0x3dc>)
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	ec45 4b19 	vmov	d9, r4, r5
 800f5dc:	4606      	mov	r6, r0
 800f5de:	460f      	mov	r7, r1
 800f5e0:	468b      	mov	fp, r1
 800f5e2:	f340 82fe 	ble.w	800fbe2 <__ieee754_pow+0x972>
 800f5e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f5ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f5ee:	4303      	orrs	r3, r0
 800f5f0:	f000 81f0 	beq.w	800f9d4 <__ieee754_pow+0x764>
 800f5f4:	a310      	add	r3, pc, #64	; (adr r3, 800f638 <__ieee754_pow+0x3c8>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	ec51 0b18 	vmov	r0, r1, d8
 800f5fe:	f7f1 f823 	bl	8000648 <__aeabi_dmul>
 800f602:	a30d      	add	r3, pc, #52	; (adr r3, 800f638 <__ieee754_pow+0x3c8>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	e6cb      	b.n	800f3a2 <__ieee754_pow+0x132>
 800f60a:	bf00      	nop
 800f60c:	f3af 8000 	nop.w
 800f610:	60000000 	.word	0x60000000
 800f614:	3ff71547 	.word	0x3ff71547
 800f618:	f85ddf44 	.word	0xf85ddf44
 800f61c:	3e54ae0b 	.word	0x3e54ae0b
 800f620:	55555555 	.word	0x55555555
 800f624:	3fd55555 	.word	0x3fd55555
 800f628:	652b82fe 	.word	0x652b82fe
 800f62c:	3ff71547 	.word	0x3ff71547
 800f630:	00000000 	.word	0x00000000
 800f634:	bff00000 	.word	0xbff00000
 800f638:	8800759c 	.word	0x8800759c
 800f63c:	7e37e43c 	.word	0x7e37e43c
 800f640:	3ff00000 	.word	0x3ff00000
 800f644:	3fd00000 	.word	0x3fd00000
 800f648:	3fe00000 	.word	0x3fe00000
 800f64c:	408fffff 	.word	0x408fffff
 800f650:	4bd7      	ldr	r3, [pc, #860]	; (800f9b0 <__ieee754_pow+0x740>)
 800f652:	ea03 0309 	and.w	r3, r3, r9
 800f656:	2200      	movs	r2, #0
 800f658:	b92b      	cbnz	r3, 800f666 <__ieee754_pow+0x3f6>
 800f65a:	4bd6      	ldr	r3, [pc, #856]	; (800f9b4 <__ieee754_pow+0x744>)
 800f65c:	f7f0 fff4 	bl	8000648 <__aeabi_dmul>
 800f660:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f664:	460c      	mov	r4, r1
 800f666:	1523      	asrs	r3, r4, #20
 800f668:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f66c:	4413      	add	r3, r2
 800f66e:	9309      	str	r3, [sp, #36]	; 0x24
 800f670:	4bd1      	ldr	r3, [pc, #836]	; (800f9b8 <__ieee754_pow+0x748>)
 800f672:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f676:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f67a:	429c      	cmp	r4, r3
 800f67c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f680:	dd08      	ble.n	800f694 <__ieee754_pow+0x424>
 800f682:	4bce      	ldr	r3, [pc, #824]	; (800f9bc <__ieee754_pow+0x74c>)
 800f684:	429c      	cmp	r4, r3
 800f686:	f340 8163 	ble.w	800f950 <__ieee754_pow+0x6e0>
 800f68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f68c:	3301      	adds	r3, #1
 800f68e:	9309      	str	r3, [sp, #36]	; 0x24
 800f690:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f694:	2400      	movs	r4, #0
 800f696:	00e3      	lsls	r3, r4, #3
 800f698:	930b      	str	r3, [sp, #44]	; 0x2c
 800f69a:	4bc9      	ldr	r3, [pc, #804]	; (800f9c0 <__ieee754_pow+0x750>)
 800f69c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f6a0:	ed93 7b00 	vldr	d7, [r3]
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	ec53 2b17 	vmov	r2, r3, d7
 800f6aa:	eeb0 8a47 	vmov.f32	s16, s14
 800f6ae:	eef0 8a67 	vmov.f32	s17, s15
 800f6b2:	4682      	mov	sl, r0
 800f6b4:	f7f0 fe10 	bl	80002d8 <__aeabi_dsub>
 800f6b8:	4652      	mov	r2, sl
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	460f      	mov	r7, r1
 800f6be:	462b      	mov	r3, r5
 800f6c0:	ec51 0b18 	vmov	r0, r1, d8
 800f6c4:	f7f0 fe0a 	bl	80002dc <__adddf3>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	2000      	movs	r0, #0
 800f6ce:	49bd      	ldr	r1, [pc, #756]	; (800f9c4 <__ieee754_pow+0x754>)
 800f6d0:	f7f1 f8e4 	bl	800089c <__aeabi_ddiv>
 800f6d4:	ec41 0b19 	vmov	d9, r0, r1
 800f6d8:	4602      	mov	r2, r0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4630      	mov	r0, r6
 800f6de:	4639      	mov	r1, r7
 800f6e0:	f7f0 ffb2 	bl	8000648 <__aeabi_dmul>
 800f6e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f6ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9304      	str	r3, [sp, #16]
 800f6f4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800f6f8:	46ab      	mov	fp, r5
 800f6fa:	106d      	asrs	r5, r5, #1
 800f6fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f700:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f704:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f708:	2200      	movs	r2, #0
 800f70a:	4640      	mov	r0, r8
 800f70c:	4649      	mov	r1, r9
 800f70e:	4614      	mov	r4, r2
 800f710:	461d      	mov	r5, r3
 800f712:	f7f0 ff99 	bl	8000648 <__aeabi_dmul>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f0 fddb 	bl	80002d8 <__aeabi_dsub>
 800f722:	ec53 2b18 	vmov	r2, r3, d8
 800f726:	4606      	mov	r6, r0
 800f728:	460f      	mov	r7, r1
 800f72a:	4620      	mov	r0, r4
 800f72c:	4629      	mov	r1, r5
 800f72e:	f7f0 fdd3 	bl	80002d8 <__aeabi_dsub>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4650      	mov	r0, sl
 800f738:	4659      	mov	r1, fp
 800f73a:	f7f0 fdcd 	bl	80002d8 <__aeabi_dsub>
 800f73e:	4642      	mov	r2, r8
 800f740:	464b      	mov	r3, r9
 800f742:	f7f0 ff81 	bl	8000648 <__aeabi_dmul>
 800f746:	4602      	mov	r2, r0
 800f748:	460b      	mov	r3, r1
 800f74a:	4630      	mov	r0, r6
 800f74c:	4639      	mov	r1, r7
 800f74e:	f7f0 fdc3 	bl	80002d8 <__aeabi_dsub>
 800f752:	ec53 2b19 	vmov	r2, r3, d9
 800f756:	f7f0 ff77 	bl	8000648 <__aeabi_dmul>
 800f75a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f75e:	ec41 0b18 	vmov	d8, r0, r1
 800f762:	4610      	mov	r0, r2
 800f764:	4619      	mov	r1, r3
 800f766:	f7f0 ff6f 	bl	8000648 <__aeabi_dmul>
 800f76a:	a37d      	add	r3, pc, #500	; (adr r3, 800f960 <__ieee754_pow+0x6f0>)
 800f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f770:	4604      	mov	r4, r0
 800f772:	460d      	mov	r5, r1
 800f774:	f7f0 ff68 	bl	8000648 <__aeabi_dmul>
 800f778:	a37b      	add	r3, pc, #492	; (adr r3, 800f968 <__ieee754_pow+0x6f8>)
 800f77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77e:	f7f0 fdad 	bl	80002dc <__adddf3>
 800f782:	4622      	mov	r2, r4
 800f784:	462b      	mov	r3, r5
 800f786:	f7f0 ff5f 	bl	8000648 <__aeabi_dmul>
 800f78a:	a379      	add	r3, pc, #484	; (adr r3, 800f970 <__ieee754_pow+0x700>)
 800f78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f790:	f7f0 fda4 	bl	80002dc <__adddf3>
 800f794:	4622      	mov	r2, r4
 800f796:	462b      	mov	r3, r5
 800f798:	f7f0 ff56 	bl	8000648 <__aeabi_dmul>
 800f79c:	a376      	add	r3, pc, #472	; (adr r3, 800f978 <__ieee754_pow+0x708>)
 800f79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a2:	f7f0 fd9b 	bl	80002dc <__adddf3>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	f7f0 ff4d 	bl	8000648 <__aeabi_dmul>
 800f7ae:	a374      	add	r3, pc, #464	; (adr r3, 800f980 <__ieee754_pow+0x710>)
 800f7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b4:	f7f0 fd92 	bl	80002dc <__adddf3>
 800f7b8:	4622      	mov	r2, r4
 800f7ba:	462b      	mov	r3, r5
 800f7bc:	f7f0 ff44 	bl	8000648 <__aeabi_dmul>
 800f7c0:	a371      	add	r3, pc, #452	; (adr r3, 800f988 <__ieee754_pow+0x718>)
 800f7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c6:	f7f0 fd89 	bl	80002dc <__adddf3>
 800f7ca:	4622      	mov	r2, r4
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	460f      	mov	r7, r1
 800f7d0:	462b      	mov	r3, r5
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	f7f0 ff37 	bl	8000648 <__aeabi_dmul>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	460b      	mov	r3, r1
 800f7de:	4630      	mov	r0, r6
 800f7e0:	4639      	mov	r1, r7
 800f7e2:	f7f0 ff31 	bl	8000648 <__aeabi_dmul>
 800f7e6:	4642      	mov	r2, r8
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	464b      	mov	r3, r9
 800f7ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7f2:	f7f0 fd73 	bl	80002dc <__adddf3>
 800f7f6:	ec53 2b18 	vmov	r2, r3, d8
 800f7fa:	f7f0 ff25 	bl	8000648 <__aeabi_dmul>
 800f7fe:	4622      	mov	r2, r4
 800f800:	462b      	mov	r3, r5
 800f802:	f7f0 fd6b 	bl	80002dc <__adddf3>
 800f806:	4642      	mov	r2, r8
 800f808:	4682      	mov	sl, r0
 800f80a:	468b      	mov	fp, r1
 800f80c:	464b      	mov	r3, r9
 800f80e:	4640      	mov	r0, r8
 800f810:	4649      	mov	r1, r9
 800f812:	f7f0 ff19 	bl	8000648 <__aeabi_dmul>
 800f816:	4b6c      	ldr	r3, [pc, #432]	; (800f9c8 <__ieee754_pow+0x758>)
 800f818:	2200      	movs	r2, #0
 800f81a:	4606      	mov	r6, r0
 800f81c:	460f      	mov	r7, r1
 800f81e:	f7f0 fd5d 	bl	80002dc <__adddf3>
 800f822:	4652      	mov	r2, sl
 800f824:	465b      	mov	r3, fp
 800f826:	f7f0 fd59 	bl	80002dc <__adddf3>
 800f82a:	9c04      	ldr	r4, [sp, #16]
 800f82c:	460d      	mov	r5, r1
 800f82e:	4622      	mov	r2, r4
 800f830:	460b      	mov	r3, r1
 800f832:	4640      	mov	r0, r8
 800f834:	4649      	mov	r1, r9
 800f836:	f7f0 ff07 	bl	8000648 <__aeabi_dmul>
 800f83a:	4b63      	ldr	r3, [pc, #396]	; (800f9c8 <__ieee754_pow+0x758>)
 800f83c:	4680      	mov	r8, r0
 800f83e:	4689      	mov	r9, r1
 800f840:	2200      	movs	r2, #0
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 fd47 	bl	80002d8 <__aeabi_dsub>
 800f84a:	4632      	mov	r2, r6
 800f84c:	463b      	mov	r3, r7
 800f84e:	f7f0 fd43 	bl	80002d8 <__aeabi_dsub>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	4650      	mov	r0, sl
 800f858:	4659      	mov	r1, fp
 800f85a:	f7f0 fd3d 	bl	80002d8 <__aeabi_dsub>
 800f85e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f862:	f7f0 fef1 	bl	8000648 <__aeabi_dmul>
 800f866:	4622      	mov	r2, r4
 800f868:	4606      	mov	r6, r0
 800f86a:	460f      	mov	r7, r1
 800f86c:	462b      	mov	r3, r5
 800f86e:	ec51 0b18 	vmov	r0, r1, d8
 800f872:	f7f0 fee9 	bl	8000648 <__aeabi_dmul>
 800f876:	4602      	mov	r2, r0
 800f878:	460b      	mov	r3, r1
 800f87a:	4630      	mov	r0, r6
 800f87c:	4639      	mov	r1, r7
 800f87e:	f7f0 fd2d 	bl	80002dc <__adddf3>
 800f882:	4606      	mov	r6, r0
 800f884:	460f      	mov	r7, r1
 800f886:	4602      	mov	r2, r0
 800f888:	460b      	mov	r3, r1
 800f88a:	4640      	mov	r0, r8
 800f88c:	4649      	mov	r1, r9
 800f88e:	f7f0 fd25 	bl	80002dc <__adddf3>
 800f892:	9c04      	ldr	r4, [sp, #16]
 800f894:	a33e      	add	r3, pc, #248	; (adr r3, 800f990 <__ieee754_pow+0x720>)
 800f896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89a:	4620      	mov	r0, r4
 800f89c:	460d      	mov	r5, r1
 800f89e:	f7f0 fed3 	bl	8000648 <__aeabi_dmul>
 800f8a2:	4642      	mov	r2, r8
 800f8a4:	ec41 0b18 	vmov	d8, r0, r1
 800f8a8:	464b      	mov	r3, r9
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	f7f0 fd13 	bl	80002d8 <__aeabi_dsub>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	460b      	mov	r3, r1
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	f7f0 fd0d 	bl	80002d8 <__aeabi_dsub>
 800f8be:	a336      	add	r3, pc, #216	; (adr r3, 800f998 <__ieee754_pow+0x728>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	f7f0 fec0 	bl	8000648 <__aeabi_dmul>
 800f8c8:	a335      	add	r3, pc, #212	; (adr r3, 800f9a0 <__ieee754_pow+0x730>)
 800f8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	460f      	mov	r7, r1
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	4629      	mov	r1, r5
 800f8d6:	f7f0 feb7 	bl	8000648 <__aeabi_dmul>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	460b      	mov	r3, r1
 800f8de:	4630      	mov	r0, r6
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	f7f0 fcfb 	bl	80002dc <__adddf3>
 800f8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8e8:	4b38      	ldr	r3, [pc, #224]	; (800f9cc <__ieee754_pow+0x75c>)
 800f8ea:	4413      	add	r3, r2
 800f8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f0:	f7f0 fcf4 	bl	80002dc <__adddf3>
 800f8f4:	4682      	mov	sl, r0
 800f8f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8f8:	468b      	mov	fp, r1
 800f8fa:	f7f0 fe3b 	bl	8000574 <__aeabi_i2d>
 800f8fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f900:	4b33      	ldr	r3, [pc, #204]	; (800f9d0 <__ieee754_pow+0x760>)
 800f902:	4413      	add	r3, r2
 800f904:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f908:	4606      	mov	r6, r0
 800f90a:	460f      	mov	r7, r1
 800f90c:	4652      	mov	r2, sl
 800f90e:	465b      	mov	r3, fp
 800f910:	ec51 0b18 	vmov	r0, r1, d8
 800f914:	f7f0 fce2 	bl	80002dc <__adddf3>
 800f918:	4642      	mov	r2, r8
 800f91a:	464b      	mov	r3, r9
 800f91c:	f7f0 fcde 	bl	80002dc <__adddf3>
 800f920:	4632      	mov	r2, r6
 800f922:	463b      	mov	r3, r7
 800f924:	f7f0 fcda 	bl	80002dc <__adddf3>
 800f928:	9c04      	ldr	r4, [sp, #16]
 800f92a:	4632      	mov	r2, r6
 800f92c:	463b      	mov	r3, r7
 800f92e:	4620      	mov	r0, r4
 800f930:	460d      	mov	r5, r1
 800f932:	f7f0 fcd1 	bl	80002d8 <__aeabi_dsub>
 800f936:	4642      	mov	r2, r8
 800f938:	464b      	mov	r3, r9
 800f93a:	f7f0 fccd 	bl	80002d8 <__aeabi_dsub>
 800f93e:	ec53 2b18 	vmov	r2, r3, d8
 800f942:	f7f0 fcc9 	bl	80002d8 <__aeabi_dsub>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	4650      	mov	r0, sl
 800f94c:	4659      	mov	r1, fp
 800f94e:	e606      	b.n	800f55e <__ieee754_pow+0x2ee>
 800f950:	2401      	movs	r4, #1
 800f952:	e6a0      	b.n	800f696 <__ieee754_pow+0x426>
 800f954:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f9a8 <__ieee754_pow+0x738>
 800f958:	e60d      	b.n	800f576 <__ieee754_pow+0x306>
 800f95a:	bf00      	nop
 800f95c:	f3af 8000 	nop.w
 800f960:	4a454eef 	.word	0x4a454eef
 800f964:	3fca7e28 	.word	0x3fca7e28
 800f968:	93c9db65 	.word	0x93c9db65
 800f96c:	3fcd864a 	.word	0x3fcd864a
 800f970:	a91d4101 	.word	0xa91d4101
 800f974:	3fd17460 	.word	0x3fd17460
 800f978:	518f264d 	.word	0x518f264d
 800f97c:	3fd55555 	.word	0x3fd55555
 800f980:	db6fabff 	.word	0xdb6fabff
 800f984:	3fdb6db6 	.word	0x3fdb6db6
 800f988:	33333303 	.word	0x33333303
 800f98c:	3fe33333 	.word	0x3fe33333
 800f990:	e0000000 	.word	0xe0000000
 800f994:	3feec709 	.word	0x3feec709
 800f998:	dc3a03fd 	.word	0xdc3a03fd
 800f99c:	3feec709 	.word	0x3feec709
 800f9a0:	145b01f5 	.word	0x145b01f5
 800f9a4:	be3e2fe0 	.word	0xbe3e2fe0
 800f9a8:	00000000 	.word	0x00000000
 800f9ac:	3ff00000 	.word	0x3ff00000
 800f9b0:	7ff00000 	.word	0x7ff00000
 800f9b4:	43400000 	.word	0x43400000
 800f9b8:	0003988e 	.word	0x0003988e
 800f9bc:	000bb679 	.word	0x000bb679
 800f9c0:	080118b0 	.word	0x080118b0
 800f9c4:	3ff00000 	.word	0x3ff00000
 800f9c8:	40080000 	.word	0x40080000
 800f9cc:	080118d0 	.word	0x080118d0
 800f9d0:	080118c0 	.word	0x080118c0
 800f9d4:	a3b5      	add	r3, pc, #724	; (adr r3, 800fcac <__ieee754_pow+0xa3c>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	4640      	mov	r0, r8
 800f9dc:	4649      	mov	r1, r9
 800f9de:	f7f0 fc7d 	bl	80002dc <__adddf3>
 800f9e2:	4622      	mov	r2, r4
 800f9e4:	ec41 0b1a 	vmov	d10, r0, r1
 800f9e8:	462b      	mov	r3, r5
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	4639      	mov	r1, r7
 800f9ee:	f7f0 fc73 	bl	80002d8 <__aeabi_dsub>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	ec51 0b1a 	vmov	r0, r1, d10
 800f9fa:	f7f1 f8b5 	bl	8000b68 <__aeabi_dcmpgt>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f47f adf8 	bne.w	800f5f4 <__ieee754_pow+0x384>
 800fa04:	4aa4      	ldr	r2, [pc, #656]	; (800fc98 <__ieee754_pow+0xa28>)
 800fa06:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	f340 810b 	ble.w	800fc26 <__ieee754_pow+0x9b6>
 800fa10:	151b      	asrs	r3, r3, #20
 800fa12:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fa16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fa1a:	fa4a f303 	asr.w	r3, sl, r3
 800fa1e:	445b      	add	r3, fp
 800fa20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fa24:	4e9d      	ldr	r6, [pc, #628]	; (800fc9c <__ieee754_pow+0xa2c>)
 800fa26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fa2a:	4116      	asrs	r6, r2
 800fa2c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fa30:	2000      	movs	r0, #0
 800fa32:	ea23 0106 	bic.w	r1, r3, r6
 800fa36:	f1c2 0214 	rsb	r2, r2, #20
 800fa3a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fa3e:	fa4a fa02 	asr.w	sl, sl, r2
 800fa42:	f1bb 0f00 	cmp.w	fp, #0
 800fa46:	4602      	mov	r2, r0
 800fa48:	460b      	mov	r3, r1
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	bfb8      	it	lt
 800fa50:	f1ca 0a00 	rsblt	sl, sl, #0
 800fa54:	f7f0 fc40 	bl	80002d8 <__aeabi_dsub>
 800fa58:	ec41 0b19 	vmov	d9, r0, r1
 800fa5c:	4642      	mov	r2, r8
 800fa5e:	464b      	mov	r3, r9
 800fa60:	ec51 0b19 	vmov	r0, r1, d9
 800fa64:	f7f0 fc3a 	bl	80002dc <__adddf3>
 800fa68:	2400      	movs	r4, #0
 800fa6a:	a379      	add	r3, pc, #484	; (adr r3, 800fc50 <__ieee754_pow+0x9e0>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	4620      	mov	r0, r4
 800fa72:	460d      	mov	r5, r1
 800fa74:	f7f0 fde8 	bl	8000648 <__aeabi_dmul>
 800fa78:	ec53 2b19 	vmov	r2, r3, d9
 800fa7c:	4606      	mov	r6, r0
 800fa7e:	460f      	mov	r7, r1
 800fa80:	4620      	mov	r0, r4
 800fa82:	4629      	mov	r1, r5
 800fa84:	f7f0 fc28 	bl	80002d8 <__aeabi_dsub>
 800fa88:	4602      	mov	r2, r0
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	4649      	mov	r1, r9
 800fa90:	f7f0 fc22 	bl	80002d8 <__aeabi_dsub>
 800fa94:	a370      	add	r3, pc, #448	; (adr r3, 800fc58 <__ieee754_pow+0x9e8>)
 800fa96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9a:	f7f0 fdd5 	bl	8000648 <__aeabi_dmul>
 800fa9e:	a370      	add	r3, pc, #448	; (adr r3, 800fc60 <__ieee754_pow+0x9f0>)
 800faa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa4:	4680      	mov	r8, r0
 800faa6:	4689      	mov	r9, r1
 800faa8:	4620      	mov	r0, r4
 800faaa:	4629      	mov	r1, r5
 800faac:	f7f0 fdcc 	bl	8000648 <__aeabi_dmul>
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	4640      	mov	r0, r8
 800fab6:	4649      	mov	r1, r9
 800fab8:	f7f0 fc10 	bl	80002dc <__adddf3>
 800fabc:	4604      	mov	r4, r0
 800fabe:	460d      	mov	r5, r1
 800fac0:	4602      	mov	r2, r0
 800fac2:	460b      	mov	r3, r1
 800fac4:	4630      	mov	r0, r6
 800fac6:	4639      	mov	r1, r7
 800fac8:	f7f0 fc08 	bl	80002dc <__adddf3>
 800facc:	4632      	mov	r2, r6
 800face:	463b      	mov	r3, r7
 800fad0:	4680      	mov	r8, r0
 800fad2:	4689      	mov	r9, r1
 800fad4:	f7f0 fc00 	bl	80002d8 <__aeabi_dsub>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	4620      	mov	r0, r4
 800fade:	4629      	mov	r1, r5
 800fae0:	f7f0 fbfa 	bl	80002d8 <__aeabi_dsub>
 800fae4:	4642      	mov	r2, r8
 800fae6:	4606      	mov	r6, r0
 800fae8:	460f      	mov	r7, r1
 800faea:	464b      	mov	r3, r9
 800faec:	4640      	mov	r0, r8
 800faee:	4649      	mov	r1, r9
 800faf0:	f7f0 fdaa 	bl	8000648 <__aeabi_dmul>
 800faf4:	a35c      	add	r3, pc, #368	; (adr r3, 800fc68 <__ieee754_pow+0x9f8>)
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	4604      	mov	r4, r0
 800fafc:	460d      	mov	r5, r1
 800fafe:	f7f0 fda3 	bl	8000648 <__aeabi_dmul>
 800fb02:	a35b      	add	r3, pc, #364	; (adr r3, 800fc70 <__ieee754_pow+0xa00>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	f7f0 fbe6 	bl	80002d8 <__aeabi_dsub>
 800fb0c:	4622      	mov	r2, r4
 800fb0e:	462b      	mov	r3, r5
 800fb10:	f7f0 fd9a 	bl	8000648 <__aeabi_dmul>
 800fb14:	a358      	add	r3, pc, #352	; (adr r3, 800fc78 <__ieee754_pow+0xa08>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f7f0 fbdf 	bl	80002dc <__adddf3>
 800fb1e:	4622      	mov	r2, r4
 800fb20:	462b      	mov	r3, r5
 800fb22:	f7f0 fd91 	bl	8000648 <__aeabi_dmul>
 800fb26:	a356      	add	r3, pc, #344	; (adr r3, 800fc80 <__ieee754_pow+0xa10>)
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	f7f0 fbd4 	bl	80002d8 <__aeabi_dsub>
 800fb30:	4622      	mov	r2, r4
 800fb32:	462b      	mov	r3, r5
 800fb34:	f7f0 fd88 	bl	8000648 <__aeabi_dmul>
 800fb38:	a353      	add	r3, pc, #332	; (adr r3, 800fc88 <__ieee754_pow+0xa18>)
 800fb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3e:	f7f0 fbcd 	bl	80002dc <__adddf3>
 800fb42:	4622      	mov	r2, r4
 800fb44:	462b      	mov	r3, r5
 800fb46:	f7f0 fd7f 	bl	8000648 <__aeabi_dmul>
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	4640      	mov	r0, r8
 800fb50:	4649      	mov	r1, r9
 800fb52:	f7f0 fbc1 	bl	80002d8 <__aeabi_dsub>
 800fb56:	4604      	mov	r4, r0
 800fb58:	460d      	mov	r5, r1
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	460b      	mov	r3, r1
 800fb5e:	4640      	mov	r0, r8
 800fb60:	4649      	mov	r1, r9
 800fb62:	f7f0 fd71 	bl	8000648 <__aeabi_dmul>
 800fb66:	2200      	movs	r2, #0
 800fb68:	ec41 0b19 	vmov	d9, r0, r1
 800fb6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb70:	4620      	mov	r0, r4
 800fb72:	4629      	mov	r1, r5
 800fb74:	f7f0 fbb0 	bl	80002d8 <__aeabi_dsub>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	ec51 0b19 	vmov	r0, r1, d9
 800fb80:	f7f0 fe8c 	bl	800089c <__aeabi_ddiv>
 800fb84:	4632      	mov	r2, r6
 800fb86:	4604      	mov	r4, r0
 800fb88:	460d      	mov	r5, r1
 800fb8a:	463b      	mov	r3, r7
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	4649      	mov	r1, r9
 800fb90:	f7f0 fd5a 	bl	8000648 <__aeabi_dmul>
 800fb94:	4632      	mov	r2, r6
 800fb96:	463b      	mov	r3, r7
 800fb98:	f7f0 fba0 	bl	80002dc <__adddf3>
 800fb9c:	4602      	mov	r2, r0
 800fb9e:	460b      	mov	r3, r1
 800fba0:	4620      	mov	r0, r4
 800fba2:	4629      	mov	r1, r5
 800fba4:	f7f0 fb98 	bl	80002d8 <__aeabi_dsub>
 800fba8:	4642      	mov	r2, r8
 800fbaa:	464b      	mov	r3, r9
 800fbac:	f7f0 fb94 	bl	80002d8 <__aeabi_dsub>
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	493a      	ldr	r1, [pc, #232]	; (800fca0 <__ieee754_pow+0xa30>)
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	f7f0 fb8e 	bl	80002d8 <__aeabi_dsub>
 800fbbc:	e9cd 0100 	strd	r0, r1, [sp]
 800fbc0:	9b01      	ldr	r3, [sp, #4]
 800fbc2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fbc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fbca:	da2f      	bge.n	800fc2c <__ieee754_pow+0x9bc>
 800fbcc:	4650      	mov	r0, sl
 800fbce:	ed9d 0b00 	vldr	d0, [sp]
 800fbd2:	f001 fac1 	bl	8011158 <scalbn>
 800fbd6:	ec51 0b10 	vmov	r0, r1, d0
 800fbda:	ec53 2b18 	vmov	r2, r3, d8
 800fbde:	f7ff bbe0 	b.w	800f3a2 <__ieee754_pow+0x132>
 800fbe2:	4b30      	ldr	r3, [pc, #192]	; (800fca4 <__ieee754_pow+0xa34>)
 800fbe4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fbe8:	429e      	cmp	r6, r3
 800fbea:	f77f af0b 	ble.w	800fa04 <__ieee754_pow+0x794>
 800fbee:	4b2e      	ldr	r3, [pc, #184]	; (800fca8 <__ieee754_pow+0xa38>)
 800fbf0:	440b      	add	r3, r1
 800fbf2:	4303      	orrs	r3, r0
 800fbf4:	d00b      	beq.n	800fc0e <__ieee754_pow+0x99e>
 800fbf6:	a326      	add	r3, pc, #152	; (adr r3, 800fc90 <__ieee754_pow+0xa20>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	ec51 0b18 	vmov	r0, r1, d8
 800fc00:	f7f0 fd22 	bl	8000648 <__aeabi_dmul>
 800fc04:	a322      	add	r3, pc, #136	; (adr r3, 800fc90 <__ieee754_pow+0xa20>)
 800fc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0a:	f7ff bbca 	b.w	800f3a2 <__ieee754_pow+0x132>
 800fc0e:	4622      	mov	r2, r4
 800fc10:	462b      	mov	r3, r5
 800fc12:	f7f0 fb61 	bl	80002d8 <__aeabi_dsub>
 800fc16:	4642      	mov	r2, r8
 800fc18:	464b      	mov	r3, r9
 800fc1a:	f7f0 ff9b 	bl	8000b54 <__aeabi_dcmpge>
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	f43f aef0 	beq.w	800fa04 <__ieee754_pow+0x794>
 800fc24:	e7e7      	b.n	800fbf6 <__ieee754_pow+0x986>
 800fc26:	f04f 0a00 	mov.w	sl, #0
 800fc2a:	e717      	b.n	800fa5c <__ieee754_pow+0x7ec>
 800fc2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc30:	4619      	mov	r1, r3
 800fc32:	e7d2      	b.n	800fbda <__ieee754_pow+0x96a>
 800fc34:	491a      	ldr	r1, [pc, #104]	; (800fca0 <__ieee754_pow+0xa30>)
 800fc36:	2000      	movs	r0, #0
 800fc38:	f7ff bb9e 	b.w	800f378 <__ieee754_pow+0x108>
 800fc3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc40:	f7ff bb9a 	b.w	800f378 <__ieee754_pow+0x108>
 800fc44:	9000      	str	r0, [sp, #0]
 800fc46:	f7ff bb76 	b.w	800f336 <__ieee754_pow+0xc6>
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	f7ff bb60 	b.w	800f310 <__ieee754_pow+0xa0>
 800fc50:	00000000 	.word	0x00000000
 800fc54:	3fe62e43 	.word	0x3fe62e43
 800fc58:	fefa39ef 	.word	0xfefa39ef
 800fc5c:	3fe62e42 	.word	0x3fe62e42
 800fc60:	0ca86c39 	.word	0x0ca86c39
 800fc64:	be205c61 	.word	0xbe205c61
 800fc68:	72bea4d0 	.word	0x72bea4d0
 800fc6c:	3e663769 	.word	0x3e663769
 800fc70:	c5d26bf1 	.word	0xc5d26bf1
 800fc74:	3ebbbd41 	.word	0x3ebbbd41
 800fc78:	af25de2c 	.word	0xaf25de2c
 800fc7c:	3f11566a 	.word	0x3f11566a
 800fc80:	16bebd93 	.word	0x16bebd93
 800fc84:	3f66c16c 	.word	0x3f66c16c
 800fc88:	5555553e 	.word	0x5555553e
 800fc8c:	3fc55555 	.word	0x3fc55555
 800fc90:	c2f8f359 	.word	0xc2f8f359
 800fc94:	01a56e1f 	.word	0x01a56e1f
 800fc98:	3fe00000 	.word	0x3fe00000
 800fc9c:	000fffff 	.word	0x000fffff
 800fca0:	3ff00000 	.word	0x3ff00000
 800fca4:	4090cbff 	.word	0x4090cbff
 800fca8:	3f6f3400 	.word	0x3f6f3400
 800fcac:	652b82fe 	.word	0x652b82fe
 800fcb0:	3c971547 	.word	0x3c971547
 800fcb4:	00000000 	.word	0x00000000

0800fcb8 <__ieee754_rem_pio2>:
 800fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbc:	ed2d 8b02 	vpush	{d8}
 800fcc0:	ec55 4b10 	vmov	r4, r5, d0
 800fcc4:	4bca      	ldr	r3, [pc, #808]	; (800fff0 <__ieee754_rem_pio2+0x338>)
 800fcc6:	b08b      	sub	sp, #44	; 0x2c
 800fcc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fccc:	4598      	cmp	r8, r3
 800fcce:	4682      	mov	sl, r0
 800fcd0:	9502      	str	r5, [sp, #8]
 800fcd2:	dc08      	bgt.n	800fce6 <__ieee754_rem_pio2+0x2e>
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	ed80 0b00 	vstr	d0, [r0]
 800fcdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fce0:	f04f 0b00 	mov.w	fp, #0
 800fce4:	e028      	b.n	800fd38 <__ieee754_rem_pio2+0x80>
 800fce6:	4bc3      	ldr	r3, [pc, #780]	; (800fff4 <__ieee754_rem_pio2+0x33c>)
 800fce8:	4598      	cmp	r8, r3
 800fcea:	dc78      	bgt.n	800fdde <__ieee754_rem_pio2+0x126>
 800fcec:	9b02      	ldr	r3, [sp, #8]
 800fcee:	4ec2      	ldr	r6, [pc, #776]	; (800fff8 <__ieee754_rem_pio2+0x340>)
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	ee10 0a10 	vmov	r0, s0
 800fcf6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ffb8 <__ieee754_rem_pio2+0x300>)
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	4629      	mov	r1, r5
 800fcfe:	dd39      	ble.n	800fd74 <__ieee754_rem_pio2+0xbc>
 800fd00:	f7f0 faea 	bl	80002d8 <__aeabi_dsub>
 800fd04:	45b0      	cmp	r8, r6
 800fd06:	4604      	mov	r4, r0
 800fd08:	460d      	mov	r5, r1
 800fd0a:	d01b      	beq.n	800fd44 <__ieee754_rem_pio2+0x8c>
 800fd0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ffc0 <__ieee754_rem_pio2+0x308>)
 800fd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd12:	f7f0 fae1 	bl	80002d8 <__aeabi_dsub>
 800fd16:	4602      	mov	r2, r0
 800fd18:	460b      	mov	r3, r1
 800fd1a:	e9ca 2300 	strd	r2, r3, [sl]
 800fd1e:	4620      	mov	r0, r4
 800fd20:	4629      	mov	r1, r5
 800fd22:	f7f0 fad9 	bl	80002d8 <__aeabi_dsub>
 800fd26:	a3a6      	add	r3, pc, #664	; (adr r3, 800ffc0 <__ieee754_rem_pio2+0x308>)
 800fd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2c:	f7f0 fad4 	bl	80002d8 <__aeabi_dsub>
 800fd30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd34:	f04f 0b01 	mov.w	fp, #1
 800fd38:	4658      	mov	r0, fp
 800fd3a:	b00b      	add	sp, #44	; 0x2c
 800fd3c:	ecbd 8b02 	vpop	{d8}
 800fd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	a3a0      	add	r3, pc, #640	; (adr r3, 800ffc8 <__ieee754_rem_pio2+0x310>)
 800fd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd4a:	f7f0 fac5 	bl	80002d8 <__aeabi_dsub>
 800fd4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x318>)
 800fd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd54:	4604      	mov	r4, r0
 800fd56:	460d      	mov	r5, r1
 800fd58:	f7f0 fabe 	bl	80002d8 <__aeabi_dsub>
 800fd5c:	4602      	mov	r2, r0
 800fd5e:	460b      	mov	r3, r1
 800fd60:	e9ca 2300 	strd	r2, r3, [sl]
 800fd64:	4620      	mov	r0, r4
 800fd66:	4629      	mov	r1, r5
 800fd68:	f7f0 fab6 	bl	80002d8 <__aeabi_dsub>
 800fd6c:	a398      	add	r3, pc, #608	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x318>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	e7db      	b.n	800fd2c <__ieee754_rem_pio2+0x74>
 800fd74:	f7f0 fab2 	bl	80002dc <__adddf3>
 800fd78:	45b0      	cmp	r8, r6
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	460d      	mov	r5, r1
 800fd7e:	d016      	beq.n	800fdae <__ieee754_rem_pio2+0xf6>
 800fd80:	a38f      	add	r3, pc, #572	; (adr r3, 800ffc0 <__ieee754_rem_pio2+0x308>)
 800fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd86:	f7f0 faa9 	bl	80002dc <__adddf3>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	e9ca 2300 	strd	r2, r3, [sl]
 800fd92:	4620      	mov	r0, r4
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7f0 fa9f 	bl	80002d8 <__aeabi_dsub>
 800fd9a:	a389      	add	r3, pc, #548	; (adr r3, 800ffc0 <__ieee754_rem_pio2+0x308>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f7f0 fa9c 	bl	80002dc <__adddf3>
 800fda4:	f04f 3bff 	mov.w	fp, #4294967295
 800fda8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fdac:	e7c4      	b.n	800fd38 <__ieee754_rem_pio2+0x80>
 800fdae:	a386      	add	r3, pc, #536	; (adr r3, 800ffc8 <__ieee754_rem_pio2+0x310>)
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	f7f0 fa92 	bl	80002dc <__adddf3>
 800fdb8:	a385      	add	r3, pc, #532	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x318>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	460d      	mov	r5, r1
 800fdc2:	f7f0 fa8b 	bl	80002dc <__adddf3>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	e9ca 2300 	strd	r2, r3, [sl]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	f7f0 fa81 	bl	80002d8 <__aeabi_dsub>
 800fdd6:	a37e      	add	r3, pc, #504	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x318>)
 800fdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fddc:	e7e0      	b.n	800fda0 <__ieee754_rem_pio2+0xe8>
 800fdde:	4b87      	ldr	r3, [pc, #540]	; (800fffc <__ieee754_rem_pio2+0x344>)
 800fde0:	4598      	cmp	r8, r3
 800fde2:	f300 80d9 	bgt.w	800ff98 <__ieee754_rem_pio2+0x2e0>
 800fde6:	f001 f88f 	bl	8010f08 <fabs>
 800fdea:	ec55 4b10 	vmov	r4, r5, d0
 800fdee:	ee10 0a10 	vmov	r0, s0
 800fdf2:	a379      	add	r3, pc, #484	; (adr r3, 800ffd8 <__ieee754_rem_pio2+0x320>)
 800fdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f7f0 fc25 	bl	8000648 <__aeabi_dmul>
 800fdfe:	4b80      	ldr	r3, [pc, #512]	; (8010000 <__ieee754_rem_pio2+0x348>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	f7f0 fa6b 	bl	80002dc <__adddf3>
 800fe06:	f7f0 fecf 	bl	8000ba8 <__aeabi_d2iz>
 800fe0a:	4683      	mov	fp, r0
 800fe0c:	f7f0 fbb2 	bl	8000574 <__aeabi_i2d>
 800fe10:	4602      	mov	r2, r0
 800fe12:	460b      	mov	r3, r1
 800fe14:	ec43 2b18 	vmov	d8, r2, r3
 800fe18:	a367      	add	r3, pc, #412	; (adr r3, 800ffb8 <__ieee754_rem_pio2+0x300>)
 800fe1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1e:	f7f0 fc13 	bl	8000648 <__aeabi_dmul>
 800fe22:	4602      	mov	r2, r0
 800fe24:	460b      	mov	r3, r1
 800fe26:	4620      	mov	r0, r4
 800fe28:	4629      	mov	r1, r5
 800fe2a:	f7f0 fa55 	bl	80002d8 <__aeabi_dsub>
 800fe2e:	a364      	add	r3, pc, #400	; (adr r3, 800ffc0 <__ieee754_rem_pio2+0x308>)
 800fe30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe34:	4606      	mov	r6, r0
 800fe36:	460f      	mov	r7, r1
 800fe38:	ec51 0b18 	vmov	r0, r1, d8
 800fe3c:	f7f0 fc04 	bl	8000648 <__aeabi_dmul>
 800fe40:	f1bb 0f1f 	cmp.w	fp, #31
 800fe44:	4604      	mov	r4, r0
 800fe46:	460d      	mov	r5, r1
 800fe48:	dc0d      	bgt.n	800fe66 <__ieee754_rem_pio2+0x1ae>
 800fe4a:	4b6e      	ldr	r3, [pc, #440]	; (8010004 <__ieee754_rem_pio2+0x34c>)
 800fe4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fe50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe54:	4543      	cmp	r3, r8
 800fe56:	d006      	beq.n	800fe66 <__ieee754_rem_pio2+0x1ae>
 800fe58:	4622      	mov	r2, r4
 800fe5a:	462b      	mov	r3, r5
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	4639      	mov	r1, r7
 800fe60:	f7f0 fa3a 	bl	80002d8 <__aeabi_dsub>
 800fe64:	e00f      	b.n	800fe86 <__ieee754_rem_pio2+0x1ce>
 800fe66:	462b      	mov	r3, r5
 800fe68:	4622      	mov	r2, r4
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	f7f0 fa33 	bl	80002d8 <__aeabi_dsub>
 800fe72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fe76:	9303      	str	r3, [sp, #12]
 800fe78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fe7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fe80:	f1b8 0f10 	cmp.w	r8, #16
 800fe84:	dc02      	bgt.n	800fe8c <__ieee754_rem_pio2+0x1d4>
 800fe86:	e9ca 0100 	strd	r0, r1, [sl]
 800fe8a:	e039      	b.n	800ff00 <__ieee754_rem_pio2+0x248>
 800fe8c:	a34e      	add	r3, pc, #312	; (adr r3, 800ffc8 <__ieee754_rem_pio2+0x310>)
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	ec51 0b18 	vmov	r0, r1, d8
 800fe96:	f7f0 fbd7 	bl	8000648 <__aeabi_dmul>
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	460d      	mov	r5, r1
 800fe9e:	4602      	mov	r2, r0
 800fea0:	460b      	mov	r3, r1
 800fea2:	4630      	mov	r0, r6
 800fea4:	4639      	mov	r1, r7
 800fea6:	f7f0 fa17 	bl	80002d8 <__aeabi_dsub>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4680      	mov	r8, r0
 800feb0:	4689      	mov	r9, r1
 800feb2:	4630      	mov	r0, r6
 800feb4:	4639      	mov	r1, r7
 800feb6:	f7f0 fa0f 	bl	80002d8 <__aeabi_dsub>
 800feba:	4622      	mov	r2, r4
 800febc:	462b      	mov	r3, r5
 800febe:	f7f0 fa0b 	bl	80002d8 <__aeabi_dsub>
 800fec2:	a343      	add	r3, pc, #268	; (adr r3, 800ffd0 <__ieee754_rem_pio2+0x318>)
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	4604      	mov	r4, r0
 800feca:	460d      	mov	r5, r1
 800fecc:	ec51 0b18 	vmov	r0, r1, d8
 800fed0:	f7f0 fbba 	bl	8000648 <__aeabi_dmul>
 800fed4:	4622      	mov	r2, r4
 800fed6:	462b      	mov	r3, r5
 800fed8:	f7f0 f9fe 	bl	80002d8 <__aeabi_dsub>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4604      	mov	r4, r0
 800fee2:	460d      	mov	r5, r1
 800fee4:	4640      	mov	r0, r8
 800fee6:	4649      	mov	r1, r9
 800fee8:	f7f0 f9f6 	bl	80002d8 <__aeabi_dsub>
 800feec:	9a03      	ldr	r2, [sp, #12]
 800feee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	2b31      	cmp	r3, #49	; 0x31
 800fef6:	dc24      	bgt.n	800ff42 <__ieee754_rem_pio2+0x28a>
 800fef8:	e9ca 0100 	strd	r0, r1, [sl]
 800fefc:	4646      	mov	r6, r8
 800fefe:	464f      	mov	r7, r9
 800ff00:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff04:	4630      	mov	r0, r6
 800ff06:	4642      	mov	r2, r8
 800ff08:	464b      	mov	r3, r9
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	f7f0 f9e4 	bl	80002d8 <__aeabi_dsub>
 800ff10:	462b      	mov	r3, r5
 800ff12:	4622      	mov	r2, r4
 800ff14:	f7f0 f9e0 	bl	80002d8 <__aeabi_dsub>
 800ff18:	9b02      	ldr	r3, [sp, #8]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ff20:	f6bf af0a 	bge.w	800fd38 <__ieee754_rem_pio2+0x80>
 800ff24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ff28:	f8ca 3004 	str.w	r3, [sl, #4]
 800ff2c:	f8ca 8000 	str.w	r8, [sl]
 800ff30:	f8ca 0008 	str.w	r0, [sl, #8]
 800ff34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ff38:	f8ca 300c 	str.w	r3, [sl, #12]
 800ff3c:	f1cb 0b00 	rsb	fp, fp, #0
 800ff40:	e6fa      	b.n	800fd38 <__ieee754_rem_pio2+0x80>
 800ff42:	a327      	add	r3, pc, #156	; (adr r3, 800ffe0 <__ieee754_rem_pio2+0x328>)
 800ff44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff48:	ec51 0b18 	vmov	r0, r1, d8
 800ff4c:	f7f0 fb7c 	bl	8000648 <__aeabi_dmul>
 800ff50:	4604      	mov	r4, r0
 800ff52:	460d      	mov	r5, r1
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	4640      	mov	r0, r8
 800ff5a:	4649      	mov	r1, r9
 800ff5c:	f7f0 f9bc 	bl	80002d8 <__aeabi_dsub>
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	4606      	mov	r6, r0
 800ff66:	460f      	mov	r7, r1
 800ff68:	4640      	mov	r0, r8
 800ff6a:	4649      	mov	r1, r9
 800ff6c:	f7f0 f9b4 	bl	80002d8 <__aeabi_dsub>
 800ff70:	4622      	mov	r2, r4
 800ff72:	462b      	mov	r3, r5
 800ff74:	f7f0 f9b0 	bl	80002d8 <__aeabi_dsub>
 800ff78:	a31b      	add	r3, pc, #108	; (adr r3, 800ffe8 <__ieee754_rem_pio2+0x330>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	4604      	mov	r4, r0
 800ff80:	460d      	mov	r5, r1
 800ff82:	ec51 0b18 	vmov	r0, r1, d8
 800ff86:	f7f0 fb5f 	bl	8000648 <__aeabi_dmul>
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	462b      	mov	r3, r5
 800ff8e:	f7f0 f9a3 	bl	80002d8 <__aeabi_dsub>
 800ff92:	4604      	mov	r4, r0
 800ff94:	460d      	mov	r5, r1
 800ff96:	e75f      	b.n	800fe58 <__ieee754_rem_pio2+0x1a0>
 800ff98:	4b1b      	ldr	r3, [pc, #108]	; (8010008 <__ieee754_rem_pio2+0x350>)
 800ff9a:	4598      	cmp	r8, r3
 800ff9c:	dd36      	ble.n	801000c <__ieee754_rem_pio2+0x354>
 800ff9e:	ee10 2a10 	vmov	r2, s0
 800ffa2:	462b      	mov	r3, r5
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	f7f0 f996 	bl	80002d8 <__aeabi_dsub>
 800ffac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ffb0:	e9ca 0100 	strd	r0, r1, [sl]
 800ffb4:	e694      	b.n	800fce0 <__ieee754_rem_pio2+0x28>
 800ffb6:	bf00      	nop
 800ffb8:	54400000 	.word	0x54400000
 800ffbc:	3ff921fb 	.word	0x3ff921fb
 800ffc0:	1a626331 	.word	0x1a626331
 800ffc4:	3dd0b461 	.word	0x3dd0b461
 800ffc8:	1a600000 	.word	0x1a600000
 800ffcc:	3dd0b461 	.word	0x3dd0b461
 800ffd0:	2e037073 	.word	0x2e037073
 800ffd4:	3ba3198a 	.word	0x3ba3198a
 800ffd8:	6dc9c883 	.word	0x6dc9c883
 800ffdc:	3fe45f30 	.word	0x3fe45f30
 800ffe0:	2e000000 	.word	0x2e000000
 800ffe4:	3ba3198a 	.word	0x3ba3198a
 800ffe8:	252049c1 	.word	0x252049c1
 800ffec:	397b839a 	.word	0x397b839a
 800fff0:	3fe921fb 	.word	0x3fe921fb
 800fff4:	4002d97b 	.word	0x4002d97b
 800fff8:	3ff921fb 	.word	0x3ff921fb
 800fffc:	413921fb 	.word	0x413921fb
 8010000:	3fe00000 	.word	0x3fe00000
 8010004:	080118e0 	.word	0x080118e0
 8010008:	7fefffff 	.word	0x7fefffff
 801000c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8010010:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8010014:	ee10 0a10 	vmov	r0, s0
 8010018:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801001c:	ee10 6a10 	vmov	r6, s0
 8010020:	460f      	mov	r7, r1
 8010022:	f7f0 fdc1 	bl	8000ba8 <__aeabi_d2iz>
 8010026:	f7f0 faa5 	bl	8000574 <__aeabi_i2d>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4630      	mov	r0, r6
 8010030:	4639      	mov	r1, r7
 8010032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010036:	f7f0 f94f 	bl	80002d8 <__aeabi_dsub>
 801003a:	4b22      	ldr	r3, [pc, #136]	; (80100c4 <__ieee754_rem_pio2+0x40c>)
 801003c:	2200      	movs	r2, #0
 801003e:	f7f0 fb03 	bl	8000648 <__aeabi_dmul>
 8010042:	460f      	mov	r7, r1
 8010044:	4606      	mov	r6, r0
 8010046:	f7f0 fdaf 	bl	8000ba8 <__aeabi_d2iz>
 801004a:	f7f0 fa93 	bl	8000574 <__aeabi_i2d>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4630      	mov	r0, r6
 8010054:	4639      	mov	r1, r7
 8010056:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801005a:	f7f0 f93d 	bl	80002d8 <__aeabi_dsub>
 801005e:	4b19      	ldr	r3, [pc, #100]	; (80100c4 <__ieee754_rem_pio2+0x40c>)
 8010060:	2200      	movs	r2, #0
 8010062:	f7f0 faf1 	bl	8000648 <__aeabi_dmul>
 8010066:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801006a:	ad04      	add	r5, sp, #16
 801006c:	f04f 0803 	mov.w	r8, #3
 8010070:	46a9      	mov	r9, r5
 8010072:	2600      	movs	r6, #0
 8010074:	2700      	movs	r7, #0
 8010076:	4632      	mov	r2, r6
 8010078:	463b      	mov	r3, r7
 801007a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801007e:	46c3      	mov	fp, r8
 8010080:	3d08      	subs	r5, #8
 8010082:	f108 38ff 	add.w	r8, r8, #4294967295
 8010086:	f7f0 fd47 	bl	8000b18 <__aeabi_dcmpeq>
 801008a:	2800      	cmp	r0, #0
 801008c:	d1f3      	bne.n	8010076 <__ieee754_rem_pio2+0x3be>
 801008e:	4b0e      	ldr	r3, [pc, #56]	; (80100c8 <__ieee754_rem_pio2+0x410>)
 8010090:	9301      	str	r3, [sp, #4]
 8010092:	2302      	movs	r3, #2
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	4622      	mov	r2, r4
 8010098:	465b      	mov	r3, fp
 801009a:	4651      	mov	r1, sl
 801009c:	4648      	mov	r0, r9
 801009e:	f000 f993 	bl	80103c8 <__kernel_rem_pio2>
 80100a2:	9b02      	ldr	r3, [sp, #8]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	4683      	mov	fp, r0
 80100a8:	f6bf ae46 	bge.w	800fd38 <__ieee754_rem_pio2+0x80>
 80100ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80100b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80100b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80100b8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80100bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80100c0:	e73a      	b.n	800ff38 <__ieee754_rem_pio2+0x280>
 80100c2:	bf00      	nop
 80100c4:	41700000 	.word	0x41700000
 80100c8:	08011960 	.word	0x08011960

080100cc <__ieee754_sqrt>:
 80100cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d0:	ec55 4b10 	vmov	r4, r5, d0
 80100d4:	4e56      	ldr	r6, [pc, #344]	; (8010230 <__ieee754_sqrt+0x164>)
 80100d6:	43ae      	bics	r6, r5
 80100d8:	ee10 0a10 	vmov	r0, s0
 80100dc:	ee10 3a10 	vmov	r3, s0
 80100e0:	4629      	mov	r1, r5
 80100e2:	462a      	mov	r2, r5
 80100e4:	d110      	bne.n	8010108 <__ieee754_sqrt+0x3c>
 80100e6:	ee10 2a10 	vmov	r2, s0
 80100ea:	462b      	mov	r3, r5
 80100ec:	f7f0 faac 	bl	8000648 <__aeabi_dmul>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4620      	mov	r0, r4
 80100f6:	4629      	mov	r1, r5
 80100f8:	f7f0 f8f0 	bl	80002dc <__adddf3>
 80100fc:	4604      	mov	r4, r0
 80100fe:	460d      	mov	r5, r1
 8010100:	ec45 4b10 	vmov	d0, r4, r5
 8010104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010108:	2d00      	cmp	r5, #0
 801010a:	dc10      	bgt.n	801012e <__ieee754_sqrt+0x62>
 801010c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010110:	4330      	orrs	r0, r6
 8010112:	d0f5      	beq.n	8010100 <__ieee754_sqrt+0x34>
 8010114:	b15d      	cbz	r5, 801012e <__ieee754_sqrt+0x62>
 8010116:	ee10 2a10 	vmov	r2, s0
 801011a:	462b      	mov	r3, r5
 801011c:	ee10 0a10 	vmov	r0, s0
 8010120:	f7f0 f8da 	bl	80002d8 <__aeabi_dsub>
 8010124:	4602      	mov	r2, r0
 8010126:	460b      	mov	r3, r1
 8010128:	f7f0 fbb8 	bl	800089c <__aeabi_ddiv>
 801012c:	e7e6      	b.n	80100fc <__ieee754_sqrt+0x30>
 801012e:	1509      	asrs	r1, r1, #20
 8010130:	d076      	beq.n	8010220 <__ieee754_sqrt+0x154>
 8010132:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010136:	07ce      	lsls	r6, r1, #31
 8010138:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801013c:	bf5e      	ittt	pl
 801013e:	0fda      	lsrpl	r2, r3, #31
 8010140:	005b      	lslpl	r3, r3, #1
 8010142:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010146:	0fda      	lsrs	r2, r3, #31
 8010148:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801014c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010150:	2000      	movs	r0, #0
 8010152:	106d      	asrs	r5, r5, #1
 8010154:	005b      	lsls	r3, r3, #1
 8010156:	f04f 0e16 	mov.w	lr, #22
 801015a:	4684      	mov	ip, r0
 801015c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010160:	eb0c 0401 	add.w	r4, ip, r1
 8010164:	4294      	cmp	r4, r2
 8010166:	bfde      	ittt	le
 8010168:	1b12      	suble	r2, r2, r4
 801016a:	eb04 0c01 	addle.w	ip, r4, r1
 801016e:	1840      	addle	r0, r0, r1
 8010170:	0052      	lsls	r2, r2, #1
 8010172:	f1be 0e01 	subs.w	lr, lr, #1
 8010176:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801017a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801017e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010182:	d1ed      	bne.n	8010160 <__ieee754_sqrt+0x94>
 8010184:	4671      	mov	r1, lr
 8010186:	2720      	movs	r7, #32
 8010188:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801018c:	4562      	cmp	r2, ip
 801018e:	eb04 060e 	add.w	r6, r4, lr
 8010192:	dc02      	bgt.n	801019a <__ieee754_sqrt+0xce>
 8010194:	d113      	bne.n	80101be <__ieee754_sqrt+0xf2>
 8010196:	429e      	cmp	r6, r3
 8010198:	d811      	bhi.n	80101be <__ieee754_sqrt+0xf2>
 801019a:	2e00      	cmp	r6, #0
 801019c:	eb06 0e04 	add.w	lr, r6, r4
 80101a0:	da43      	bge.n	801022a <__ieee754_sqrt+0x15e>
 80101a2:	f1be 0f00 	cmp.w	lr, #0
 80101a6:	db40      	blt.n	801022a <__ieee754_sqrt+0x15e>
 80101a8:	f10c 0801 	add.w	r8, ip, #1
 80101ac:	eba2 020c 	sub.w	r2, r2, ip
 80101b0:	429e      	cmp	r6, r3
 80101b2:	bf88      	it	hi
 80101b4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80101b8:	1b9b      	subs	r3, r3, r6
 80101ba:	4421      	add	r1, r4
 80101bc:	46c4      	mov	ip, r8
 80101be:	0052      	lsls	r2, r2, #1
 80101c0:	3f01      	subs	r7, #1
 80101c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80101c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80101ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80101ce:	d1dd      	bne.n	801018c <__ieee754_sqrt+0xc0>
 80101d0:	4313      	orrs	r3, r2
 80101d2:	d006      	beq.n	80101e2 <__ieee754_sqrt+0x116>
 80101d4:	1c4c      	adds	r4, r1, #1
 80101d6:	bf13      	iteet	ne
 80101d8:	3101      	addne	r1, #1
 80101da:	3001      	addeq	r0, #1
 80101dc:	4639      	moveq	r1, r7
 80101de:	f021 0101 	bicne.w	r1, r1, #1
 80101e2:	1043      	asrs	r3, r0, #1
 80101e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80101e8:	0849      	lsrs	r1, r1, #1
 80101ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80101ee:	07c2      	lsls	r2, r0, #31
 80101f0:	bf48      	it	mi
 80101f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80101f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80101fa:	460c      	mov	r4, r1
 80101fc:	463d      	mov	r5, r7
 80101fe:	e77f      	b.n	8010100 <__ieee754_sqrt+0x34>
 8010200:	0ada      	lsrs	r2, r3, #11
 8010202:	3815      	subs	r0, #21
 8010204:	055b      	lsls	r3, r3, #21
 8010206:	2a00      	cmp	r2, #0
 8010208:	d0fa      	beq.n	8010200 <__ieee754_sqrt+0x134>
 801020a:	02d7      	lsls	r7, r2, #11
 801020c:	d50a      	bpl.n	8010224 <__ieee754_sqrt+0x158>
 801020e:	f1c1 0420 	rsb	r4, r1, #32
 8010212:	fa23 f404 	lsr.w	r4, r3, r4
 8010216:	1e4d      	subs	r5, r1, #1
 8010218:	408b      	lsls	r3, r1
 801021a:	4322      	orrs	r2, r4
 801021c:	1b41      	subs	r1, r0, r5
 801021e:	e788      	b.n	8010132 <__ieee754_sqrt+0x66>
 8010220:	4608      	mov	r0, r1
 8010222:	e7f0      	b.n	8010206 <__ieee754_sqrt+0x13a>
 8010224:	0052      	lsls	r2, r2, #1
 8010226:	3101      	adds	r1, #1
 8010228:	e7ef      	b.n	801020a <__ieee754_sqrt+0x13e>
 801022a:	46e0      	mov	r8, ip
 801022c:	e7be      	b.n	80101ac <__ieee754_sqrt+0xe0>
 801022e:	bf00      	nop
 8010230:	7ff00000 	.word	0x7ff00000
 8010234:	00000000 	.word	0x00000000

08010238 <__kernel_cos>:
 8010238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801023c:	ec57 6b10 	vmov	r6, r7, d0
 8010240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010248:	ed8d 1b00 	vstr	d1, [sp]
 801024c:	da07      	bge.n	801025e <__kernel_cos+0x26>
 801024e:	ee10 0a10 	vmov	r0, s0
 8010252:	4639      	mov	r1, r7
 8010254:	f7f0 fca8 	bl	8000ba8 <__aeabi_d2iz>
 8010258:	2800      	cmp	r0, #0
 801025a:	f000 8088 	beq.w	801036e <__kernel_cos+0x136>
 801025e:	4632      	mov	r2, r6
 8010260:	463b      	mov	r3, r7
 8010262:	4630      	mov	r0, r6
 8010264:	4639      	mov	r1, r7
 8010266:	f7f0 f9ef 	bl	8000648 <__aeabi_dmul>
 801026a:	4b51      	ldr	r3, [pc, #324]	; (80103b0 <__kernel_cos+0x178>)
 801026c:	2200      	movs	r2, #0
 801026e:	4604      	mov	r4, r0
 8010270:	460d      	mov	r5, r1
 8010272:	f7f0 f9e9 	bl	8000648 <__aeabi_dmul>
 8010276:	a340      	add	r3, pc, #256	; (adr r3, 8010378 <__kernel_cos+0x140>)
 8010278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027c:	4682      	mov	sl, r0
 801027e:	468b      	mov	fp, r1
 8010280:	4620      	mov	r0, r4
 8010282:	4629      	mov	r1, r5
 8010284:	f7f0 f9e0 	bl	8000648 <__aeabi_dmul>
 8010288:	a33d      	add	r3, pc, #244	; (adr r3, 8010380 <__kernel_cos+0x148>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	f7f0 f825 	bl	80002dc <__adddf3>
 8010292:	4622      	mov	r2, r4
 8010294:	462b      	mov	r3, r5
 8010296:	f7f0 f9d7 	bl	8000648 <__aeabi_dmul>
 801029a:	a33b      	add	r3, pc, #236	; (adr r3, 8010388 <__kernel_cos+0x150>)
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f7f0 f81a 	bl	80002d8 <__aeabi_dsub>
 80102a4:	4622      	mov	r2, r4
 80102a6:	462b      	mov	r3, r5
 80102a8:	f7f0 f9ce 	bl	8000648 <__aeabi_dmul>
 80102ac:	a338      	add	r3, pc, #224	; (adr r3, 8010390 <__kernel_cos+0x158>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f7f0 f813 	bl	80002dc <__adddf3>
 80102b6:	4622      	mov	r2, r4
 80102b8:	462b      	mov	r3, r5
 80102ba:	f7f0 f9c5 	bl	8000648 <__aeabi_dmul>
 80102be:	a336      	add	r3, pc, #216	; (adr r3, 8010398 <__kernel_cos+0x160>)
 80102c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c4:	f7f0 f808 	bl	80002d8 <__aeabi_dsub>
 80102c8:	4622      	mov	r2, r4
 80102ca:	462b      	mov	r3, r5
 80102cc:	f7f0 f9bc 	bl	8000648 <__aeabi_dmul>
 80102d0:	a333      	add	r3, pc, #204	; (adr r3, 80103a0 <__kernel_cos+0x168>)
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	f7f0 f801 	bl	80002dc <__adddf3>
 80102da:	4622      	mov	r2, r4
 80102dc:	462b      	mov	r3, r5
 80102de:	f7f0 f9b3 	bl	8000648 <__aeabi_dmul>
 80102e2:	4622      	mov	r2, r4
 80102e4:	462b      	mov	r3, r5
 80102e6:	f7f0 f9af 	bl	8000648 <__aeabi_dmul>
 80102ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102ee:	4604      	mov	r4, r0
 80102f0:	460d      	mov	r5, r1
 80102f2:	4630      	mov	r0, r6
 80102f4:	4639      	mov	r1, r7
 80102f6:	f7f0 f9a7 	bl	8000648 <__aeabi_dmul>
 80102fa:	460b      	mov	r3, r1
 80102fc:	4602      	mov	r2, r0
 80102fe:	4629      	mov	r1, r5
 8010300:	4620      	mov	r0, r4
 8010302:	f7ef ffe9 	bl	80002d8 <__aeabi_dsub>
 8010306:	4b2b      	ldr	r3, [pc, #172]	; (80103b4 <__kernel_cos+0x17c>)
 8010308:	4598      	cmp	r8, r3
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	dc10      	bgt.n	8010332 <__kernel_cos+0xfa>
 8010310:	4602      	mov	r2, r0
 8010312:	460b      	mov	r3, r1
 8010314:	4650      	mov	r0, sl
 8010316:	4659      	mov	r1, fp
 8010318:	f7ef ffde 	bl	80002d8 <__aeabi_dsub>
 801031c:	460b      	mov	r3, r1
 801031e:	4926      	ldr	r1, [pc, #152]	; (80103b8 <__kernel_cos+0x180>)
 8010320:	4602      	mov	r2, r0
 8010322:	2000      	movs	r0, #0
 8010324:	f7ef ffd8 	bl	80002d8 <__aeabi_dsub>
 8010328:	ec41 0b10 	vmov	d0, r0, r1
 801032c:	b003      	add	sp, #12
 801032e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010332:	4b22      	ldr	r3, [pc, #136]	; (80103bc <__kernel_cos+0x184>)
 8010334:	4920      	ldr	r1, [pc, #128]	; (80103b8 <__kernel_cos+0x180>)
 8010336:	4598      	cmp	r8, r3
 8010338:	bfcc      	ite	gt
 801033a:	4d21      	ldrgt	r5, [pc, #132]	; (80103c0 <__kernel_cos+0x188>)
 801033c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010340:	2400      	movs	r4, #0
 8010342:	4622      	mov	r2, r4
 8010344:	462b      	mov	r3, r5
 8010346:	2000      	movs	r0, #0
 8010348:	f7ef ffc6 	bl	80002d8 <__aeabi_dsub>
 801034c:	4622      	mov	r2, r4
 801034e:	4680      	mov	r8, r0
 8010350:	4689      	mov	r9, r1
 8010352:	462b      	mov	r3, r5
 8010354:	4650      	mov	r0, sl
 8010356:	4659      	mov	r1, fp
 8010358:	f7ef ffbe 	bl	80002d8 <__aeabi_dsub>
 801035c:	4632      	mov	r2, r6
 801035e:	463b      	mov	r3, r7
 8010360:	f7ef ffba 	bl	80002d8 <__aeabi_dsub>
 8010364:	4602      	mov	r2, r0
 8010366:	460b      	mov	r3, r1
 8010368:	4640      	mov	r0, r8
 801036a:	4649      	mov	r1, r9
 801036c:	e7da      	b.n	8010324 <__kernel_cos+0xec>
 801036e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80103a8 <__kernel_cos+0x170>
 8010372:	e7db      	b.n	801032c <__kernel_cos+0xf4>
 8010374:	f3af 8000 	nop.w
 8010378:	be8838d4 	.word	0xbe8838d4
 801037c:	bda8fae9 	.word	0xbda8fae9
 8010380:	bdb4b1c4 	.word	0xbdb4b1c4
 8010384:	3e21ee9e 	.word	0x3e21ee9e
 8010388:	809c52ad 	.word	0x809c52ad
 801038c:	3e927e4f 	.word	0x3e927e4f
 8010390:	19cb1590 	.word	0x19cb1590
 8010394:	3efa01a0 	.word	0x3efa01a0
 8010398:	16c15177 	.word	0x16c15177
 801039c:	3f56c16c 	.word	0x3f56c16c
 80103a0:	5555554c 	.word	0x5555554c
 80103a4:	3fa55555 	.word	0x3fa55555
 80103a8:	00000000 	.word	0x00000000
 80103ac:	3ff00000 	.word	0x3ff00000
 80103b0:	3fe00000 	.word	0x3fe00000
 80103b4:	3fd33332 	.word	0x3fd33332
 80103b8:	3ff00000 	.word	0x3ff00000
 80103bc:	3fe90000 	.word	0x3fe90000
 80103c0:	3fd20000 	.word	0x3fd20000
 80103c4:	00000000 	.word	0x00000000

080103c8 <__kernel_rem_pio2>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	ed2d 8b02 	vpush	{d8}
 80103d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80103d4:	f112 0f14 	cmn.w	r2, #20
 80103d8:	9308      	str	r3, [sp, #32]
 80103da:	9101      	str	r1, [sp, #4]
 80103dc:	4bc6      	ldr	r3, [pc, #792]	; (80106f8 <__kernel_rem_pio2+0x330>)
 80103de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80103e0:	9009      	str	r0, [sp, #36]	; 0x24
 80103e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80103e6:	9304      	str	r3, [sp, #16]
 80103e8:	9b08      	ldr	r3, [sp, #32]
 80103ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80103ee:	bfa8      	it	ge
 80103f0:	1ed4      	subge	r4, r2, #3
 80103f2:	9306      	str	r3, [sp, #24]
 80103f4:	bfb2      	itee	lt
 80103f6:	2400      	movlt	r4, #0
 80103f8:	2318      	movge	r3, #24
 80103fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80103fe:	f06f 0317 	mvn.w	r3, #23
 8010402:	fb04 3303 	mla	r3, r4, r3, r3
 8010406:	eb03 0a02 	add.w	sl, r3, r2
 801040a:	9b04      	ldr	r3, [sp, #16]
 801040c:	9a06      	ldr	r2, [sp, #24]
 801040e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80106e8 <__kernel_rem_pio2+0x320>
 8010412:	eb03 0802 	add.w	r8, r3, r2
 8010416:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010418:	1aa7      	subs	r7, r4, r2
 801041a:	ae20      	add	r6, sp, #128	; 0x80
 801041c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010420:	2500      	movs	r5, #0
 8010422:	4545      	cmp	r5, r8
 8010424:	dd18      	ble.n	8010458 <__kernel_rem_pio2+0x90>
 8010426:	9b08      	ldr	r3, [sp, #32]
 8010428:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801042c:	aa20      	add	r2, sp, #128	; 0x80
 801042e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80106e8 <__kernel_rem_pio2+0x320>
 8010432:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010436:	f1c3 0301 	rsb	r3, r3, #1
 801043a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801043e:	9307      	str	r3, [sp, #28]
 8010440:	9b07      	ldr	r3, [sp, #28]
 8010442:	9a04      	ldr	r2, [sp, #16]
 8010444:	4443      	add	r3, r8
 8010446:	429a      	cmp	r2, r3
 8010448:	db2f      	blt.n	80104aa <__kernel_rem_pio2+0xe2>
 801044a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801044e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010452:	462f      	mov	r7, r5
 8010454:	2600      	movs	r6, #0
 8010456:	e01b      	b.n	8010490 <__kernel_rem_pio2+0xc8>
 8010458:	42ef      	cmn	r7, r5
 801045a:	d407      	bmi.n	801046c <__kernel_rem_pio2+0xa4>
 801045c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010460:	f7f0 f888 	bl	8000574 <__aeabi_i2d>
 8010464:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010468:	3501      	adds	r5, #1
 801046a:	e7da      	b.n	8010422 <__kernel_rem_pio2+0x5a>
 801046c:	ec51 0b18 	vmov	r0, r1, d8
 8010470:	e7f8      	b.n	8010464 <__kernel_rem_pio2+0x9c>
 8010472:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010476:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801047a:	f7f0 f8e5 	bl	8000648 <__aeabi_dmul>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010486:	f7ef ff29 	bl	80002dc <__adddf3>
 801048a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801048e:	3601      	adds	r6, #1
 8010490:	9b06      	ldr	r3, [sp, #24]
 8010492:	429e      	cmp	r6, r3
 8010494:	f1a7 0708 	sub.w	r7, r7, #8
 8010498:	ddeb      	ble.n	8010472 <__kernel_rem_pio2+0xaa>
 801049a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801049e:	3508      	adds	r5, #8
 80104a0:	ecab 7b02 	vstmia	fp!, {d7}
 80104a4:	f108 0801 	add.w	r8, r8, #1
 80104a8:	e7ca      	b.n	8010440 <__kernel_rem_pio2+0x78>
 80104aa:	9b04      	ldr	r3, [sp, #16]
 80104ac:	aa0c      	add	r2, sp, #48	; 0x30
 80104ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80104b4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80104b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80104ba:	9c04      	ldr	r4, [sp, #16]
 80104bc:	930a      	str	r3, [sp, #40]	; 0x28
 80104be:	ab98      	add	r3, sp, #608	; 0x260
 80104c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80104c4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80104c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80104cc:	f8cd b008 	str.w	fp, [sp, #8]
 80104d0:	4625      	mov	r5, r4
 80104d2:	2d00      	cmp	r5, #0
 80104d4:	dc78      	bgt.n	80105c8 <__kernel_rem_pio2+0x200>
 80104d6:	ec47 6b10 	vmov	d0, r6, r7
 80104da:	4650      	mov	r0, sl
 80104dc:	f000 fe3c 	bl	8011158 <scalbn>
 80104e0:	ec57 6b10 	vmov	r6, r7, d0
 80104e4:	2200      	movs	r2, #0
 80104e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80104ea:	ee10 0a10 	vmov	r0, s0
 80104ee:	4639      	mov	r1, r7
 80104f0:	f7f0 f8aa 	bl	8000648 <__aeabi_dmul>
 80104f4:	ec41 0b10 	vmov	d0, r0, r1
 80104f8:	f000 fd1a 	bl	8010f30 <floor>
 80104fc:	4b7f      	ldr	r3, [pc, #508]	; (80106fc <__kernel_rem_pio2+0x334>)
 80104fe:	ec51 0b10 	vmov	r0, r1, d0
 8010502:	2200      	movs	r2, #0
 8010504:	f7f0 f8a0 	bl	8000648 <__aeabi_dmul>
 8010508:	4602      	mov	r2, r0
 801050a:	460b      	mov	r3, r1
 801050c:	4630      	mov	r0, r6
 801050e:	4639      	mov	r1, r7
 8010510:	f7ef fee2 	bl	80002d8 <__aeabi_dsub>
 8010514:	460f      	mov	r7, r1
 8010516:	4606      	mov	r6, r0
 8010518:	f7f0 fb46 	bl	8000ba8 <__aeabi_d2iz>
 801051c:	9007      	str	r0, [sp, #28]
 801051e:	f7f0 f829 	bl	8000574 <__aeabi_i2d>
 8010522:	4602      	mov	r2, r0
 8010524:	460b      	mov	r3, r1
 8010526:	4630      	mov	r0, r6
 8010528:	4639      	mov	r1, r7
 801052a:	f7ef fed5 	bl	80002d8 <__aeabi_dsub>
 801052e:	f1ba 0f00 	cmp.w	sl, #0
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	dd70      	ble.n	801061a <__kernel_rem_pio2+0x252>
 8010538:	1e62      	subs	r2, r4, #1
 801053a:	ab0c      	add	r3, sp, #48	; 0x30
 801053c:	9d07      	ldr	r5, [sp, #28]
 801053e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010542:	f1ca 0118 	rsb	r1, sl, #24
 8010546:	fa40 f301 	asr.w	r3, r0, r1
 801054a:	441d      	add	r5, r3
 801054c:	408b      	lsls	r3, r1
 801054e:	1ac0      	subs	r0, r0, r3
 8010550:	ab0c      	add	r3, sp, #48	; 0x30
 8010552:	9507      	str	r5, [sp, #28]
 8010554:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010558:	f1ca 0317 	rsb	r3, sl, #23
 801055c:	fa40 f303 	asr.w	r3, r0, r3
 8010560:	9302      	str	r3, [sp, #8]
 8010562:	9b02      	ldr	r3, [sp, #8]
 8010564:	2b00      	cmp	r3, #0
 8010566:	dd66      	ble.n	8010636 <__kernel_rem_pio2+0x26e>
 8010568:	9b07      	ldr	r3, [sp, #28]
 801056a:	2200      	movs	r2, #0
 801056c:	3301      	adds	r3, #1
 801056e:	9307      	str	r3, [sp, #28]
 8010570:	4615      	mov	r5, r2
 8010572:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010576:	4294      	cmp	r4, r2
 8010578:	f300 8099 	bgt.w	80106ae <__kernel_rem_pio2+0x2e6>
 801057c:	f1ba 0f00 	cmp.w	sl, #0
 8010580:	dd07      	ble.n	8010592 <__kernel_rem_pio2+0x1ca>
 8010582:	f1ba 0f01 	cmp.w	sl, #1
 8010586:	f000 80a5 	beq.w	80106d4 <__kernel_rem_pio2+0x30c>
 801058a:	f1ba 0f02 	cmp.w	sl, #2
 801058e:	f000 80c1 	beq.w	8010714 <__kernel_rem_pio2+0x34c>
 8010592:	9b02      	ldr	r3, [sp, #8]
 8010594:	2b02      	cmp	r3, #2
 8010596:	d14e      	bne.n	8010636 <__kernel_rem_pio2+0x26e>
 8010598:	4632      	mov	r2, r6
 801059a:	463b      	mov	r3, r7
 801059c:	4958      	ldr	r1, [pc, #352]	; (8010700 <__kernel_rem_pio2+0x338>)
 801059e:	2000      	movs	r0, #0
 80105a0:	f7ef fe9a 	bl	80002d8 <__aeabi_dsub>
 80105a4:	4606      	mov	r6, r0
 80105a6:	460f      	mov	r7, r1
 80105a8:	2d00      	cmp	r5, #0
 80105aa:	d044      	beq.n	8010636 <__kernel_rem_pio2+0x26e>
 80105ac:	4650      	mov	r0, sl
 80105ae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80106f0 <__kernel_rem_pio2+0x328>
 80105b2:	f000 fdd1 	bl	8011158 <scalbn>
 80105b6:	4630      	mov	r0, r6
 80105b8:	4639      	mov	r1, r7
 80105ba:	ec53 2b10 	vmov	r2, r3, d0
 80105be:	f7ef fe8b 	bl	80002d8 <__aeabi_dsub>
 80105c2:	4606      	mov	r6, r0
 80105c4:	460f      	mov	r7, r1
 80105c6:	e036      	b.n	8010636 <__kernel_rem_pio2+0x26e>
 80105c8:	4b4e      	ldr	r3, [pc, #312]	; (8010704 <__kernel_rem_pio2+0x33c>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	4630      	mov	r0, r6
 80105ce:	4639      	mov	r1, r7
 80105d0:	f7f0 f83a 	bl	8000648 <__aeabi_dmul>
 80105d4:	f7f0 fae8 	bl	8000ba8 <__aeabi_d2iz>
 80105d8:	f7ef ffcc 	bl	8000574 <__aeabi_i2d>
 80105dc:	4b4a      	ldr	r3, [pc, #296]	; (8010708 <__kernel_rem_pio2+0x340>)
 80105de:	2200      	movs	r2, #0
 80105e0:	4680      	mov	r8, r0
 80105e2:	4689      	mov	r9, r1
 80105e4:	f7f0 f830 	bl	8000648 <__aeabi_dmul>
 80105e8:	4602      	mov	r2, r0
 80105ea:	460b      	mov	r3, r1
 80105ec:	4630      	mov	r0, r6
 80105ee:	4639      	mov	r1, r7
 80105f0:	f7ef fe72 	bl	80002d8 <__aeabi_dsub>
 80105f4:	f7f0 fad8 	bl	8000ba8 <__aeabi_d2iz>
 80105f8:	9b02      	ldr	r3, [sp, #8]
 80105fa:	f843 0b04 	str.w	r0, [r3], #4
 80105fe:	3d01      	subs	r5, #1
 8010600:	9302      	str	r3, [sp, #8]
 8010602:	ab70      	add	r3, sp, #448	; 0x1c0
 8010604:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060c:	4640      	mov	r0, r8
 801060e:	4649      	mov	r1, r9
 8010610:	f7ef fe64 	bl	80002dc <__adddf3>
 8010614:	4606      	mov	r6, r0
 8010616:	460f      	mov	r7, r1
 8010618:	e75b      	b.n	80104d2 <__kernel_rem_pio2+0x10a>
 801061a:	d105      	bne.n	8010628 <__kernel_rem_pio2+0x260>
 801061c:	1e63      	subs	r3, r4, #1
 801061e:	aa0c      	add	r2, sp, #48	; 0x30
 8010620:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010624:	15c3      	asrs	r3, r0, #23
 8010626:	e79b      	b.n	8010560 <__kernel_rem_pio2+0x198>
 8010628:	4b38      	ldr	r3, [pc, #224]	; (801070c <__kernel_rem_pio2+0x344>)
 801062a:	2200      	movs	r2, #0
 801062c:	f7f0 fa92 	bl	8000b54 <__aeabi_dcmpge>
 8010630:	2800      	cmp	r0, #0
 8010632:	d139      	bne.n	80106a8 <__kernel_rem_pio2+0x2e0>
 8010634:	9002      	str	r0, [sp, #8]
 8010636:	2200      	movs	r2, #0
 8010638:	2300      	movs	r3, #0
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7f0 fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 8010642:	2800      	cmp	r0, #0
 8010644:	f000 80b4 	beq.w	80107b0 <__kernel_rem_pio2+0x3e8>
 8010648:	f104 3bff 	add.w	fp, r4, #4294967295
 801064c:	465b      	mov	r3, fp
 801064e:	2200      	movs	r2, #0
 8010650:	9904      	ldr	r1, [sp, #16]
 8010652:	428b      	cmp	r3, r1
 8010654:	da65      	bge.n	8010722 <__kernel_rem_pio2+0x35a>
 8010656:	2a00      	cmp	r2, #0
 8010658:	d07b      	beq.n	8010752 <__kernel_rem_pio2+0x38a>
 801065a:	ab0c      	add	r3, sp, #48	; 0x30
 801065c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010660:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 80a0 	beq.w	80107aa <__kernel_rem_pio2+0x3e2>
 801066a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80106f0 <__kernel_rem_pio2+0x328>
 801066e:	4650      	mov	r0, sl
 8010670:	f000 fd72 	bl	8011158 <scalbn>
 8010674:	4f23      	ldr	r7, [pc, #140]	; (8010704 <__kernel_rem_pio2+0x33c>)
 8010676:	ec55 4b10 	vmov	r4, r5, d0
 801067a:	46d8      	mov	r8, fp
 801067c:	2600      	movs	r6, #0
 801067e:	f1b8 0f00 	cmp.w	r8, #0
 8010682:	f280 80cf 	bge.w	8010824 <__kernel_rem_pio2+0x45c>
 8010686:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80106e8 <__kernel_rem_pio2+0x320>
 801068a:	465f      	mov	r7, fp
 801068c:	f04f 0800 	mov.w	r8, #0
 8010690:	2f00      	cmp	r7, #0
 8010692:	f2c0 80fd 	blt.w	8010890 <__kernel_rem_pio2+0x4c8>
 8010696:	ab70      	add	r3, sp, #448	; 0x1c0
 8010698:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010710 <__kernel_rem_pio2+0x348>
 801069c:	ec55 4b18 	vmov	r4, r5, d8
 80106a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80106a4:	2600      	movs	r6, #0
 80106a6:	e0e5      	b.n	8010874 <__kernel_rem_pio2+0x4ac>
 80106a8:	2302      	movs	r3, #2
 80106aa:	9302      	str	r3, [sp, #8]
 80106ac:	e75c      	b.n	8010568 <__kernel_rem_pio2+0x1a0>
 80106ae:	f8db 3000 	ldr.w	r3, [fp]
 80106b2:	b955      	cbnz	r5, 80106ca <__kernel_rem_pio2+0x302>
 80106b4:	b123      	cbz	r3, 80106c0 <__kernel_rem_pio2+0x2f8>
 80106b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80106ba:	f8cb 3000 	str.w	r3, [fp]
 80106be:	2301      	movs	r3, #1
 80106c0:	3201      	adds	r2, #1
 80106c2:	f10b 0b04 	add.w	fp, fp, #4
 80106c6:	461d      	mov	r5, r3
 80106c8:	e755      	b.n	8010576 <__kernel_rem_pio2+0x1ae>
 80106ca:	1acb      	subs	r3, r1, r3
 80106cc:	f8cb 3000 	str.w	r3, [fp]
 80106d0:	462b      	mov	r3, r5
 80106d2:	e7f5      	b.n	80106c0 <__kernel_rem_pio2+0x2f8>
 80106d4:	1e62      	subs	r2, r4, #1
 80106d6:	ab0c      	add	r3, sp, #48	; 0x30
 80106d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80106e0:	a90c      	add	r1, sp, #48	; 0x30
 80106e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80106e6:	e754      	b.n	8010592 <__kernel_rem_pio2+0x1ca>
	...
 80106f4:	3ff00000 	.word	0x3ff00000
 80106f8:	08011aa8 	.word	0x08011aa8
 80106fc:	40200000 	.word	0x40200000
 8010700:	3ff00000 	.word	0x3ff00000
 8010704:	3e700000 	.word	0x3e700000
 8010708:	41700000 	.word	0x41700000
 801070c:	3fe00000 	.word	0x3fe00000
 8010710:	08011a68 	.word	0x08011a68
 8010714:	1e62      	subs	r2, r4, #1
 8010716:	ab0c      	add	r3, sp, #48	; 0x30
 8010718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801071c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010720:	e7de      	b.n	80106e0 <__kernel_rem_pio2+0x318>
 8010722:	a90c      	add	r1, sp, #48	; 0x30
 8010724:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010728:	3b01      	subs	r3, #1
 801072a:	430a      	orrs	r2, r1
 801072c:	e790      	b.n	8010650 <__kernel_rem_pio2+0x288>
 801072e:	3301      	adds	r3, #1
 8010730:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010734:	2900      	cmp	r1, #0
 8010736:	d0fa      	beq.n	801072e <__kernel_rem_pio2+0x366>
 8010738:	9a08      	ldr	r2, [sp, #32]
 801073a:	18e3      	adds	r3, r4, r3
 801073c:	18a6      	adds	r6, r4, r2
 801073e:	aa20      	add	r2, sp, #128	; 0x80
 8010740:	1c65      	adds	r5, r4, #1
 8010742:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010746:	9302      	str	r3, [sp, #8]
 8010748:	9b02      	ldr	r3, [sp, #8]
 801074a:	42ab      	cmp	r3, r5
 801074c:	da04      	bge.n	8010758 <__kernel_rem_pio2+0x390>
 801074e:	461c      	mov	r4, r3
 8010750:	e6b5      	b.n	80104be <__kernel_rem_pio2+0xf6>
 8010752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010754:	2301      	movs	r3, #1
 8010756:	e7eb      	b.n	8010730 <__kernel_rem_pio2+0x368>
 8010758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801075a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801075e:	f7ef ff09 	bl	8000574 <__aeabi_i2d>
 8010762:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010768:	46b3      	mov	fp, r6
 801076a:	461c      	mov	r4, r3
 801076c:	2700      	movs	r7, #0
 801076e:	f04f 0800 	mov.w	r8, #0
 8010772:	f04f 0900 	mov.w	r9, #0
 8010776:	9b06      	ldr	r3, [sp, #24]
 8010778:	429f      	cmp	r7, r3
 801077a:	dd06      	ble.n	801078a <__kernel_rem_pio2+0x3c2>
 801077c:	ab70      	add	r3, sp, #448	; 0x1c0
 801077e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010782:	e9c3 8900 	strd	r8, r9, [r3]
 8010786:	3501      	adds	r5, #1
 8010788:	e7de      	b.n	8010748 <__kernel_rem_pio2+0x380>
 801078a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801078e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010792:	f7ef ff59 	bl	8000648 <__aeabi_dmul>
 8010796:	4602      	mov	r2, r0
 8010798:	460b      	mov	r3, r1
 801079a:	4640      	mov	r0, r8
 801079c:	4649      	mov	r1, r9
 801079e:	f7ef fd9d 	bl	80002dc <__adddf3>
 80107a2:	3701      	adds	r7, #1
 80107a4:	4680      	mov	r8, r0
 80107a6:	4689      	mov	r9, r1
 80107a8:	e7e5      	b.n	8010776 <__kernel_rem_pio2+0x3ae>
 80107aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80107ae:	e754      	b.n	801065a <__kernel_rem_pio2+0x292>
 80107b0:	ec47 6b10 	vmov	d0, r6, r7
 80107b4:	f1ca 0000 	rsb	r0, sl, #0
 80107b8:	f000 fcce 	bl	8011158 <scalbn>
 80107bc:	ec57 6b10 	vmov	r6, r7, d0
 80107c0:	4b9f      	ldr	r3, [pc, #636]	; (8010a40 <__kernel_rem_pio2+0x678>)
 80107c2:	ee10 0a10 	vmov	r0, s0
 80107c6:	2200      	movs	r2, #0
 80107c8:	4639      	mov	r1, r7
 80107ca:	f7f0 f9c3 	bl	8000b54 <__aeabi_dcmpge>
 80107ce:	b300      	cbz	r0, 8010812 <__kernel_rem_pio2+0x44a>
 80107d0:	4b9c      	ldr	r3, [pc, #624]	; (8010a44 <__kernel_rem_pio2+0x67c>)
 80107d2:	2200      	movs	r2, #0
 80107d4:	4630      	mov	r0, r6
 80107d6:	4639      	mov	r1, r7
 80107d8:	f7ef ff36 	bl	8000648 <__aeabi_dmul>
 80107dc:	f7f0 f9e4 	bl	8000ba8 <__aeabi_d2iz>
 80107e0:	4605      	mov	r5, r0
 80107e2:	f7ef fec7 	bl	8000574 <__aeabi_i2d>
 80107e6:	4b96      	ldr	r3, [pc, #600]	; (8010a40 <__kernel_rem_pio2+0x678>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	f7ef ff2d 	bl	8000648 <__aeabi_dmul>
 80107ee:	460b      	mov	r3, r1
 80107f0:	4602      	mov	r2, r0
 80107f2:	4639      	mov	r1, r7
 80107f4:	4630      	mov	r0, r6
 80107f6:	f7ef fd6f 	bl	80002d8 <__aeabi_dsub>
 80107fa:	f7f0 f9d5 	bl	8000ba8 <__aeabi_d2iz>
 80107fe:	f104 0b01 	add.w	fp, r4, #1
 8010802:	ab0c      	add	r3, sp, #48	; 0x30
 8010804:	f10a 0a18 	add.w	sl, sl, #24
 8010808:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801080c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010810:	e72b      	b.n	801066a <__kernel_rem_pio2+0x2a2>
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7f0 f9c7 	bl	8000ba8 <__aeabi_d2iz>
 801081a:	ab0c      	add	r3, sp, #48	; 0x30
 801081c:	46a3      	mov	fp, r4
 801081e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010822:	e722      	b.n	801066a <__kernel_rem_pio2+0x2a2>
 8010824:	ab70      	add	r3, sp, #448	; 0x1c0
 8010826:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801082a:	ab0c      	add	r3, sp, #48	; 0x30
 801082c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010830:	f7ef fea0 	bl	8000574 <__aeabi_i2d>
 8010834:	4622      	mov	r2, r4
 8010836:	462b      	mov	r3, r5
 8010838:	f7ef ff06 	bl	8000648 <__aeabi_dmul>
 801083c:	4632      	mov	r2, r6
 801083e:	e9c9 0100 	strd	r0, r1, [r9]
 8010842:	463b      	mov	r3, r7
 8010844:	4620      	mov	r0, r4
 8010846:	4629      	mov	r1, r5
 8010848:	f7ef fefe 	bl	8000648 <__aeabi_dmul>
 801084c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010850:	4604      	mov	r4, r0
 8010852:	460d      	mov	r5, r1
 8010854:	e713      	b.n	801067e <__kernel_rem_pio2+0x2b6>
 8010856:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801085a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801085e:	f7ef fef3 	bl	8000648 <__aeabi_dmul>
 8010862:	4602      	mov	r2, r0
 8010864:	460b      	mov	r3, r1
 8010866:	4620      	mov	r0, r4
 8010868:	4629      	mov	r1, r5
 801086a:	f7ef fd37 	bl	80002dc <__adddf3>
 801086e:	3601      	adds	r6, #1
 8010870:	4604      	mov	r4, r0
 8010872:	460d      	mov	r5, r1
 8010874:	9b04      	ldr	r3, [sp, #16]
 8010876:	429e      	cmp	r6, r3
 8010878:	dc01      	bgt.n	801087e <__kernel_rem_pio2+0x4b6>
 801087a:	45b0      	cmp	r8, r6
 801087c:	daeb      	bge.n	8010856 <__kernel_rem_pio2+0x48e>
 801087e:	ab48      	add	r3, sp, #288	; 0x120
 8010880:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010884:	e9c3 4500 	strd	r4, r5, [r3]
 8010888:	3f01      	subs	r7, #1
 801088a:	f108 0801 	add.w	r8, r8, #1
 801088e:	e6ff      	b.n	8010690 <__kernel_rem_pio2+0x2c8>
 8010890:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010892:	2b02      	cmp	r3, #2
 8010894:	dc0b      	bgt.n	80108ae <__kernel_rem_pio2+0x4e6>
 8010896:	2b00      	cmp	r3, #0
 8010898:	dc6e      	bgt.n	8010978 <__kernel_rem_pio2+0x5b0>
 801089a:	d045      	beq.n	8010928 <__kernel_rem_pio2+0x560>
 801089c:	9b07      	ldr	r3, [sp, #28]
 801089e:	f003 0007 	and.w	r0, r3, #7
 80108a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80108a6:	ecbd 8b02 	vpop	{d8}
 80108aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80108b0:	2b03      	cmp	r3, #3
 80108b2:	d1f3      	bne.n	801089c <__kernel_rem_pio2+0x4d4>
 80108b4:	ab48      	add	r3, sp, #288	; 0x120
 80108b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80108ba:	46d0      	mov	r8, sl
 80108bc:	46d9      	mov	r9, fp
 80108be:	f1b9 0f00 	cmp.w	r9, #0
 80108c2:	f1a8 0808 	sub.w	r8, r8, #8
 80108c6:	dc64      	bgt.n	8010992 <__kernel_rem_pio2+0x5ca>
 80108c8:	465c      	mov	r4, fp
 80108ca:	2c01      	cmp	r4, #1
 80108cc:	f1aa 0a08 	sub.w	sl, sl, #8
 80108d0:	dc7e      	bgt.n	80109d0 <__kernel_rem_pio2+0x608>
 80108d2:	2000      	movs	r0, #0
 80108d4:	2100      	movs	r1, #0
 80108d6:	f1bb 0f01 	cmp.w	fp, #1
 80108da:	f300 8097 	bgt.w	8010a0c <__kernel_rem_pio2+0x644>
 80108de:	9b02      	ldr	r3, [sp, #8]
 80108e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80108e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f040 8099 	bne.w	8010a20 <__kernel_rem_pio2+0x658>
 80108ee:	9b01      	ldr	r3, [sp, #4]
 80108f0:	e9c3 5600 	strd	r5, r6, [r3]
 80108f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80108f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80108fc:	e7ce      	b.n	801089c <__kernel_rem_pio2+0x4d4>
 80108fe:	ab48      	add	r3, sp, #288	; 0x120
 8010900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	f7ef fce8 	bl	80002dc <__adddf3>
 801090c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010910:	f1bb 0f00 	cmp.w	fp, #0
 8010914:	daf3      	bge.n	80108fe <__kernel_rem_pio2+0x536>
 8010916:	9b02      	ldr	r3, [sp, #8]
 8010918:	b113      	cbz	r3, 8010920 <__kernel_rem_pio2+0x558>
 801091a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801091e:	4619      	mov	r1, r3
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	e9c3 0100 	strd	r0, r1, [r3]
 8010926:	e7b9      	b.n	801089c <__kernel_rem_pio2+0x4d4>
 8010928:	2000      	movs	r0, #0
 801092a:	2100      	movs	r1, #0
 801092c:	e7f0      	b.n	8010910 <__kernel_rem_pio2+0x548>
 801092e:	ab48      	add	r3, sp, #288	; 0x120
 8010930:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010938:	f7ef fcd0 	bl	80002dc <__adddf3>
 801093c:	3c01      	subs	r4, #1
 801093e:	2c00      	cmp	r4, #0
 8010940:	daf5      	bge.n	801092e <__kernel_rem_pio2+0x566>
 8010942:	9b02      	ldr	r3, [sp, #8]
 8010944:	b1e3      	cbz	r3, 8010980 <__kernel_rem_pio2+0x5b8>
 8010946:	4602      	mov	r2, r0
 8010948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801094c:	9c01      	ldr	r4, [sp, #4]
 801094e:	e9c4 2300 	strd	r2, r3, [r4]
 8010952:	4602      	mov	r2, r0
 8010954:	460b      	mov	r3, r1
 8010956:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801095a:	f7ef fcbd 	bl	80002d8 <__aeabi_dsub>
 801095e:	ad4a      	add	r5, sp, #296	; 0x128
 8010960:	2401      	movs	r4, #1
 8010962:	45a3      	cmp	fp, r4
 8010964:	da0f      	bge.n	8010986 <__kernel_rem_pio2+0x5be>
 8010966:	9b02      	ldr	r3, [sp, #8]
 8010968:	b113      	cbz	r3, 8010970 <__kernel_rem_pio2+0x5a8>
 801096a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801096e:	4619      	mov	r1, r3
 8010970:	9b01      	ldr	r3, [sp, #4]
 8010972:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010976:	e791      	b.n	801089c <__kernel_rem_pio2+0x4d4>
 8010978:	465c      	mov	r4, fp
 801097a:	2000      	movs	r0, #0
 801097c:	2100      	movs	r1, #0
 801097e:	e7de      	b.n	801093e <__kernel_rem_pio2+0x576>
 8010980:	4602      	mov	r2, r0
 8010982:	460b      	mov	r3, r1
 8010984:	e7e2      	b.n	801094c <__kernel_rem_pio2+0x584>
 8010986:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801098a:	f7ef fca7 	bl	80002dc <__adddf3>
 801098e:	3401      	adds	r4, #1
 8010990:	e7e7      	b.n	8010962 <__kernel_rem_pio2+0x59a>
 8010992:	e9d8 4500 	ldrd	r4, r5, [r8]
 8010996:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801099a:	4620      	mov	r0, r4
 801099c:	4632      	mov	r2, r6
 801099e:	463b      	mov	r3, r7
 80109a0:	4629      	mov	r1, r5
 80109a2:	f7ef fc9b 	bl	80002dc <__adddf3>
 80109a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	4620      	mov	r0, r4
 80109b0:	4629      	mov	r1, r5
 80109b2:	f7ef fc91 	bl	80002d8 <__aeabi_dsub>
 80109b6:	4632      	mov	r2, r6
 80109b8:	463b      	mov	r3, r7
 80109ba:	f7ef fc8f 	bl	80002dc <__adddf3>
 80109be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80109c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80109c6:	ed88 7b00 	vstr	d7, [r8]
 80109ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80109ce:	e776      	b.n	80108be <__kernel_rem_pio2+0x4f6>
 80109d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80109d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80109d8:	4640      	mov	r0, r8
 80109da:	4632      	mov	r2, r6
 80109dc:	463b      	mov	r3, r7
 80109de:	4649      	mov	r1, r9
 80109e0:	f7ef fc7c 	bl	80002dc <__adddf3>
 80109e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109e8:	4602      	mov	r2, r0
 80109ea:	460b      	mov	r3, r1
 80109ec:	4640      	mov	r0, r8
 80109ee:	4649      	mov	r1, r9
 80109f0:	f7ef fc72 	bl	80002d8 <__aeabi_dsub>
 80109f4:	4632      	mov	r2, r6
 80109f6:	463b      	mov	r3, r7
 80109f8:	f7ef fc70 	bl	80002dc <__adddf3>
 80109fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010a00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010a04:	ed8a 7b00 	vstr	d7, [sl]
 8010a08:	3c01      	subs	r4, #1
 8010a0a:	e75e      	b.n	80108ca <__kernel_rem_pio2+0x502>
 8010a0c:	ab48      	add	r3, sp, #288	; 0x120
 8010a0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	f7ef fc61 	bl	80002dc <__adddf3>
 8010a1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a1e:	e75a      	b.n	80108d6 <__kernel_rem_pio2+0x50e>
 8010a20:	9b01      	ldr	r3, [sp, #4]
 8010a22:	9a01      	ldr	r2, [sp, #4]
 8010a24:	601d      	str	r5, [r3, #0]
 8010a26:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010a2a:	605c      	str	r4, [r3, #4]
 8010a2c:	609f      	str	r7, [r3, #8]
 8010a2e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010a32:	60d3      	str	r3, [r2, #12]
 8010a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a38:	6110      	str	r0, [r2, #16]
 8010a3a:	6153      	str	r3, [r2, #20]
 8010a3c:	e72e      	b.n	801089c <__kernel_rem_pio2+0x4d4>
 8010a3e:	bf00      	nop
 8010a40:	41700000 	.word	0x41700000
 8010a44:	3e700000 	.word	0x3e700000

08010a48 <__kernel_sin>:
 8010a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a4c:	ed2d 8b04 	vpush	{d8-d9}
 8010a50:	eeb0 8a41 	vmov.f32	s16, s2
 8010a54:	eef0 8a61 	vmov.f32	s17, s3
 8010a58:	ec55 4b10 	vmov	r4, r5, d0
 8010a5c:	b083      	sub	sp, #12
 8010a5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010a62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010a66:	9001      	str	r0, [sp, #4]
 8010a68:	da06      	bge.n	8010a78 <__kernel_sin+0x30>
 8010a6a:	ee10 0a10 	vmov	r0, s0
 8010a6e:	4629      	mov	r1, r5
 8010a70:	f7f0 f89a 	bl	8000ba8 <__aeabi_d2iz>
 8010a74:	2800      	cmp	r0, #0
 8010a76:	d051      	beq.n	8010b1c <__kernel_sin+0xd4>
 8010a78:	4622      	mov	r2, r4
 8010a7a:	462b      	mov	r3, r5
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	4629      	mov	r1, r5
 8010a80:	f7ef fde2 	bl	8000648 <__aeabi_dmul>
 8010a84:	4682      	mov	sl, r0
 8010a86:	468b      	mov	fp, r1
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	4629      	mov	r1, r5
 8010a90:	f7ef fdda 	bl	8000648 <__aeabi_dmul>
 8010a94:	a341      	add	r3, pc, #260	; (adr r3, 8010b9c <__kernel_sin+0x154>)
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	4680      	mov	r8, r0
 8010a9c:	4689      	mov	r9, r1
 8010a9e:	4650      	mov	r0, sl
 8010aa0:	4659      	mov	r1, fp
 8010aa2:	f7ef fdd1 	bl	8000648 <__aeabi_dmul>
 8010aa6:	a33f      	add	r3, pc, #252	; (adr r3, 8010ba4 <__kernel_sin+0x15c>)
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f7ef fc14 	bl	80002d8 <__aeabi_dsub>
 8010ab0:	4652      	mov	r2, sl
 8010ab2:	465b      	mov	r3, fp
 8010ab4:	f7ef fdc8 	bl	8000648 <__aeabi_dmul>
 8010ab8:	a33c      	add	r3, pc, #240	; (adr r3, 8010bac <__kernel_sin+0x164>)
 8010aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abe:	f7ef fc0d 	bl	80002dc <__adddf3>
 8010ac2:	4652      	mov	r2, sl
 8010ac4:	465b      	mov	r3, fp
 8010ac6:	f7ef fdbf 	bl	8000648 <__aeabi_dmul>
 8010aca:	a33a      	add	r3, pc, #232	; (adr r3, 8010bb4 <__kernel_sin+0x16c>)
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	f7ef fc02 	bl	80002d8 <__aeabi_dsub>
 8010ad4:	4652      	mov	r2, sl
 8010ad6:	465b      	mov	r3, fp
 8010ad8:	f7ef fdb6 	bl	8000648 <__aeabi_dmul>
 8010adc:	a337      	add	r3, pc, #220	; (adr r3, 8010bbc <__kernel_sin+0x174>)
 8010ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae2:	f7ef fbfb 	bl	80002dc <__adddf3>
 8010ae6:	9b01      	ldr	r3, [sp, #4]
 8010ae8:	4606      	mov	r6, r0
 8010aea:	460f      	mov	r7, r1
 8010aec:	b9eb      	cbnz	r3, 8010b2a <__kernel_sin+0xe2>
 8010aee:	4602      	mov	r2, r0
 8010af0:	460b      	mov	r3, r1
 8010af2:	4650      	mov	r0, sl
 8010af4:	4659      	mov	r1, fp
 8010af6:	f7ef fda7 	bl	8000648 <__aeabi_dmul>
 8010afa:	a325      	add	r3, pc, #148	; (adr r3, 8010b90 <__kernel_sin+0x148>)
 8010afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b00:	f7ef fbea 	bl	80002d8 <__aeabi_dsub>
 8010b04:	4642      	mov	r2, r8
 8010b06:	464b      	mov	r3, r9
 8010b08:	f7ef fd9e 	bl	8000648 <__aeabi_dmul>
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	460b      	mov	r3, r1
 8010b10:	4620      	mov	r0, r4
 8010b12:	4629      	mov	r1, r5
 8010b14:	f7ef fbe2 	bl	80002dc <__adddf3>
 8010b18:	4604      	mov	r4, r0
 8010b1a:	460d      	mov	r5, r1
 8010b1c:	ec45 4b10 	vmov	d0, r4, r5
 8010b20:	b003      	add	sp, #12
 8010b22:	ecbd 8b04 	vpop	{d8-d9}
 8010b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2a:	4b1b      	ldr	r3, [pc, #108]	; (8010b98 <__kernel_sin+0x150>)
 8010b2c:	ec51 0b18 	vmov	r0, r1, d8
 8010b30:	2200      	movs	r2, #0
 8010b32:	f7ef fd89 	bl	8000648 <__aeabi_dmul>
 8010b36:	4632      	mov	r2, r6
 8010b38:	ec41 0b19 	vmov	d9, r0, r1
 8010b3c:	463b      	mov	r3, r7
 8010b3e:	4640      	mov	r0, r8
 8010b40:	4649      	mov	r1, r9
 8010b42:	f7ef fd81 	bl	8000648 <__aeabi_dmul>
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	ec51 0b19 	vmov	r0, r1, d9
 8010b4e:	f7ef fbc3 	bl	80002d8 <__aeabi_dsub>
 8010b52:	4652      	mov	r2, sl
 8010b54:	465b      	mov	r3, fp
 8010b56:	f7ef fd77 	bl	8000648 <__aeabi_dmul>
 8010b5a:	ec53 2b18 	vmov	r2, r3, d8
 8010b5e:	f7ef fbbb 	bl	80002d8 <__aeabi_dsub>
 8010b62:	a30b      	add	r3, pc, #44	; (adr r3, 8010b90 <__kernel_sin+0x148>)
 8010b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b68:	4606      	mov	r6, r0
 8010b6a:	460f      	mov	r7, r1
 8010b6c:	4640      	mov	r0, r8
 8010b6e:	4649      	mov	r1, r9
 8010b70:	f7ef fd6a 	bl	8000648 <__aeabi_dmul>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4630      	mov	r0, r6
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	f7ef fbae 	bl	80002dc <__adddf3>
 8010b80:	4602      	mov	r2, r0
 8010b82:	460b      	mov	r3, r1
 8010b84:	4620      	mov	r0, r4
 8010b86:	4629      	mov	r1, r5
 8010b88:	f7ef fba6 	bl	80002d8 <__aeabi_dsub>
 8010b8c:	e7c4      	b.n	8010b18 <__kernel_sin+0xd0>
 8010b8e:	bf00      	nop
 8010b90:	55555549 	.word	0x55555549
 8010b94:	3fc55555 	.word	0x3fc55555
 8010b98:	3fe00000 	.word	0x3fe00000
 8010b9c:	5acfd57c 	.word	0x5acfd57c
 8010ba0:	3de5d93a 	.word	0x3de5d93a
 8010ba4:	8a2b9ceb 	.word	0x8a2b9ceb
 8010ba8:	3e5ae5e6 	.word	0x3e5ae5e6
 8010bac:	57b1fe7d 	.word	0x57b1fe7d
 8010bb0:	3ec71de3 	.word	0x3ec71de3
 8010bb4:	19c161d5 	.word	0x19c161d5
 8010bb8:	3f2a01a0 	.word	0x3f2a01a0
 8010bbc:	1110f8a6 	.word	0x1110f8a6
 8010bc0:	3f811111 	.word	0x3f811111
 8010bc4:	00000000 	.word	0x00000000

08010bc8 <atan>:
 8010bc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bcc:	ec55 4b10 	vmov	r4, r5, d0
 8010bd0:	4bc3      	ldr	r3, [pc, #780]	; (8010ee0 <atan+0x318>)
 8010bd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010bd6:	429e      	cmp	r6, r3
 8010bd8:	46ab      	mov	fp, r5
 8010bda:	dd18      	ble.n	8010c0e <atan+0x46>
 8010bdc:	4bc1      	ldr	r3, [pc, #772]	; (8010ee4 <atan+0x31c>)
 8010bde:	429e      	cmp	r6, r3
 8010be0:	dc01      	bgt.n	8010be6 <atan+0x1e>
 8010be2:	d109      	bne.n	8010bf8 <atan+0x30>
 8010be4:	b144      	cbz	r4, 8010bf8 <atan+0x30>
 8010be6:	4622      	mov	r2, r4
 8010be8:	462b      	mov	r3, r5
 8010bea:	4620      	mov	r0, r4
 8010bec:	4629      	mov	r1, r5
 8010bee:	f7ef fb75 	bl	80002dc <__adddf3>
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	460d      	mov	r5, r1
 8010bf6:	e006      	b.n	8010c06 <atan+0x3e>
 8010bf8:	f1bb 0f00 	cmp.w	fp, #0
 8010bfc:	f300 8131 	bgt.w	8010e62 <atan+0x29a>
 8010c00:	a59b      	add	r5, pc, #620	; (adr r5, 8010e70 <atan+0x2a8>)
 8010c02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c06:	ec45 4b10 	vmov	d0, r4, r5
 8010c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0e:	4bb6      	ldr	r3, [pc, #728]	; (8010ee8 <atan+0x320>)
 8010c10:	429e      	cmp	r6, r3
 8010c12:	dc14      	bgt.n	8010c3e <atan+0x76>
 8010c14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010c18:	429e      	cmp	r6, r3
 8010c1a:	dc0d      	bgt.n	8010c38 <atan+0x70>
 8010c1c:	a396      	add	r3, pc, #600	; (adr r3, 8010e78 <atan+0x2b0>)
 8010c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c22:	ee10 0a10 	vmov	r0, s0
 8010c26:	4629      	mov	r1, r5
 8010c28:	f7ef fb58 	bl	80002dc <__adddf3>
 8010c2c:	4baf      	ldr	r3, [pc, #700]	; (8010eec <atan+0x324>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f7ef ff9a 	bl	8000b68 <__aeabi_dcmpgt>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d1e6      	bne.n	8010c06 <atan+0x3e>
 8010c38:	f04f 3aff 	mov.w	sl, #4294967295
 8010c3c:	e02b      	b.n	8010c96 <atan+0xce>
 8010c3e:	f000 f963 	bl	8010f08 <fabs>
 8010c42:	4bab      	ldr	r3, [pc, #684]	; (8010ef0 <atan+0x328>)
 8010c44:	429e      	cmp	r6, r3
 8010c46:	ec55 4b10 	vmov	r4, r5, d0
 8010c4a:	f300 80bf 	bgt.w	8010dcc <atan+0x204>
 8010c4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010c52:	429e      	cmp	r6, r3
 8010c54:	f300 80a0 	bgt.w	8010d98 <atan+0x1d0>
 8010c58:	ee10 2a10 	vmov	r2, s0
 8010c5c:	ee10 0a10 	vmov	r0, s0
 8010c60:	462b      	mov	r3, r5
 8010c62:	4629      	mov	r1, r5
 8010c64:	f7ef fb3a 	bl	80002dc <__adddf3>
 8010c68:	4ba0      	ldr	r3, [pc, #640]	; (8010eec <atan+0x324>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f7ef fb34 	bl	80002d8 <__aeabi_dsub>
 8010c70:	2200      	movs	r2, #0
 8010c72:	4606      	mov	r6, r0
 8010c74:	460f      	mov	r7, r1
 8010c76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	f7ef fb2d 	bl	80002dc <__adddf3>
 8010c82:	4602      	mov	r2, r0
 8010c84:	460b      	mov	r3, r1
 8010c86:	4630      	mov	r0, r6
 8010c88:	4639      	mov	r1, r7
 8010c8a:	f7ef fe07 	bl	800089c <__aeabi_ddiv>
 8010c8e:	f04f 0a00 	mov.w	sl, #0
 8010c92:	4604      	mov	r4, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	4622      	mov	r2, r4
 8010c98:	462b      	mov	r3, r5
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	f7ef fcd3 	bl	8000648 <__aeabi_dmul>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	4680      	mov	r8, r0
 8010ca8:	4689      	mov	r9, r1
 8010caa:	f7ef fccd 	bl	8000648 <__aeabi_dmul>
 8010cae:	a374      	add	r3, pc, #464	; (adr r3, 8010e80 <atan+0x2b8>)
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	460f      	mov	r7, r1
 8010cb8:	f7ef fcc6 	bl	8000648 <__aeabi_dmul>
 8010cbc:	a372      	add	r3, pc, #456	; (adr r3, 8010e88 <atan+0x2c0>)
 8010cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc2:	f7ef fb0b 	bl	80002dc <__adddf3>
 8010cc6:	4632      	mov	r2, r6
 8010cc8:	463b      	mov	r3, r7
 8010cca:	f7ef fcbd 	bl	8000648 <__aeabi_dmul>
 8010cce:	a370      	add	r3, pc, #448	; (adr r3, 8010e90 <atan+0x2c8>)
 8010cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd4:	f7ef fb02 	bl	80002dc <__adddf3>
 8010cd8:	4632      	mov	r2, r6
 8010cda:	463b      	mov	r3, r7
 8010cdc:	f7ef fcb4 	bl	8000648 <__aeabi_dmul>
 8010ce0:	a36d      	add	r3, pc, #436	; (adr r3, 8010e98 <atan+0x2d0>)
 8010ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce6:	f7ef faf9 	bl	80002dc <__adddf3>
 8010cea:	4632      	mov	r2, r6
 8010cec:	463b      	mov	r3, r7
 8010cee:	f7ef fcab 	bl	8000648 <__aeabi_dmul>
 8010cf2:	a36b      	add	r3, pc, #428	; (adr r3, 8010ea0 <atan+0x2d8>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f7ef faf0 	bl	80002dc <__adddf3>
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	463b      	mov	r3, r7
 8010d00:	f7ef fca2 	bl	8000648 <__aeabi_dmul>
 8010d04:	a368      	add	r3, pc, #416	; (adr r3, 8010ea8 <atan+0x2e0>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	f7ef fae7 	bl	80002dc <__adddf3>
 8010d0e:	4642      	mov	r2, r8
 8010d10:	464b      	mov	r3, r9
 8010d12:	f7ef fc99 	bl	8000648 <__aeabi_dmul>
 8010d16:	a366      	add	r3, pc, #408	; (adr r3, 8010eb0 <atan+0x2e8>)
 8010d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1c:	4680      	mov	r8, r0
 8010d1e:	4689      	mov	r9, r1
 8010d20:	4630      	mov	r0, r6
 8010d22:	4639      	mov	r1, r7
 8010d24:	f7ef fc90 	bl	8000648 <__aeabi_dmul>
 8010d28:	a363      	add	r3, pc, #396	; (adr r3, 8010eb8 <atan+0x2f0>)
 8010d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2e:	f7ef fad3 	bl	80002d8 <__aeabi_dsub>
 8010d32:	4632      	mov	r2, r6
 8010d34:	463b      	mov	r3, r7
 8010d36:	f7ef fc87 	bl	8000648 <__aeabi_dmul>
 8010d3a:	a361      	add	r3, pc, #388	; (adr r3, 8010ec0 <atan+0x2f8>)
 8010d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d40:	f7ef faca 	bl	80002d8 <__aeabi_dsub>
 8010d44:	4632      	mov	r2, r6
 8010d46:	463b      	mov	r3, r7
 8010d48:	f7ef fc7e 	bl	8000648 <__aeabi_dmul>
 8010d4c:	a35e      	add	r3, pc, #376	; (adr r3, 8010ec8 <atan+0x300>)
 8010d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d52:	f7ef fac1 	bl	80002d8 <__aeabi_dsub>
 8010d56:	4632      	mov	r2, r6
 8010d58:	463b      	mov	r3, r7
 8010d5a:	f7ef fc75 	bl	8000648 <__aeabi_dmul>
 8010d5e:	a35c      	add	r3, pc, #368	; (adr r3, 8010ed0 <atan+0x308>)
 8010d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d64:	f7ef fab8 	bl	80002d8 <__aeabi_dsub>
 8010d68:	4632      	mov	r2, r6
 8010d6a:	463b      	mov	r3, r7
 8010d6c:	f7ef fc6c 	bl	8000648 <__aeabi_dmul>
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	4640      	mov	r0, r8
 8010d76:	4649      	mov	r1, r9
 8010d78:	f7ef fab0 	bl	80002dc <__adddf3>
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	462b      	mov	r3, r5
 8010d80:	f7ef fc62 	bl	8000648 <__aeabi_dmul>
 8010d84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	d14b      	bne.n	8010e26 <atan+0x25e>
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef faa1 	bl	80002d8 <__aeabi_dsub>
 8010d96:	e72c      	b.n	8010bf2 <atan+0x2a>
 8010d98:	ee10 0a10 	vmov	r0, s0
 8010d9c:	4b53      	ldr	r3, [pc, #332]	; (8010eec <atan+0x324>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	4629      	mov	r1, r5
 8010da2:	f7ef fa99 	bl	80002d8 <__aeabi_dsub>
 8010da6:	4b51      	ldr	r3, [pc, #324]	; (8010eec <atan+0x324>)
 8010da8:	4606      	mov	r6, r0
 8010daa:	460f      	mov	r7, r1
 8010dac:	2200      	movs	r2, #0
 8010dae:	4620      	mov	r0, r4
 8010db0:	4629      	mov	r1, r5
 8010db2:	f7ef fa93 	bl	80002dc <__adddf3>
 8010db6:	4602      	mov	r2, r0
 8010db8:	460b      	mov	r3, r1
 8010dba:	4630      	mov	r0, r6
 8010dbc:	4639      	mov	r1, r7
 8010dbe:	f7ef fd6d 	bl	800089c <__aeabi_ddiv>
 8010dc2:	f04f 0a01 	mov.w	sl, #1
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	460d      	mov	r5, r1
 8010dca:	e764      	b.n	8010c96 <atan+0xce>
 8010dcc:	4b49      	ldr	r3, [pc, #292]	; (8010ef4 <atan+0x32c>)
 8010dce:	429e      	cmp	r6, r3
 8010dd0:	da1d      	bge.n	8010e0e <atan+0x246>
 8010dd2:	ee10 0a10 	vmov	r0, s0
 8010dd6:	4b48      	ldr	r3, [pc, #288]	; (8010ef8 <atan+0x330>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	4629      	mov	r1, r5
 8010ddc:	f7ef fa7c 	bl	80002d8 <__aeabi_dsub>
 8010de0:	4b45      	ldr	r3, [pc, #276]	; (8010ef8 <atan+0x330>)
 8010de2:	4606      	mov	r6, r0
 8010de4:	460f      	mov	r7, r1
 8010de6:	2200      	movs	r2, #0
 8010de8:	4620      	mov	r0, r4
 8010dea:	4629      	mov	r1, r5
 8010dec:	f7ef fc2c 	bl	8000648 <__aeabi_dmul>
 8010df0:	4b3e      	ldr	r3, [pc, #248]	; (8010eec <atan+0x324>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	f7ef fa72 	bl	80002dc <__adddf3>
 8010df8:	4602      	mov	r2, r0
 8010dfa:	460b      	mov	r3, r1
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	4639      	mov	r1, r7
 8010e00:	f7ef fd4c 	bl	800089c <__aeabi_ddiv>
 8010e04:	f04f 0a02 	mov.w	sl, #2
 8010e08:	4604      	mov	r4, r0
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	e743      	b.n	8010c96 <atan+0xce>
 8010e0e:	462b      	mov	r3, r5
 8010e10:	ee10 2a10 	vmov	r2, s0
 8010e14:	4939      	ldr	r1, [pc, #228]	; (8010efc <atan+0x334>)
 8010e16:	2000      	movs	r0, #0
 8010e18:	f7ef fd40 	bl	800089c <__aeabi_ddiv>
 8010e1c:	f04f 0a03 	mov.w	sl, #3
 8010e20:	4604      	mov	r4, r0
 8010e22:	460d      	mov	r5, r1
 8010e24:	e737      	b.n	8010c96 <atan+0xce>
 8010e26:	4b36      	ldr	r3, [pc, #216]	; (8010f00 <atan+0x338>)
 8010e28:	4e36      	ldr	r6, [pc, #216]	; (8010f04 <atan+0x33c>)
 8010e2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010e2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010e32:	e9da 2300 	ldrd	r2, r3, [sl]
 8010e36:	f7ef fa4f 	bl	80002d8 <__aeabi_dsub>
 8010e3a:	4622      	mov	r2, r4
 8010e3c:	462b      	mov	r3, r5
 8010e3e:	f7ef fa4b 	bl	80002d8 <__aeabi_dsub>
 8010e42:	4602      	mov	r2, r0
 8010e44:	460b      	mov	r3, r1
 8010e46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010e4a:	f7ef fa45 	bl	80002d8 <__aeabi_dsub>
 8010e4e:	f1bb 0f00 	cmp.w	fp, #0
 8010e52:	4604      	mov	r4, r0
 8010e54:	460d      	mov	r5, r1
 8010e56:	f6bf aed6 	bge.w	8010c06 <atan+0x3e>
 8010e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e5e:	461d      	mov	r5, r3
 8010e60:	e6d1      	b.n	8010c06 <atan+0x3e>
 8010e62:	a51d      	add	r5, pc, #116	; (adr r5, 8010ed8 <atan+0x310>)
 8010e64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e68:	e6cd      	b.n	8010c06 <atan+0x3e>
 8010e6a:	bf00      	nop
 8010e6c:	f3af 8000 	nop.w
 8010e70:	54442d18 	.word	0x54442d18
 8010e74:	bff921fb 	.word	0xbff921fb
 8010e78:	8800759c 	.word	0x8800759c
 8010e7c:	7e37e43c 	.word	0x7e37e43c
 8010e80:	e322da11 	.word	0xe322da11
 8010e84:	3f90ad3a 	.word	0x3f90ad3a
 8010e88:	24760deb 	.word	0x24760deb
 8010e8c:	3fa97b4b 	.word	0x3fa97b4b
 8010e90:	a0d03d51 	.word	0xa0d03d51
 8010e94:	3fb10d66 	.word	0x3fb10d66
 8010e98:	c54c206e 	.word	0xc54c206e
 8010e9c:	3fb745cd 	.word	0x3fb745cd
 8010ea0:	920083ff 	.word	0x920083ff
 8010ea4:	3fc24924 	.word	0x3fc24924
 8010ea8:	5555550d 	.word	0x5555550d
 8010eac:	3fd55555 	.word	0x3fd55555
 8010eb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010eb4:	bfa2b444 	.word	0xbfa2b444
 8010eb8:	52defd9a 	.word	0x52defd9a
 8010ebc:	3fadde2d 	.word	0x3fadde2d
 8010ec0:	af749a6d 	.word	0xaf749a6d
 8010ec4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010ec8:	fe231671 	.word	0xfe231671
 8010ecc:	3fbc71c6 	.word	0x3fbc71c6
 8010ed0:	9998ebc4 	.word	0x9998ebc4
 8010ed4:	3fc99999 	.word	0x3fc99999
 8010ed8:	54442d18 	.word	0x54442d18
 8010edc:	3ff921fb 	.word	0x3ff921fb
 8010ee0:	440fffff 	.word	0x440fffff
 8010ee4:	7ff00000 	.word	0x7ff00000
 8010ee8:	3fdbffff 	.word	0x3fdbffff
 8010eec:	3ff00000 	.word	0x3ff00000
 8010ef0:	3ff2ffff 	.word	0x3ff2ffff
 8010ef4:	40038000 	.word	0x40038000
 8010ef8:	3ff80000 	.word	0x3ff80000
 8010efc:	bff00000 	.word	0xbff00000
 8010f00:	08011ad8 	.word	0x08011ad8
 8010f04:	08011ab8 	.word	0x08011ab8

08010f08 <fabs>:
 8010f08:	ec51 0b10 	vmov	r0, r1, d0
 8010f0c:	ee10 2a10 	vmov	r2, s0
 8010f10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f14:	ec43 2b10 	vmov	d0, r2, r3
 8010f18:	4770      	bx	lr

08010f1a <finite>:
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	ed8d 0b00 	vstr	d0, [sp]
 8010f20:	9801      	ldr	r0, [sp, #4]
 8010f22:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010f26:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f2a:	0fc0      	lsrs	r0, r0, #31
 8010f2c:	b002      	add	sp, #8
 8010f2e:	4770      	bx	lr

08010f30 <floor>:
 8010f30:	ec51 0b10 	vmov	r0, r1, d0
 8010f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010f3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010f40:	2e13      	cmp	r6, #19
 8010f42:	ee10 5a10 	vmov	r5, s0
 8010f46:	ee10 8a10 	vmov	r8, s0
 8010f4a:	460c      	mov	r4, r1
 8010f4c:	dc32      	bgt.n	8010fb4 <floor+0x84>
 8010f4e:	2e00      	cmp	r6, #0
 8010f50:	da14      	bge.n	8010f7c <floor+0x4c>
 8010f52:	a333      	add	r3, pc, #204	; (adr r3, 8011020 <floor+0xf0>)
 8010f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f58:	f7ef f9c0 	bl	80002dc <__adddf3>
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	2300      	movs	r3, #0
 8010f60:	f7ef fe02 	bl	8000b68 <__aeabi_dcmpgt>
 8010f64:	b138      	cbz	r0, 8010f76 <floor+0x46>
 8010f66:	2c00      	cmp	r4, #0
 8010f68:	da57      	bge.n	801101a <floor+0xea>
 8010f6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010f6e:	431d      	orrs	r5, r3
 8010f70:	d001      	beq.n	8010f76 <floor+0x46>
 8010f72:	4c2d      	ldr	r4, [pc, #180]	; (8011028 <floor+0xf8>)
 8010f74:	2500      	movs	r5, #0
 8010f76:	4621      	mov	r1, r4
 8010f78:	4628      	mov	r0, r5
 8010f7a:	e025      	b.n	8010fc8 <floor+0x98>
 8010f7c:	4f2b      	ldr	r7, [pc, #172]	; (801102c <floor+0xfc>)
 8010f7e:	4137      	asrs	r7, r6
 8010f80:	ea01 0307 	and.w	r3, r1, r7
 8010f84:	4303      	orrs	r3, r0
 8010f86:	d01f      	beq.n	8010fc8 <floor+0x98>
 8010f88:	a325      	add	r3, pc, #148	; (adr r3, 8011020 <floor+0xf0>)
 8010f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8e:	f7ef f9a5 	bl	80002dc <__adddf3>
 8010f92:	2200      	movs	r2, #0
 8010f94:	2300      	movs	r3, #0
 8010f96:	f7ef fde7 	bl	8000b68 <__aeabi_dcmpgt>
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	d0eb      	beq.n	8010f76 <floor+0x46>
 8010f9e:	2c00      	cmp	r4, #0
 8010fa0:	bfbe      	ittt	lt
 8010fa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010fa6:	fa43 f606 	asrlt.w	r6, r3, r6
 8010faa:	19a4      	addlt	r4, r4, r6
 8010fac:	ea24 0407 	bic.w	r4, r4, r7
 8010fb0:	2500      	movs	r5, #0
 8010fb2:	e7e0      	b.n	8010f76 <floor+0x46>
 8010fb4:	2e33      	cmp	r6, #51	; 0x33
 8010fb6:	dd0b      	ble.n	8010fd0 <floor+0xa0>
 8010fb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010fbc:	d104      	bne.n	8010fc8 <floor+0x98>
 8010fbe:	ee10 2a10 	vmov	r2, s0
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	f7ef f98a 	bl	80002dc <__adddf3>
 8010fc8:	ec41 0b10 	vmov	d0, r0, r1
 8010fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010fd8:	fa23 f707 	lsr.w	r7, r3, r7
 8010fdc:	4207      	tst	r7, r0
 8010fde:	d0f3      	beq.n	8010fc8 <floor+0x98>
 8010fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8011020 <floor+0xf0>)
 8010fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe6:	f7ef f979 	bl	80002dc <__adddf3>
 8010fea:	2200      	movs	r2, #0
 8010fec:	2300      	movs	r3, #0
 8010fee:	f7ef fdbb 	bl	8000b68 <__aeabi_dcmpgt>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d0bf      	beq.n	8010f76 <floor+0x46>
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	da02      	bge.n	8011000 <floor+0xd0>
 8010ffa:	2e14      	cmp	r6, #20
 8010ffc:	d103      	bne.n	8011006 <floor+0xd6>
 8010ffe:	3401      	adds	r4, #1
 8011000:	ea25 0507 	bic.w	r5, r5, r7
 8011004:	e7b7      	b.n	8010f76 <floor+0x46>
 8011006:	2301      	movs	r3, #1
 8011008:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801100c:	fa03 f606 	lsl.w	r6, r3, r6
 8011010:	4435      	add	r5, r6
 8011012:	4545      	cmp	r5, r8
 8011014:	bf38      	it	cc
 8011016:	18e4      	addcc	r4, r4, r3
 8011018:	e7f2      	b.n	8011000 <floor+0xd0>
 801101a:	2500      	movs	r5, #0
 801101c:	462c      	mov	r4, r5
 801101e:	e7aa      	b.n	8010f76 <floor+0x46>
 8011020:	8800759c 	.word	0x8800759c
 8011024:	7e37e43c 	.word	0x7e37e43c
 8011028:	bff00000 	.word	0xbff00000
 801102c:	000fffff 	.word	0x000fffff

08011030 <nan>:
 8011030:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011038 <nan+0x8>
 8011034:	4770      	bx	lr
 8011036:	bf00      	nop
 8011038:	00000000 	.word	0x00000000
 801103c:	7ff80000 	.word	0x7ff80000

08011040 <rint>:
 8011040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011042:	ec51 0b10 	vmov	r0, r1, d0
 8011046:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801104a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801104e:	2e13      	cmp	r6, #19
 8011050:	ee10 4a10 	vmov	r4, s0
 8011054:	460b      	mov	r3, r1
 8011056:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801105a:	dc58      	bgt.n	801110e <rint+0xce>
 801105c:	2e00      	cmp	r6, #0
 801105e:	da2b      	bge.n	80110b8 <rint+0x78>
 8011060:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011064:	4302      	orrs	r2, r0
 8011066:	d023      	beq.n	80110b0 <rint+0x70>
 8011068:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801106c:	4302      	orrs	r2, r0
 801106e:	4254      	negs	r4, r2
 8011070:	4314      	orrs	r4, r2
 8011072:	0c4b      	lsrs	r3, r1, #17
 8011074:	0b24      	lsrs	r4, r4, #12
 8011076:	045b      	lsls	r3, r3, #17
 8011078:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801107c:	ea44 0103 	orr.w	r1, r4, r3
 8011080:	4b32      	ldr	r3, [pc, #200]	; (801114c <rint+0x10c>)
 8011082:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011086:	e9d3 6700 	ldrd	r6, r7, [r3]
 801108a:	4602      	mov	r2, r0
 801108c:	460b      	mov	r3, r1
 801108e:	4630      	mov	r0, r6
 8011090:	4639      	mov	r1, r7
 8011092:	f7ef f923 	bl	80002dc <__adddf3>
 8011096:	e9cd 0100 	strd	r0, r1, [sp]
 801109a:	463b      	mov	r3, r7
 801109c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80110a0:	4632      	mov	r2, r6
 80110a2:	f7ef f919 	bl	80002d8 <__aeabi_dsub>
 80110a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80110ae:	4639      	mov	r1, r7
 80110b0:	ec41 0b10 	vmov	d0, r0, r1
 80110b4:	b003      	add	sp, #12
 80110b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b8:	4a25      	ldr	r2, [pc, #148]	; (8011150 <rint+0x110>)
 80110ba:	4132      	asrs	r2, r6
 80110bc:	ea01 0702 	and.w	r7, r1, r2
 80110c0:	4307      	orrs	r7, r0
 80110c2:	d0f5      	beq.n	80110b0 <rint+0x70>
 80110c4:	0851      	lsrs	r1, r2, #1
 80110c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80110ca:	4314      	orrs	r4, r2
 80110cc:	d00c      	beq.n	80110e8 <rint+0xa8>
 80110ce:	ea23 0201 	bic.w	r2, r3, r1
 80110d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80110d6:	2e13      	cmp	r6, #19
 80110d8:	fa43 f606 	asr.w	r6, r3, r6
 80110dc:	bf0c      	ite	eq
 80110de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80110e2:	2400      	movne	r4, #0
 80110e4:	ea42 0306 	orr.w	r3, r2, r6
 80110e8:	4918      	ldr	r1, [pc, #96]	; (801114c <rint+0x10c>)
 80110ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80110ee:	4622      	mov	r2, r4
 80110f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80110f4:	4620      	mov	r0, r4
 80110f6:	4629      	mov	r1, r5
 80110f8:	f7ef f8f0 	bl	80002dc <__adddf3>
 80110fc:	e9cd 0100 	strd	r0, r1, [sp]
 8011100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011104:	4622      	mov	r2, r4
 8011106:	462b      	mov	r3, r5
 8011108:	f7ef f8e6 	bl	80002d8 <__aeabi_dsub>
 801110c:	e7d0      	b.n	80110b0 <rint+0x70>
 801110e:	2e33      	cmp	r6, #51	; 0x33
 8011110:	dd07      	ble.n	8011122 <rint+0xe2>
 8011112:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011116:	d1cb      	bne.n	80110b0 <rint+0x70>
 8011118:	ee10 2a10 	vmov	r2, s0
 801111c:	f7ef f8de 	bl	80002dc <__adddf3>
 8011120:	e7c6      	b.n	80110b0 <rint+0x70>
 8011122:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011126:	f04f 36ff 	mov.w	r6, #4294967295
 801112a:	40d6      	lsrs	r6, r2
 801112c:	4230      	tst	r0, r6
 801112e:	d0bf      	beq.n	80110b0 <rint+0x70>
 8011130:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011134:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011138:	bf1f      	itttt	ne
 801113a:	ea24 0101 	bicne.w	r1, r4, r1
 801113e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011142:	fa44 f202 	asrne.w	r2, r4, r2
 8011146:	ea41 0402 	orrne.w	r4, r1, r2
 801114a:	e7cd      	b.n	80110e8 <rint+0xa8>
 801114c:	08011af8 	.word	0x08011af8
 8011150:	000fffff 	.word	0x000fffff
 8011154:	00000000 	.word	0x00000000

08011158 <scalbn>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	ec55 4b10 	vmov	r4, r5, d0
 801115e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011162:	4606      	mov	r6, r0
 8011164:	462b      	mov	r3, r5
 8011166:	b99a      	cbnz	r2, 8011190 <scalbn+0x38>
 8011168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801116c:	4323      	orrs	r3, r4
 801116e:	d036      	beq.n	80111de <scalbn+0x86>
 8011170:	4b39      	ldr	r3, [pc, #228]	; (8011258 <scalbn+0x100>)
 8011172:	4629      	mov	r1, r5
 8011174:	ee10 0a10 	vmov	r0, s0
 8011178:	2200      	movs	r2, #0
 801117a:	f7ef fa65 	bl	8000648 <__aeabi_dmul>
 801117e:	4b37      	ldr	r3, [pc, #220]	; (801125c <scalbn+0x104>)
 8011180:	429e      	cmp	r6, r3
 8011182:	4604      	mov	r4, r0
 8011184:	460d      	mov	r5, r1
 8011186:	da10      	bge.n	80111aa <scalbn+0x52>
 8011188:	a32b      	add	r3, pc, #172	; (adr r3, 8011238 <scalbn+0xe0>)
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	e03a      	b.n	8011206 <scalbn+0xae>
 8011190:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011194:	428a      	cmp	r2, r1
 8011196:	d10c      	bne.n	80111b2 <scalbn+0x5a>
 8011198:	ee10 2a10 	vmov	r2, s0
 801119c:	4620      	mov	r0, r4
 801119e:	4629      	mov	r1, r5
 80111a0:	f7ef f89c 	bl	80002dc <__adddf3>
 80111a4:	4604      	mov	r4, r0
 80111a6:	460d      	mov	r5, r1
 80111a8:	e019      	b.n	80111de <scalbn+0x86>
 80111aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80111ae:	460b      	mov	r3, r1
 80111b0:	3a36      	subs	r2, #54	; 0x36
 80111b2:	4432      	add	r2, r6
 80111b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80111b8:	428a      	cmp	r2, r1
 80111ba:	dd08      	ble.n	80111ce <scalbn+0x76>
 80111bc:	2d00      	cmp	r5, #0
 80111be:	a120      	add	r1, pc, #128	; (adr r1, 8011240 <scalbn+0xe8>)
 80111c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111c4:	da1c      	bge.n	8011200 <scalbn+0xa8>
 80111c6:	a120      	add	r1, pc, #128	; (adr r1, 8011248 <scalbn+0xf0>)
 80111c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111cc:	e018      	b.n	8011200 <scalbn+0xa8>
 80111ce:	2a00      	cmp	r2, #0
 80111d0:	dd08      	ble.n	80111e4 <scalbn+0x8c>
 80111d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80111de:	ec45 4b10 	vmov	d0, r4, r5
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
 80111e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80111e8:	da19      	bge.n	801121e <scalbn+0xc6>
 80111ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80111ee:	429e      	cmp	r6, r3
 80111f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80111f4:	dd0a      	ble.n	801120c <scalbn+0xb4>
 80111f6:	a112      	add	r1, pc, #72	; (adr r1, 8011240 <scalbn+0xe8>)
 80111f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1e2      	bne.n	80111c6 <scalbn+0x6e>
 8011200:	a30f      	add	r3, pc, #60	; (adr r3, 8011240 <scalbn+0xe8>)
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f7ef fa1f 	bl	8000648 <__aeabi_dmul>
 801120a:	e7cb      	b.n	80111a4 <scalbn+0x4c>
 801120c:	a10a      	add	r1, pc, #40	; (adr r1, 8011238 <scalbn+0xe0>)
 801120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d0b8      	beq.n	8011188 <scalbn+0x30>
 8011216:	a10e      	add	r1, pc, #56	; (adr r1, 8011250 <scalbn+0xf8>)
 8011218:	e9d1 0100 	ldrd	r0, r1, [r1]
 801121c:	e7b4      	b.n	8011188 <scalbn+0x30>
 801121e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011222:	3236      	adds	r2, #54	; 0x36
 8011224:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011228:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801122c:	4620      	mov	r0, r4
 801122e:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <scalbn+0x108>)
 8011230:	2200      	movs	r2, #0
 8011232:	e7e8      	b.n	8011206 <scalbn+0xae>
 8011234:	f3af 8000 	nop.w
 8011238:	c2f8f359 	.word	0xc2f8f359
 801123c:	01a56e1f 	.word	0x01a56e1f
 8011240:	8800759c 	.word	0x8800759c
 8011244:	7e37e43c 	.word	0x7e37e43c
 8011248:	8800759c 	.word	0x8800759c
 801124c:	fe37e43c 	.word	0xfe37e43c
 8011250:	c2f8f359 	.word	0xc2f8f359
 8011254:	81a56e1f 	.word	0x81a56e1f
 8011258:	43500000 	.word	0x43500000
 801125c:	ffff3cb0 	.word	0xffff3cb0
 8011260:	3c900000 	.word	0x3c900000

08011264 <_init>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	bf00      	nop
 8011268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126a:	bc08      	pop	{r3}
 801126c:	469e      	mov	lr, r3
 801126e:	4770      	bx	lr

08011270 <_fini>:
 8011270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011272:	bf00      	nop
 8011274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011276:	bc08      	pop	{r3}
 8011278:	469e      	mov	lr, r3
 801127a:	4770      	bx	lr
