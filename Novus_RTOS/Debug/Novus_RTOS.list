
Novus_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e884  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800ea68  0800ea68  0001ea68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f100  0800f100  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f100  0800f100  0001f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f108  0800f108  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f108  0800f108  0001f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f10c  0800f10c  0001f10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e84  200001e0  0800f2f0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003064  0800f2f0  00023064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b482  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e0  00000000  00000000  0004b692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00050978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b50  00000000  00000000  000526c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bb6  00000000  00000000  00054210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206e2  00000000  00000000  0005adc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5181  00000000  00000000  0007b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ccc  00000000  00000000  0015067c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ea4c 	.word	0x0800ea4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ea4c 	.word	0x0800ea4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f94:	f002 f96b 	bl	800326e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f98:	f000 f85c 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9c:	f000 fa78 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa0:	f000 fa4c 	bl	800143c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fa4:	f000 f9fe 	bl	80013a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000fa8:	f000 f9a8 	bl	80012fc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000fac:	f000 f8f6 	bl	800119c <MX_TIM1_Init>
  MX_SPI3_Init();
 8000fb0:	f000 f8b6 	bl	8001120 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  as5147_Init(&hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fba:	4819      	ldr	r0, [pc, #100]	; (8001020 <main+0x90>)
 8000fbc:	f001 fc1a 	bl	80027f4 <as5147_Init>
  as5147_setZeroPosition();
 8000fc0:	f001 fc40 	bl	8002844 <as5147_setZeroPosition>
  setOffset(&motor);
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <main+0x94>)
 8000fc6:	f001 fedf 	bl	8002d88 <setOffset>

  controllerInit(&htim1);
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <main+0x98>)
 8000fcc:	f000 ff00 	bl	8001dd0 <controllerInit>

  transpc_index = 0;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <main+0x9c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd6:	f007 f935 	bl	8008244 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of tmtcTimer */
  tmtcTimerHandle = osTimerNew(tmtcTimerCallback, osTimerPeriodic, NULL, &tmtcTimer_attributes);
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <main+0xa0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0xa4>)
 8000fe2:	f007 fa3b 	bl	800845c <osTimerNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <main+0xa8>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(tmtcTimerHandle, 5);
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <main+0xa8>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f007 faae 	bl	8008554 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mControllerTask */
  mControllerTaskHandle = osThreadNew(StartControllerTask, NULL, &mControllerTask_attributes);
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <main+0xac>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <main+0xb0>)
 8000ffe:	f007 f96b 	bl	80082d8 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <main+0xb4>)
 8001006:	6013      	str	r3, [r2, #0]

  /* creation of updateEncoderTa */
  updateEncoderTaHandle = osThreadNew(StartEncoderTask, NULL, &updateEncoderTa_attributes);
 8001008:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <main+0xb8>)
 800100a:	2100      	movs	r1, #0
 800100c:	480f      	ldr	r0, [pc, #60]	; (800104c <main+0xbc>)
 800100e:	f007 f963 	bl	80082d8 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <main+0xc0>)
 8001016:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001018:	f007 f938 	bl	800828c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x8c>
 800101e:	bf00      	nop
 8001020:	20002780 	.word	0x20002780
 8001024:	20002c68 	.word	0x20002c68
 8001028:	20002b94 	.word	0x20002b94
 800102c:	2000274e 	.word	0x2000274e
 8001030:	0800eaf4 	.word	0x0800eaf4
 8001034:	080016fd 	.word	0x080016fd
 8001038:	20002c44 	.word	0x20002c44
 800103c:	0800eaac 	.word	0x0800eaac
 8001040:	08001545 	.word	0x08001545
 8001044:	20002b90 	.word	0x20002b90
 8001048:	0800ead0 	.word	0x0800ead0
 800104c:	08001699 	.word	0x08001699
 8001050:	200027e8 	.word	0x200027e8

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0a4      	sub	sp, #144	; 0x90
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105e:	2238      	movs	r2, #56	; 0x38
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f009 fff2 	bl	800b04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2244      	movs	r2, #68	; 0x44
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f009 ffe4 	bl	800b04c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001084:	2000      	movs	r0, #0
 8001086:	f002 fe37 	bl	8003cf8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108a:	2302      	movs	r3, #2
 800108c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001092:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2340      	movs	r3, #64	; 0x40
 8001096:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010a0:	2304      	movs	r3, #4
 80010a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010a4:	2355      	movs	r3, #85	; 0x55
 80010a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fecd 	bl	8003e60 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80010cc:	f000 fb82 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2303      	movs	r3, #3
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e8:	2104      	movs	r1, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 f9d0 	bl	8004490 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010f6:	f000 fb6d 	bl	80017d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80010fa:	2303      	movs	r3, #3
 80010fc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fc0f 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001114:	f000 fb5e 	bl	80017d4 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3790      	adds	r7, #144	; 0x90
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <MX_SPI3_Init+0x74>)
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <MX_SPI3_Init+0x78>)
 8001128:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_SPI3_Init+0x74>)
 800112c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001130:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_SPI3_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI3_Init+0x74>)
 800113a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800113e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI3_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_SPI3_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI3_Init+0x74>)
 800114e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001152:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI3_Init+0x74>)
 8001156:	2210      	movs	r2, #16
 8001158:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI3_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI3_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_SPI3_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI3_Init+0x74>)
 800116e:	2207      	movs	r2, #7
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_SPI3_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_SPI3_Init+0x74>)
 8001180:	f003 fdc4 	bl	8004d0c <HAL_SPI_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 fb23 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20002780 	.word	0x20002780
 8001198:	40003c00 	.word	0x40003c00

0800119c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b09c      	sub	sp, #112	; 0x70
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]
 80011ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	2234      	movs	r2, #52	; 0x34
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f009 ff38 	bl	800b04c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011de:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <MX_TIM1_Init+0x15c>)
 80011e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011e4:	22a9      	movs	r2, #169	; 0xa9
 80011e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2499;
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011f0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80011f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x158>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001202:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_TIM1_Init+0x158>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001208:	483a      	ldr	r0, [pc, #232]	; (80012f4 <MX_TIM1_Init+0x158>)
 800120a:	f004 fc93 	bl	8005b34 <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001214:	f000 fade 	bl	80017d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001222:	4619      	mov	r1, r3
 8001224:	4833      	ldr	r0, [pc, #204]	; (80012f4 <MX_TIM1_Init+0x158>)
 8001226:	f005 f939 	bl	800649c <HAL_TIM_ConfigClockSource>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001230:	f000 fad0 	bl	80017d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001234:	482f      	ldr	r0, [pc, #188]	; (80012f4 <MX_TIM1_Init+0x158>)
 8001236:	f004 fd3f 	bl	8005cb8 <HAL_TIM_PWM_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001240:	f000 fac8 	bl	80017d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001254:	4619      	mov	r1, r3
 8001256:	4827      	ldr	r0, [pc, #156]	; (80012f4 <MX_TIM1_Init+0x158>)
 8001258:	f005 fe86 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001262:	f000 fab7 	bl	80017d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	; 0x60
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001272:	2300      	movs	r3, #0
 8001274:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001282:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MX_TIM1_Init+0x158>)
 800128c:	f004 fff6 	bl	800627c <HAL_TIM_PWM_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001296:	f000 fa9d 	bl	80017d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM1_Init+0x158>)
 80012d8:	f005 fec8 	bl	800706c <HAL_TIMEx_ConfigBreakDeadTime>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80012e2:	f000 fa77 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM1_Init+0x158>)
 80012e8:	f000 fb08 	bl	80018fc <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3770      	adds	r7, #112	; 0x70
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20002b94 	.word	0x20002b94
 80012f8:	40012c00 	.word	0x40012c00

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <MX_USART1_UART_Init+0xa0>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001344:	4814      	ldr	r0, [pc, #80]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001346:	f005 ff77 	bl	8007238 <HAL_UART_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001350:	f000 fa40 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4810      	ldr	r0, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 8001358:	f006 fe66 	bl	8008028 <HAL_UARTEx_SetTxFifoThreshold>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001362:	f000 fa37 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001366:	2100      	movs	r1, #0
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800136a:	f006 fe9b 	bl	80080a4 <HAL_UARTEx_SetRxFifoThreshold>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001374:	f000 fa2e 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800137a:	f006 fe1c 	bl	8007fb6 <HAL_UARTEx_DisableFifoMode>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001384:	f000 fa26 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 8001388:	2210      	movs	r2, #16
 800138a:	4905      	ldr	r1, [pc, #20]	; (80013a0 <MX_USART1_UART_Init+0xa4>)
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <MX_USART1_UART_Init+0x9c>)
 800138e:	f006 f839 	bl	8007404 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20002850 	.word	0x20002850
 800139c:	40013800 	.word	0x40013800
 80013a0:	20002738 	.word	0x20002738

080013a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013aa:	4a23      	ldr	r2, [pc, #140]	; (8001438 <MX_USART2_UART_Init+0x94>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ae:	4b21      	ldr	r3, [pc, #132]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	4811      	ldr	r0, [pc, #68]	; (8001434 <MX_USART2_UART_Init+0x90>)
 80013ee:	f005 ff23 	bl	8007238 <HAL_UART_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013f8:	f000 f9ec 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	480d      	ldr	r0, [pc, #52]	; (8001434 <MX_USART2_UART_Init+0x90>)
 8001400:	f006 fe12 	bl	8008028 <HAL_UARTEx_SetTxFifoThreshold>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800140a:	f000 f9e3 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	4808      	ldr	r0, [pc, #32]	; (8001434 <MX_USART2_UART_Init+0x90>)
 8001412:	f006 fe47 	bl	80080a4 <HAL_UARTEx_SetRxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 f9da 	bl	80017d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_USART2_UART_Init+0x90>)
 8001422:	f006 fdc8 	bl	8007fb6 <HAL_UARTEx_DisableFifoMode>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800142c:	f000 f9d2 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20002c94 	.word	0x20002c94
 8001438:	40004400 	.word	0x40004400

0800143c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_DMA_Init+0x50>)
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <MX_DMA_Init+0x50>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6493      	str	r3, [r2, #72]	; 0x48
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_DMA_Init+0x50>)
 8001450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_DMA_Init+0x50>)
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <MX_DMA_Init+0x50>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6493      	str	r3, [r2, #72]	; 0x48
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_DMA_Init+0x50>)
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	200b      	movs	r0, #11
 8001478:	f002 f80a 	bl	8003490 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800147c:	200b      	movs	r0, #11
 800147e:	f002 f821 	bl	80034c4 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_GPIO_Init+0x78>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a17      	ldr	r2, [pc, #92]	; (8001508 <MX_GPIO_Init+0x78>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_GPIO_Init+0x78>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_GPIO_Init+0x78>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <MX_GPIO_Init+0x78>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_GPIO_Init+0x78>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2102      	movs	r1, #2
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f002 fbf3 	bl	8003cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80014e2:	2302      	movs	r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f002 fa62 	bl	80039c4 <HAL_GPIO_Init>

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huartx){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	if(huartx->Instance == huart1.Instance){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_UART_RxCpltCallback+0x2c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_UART_RxCpltCallback+0x24>
		spectrum_read(&rc);
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_UART_RxCpltCallback+0x30>)
 8001522:	f001 f8f3 	bl	800270c <spectrum_read>
		HAL_UART_Receive_DMA(&huart1, rc_byte_data, 16);
 8001526:	2210      	movs	r2, #16
 8001528:	4905      	ldr	r1, [pc, #20]	; (8001540 <HAL_UART_RxCpltCallback+0x34>)
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <HAL_UART_RxCpltCallback+0x2c>)
 800152c:	f005 ff6a 	bl	8007404 <HAL_UART_Receive_DMA>
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20002850 	.word	0x20002850
 800153c:	20002728 	.word	0x20002728
 8001540:	20002738 	.word	0x20002738

08001544 <StartControllerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void *argument)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b08f      	sub	sp, #60	; 0x3c
 8001548:	af0c      	add	r7, sp, #48	; 0x30
 800154a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;){
	 start_time = HAL_GetTick();
 800154c:	f001 feba 	bl	80032c4 <HAL_GetTick>
 8001550:	4603      	mov	r3, r0
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b49      	ldr	r3, [pc, #292]	; (800167c <StartControllerTask+0x138>)
 8001556:	801a      	strh	r2, [r3, #0]
	 setpoint_value = setpoint(rc, motor);
 8001558:	4e49      	ldr	r6, [pc, #292]	; (8001680 <StartControllerTask+0x13c>)
 800155a:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <StartControllerTask+0x140>)
 800155c:	466c      	mov	r4, sp
 800155e:	461d      	mov	r5, r3
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001570:	6833      	ldr	r3, [r6, #0]
 8001572:	2000      	movs	r0, #0
 8001574:	4618      	mov	r0, r3
 8001576:	6873      	ldr	r3, [r6, #4]
 8001578:	2100      	movs	r1, #0
 800157a:	4619      	mov	r1, r3
 800157c:	68b3      	ldr	r3, [r6, #8]
 800157e:	2400      	movs	r4, #0
 8001580:	461c      	mov	r4, r3
 8001582:	89b2      	ldrh	r2, [r6, #12]
 8001584:	2300      	movs	r3, #0
 8001586:	f362 030f 	bfi	r3, r2, #0, #16
 800158a:	4622      	mov	r2, r4
 800158c:	f000 fedf 	bl	800234e <setpoint>
 8001590:	eeb0 6a40 	vmov.f32	s12, s0
 8001594:	eef0 6a60 	vmov.f32	s13, s1
 8001598:	eeb0 7a41 	vmov.f32	s14, s2
 800159c:	eef0 7a61 	vmov.f32	s15, s3
 80015a0:	4b39      	ldr	r3, [pc, #228]	; (8001688 <StartControllerTask+0x144>)
 80015a2:	ed83 6a00 	vstr	s12, [r3]
 80015a6:	edc3 6a01 	vstr	s13, [r3, #4]
 80015aa:	ed83 7a02 	vstr	s14, [r3, #8]
 80015ae:	edc3 7a03 	vstr	s15, [r3, #12]
	 mode = getMode(rc, &motor);
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <StartControllerTask+0x13c>)
 80015b4:	4a33      	ldr	r2, [pc, #204]	; (8001684 <StartControllerTask+0x140>)
 80015b6:	9200      	str	r2, [sp, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2000      	movs	r0, #0
 80015bc:	4610      	mov	r0, r2
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	2100      	movs	r1, #0
 80015c2:	4611      	mov	r1, r2
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	2400      	movs	r4, #0
 80015c8:	4614      	mov	r4, r2
 80015ca:	899a      	ldrh	r2, [r3, #12]
 80015cc:	2300      	movs	r3, #0
 80015ce:	f362 030f 	bfi	r3, r2, #0, #16
 80015d2:	4622      	mov	r2, r4
 80015d4:	f000 fc28 	bl	8001e28 <getMode>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <StartControllerTask+0x148>)
 80015de:	701a      	strb	r2, [r3, #0]

	 control_command = momentController(setpoint_value, motor);
 80015e0:	4e28      	ldr	r6, [pc, #160]	; (8001684 <StartControllerTask+0x140>)
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <StartControllerTask+0x144>)
 80015e4:	ed93 6a00 	vldr	s12, [r3]
 80015e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80015ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80015f4:	466d      	mov	r5, sp
 80015f6:	f106 0410 	add.w	r4, r6, #16
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001602:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001606:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800160a:	eeb0 0a46 	vmov.f32	s0, s12
 800160e:	eef0 0a66 	vmov.f32	s1, s13
 8001612:	eeb0 1a47 	vmov.f32	s2, s14
 8001616:	eef0 1a67 	vmov.f32	s3, s15
 800161a:	f000 fc3d 	bl	8001e98 <momentController>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <StartControllerTask+0x14c>)
 8001624:	edc3 7a00 	vstr	s15, [r3]

	 outputMotor(control_command, setpoint_value, mode, &motor);
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <StartControllerTask+0x14c>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <StartControllerTask+0x148>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <StartControllerTask+0x144>)
 8001634:	edd3 5a00 	vldr	s11, [r3]
 8001638:	ed93 6a01 	vldr	s12, [r3, #4]
 800163c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001640:	ed93 7a03 	vldr	s14, [r3, #12]
 8001644:	490f      	ldr	r1, [pc, #60]	; (8001684 <StartControllerTask+0x140>)
 8001646:	4610      	mov	r0, r2
 8001648:	eef0 0a65 	vmov.f32	s1, s11
 800164c:	eeb0 1a46 	vmov.f32	s2, s12
 8001650:	eef0 1a66 	vmov.f32	s3, s13
 8001654:	eeb0 2a47 	vmov.f32	s4, s14
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	f000 fc9a 	bl	8001f94 <outputMotor>

	 osDelay(1);
 8001660:	2001      	movs	r0, #1
 8001662:	f006 fecb 	bl	80083fc <osDelay>
	 loop_time = HAL_GetTick() - start_time;
 8001666:	f001 fe2d 	bl	80032c4 <HAL_GetTick>
 800166a:	4603      	mov	r3, r0
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <StartControllerTask+0x138>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <StartControllerTask+0x150>)
 8001678:	801a      	strh	r2, [r3, #0]
	 start_time = HAL_GetTick();
 800167a:	e767      	b.n	800154c <StartControllerTask+0x8>
 800167c:	2000284c 	.word	0x2000284c
 8001680:	20002728 	.word	0x20002728
 8001684:	20002c68 	.word	0x20002c68
 8001688:	2000297c 	.word	0x2000297c
 800168c:	20000200 	.word	0x20000200
 8001690:	200001fc 	.word	0x200001fc
 8001694:	2000274c 	.word	0x2000274c

08001698 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b085      	sub	sp, #20
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
  /* Infinite loop */
  for(;;)
  {
	sens_time = HAL_GetTick() - sens_start;
 80016a0:	f001 fe10 	bl	80032c4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <StartEncoderTask+0x54>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a10      	ldr	r2, [pc, #64]	; (80016f0 <StartEncoderTask+0x58>)
 80016ae:	6013      	str	r3, [r2, #0]
	updatePosition(&motor, rc);
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <StartEncoderTask+0x5c>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4611      	mov	r1, r2
 80016b8:	6858      	ldr	r0, [r3, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	4602      	mov	r2, r0
 80016be:	689c      	ldr	r4, [r3, #8]
 80016c0:	2000      	movs	r0, #0
 80016c2:	4620      	mov	r0, r4
 80016c4:	899b      	ldrh	r3, [r3, #12]
 80016c6:	f8ad 3000 	strh.w	r3, [sp]
 80016ca:	4603      	mov	r3, r0
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <StartEncoderTask+0x60>)
 80016ce:	f001 fa7f 	bl	8002bd0 <updatePosition>
	sens_start = HAL_GetTick();
 80016d2:	f001 fdf7 	bl	80032c4 <HAL_GetTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <StartEncoderTask+0x54>)
 80016da:	6013      	str	r3, [r2, #0]
	updateRPM(&motor);
 80016dc:	4806      	ldr	r0, [pc, #24]	; (80016f8 <StartEncoderTask+0x60>)
 80016de:	f001 faf7 	bl	8002cd0 <updateRPM>
	osDelay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f006 fe8a 	bl	80083fc <osDelay>
	sens_time = HAL_GetTick() - sens_start;
 80016e8:	e7da      	b.n	80016a0 <StartEncoderTask+0x8>
 80016ea:	bf00      	nop
 80016ec:	200028e4 	.word	0x200028e4
 80016f0:	200028e0 	.word	0x200028e0
 80016f4:	20002728 	.word	0x20002728
 80016f8:	20002c68 	.word	0x20002c68

080016fc <tmtcTimerCallback>:
  /* USER CODE END StartEncoderTask */
}

/* tmtcTimerCallback function */
void tmtcTimerCallback(void *argument)
{
 80016fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af08      	add	r7, sp, #32
 8001702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tmtcTimerCallback */
	if(transpc_index==0){
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <tmtcTimerCallback+0xa4>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d125      	bne.n	8001758 <tmtcTimerCallback+0x5c>
		get_packet_moter(motor, setpoint_value);
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <tmtcTimerCallback+0xa8>)
 800170e:	ed93 6a00 	vldr	s12, [r3]
 8001712:	edd3 6a01 	vldr	s13, [r3, #4]
 8001716:	ed93 7a02 	vldr	s14, [r3, #8]
 800171a:	edd3 7a03 	vldr	s15, [r3, #12]
 800171e:	4e22      	ldr	r6, [pc, #136]	; (80017a8 <tmtcTimerCallback+0xac>)
 8001720:	466d      	mov	r5, sp
 8001722:	f106 0410 	add.w	r4, r6, #16
 8001726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800172a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800172e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001732:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001736:	eeb0 0a46 	vmov.f32	s0, s12
 800173a:	eef0 0a66 	vmov.f32	s1, s13
 800173e:	eeb0 1a47 	vmov.f32	s2, s14
 8001742:	eef0 1a67 	vmov.f32	s3, s15
 8001746:	f001 fc2f 	bl	8002fa8 <get_packet_moter>
		transpc_index++;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <tmtcTimerCallback+0xa4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <tmtcTimerCallback+0xa4>)
 8001754:	701a      	strb	r2, [r3, #0]
#if 0
	 sprintf((char*)buffer, "%f\t%f\r\n", motor.ang, motor.pwm);
	 HAL_UART_Transmit(&huart2, buffer, 100, 100);
#endif
  /* USER CODE END tmtcTimerCallback */
}
 8001756:	e01e      	b.n	8001796 <tmtcTimerCallback+0x9a>
	else if(transpc_index ==1){
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <tmtcTimerCallback+0xa4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d117      	bne.n	8001790 <tmtcTimerCallback+0x94>
		get_packet_rc(rc);
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <tmtcTimerCallback+0xb0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	2000      	movs	r0, #0
 8001766:	4610      	mov	r0, r2
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2100      	movs	r1, #0
 800176c:	4611      	mov	r1, r2
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	2400      	movs	r4, #0
 8001772:	4614      	mov	r4, r2
 8001774:	899a      	ldrh	r2, [r3, #12]
 8001776:	2300      	movs	r3, #0
 8001778:	f362 030f 	bfi	r3, r2, #0, #16
 800177c:	4622      	mov	r2, r4
 800177e:	f001 fc55 	bl	800302c <get_packet_rc>
		transpc_index--;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <tmtcTimerCallback+0xa4>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3b01      	subs	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <tmtcTimerCallback+0xa4>)
 800178c:	701a      	strb	r2, [r3, #0]
}
 800178e:	e002      	b.n	8001796 <tmtcTimerCallback+0x9a>
		transpc_index = 0;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <tmtcTimerCallback+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000274e 	.word	0x2000274e
 80017a4:	2000297c 	.word	0x2000297c
 80017a8:	20002c68 	.word	0x20002c68
 80017ac:	20002728 	.word	0x20002728

080017b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c2:	f001 fd6d 	bl	80032a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40001400 	.word	0x40001400

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	e7fe      	b.n	80017dc <Error_Handler+0x8>
	...

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_MspInit+0x50>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_MspInit+0x50>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6613      	str	r3, [r2, #96]	; 0x60
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <HAL_MspInit+0x50>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <HAL_MspInit+0x50>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_MspInit+0x50>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x50>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	210f      	movs	r1, #15
 800181a:	f06f 0001 	mvn.w	r0, #1
 800181e:	f001 fe37 	bl	8003490 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001822:	f002 fb0d 	bl	8003e40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_SPI_MspInit+0x7c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d127      	bne.n	80018a6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 800185c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a10      	ldr	r2, [pc, #64]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_SPI_MspInit+0x80>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001886:	2338      	movs	r3, #56	; 0x38
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001896:	2306      	movs	r3, #6
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_SPI_MspInit+0x84>)
 80018a2:	f002 f88f 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	; 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40003c00 	.word	0x40003c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000400 	.word	0x48000400

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_TIM_Base_MspInit+0x38>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10b      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_TIM_Base_MspInit+0x3c>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <HAL_TIM_MspPostInit+0x68>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11d      	bne.n	800195a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_MspPostInit+0x6c>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_TIM_MspPostInit+0x6c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_TIM_MspPostInit+0x6c>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_OUTPUT_Pin;
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001948:	2306      	movs	r3, #6
 800194a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f002 f835 	bl	80039c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800195a:	bf00      	nop
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a52      	ldr	r2, [pc, #328]	; (8001ad4 <HAL_UART_MspInit+0x168>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d16f      	bne.n	8001a6e <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	4a51      	ldr	r2, [pc, #324]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6613      	str	r3, [r2, #96]	; 0x60
 800199a:	4b4f      	ldr	r3, [pc, #316]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	61bb      	str	r3, [r7, #24]
 80019a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b4c      	ldr	r3, [pc, #304]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a45      	ldr	r2, [pc, #276]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b43      	ldr	r3, [pc, #268]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f001 ffe5 	bl	80039c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Spektrum_Pin;
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Spektrum_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4831      	ldr	r0, [pc, #196]	; (8001adc <HAL_UART_MspInit+0x170>)
 8001a16:	f001 ffd5 	bl	80039c4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <HAL_UART_MspInit+0x178>)
 8001a1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a22:	2218      	movs	r2, #24
 8001a24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a26:	4b2e      	ldr	r3, [pc, #184]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a46:	2220      	movs	r2, #32
 8001a48:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a52:	f001 fd45 	bl	80034e0 <HAL_DMA_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001a5c:	f7ff feba 	bl	80017d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a64:	67da      	str	r2, [r3, #124]	; 0x7c
 8001a66:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_UART_MspInit+0x174>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a6c:	e02d      	b.n	8001aca <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_UART_MspInit+0x17c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d128      	bne.n	8001aca <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a82:	6593      	str	r3, [r2, #88]	; 0x58
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_UART_MspInit+0x16c>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f001 ff7d 	bl	80039c4 <HAL_GPIO_Init>
}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	; 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	200027ec 	.word	0x200027ec
 8001ae4:	40020008 	.word	0x40020008
 8001ae8:	40004400 	.word	0x40004400

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b02:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <HAL_InitTick+0xc8>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <HAL_InitTick+0xc8>)
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_InitTick+0xc8>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b1a:	f107 020c 	add.w	r2, r7, #12
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fe89 	bl	800483c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b2a:	f002 fe5b 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8001b2e:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <HAL_InitTick+0xcc>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HAL_InitTick+0xd4>)
 8001b42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 10U) - 1U;
 8001b44:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b46:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_InitTick+0xd8>)
 8001b48:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b5e:	f003 ffe9 	bl	8005b34 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001b70:	4812      	ldr	r0, [pc, #72]	; (8001bbc <HAL_InitTick+0xd0>)
 8001b72:	f004 f837 	bl	8005be4 <HAL_TIM_Base_Start_IT>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b84:	2037      	movs	r0, #55	; 0x37
 8001b86:	f001 fc9d 	bl	80034c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d808      	bhi.n	8001ba2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	2037      	movs	r0, #55	; 0x37
 8001b96:	f001 fc7b 	bl	8003490 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_InitTick+0xdc>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e002      	b.n	8001ba8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	20002fc0 	.word	0x20002fc0
 8001bc0:	40001400 	.word	0x40001400
 8001bc4:	0001869f 	.word	0x0001869f
 8001bc8:	20000004 	.word	0x20000004

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA1_Channel1_IRQHandler+0x10>)
 8001bfe:	f001 fd92 	bl	8003726 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200027ec 	.word	0x200027ec

08001c0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <TIM7_IRQHandler+0x10>)
 8001c12:	f004 f9b3 	bl	8005f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20002fc0 	.word	0x20002fc0

08001c20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
	return 1;
 8001c24:	2301      	movs	r3, #1
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_kill>:

int _kill(int pid, int sig)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c3a:	f009 f9cf 	bl	800afdc <__errno>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2216      	movs	r2, #22
 8001c42:	601a      	str	r2, [r3, #0]
	return -1;
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_exit>:

void _exit (int status)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffe7 	bl	8001c30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c62:	e7fe      	b.n	8001c62 <_exit+0x12>

08001c64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c76:	f3af 8000 	nop.w
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
	}

return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e009      	b.n	8001cc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf1      	blt.n	8001cb0 <_write+0x12>
	}
	return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_close>:

int _close(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_isatty>:

int _isatty(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f009 f934 	bl	800afdc <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20008000 	.word	0x20008000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000204 	.word	0x20000204
 8001da8:	20003068 	.word	0x20003068

08001dac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <controllerInit>:
#include "controller/controller.h"

TIM_HandleTypeDef* time_handler;

void controllerInit(TIM_HandleTypeDef* htimex){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	time_handler = htimex;
 8001dd8:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <controllerInit+0x48>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6013      	str	r3, [r2, #0]
	time_handler->Instance->CCR1 = 1000;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <controllerInit+0x48>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001de8:	635a      	str	r2, [r3, #52]	; 0x34
#ifdef I_CONTROLLER
	integral_error = 0;
	setSpeedGain(0.132, 0.01147, 0.00015);
#else
	setSpeedGain(0.0003, 0);
 8001dea:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001e1c <controllerInit+0x4c>
 8001dee:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001e20 <controllerInit+0x50>
 8001df2:	f000 f9eb 	bl	80021cc <setSpeedGain>
	setMomentGain(0.0002, 0);
 8001df6:	eddf 0a09 	vldr	s1, [pc, #36]	; 8001e1c <controllerInit+0x4c>
 8001dfa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001e24 <controllerInit+0x54>
 8001dfe:	f000 f9fb 	bl	80021f8 <setMomentGain>
#endif
	HAL_TIM_PWM_Start(time_handler, TIM_CHANNEL_1);
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <controllerInit+0x48>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 ffb7 	bl	8005d7c <HAL_TIM_PWM_Start>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000300c 	.word	0x2000300c
 8001e1c:	00000000 	.word	0x00000000
 8001e20:	399d4952 	.word	0x399d4952
 8001e24:	3951b717 	.word	0x3951b717

08001e28 <getMode>:
    control_value = proportion_controll_value + differential_controll_value + integral_controll_value;

    return control_value;
}

MODE getMode(RC rc, MOTOR* motor){
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	463c      	mov	r4, r7
 8001e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(rc.aux3 > 500){
 8001e34:	89bb      	ldrh	r3, [r7, #12]
 8001e36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3a:	d91d      	bls.n	8001e78 <getMode+0x50>
		if(rc.aux1 < 500){
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e42:	d201      	bcs.n	8001e48 <getMode+0x20>
			return ARM;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e01f      	b.n	8001e88 <getMode+0x60>
		}else if(rc.aux1 > 500 && rc.aux1 < 1400){
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e4e:	d905      	bls.n	8001e5c <getMode+0x34>
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001e56:	d201      	bcs.n	8001e5c <getMode+0x34>
			return NON_MOMENT;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e015      	b.n	8001e88 <getMode+0x60>
		}else{
			setSpeedGain(moment_gain.P_gain, moment_gain.D_gain);
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <getMode+0x68>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <getMode+0x68>)
 8001e64:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e68:	eef0 0a47 	vmov.f32	s1, s14
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f000 f9ac 	bl	80021cc <setSpeedGain>
			return MOMENT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e007      	b.n	8001e88 <getMode+0x60>
		}
	}else{
		if(rc.aux2 > 1000){
 8001e78:	897b      	ldrh	r3, [r7, #10]
 8001e7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e7e:	d902      	bls.n	8001e86 <getMode+0x5e>
			setOffset(motor);
 8001e80:	6a38      	ldr	r0, [r7, #32]
 8001e82:	f000 ff81 	bl	8002d88 <setOffset>
		}
		return CUT_OFF;
 8001e86:	2300      	movs	r3, #0
	}
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	20002c3c 	.word	0x20002c3c
 8001e94:	00000000 	.word	0x00000000

08001e98 <momentController>:
    pre_error = error;

    return control_value;
}

float momentController(SPT_Value setpoint, MOTOR motor){
 8001e98:	b084      	sub	sp, #16
 8001e9a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	eeb0 6a40 	vmov.f32	s12, s0
 8001ea6:	eef0 6a60 	vmov.f32	s13, s1
 8001eaa:	eeb0 7a41 	vmov.f32	s14, s2
 8001eae:	eef0 7a61 	vmov.f32	s15, s3
 8001eb2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001eba:	ed87 6a00 	vstr	s12, [r7]
 8001ebe:	edc7 6a01 	vstr	s13, [r7, #4]
 8001ec2:	ed87 7a02 	vstr	s14, [r7, #8]
 8001ec6:	edc7 7a03 	vstr	s15, [r7, #12]
	float control_value = map(rc.throttle, RC_MIN, RC_MAX, PWM_MIN, PWM_MAX) + (sin((motor.ang*(2*PI/360.)) + setpoint.cyclic_shift) * setpoint.amplitude);
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <momentController+0xf8>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed6:	f240 733a 	movw	r3, #1850	; 0x73a
 8001eda:	f240 42a6 	movw	r2, #1190	; 0x4a6
 8001ede:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8001ee2:	f44f 70ab 	mov.w	r0, #342	; 0x156
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	f000 f8e5 	bl	80020b8 <map>
 8001eee:	ee10 3a10 	vmov	r3, s0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb50 	bl	8000598 <__aeabi_f2d>
 8001ef8:	4604      	mov	r4, r0
 8001efa:	460d      	mov	r5, r1
 8001efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb4a 	bl	8000598 <__aeabi_f2d>
 8001f04:	a320      	add	r3, pc, #128	; (adr r3, 8001f88 <momentController+0xf0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb9d 	bl	8000648 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4690      	mov	r8, r2
 8001f14:	4699      	mov	r9, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb3d 	bl	8000598 <__aeabi_f2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4640      	mov	r0, r8
 8001f24:	4649      	mov	r1, r9
 8001f26:	f7fe f9d9 	bl	80002dc <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	ec43 2b17 	vmov	d7, r2, r3
 8001f32:	eeb0 0a47 	vmov.f32	s0, s14
 8001f36:	eef0 0a67 	vmov.f32	s1, s15
 8001f3a:	f00b fd51 	bl	800d9e0 <sin>
 8001f3e:	ec59 8b10 	vmov	r8, r9, d0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe fb79 	bl	8000648 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe f9bd 	bl	80002dc <__adddf3>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fe45 	bl	8000bf8 <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]

	return control_value;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001f84:	b004      	add	sp, #16
 8001f86:	4770      	bx	lr
 8001f88:	a1fae712 	.word	0xa1fae712
 8001f8c:	3f91df46 	.word	0x3f91df46
 8001f90:	20002728 	.word	0x20002728

08001f94 <outputMotor>:

volatile float command = 0;

void outputMotor(float control_command, SPT_Value setpoint, MODE mode, MOTOR* motor){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f9e:	eeb0 6a60 	vmov.f32	s12, s1
 8001fa2:	eef0 6a41 	vmov.f32	s13, s2
 8001fa6:	eeb0 7a61 	vmov.f32	s14, s3
 8001faa:	eef0 7a42 	vmov.f32	s15, s4
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6079      	str	r1, [r7, #4]
 8001fb2:	ed87 6a03 	vstr	s12, [r7, #12]
 8001fb6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001fba:	ed87 7a05 	vstr	s14, [r7, #20]
 8001fbe:	edc7 7a06 	vstr	s15, [r7, #24]
 8001fc2:	72fb      	strb	r3, [r7, #11]
    //! NOTE :: rpm command to throttle percent scalar
    switch(mode){
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d016      	beq.n	8001ff8 <outputMotor+0x64>
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	dc34      	bgt.n	8002038 <outputMotor+0xa4>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <outputMotor+0x44>
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d008      	beq.n	8001fe8 <outputMotor+0x54>
 8001fd6:	e02f      	b.n	8002038 <outputMotor+0xa4>
        case CUT_OFF:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <outputMotor+0xcc>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
            command = 1000;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <outputMotor+0xd0>)
 8001fe2:	4a21      	ldr	r2, [pc, #132]	; (8002068 <outputMotor+0xd4>)
 8001fe4:	601a      	str	r2, [r3, #0]
            break;
 8001fe6:	e02f      	b.n	8002048 <outputMotor+0xb4>
        case ARM:
#ifdef I_CONTROLLER
        	integral_error = 0;
#endif
        	pre_error = 0;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <outputMotor+0xcc>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
            command = 1200;
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <outputMotor+0xd0>)
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <outputMotor+0xd8>)
 8001ff4:	601a      	str	r2, [r3, #0]
            break;
 8001ff6:	e027      	b.n	8002048 <outputMotor+0xb4>
            if(command < PWM_MIN) command = PWM_MIN;
            else if(command > PWM_MAX) command = PWM_MAX;
        	break;
#endif
        case MOMENT:
			command = control_command;
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <outputMotor+0xd0>)
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	6013      	str	r3, [r2, #0]
    	    if(command < PWM_MIN) command = PWM_MIN;
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <outputMotor+0xd0>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002070 <outputMotor+0xdc>
 8002008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	d503      	bpl.n	800201a <outputMotor+0x86>
 8002012:	4b14      	ldr	r3, [pc, #80]	; (8002064 <outputMotor+0xd0>)
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <outputMotor+0xe0>)
 8002016:	601a      	str	r2, [r3, #0]
    	    else if(command > PWM_MAX) command = PWM_MAX;
        	break;
 8002018:	e016      	b.n	8002048 <outputMotor+0xb4>
    	    else if(command > PWM_MAX) command = PWM_MAX;
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <outputMotor+0xd0>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002078 <outputMotor+0xe4>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	dc00      	bgt.n	8002030 <outputMotor+0x9c>
        	break;
 800202e:	e00b      	b.n	8002048 <outputMotor+0xb4>
    	    else if(command > PWM_MAX) command = PWM_MAX;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <outputMotor+0xd0>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <outputMotor+0xe8>)
 8002034:	601a      	str	r2, [r3, #0]
        	break;
 8002036:	e007      	b.n	8002048 <outputMotor+0xb4>
        default:
        	command = 1000;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <outputMotor+0xd0>)
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <outputMotor+0xd4>)
 800203c:	601a      	str	r2, [r3, #0]
        	pre_error = 0;
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <outputMotor+0xcc>)
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
        	break;
 8002046:	bf00      	nop
    }

    PWM_Generator(command, motor);
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <outputMotor+0xd0>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	f000 f814 	bl	8002080 <PWM_Generator>
}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000298c 	.word	0x2000298c
 8002064:	20000208 	.word	0x20000208
 8002068:	447a0000 	.word	0x447a0000
 800206c:	44960000 	.word	0x44960000
 8002070:	4494c000 	.word	0x4494c000
 8002074:	4494c000 	.word	0x4494c000
 8002078:	44e74000 	.word	0x44e74000
 800207c:	44e74000 	.word	0x44e74000

08002080 <PWM_Generator>:

void PWM_Generator(float command, MOTOR* motor){
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	ed87 0a01 	vstr	s0, [r7, #4]
 800208a:	6038      	str	r0, [r7, #0]
    motor->pwm = command;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]
    time_handler->Instance->CCR1 = command;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <PWM_Generator+0x34>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	edd7 7a01 	vldr	s15, [r7, #4]
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 2a90 	vmov	r2, s15
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	2000300c 	.word	0x2000300c

080020b8 <map>:
#include "controller/novus_math.h"

float map(float target, int from_min, int from_max, int to_min, int to_max){
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	ed87 0a05 	vstr	s0, [r7, #20]
 80020c2:	6138      	str	r0, [r7, #16]
 80020c4:	60f9      	str	r1, [r7, #12]
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	607b      	str	r3, [r7, #4]
    float mult = (float)(to_max - to_min) / (float)(from_max - from_min);
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ea:	edc7 7a07 	vstr	s15, [r7, #28]
    target = target - from_min;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	edc7 7a05 	vstr	s15, [r7, #20]
    return to_min + (target * mult);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002112:	edd7 7a07 	vldr	s15, [r7, #28]
 8002116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	3724      	adds	r7, #36	; 0x24
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LPF>:
	float lpf_rpm = ((LPF_GAIN * pre_rpm) + (loop_time * raw_rpm)) / (LPF_GAIN + loop_time);

	return lpf_rpm;
}

float LPF(float raw_rpm, float loop_time, float pre_rpm, float pre_lpf){
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	ed87 0a03 	vstr	s0, [r7, #12]
 8002136:	edc7 0a02 	vstr	s1, [r7, #8]
 800213a:	ed87 1a01 	vstr	s2, [r7, #4]
 800213e:	edc7 1a00 	vstr	s3, [r7]

	float a1,b0,b1,w0;

	w0 = 2*3.14*LPF_GAIN;
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <LPF+0x9c>)
 8002144:	61fb      	str	r3, [r7, #28]
	a1 = (w0 - 2*loop_time)/(2*loop_time + w0);
 8002146:	edd7 7a02 	vldr	s15, [r7, #8]
 800214a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800214e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002152:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002156:	edd7 7a02 	vldr	s15, [r7, #8]
 800215a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800215e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002162:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216a:	edc7 7a06 	vstr	s15, [r7, #24]
	b0 = w0/(2*loop_time + w0);
 800216e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002172:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002176:	edd7 7a07 	vldr	s15, [r7, #28]
 800217a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002186:	edc7 7a05 	vstr	s15, [r7, #20]
	b1 = b0;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	613b      	str	r3, [r7, #16]


	return (b0*raw_rpm) + (b1*pre_rpm) - (a1*pre_lpf);
 800218e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002192:	edd7 7a03 	vldr	s15, [r7, #12]
 8002196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800219a:	edd7 6a04 	vldr	s13, [r7, #16]
 800219e:	edd7 7a01 	vldr	s15, [r7, #4]
 80021a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021aa:	edd7 6a06 	vldr	s13, [r7, #24]
 80021ae:	edd7 7a00 	vldr	s15, [r7]
 80021b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80021ba:	eeb0 0a67 	vmov.f32	s0, s15
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	3f20c49c 	.word	0x3f20c49c

080021cc <setSpeedGain>:
  * @param  p Proportional Controller Gain, Recommaned amount of Change 0.1
  * @param  d Differential  Controller Gain, Recommaned amount of Change 0.01
  * @param  i Integral  Controller Gain, Recommaned amount of Change 0.001
  * @retval None
  */
void setSpeedGain(float p, float d){
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80021d6:	edc7 0a00 	vstr	s1, [r7]
	speed_gain.P_gain = p;
 80021da:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <setSpeedGain+0x28>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
	speed_gain.D_gain = d;
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <setSpeedGain+0x28>)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6053      	str	r3, [r2, #4]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20002d2c 	.word	0x20002d2c

080021f8 <setMomentGain>:

void setMomentGain(float p, float d){
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002202:	edc7 0a00 	vstr	s1, [r7]
	moment_gain.P_gain = p;
 8002206:	4a06      	ldr	r2, [pc, #24]	; (8002220 <setMomentGain+0x28>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6013      	str	r3, [r2, #0]
	moment_gain.D_gain = d;
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <setMomentGain+0x28>)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6053      	str	r3, [r2, #4]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20002c3c 	.word	0x20002c3c

08002224 <setAmplitudeGain>:
  * @brief  Setting amount of multiplied sin wave's Amplitude
  * @param  gain Setting amount of multiply with RC controller's Scalar
  *             Recommaned amount of Change 0.1
  * @retval None
  */
void setAmplitudeGain(float gain, float rpm){
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	ed87 0a01 	vstr	s0, [r7, #4]
 800222e:	edc7 0a00 	vstr	s1, [r7]
	amplitude_gain = gain;//*map(rpm, RPM_MIN, RPM_MAX, 0, 1);
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <setAmplitudeGain+0x20>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	200027e4 	.word	0x200027e4

08002248 <getStickPercent>:
/**
  * @brief  Unit Conversion RC command - PWM data to Percentage 
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent of stick position
  */
float getStickPercent(uint16_t stick_pos){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
    float percent = map(stick_pos, RC_MIN, RC_MAX, 0, 100);
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	2200      	movs	r2, #0
 8002260:	f240 61aa 	movw	r1, #1706	; 0x6aa
 8002264:	f44f 70ab 	mov.w	r0, #342	; 0x156
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	f7ff ff24 	bl	80020b8 <map>
 8002270:	ed87 0a03 	vstr	s0, [r7, #12]

    return percent;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	ee07 3a90 	vmov	s15, r3
}
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <getStickVector>:
  *         '+'Vector = UP/RIGHT
  *         '-'Vector = DOWN/LEFT
  * @param  stick_pos RC Stick position pwm value RC_MIN to RC_MAX
  * @retval percent vector of stick position
  */
float getStickVector(uint16_t stick_pos){
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
    float vector = map(stick_pos, RC_MIN, RC_MAX, -100, 100);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	ee07 3a90 	vmov	s15, r3
 8002294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002298:	2364      	movs	r3, #100	; 0x64
 800229a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800229e:	f240 61aa 	movw	r1, #1706	; 0x6aa
 80022a2:	f44f 70ab 	mov.w	r0, #342	; 0x156
 80022a6:	eeb0 0a67 	vmov.f32	s0, s15
 80022aa:	f7ff ff05 	bl	80020b8 <map>
 80022ae:	ed87 0a03 	vstr	s0, [r7, #12]

    return vector;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	ee07 3a90 	vmov	s15, r3
}
 80022b8:	eeb0 0a67 	vmov.f32	s0, s15
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <getStickScalar>:
/**
  * @brief  Unit Conversion RC command - Percentage Vector to Percentage Scalar
  * @param  stick_vector percent vector of RC stick position
  * @retval percent scalar of stick position
  */
float getStickScalar(float stick_vector){
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	ed87 0a01 	vstr	s0, [r7, #4]
    float stick_scalar = 0;
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]

    if(stick_vector < 0){
 80022d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	d506      	bpl.n	80022ee <getStickScalar+0x2c>
        stick_scalar = stick_vector * (-1);
 80022e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e4:	eef1 7a67 	vneg.f32	s15, s15
 80022e8:	edc7 7a03 	vstr	s15, [r7, #12]
 80022ec:	e001      	b.n	80022f2 <getStickScalar+0x30>
    }else{
        stick_scalar = stick_vector;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]
    }

    return stick_scalar;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	ee07 3a90 	vmov	s15, r3
}
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <checkMargin>:
  * @brief  Check Margin of RC Command 
  *         When Roll/Pitch Stick is in center position it will ignore a tiny movement
  * @param  stick_vector percent vector of RC stick position
  * @retval percent vector of stick position
  */
float checkMargin(float stick_vector){
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	ed87 0a01 	vstr	s0, [r7, #4]
    if(stick_vector > (RC_MARGIN_RANGE * (-1)) && stick_vector < RC_MARGIN_RANGE){
 8002310:	edd7 7a01 	vldr	s15, [r7, #4]
 8002314:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8002318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	dd0b      	ble.n	800233a <checkMargin+0x34>
 8002322:	edd7 7a01 	vldr	s15, [r7, #4]
 8002326:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800232a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	d502      	bpl.n	800233a <checkMargin+0x34>
        stick_vector = 0;
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
    }
    return stick_vector;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	ee07 3a90 	vmov	s15, r3
}
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <setpoint>:
  *         based on RC command.
  * @param  rc have 7ch information (throttle, roll, pitch, yaw, aux1, aux2, aux3)
  *         this is PWM based data
  * @retval SPT_Value setpoint - updated setpoint value
  */
SPT_Value setpoint(RC rc, MOTOR motor){
 800234e:	b590      	push	{r4, r7, lr}
 8002350:	ed2d 8b02 	vpush	{d8}
 8002354:	b091      	sub	sp, #68	; 0x44
 8002356:	af00      	add	r7, sp, #0
 8002358:	f107 0410 	add.w	r4, r7, #16
 800235c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    SPT_Value setpoint;

    setpoint.speed = setSpeed(rc.throttle);
 8002360:	8a3b      	ldrh	r3, [r7, #16]
 8002362:	4618      	mov	r0, r3
 8002364:	f000 f85b 	bl	800241e <setSpeed>
 8002368:	eef0 7a40 	vmov.f32	s15, s0
 800236c:	edc7 7a08 	vstr	s15, [r7, #32]
	setAmplitudeGain(1, motor.rpm);
 8002370:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002374:	eef0 0a67 	vmov.f32	s1, s15
 8002378:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800237c:	f7ff ff52 	bl	8002224 <setAmplitudeGain>
    setpoint.amplitude = map(setAmplitude(rc.roll, rc.pitch), 0, 100, 0, map(motor.rpm, RPM_MIN, RPM_MAX, 30, 600));
 8002380:	8a7b      	ldrh	r3, [r7, #18]
 8002382:	8aba      	ldrh	r2, [r7, #20]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f868 	bl	800245c <setAmplitude>
 800238c:	eeb0 8a40 	vmov.f32	s16, s0
 8002390:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002394:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002398:	221e      	movs	r2, #30
 800239a:	f641 3158 	movw	r1, #7000	; 0x1b58
 800239e:	20fa      	movs	r0, #250	; 0xfa
 80023a0:	eeb0 0a67 	vmov.f32	s0, s15
 80023a4:	f7ff fe88 	bl	80020b8 <map>
 80023a8:	eef0 7a40 	vmov.f32	s15, s0
 80023ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b0:	ee17 3a90 	vmov	r3, s15
 80023b4:	2200      	movs	r2, #0
 80023b6:	2164      	movs	r1, #100	; 0x64
 80023b8:	2000      	movs	r0, #0
 80023ba:	eeb0 0a48 	vmov.f32	s0, s16
 80023be:	f7ff fe7b 	bl	80020b8 <map>
 80023c2:	eef0 7a40 	vmov.f32	s15, s0
 80023c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    setpoint.cyclic_shift = setCyclicShift(rc.roll, rc.pitch);
 80023ca:	8a7b      	ldrh	r3, [r7, #18]
 80023cc:	8aba      	ldrh	r2, [r7, #20]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f89d 	bl	8002510 <setCyclicShift>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//setpoint.moment_speed = setpoint.speed + (sin((motor.ang*(2*PI/360.)) + setpoint.cyclic_shift) * setpoint.amplitude);

    return setpoint;
 80023de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f4:	ee06 0a10 	vmov	s12, r0
 80023f8:	ee06 1a90 	vmov	s13, r1
 80023fc:	ee07 2a10 	vmov	s14, r2
 8002400:	ee07 3a90 	vmov	s15, r3
}
 8002404:	eeb0 0a46 	vmov.f32	s0, s12
 8002408:	eef0 0a66 	vmov.f32	s1, s13
 800240c:	eeb0 1a47 	vmov.f32	s2, s14
 8002410:	eef0 1a67 	vmov.f32	s3, s15
 8002414:	3744      	adds	r7, #68	; 0x44
 8002416:	46bd      	mov	sp, r7
 8002418:	ecbd 8b02 	vpop	{d8}
 800241c:	bd90      	pop	{r4, r7, pc}

0800241e <setSpeed>:
/**
  * @brief  Calculate target speed based throttle information
  * @param  throttle RC throttle channel command based on PWM
  * @retval updated target speed setpoint value
  */
float setSpeed(uint16_t throttle){
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	80fb      	strh	r3, [r7, #6]
    float throttle_percent = getStickPercent(throttle);
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff0c 	bl	8002248 <getStickPercent>
 8002430:	ed87 0a03 	vstr	s0, [r7, #12]

    //!NOTE :: Percent to RPM @mhlee
    float speed = map(throttle_percent, 0, 100, RPM_MIN, RPM_MAX);
 8002434:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002438:	22fa      	movs	r2, #250	; 0xfa
 800243a:	2164      	movs	r1, #100	; 0x64
 800243c:	2000      	movs	r0, #0
 800243e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002442:	f7ff fe39 	bl	80020b8 <map>
 8002446:	ed87 0a02 	vstr	s0, [r7, #8]
    
    return speed;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	ee07 3a90 	vmov	s15, r3
}
 8002450:	eeb0 0a67 	vmov.f32	s0, s15
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <setAmplitude>:
  * @brief  Calculate target amplitude of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target amplitude setpoint value
  */
float setAmplitude(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	460a      	mov	r2, r1
 8002466:	80fb      	strh	r3, [r7, #6]
 8002468:	4613      	mov	r3, r2
 800246a:	80bb      	strh	r3, [r7, #4]
    float roll_scalar = getStickScalar(getStickVector(roll_stick_pos));
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff08 	bl	8002284 <getStickVector>
 8002474:	eef0 7a40 	vmov.f32	s15, s0
 8002478:	eeb0 0a67 	vmov.f32	s0, s15
 800247c:	f7ff ff21 	bl	80022c2 <getStickScalar>
 8002480:	ed87 0a07 	vstr	s0, [r7, #28]
    float pitch_scalar = getStickScalar(getStickVector(pitch_stick_pos));
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fefc 	bl	8002284 <getStickVector>
 800248c:	eef0 7a40 	vmov.f32	s15, s0
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	f7ff ff15 	bl	80022c2 <getStickScalar>
 8002498:	ed87 0a06 	vstr	s0, [r7, #24]

    float pitch_ratio = pitch_scalar / (roll_scalar + pitch_scalar);
 800249c:	ed97 7a07 	vldr	s14, [r7, #28]
 80024a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a8:	edd7 6a06 	vldr	s13, [r7, #24]
 80024ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b0:	edc7 7a05 	vstr	s15, [r7, #20]
    float roll_ratio = 1 - pitch_ratio;
 80024b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c0:	edc7 7a04 	vstr	s15, [r7, #16]

    float cmd_scalar = (pitch_scalar * pitch_ratio) + (roll_scalar * roll_ratio);
 80024c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80024c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	edc7 7a03 	vstr	s15, [r7, #12]

    float amplitude = (cmd_scalar * amplitude_gain);
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <setAmplitude+0xac>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80024ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f2:	edc7 7a02 	vstr	s15, [r7, #8]

    return amplitude;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	ee07 3a90 	vmov	s15, r3
}
 80024fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200027e4 	.word	0x200027e4
 800250c:	00000000 	.word	0x00000000

08002510 <setCyclicShift>:
  * @brief  Calculate target cyclic shift of sin wave using roll/pitch RC information
  * @param  roll_stick_pos RC roll channel command based on PWM
  * @param  pitch_stick_pos RC pitch channel command based on PWM
  * @retval updated target cyclic shift setpoint value
  */
float setCyclicShift(uint16_t roll_stick_pos, uint16_t pitch_stick_pos){
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	80fb      	strh	r3, [r7, #6]
 800251c:	4613      	mov	r3, r2
 800251e:	80bb      	strh	r3, [r7, #4]
    float roll_vector = getStickVector(roll_stick_pos);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff feae 	bl	8002284 <getStickVector>
 8002528:	ed87 0a06 	vstr	s0, [r7, #24]
    float pitch_vector = getStickVector(pitch_stick_pos);
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fea8 	bl	8002284 <getStickVector>
 8002534:	ed87 0a05 	vstr	s0, [r7, #20]

    roll_vector = checkMargin(roll_vector);
 8002538:	ed97 0a06 	vldr	s0, [r7, #24]
 800253c:	f7ff fee3 	bl	8002306 <checkMargin>
 8002540:	ed87 0a06 	vstr	s0, [r7, #24]
    pitch_vector = checkMargin(pitch_vector);
 8002544:	ed97 0a05 	vldr	s0, [r7, #20]
 8002548:	f7ff fedd 	bl	8002306 <checkMargin>
 800254c:	ed87 0a05 	vstr	s0, [r7, #20]

    float roll_scalar = getStickScalar(roll_vector);
 8002550:	ed97 0a06 	vldr	s0, [r7, #24]
 8002554:	f7ff feb5 	bl	80022c2 <getStickScalar>
 8002558:	ed87 0a04 	vstr	s0, [r7, #16]
    float pitch_scalar = getStickScalar(pitch_vector);
 800255c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002560:	f7ff feaf 	bl	80022c2 <getStickScalar>
 8002564:	ed87 0a03 	vstr	s0, [r7, #12]

    float shift = 0;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]

    if(roll_vector == 0 && pitch_vector == 0){
 800256e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d10a      	bne.n	8002592 <setCyclicShift+0x82>
 800257c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002580:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	d103      	bne.n	8002592 <setCyclicShift+0x82>
        shift = 0;                      /*!< There is any command Roll and Pitch  */
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	e09f      	b.n	80026d2 <setCyclicShift+0x1c2>
    }else if(roll_vector == 0 && pitch_vector != 0){
 8002592:	edd7 7a06 	vldr	s15, [r7, #24]
 8002596:	eef5 7a40 	vcmp.f32	s15, #0.0
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	d114      	bne.n	80025ca <setCyclicShift+0xba>
 80025a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d00d      	beq.n	80025ca <setCyclicShift+0xba>
        if(pitch_vector < 0){
 80025ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	d502      	bpl.n	80025c2 <setCyclicShift+0xb2>
            shift = PI;                 /*!< There is only negative Pitch command  */
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <setCyclicShift+0x1f0>)
 80025be:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 80025c0:	e087      	b.n	80026d2 <setCyclicShift+0x1c2>
        }else{
            shift = 0;                  /*!< There is only positive Pitch command  */
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
        if(pitch_vector < 0){
 80025c8:	e083      	b.n	80026d2 <setCyclicShift+0x1c2>
        }
    }else if(roll_vector != 0 && pitch_vector == 0){
 80025ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d6:	d013      	beq.n	8002600 <setCyclicShift+0xf0>
 80025d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	d10c      	bne.n	8002600 <setCyclicShift+0xf0>
        if(roll_vector < 0){
 80025e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	d502      	bpl.n	80025fa <setCyclicShift+0xea>
            shift = (3 * PI) / 2.0;     /*!< There is only negative Roll command  */
 80025f4:	4b43      	ldr	r3, [pc, #268]	; (8002704 <setCyclicShift+0x1f4>)
 80025f6:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 80025f8:	e06b      	b.n	80026d2 <setCyclicShift+0x1c2>
        }else{
            shift = PI / 2.0;           /*!< There is only positive Roll command  */
 80025fa:	4b43      	ldr	r3, [pc, #268]	; (8002708 <setCyclicShift+0x1f8>)
 80025fc:	61fb      	str	r3, [r7, #28]
        if(roll_vector < 0){
 80025fe:	e068      	b.n	80026d2 <setCyclicShift+0x1c2>
        }
    }else{
        float shift_ratio = (PI/2) * (roll_scalar / (roll_scalar+pitch_scalar));
 8002600:	ed97 7a04 	vldr	s14, [r7, #16]
 8002604:	edd7 7a03 	vldr	s15, [r7, #12]
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002610:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002614:	ee16 0a90 	vmov	r0, s13
 8002618:	f7fd ffbe 	bl	8000598 <__aeabi_f2d>
 800261c:	a332      	add	r3, pc, #200	; (adr r3, 80026e8 <setCyclicShift+0x1d8>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f811 	bl	8000648 <__aeabi_dmul>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fae3 	bl	8000bf8 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	60bb      	str	r3, [r7, #8]

        if(pitch_vector < 0){
 8002636:	edd7 7a05 	vldr	s15, [r7, #20]
 800263a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800263e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002642:	d52a      	bpl.n	800269a <setCyclicShift+0x18a>
            if(roll_vector < 0){
 8002644:	edd7 7a06 	vldr	s15, [r7, #24]
 8002648:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	d510      	bpl.n	8002674 <setCyclicShift+0x164>
                shift = PI + shift_ratio;       /*!< There is negative Pitch and negative Roll command  */
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f7fd ffa0 	bl	8000598 <__aeabi_f2d>
 8002658:	a325      	add	r3, pc, #148	; (adr r3, 80026f0 <setCyclicShift+0x1e0>)
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	f7fd fe3d 	bl	80002dc <__adddf3>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe fac5 	bl	8000bf8 <__aeabi_d2f>
 800266e:	4603      	mov	r3, r0
 8002670:	61fb      	str	r3, [r7, #28]
 8002672:	e02e      	b.n	80026d2 <setCyclicShift+0x1c2>
            }else{
                shift = PI - shift_ratio;     /*!< There is negative Pitch and positive Roll command  */
 8002674:	68b8      	ldr	r0, [r7, #8]
 8002676:	f7fd ff8f 	bl	8000598 <__aeabi_f2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	a11c      	add	r1, pc, #112	; (adr r1, 80026f0 <setCyclicShift+0x1e0>)
 8002680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002684:	f7fd fe28 	bl	80002d8 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe fab2 	bl	8000bf8 <__aeabi_d2f>
 8002694:	4603      	mov	r3, r0
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e01b      	b.n	80026d2 <setCyclicShift+0x1c2>
            }
        }else{
            if(roll_vector < 0){
 800269a:	edd7 7a06 	vldr	s15, [r7, #24]
 800269e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	d512      	bpl.n	80026ce <setCyclicShift+0x1be>
                shift = (2*PI) - shift_ratio;       /*!< There is positive Pitch and negative Roll command  */
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f7fd ff75 	bl	8000598 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	a111      	add	r1, pc, #68	; (adr r1, 80026f8 <setCyclicShift+0x1e8>)
 80026b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b8:	f7fd fe0e 	bl	80002d8 <__aeabi_dsub>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa98 	bl	8000bf8 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	e001      	b.n	80026d2 <setCyclicShift+0x1c2>
            }else{
                shift = shift_ratio;            /*!< There is positive Pitch and positive Roll command  */
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    return shift;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	ee07 3a90 	vmov	s15, r3
}
 80026d8:	eeb0 0a67 	vmov.f32	s0, s15
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	f3af 8000 	nop.w
 80026e8:	53c8d4f1 	.word	0x53c8d4f1
 80026ec:	3ff921fb 	.word	0x3ff921fb
 80026f0:	53c8d4f1 	.word	0x53c8d4f1
 80026f4:	400921fb 	.word	0x400921fb
 80026f8:	53c8d4f1 	.word	0x53c8d4f1
 80026fc:	401921fb 	.word	0x401921fb
 8002700:	40490fdb 	.word	0x40490fdb
 8002704:	4096cbe4 	.word	0x4096cbe4
 8002708:	3fc90fdb 	.word	0x3fc90fdb

0800270c <spectrum_read>:
/** @J.Yeon
  * @brief  uart로 받은 값을 각 채널별 data 저장
  * @param  struct RC
  * @retval 각 채널별 data(RC)
  */
void spectrum_read(RC* rc){
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    fade = rc_byte_data[0];
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <spectrum_read+0xd4>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <spectrum_read+0xd8>)
 800271a:	701a      	strb	r2, [r3, #0]
    sys = rc_byte_data[1];
 800271c:	4b30      	ldr	r3, [pc, #192]	; (80027e0 <spectrum_read+0xd4>)
 800271e:	785a      	ldrb	r2, [r3, #1]
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <spectrum_read+0xdc>)
 8002722:	701a      	strb	r2, [r3, #0]

    // 비트연산을 통한 각채널별 data 추출
    for (int index = 1; index <= 7; index++) {
 8002724:	2301      	movs	r3, #1
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e034      	b.n	8002794 <spectrum_read+0x88>
        bit_data = (rc_byte_data[index * 2] << 8) | rc_byte_data[(index * 2) + 1];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4a2c      	ldr	r2, [pc, #176]	; (80027e0 <spectrum_read+0xd4>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b21a      	sxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	3301      	adds	r3, #1
 800273c:	4928      	ldr	r1, [pc, #160]	; (80027e0 <spectrum_read+0xd4>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	b21b      	sxth	r3, r3
 8002742:	4313      	orrs	r3, r2
 8002744:	b21b      	sxth	r3, r3
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <spectrum_read+0xe0>)
 800274a:	801a      	strh	r2, [r3, #0]
        uint8_t id = (bit_data & 0x7800) >> 11;
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <spectrum_read+0xe0>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	12db      	asrs	r3, r3, #11
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	72fb      	strb	r3, [r7, #11]
        uint16_t pos = bit_data & 0x07FF;
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <spectrum_read+0xe0>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002762:	813b      	strh	r3, [r7, #8]
        
        if(pos >= RC_MIN && pos <= RC_MAX){
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800276a:	d310      	bcc.n	800278e <spectrum_read+0x82>
 800276c:	893b      	ldrh	r3, [r7, #8]
 800276e:	f240 62aa 	movw	r2, #1706	; 0x6aa
 8002772:	4293      	cmp	r3, r2
 8002774:	d80b      	bhi.n	800278e <spectrum_read+0x82>
            channel[id].id = id;
 8002776:	7afb      	ldrb	r3, [r7, #11]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <spectrum_read+0xe4>)
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	7afa      	ldrb	r2, [r7, #11]
 8002780:	705a      	strb	r2, [r3, #1]
            channel[id].pos = pos;
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <spectrum_read+0xe4>)
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	893a      	ldrh	r2, [r7, #8]
 800278c:	805a      	strh	r2, [r3, #2]
    for (int index = 1; index <= 7; index++) {
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b07      	cmp	r3, #7
 8002798:	ddc7      	ble.n	800272a <spectrum_read+0x1e>
        }
    }

    // 각 채널별 입력값 입력
    rc->throttle = channel[0].pos;
 800279a:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <spectrum_read+0xe4>)
 800279c:	885a      	ldrh	r2, [r3, #2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	801a      	strh	r2, [r3, #0]
	rc-> roll = channel[1].pos;
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <spectrum_read+0xe4>)
 80027a4:	88da      	ldrh	r2, [r3, #6]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	805a      	strh	r2, [r3, #2]
	rc-> pitch = channel[2].pos;
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <spectrum_read+0xe4>)
 80027ac:	895a      	ldrh	r2, [r3, #10]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	809a      	strh	r2, [r3, #4]
	rc-> yaw = channel[3].pos;
 80027b2:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <spectrum_read+0xe4>)
 80027b4:	89da      	ldrh	r2, [r3, #14]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	80da      	strh	r2, [r3, #6]
	rc-> aux1 = channel[4].pos;
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <spectrum_read+0xe4>)
 80027bc:	8a5a      	ldrh	r2, [r3, #18]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	811a      	strh	r2, [r3, #8]
	rc-> aux2 = channel[5].pos;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <spectrum_read+0xe4>)
 80027c4:	8ada      	ldrh	r2, [r3, #22]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	815a      	strh	r2, [r3, #10]
	rc-> aux3 = channel[6].pos;
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <spectrum_read+0xe4>)
 80027cc:	8b5a      	ldrh	r2, [r3, #26]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	819a      	strh	r2, [r3, #12]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20002738 	.word	0x20002738
 80027e4:	20002fbc 	.word	0x20002fbc
 80027e8:	2000277c 	.word	0x2000277c
 80027ec:	2000277e 	.word	0x2000277e
 80027f0:	2000294c 	.word	0x2000294c

080027f4 <as5147_Init>:
  * @param  GPIO_num GPIO pin number
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_Init(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]

	chip_num = addChip(hspix, GPIO_port, GPIO_num);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	461a      	mov	r2, r3
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fad1 	bl	8002db0 <addChip>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <as5147_Init+0x4c>)
 8002814:	701a      	strb	r2, [r3, #0]
	if(chip_num < 0){
		return -1;
	}

	registerRead(AS5047P_ERRFL);
 8002816:	2001      	movs	r0, #1
 8002818:	f000 f8b2 	bl	8002980 <registerRead>
	int16_t error = registerRead(AS5047P_ERRFL);
 800281c:	2001      	movs	r0, #1
 800281e:	f000 f8af 	bl	8002980 <registerRead>
 8002822:	4603      	mov	r3, r0
 8002824:	82fb      	strh	r3, [r7, #22]

	if(error != 0) return -1;
 8002826:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <as5147_Init+0x40>
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	e000      	b.n	8002836 <as5147_Init+0x42>

	return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000020c 	.word	0x2000020c

08002844 <as5147_setZeroPosition>:
  * @param  none
  * @retval boolean
  * seccess 0, if fail return false
  */

int8_t as5147_setZeroPosition(){
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
	Frame current_zero_position = { 0, };
 800284a:	2300      	movs	r3, #0
 800284c:	813b      	strh	r3, [r7, #8]
	Frame current_position = { 0, };
 800284e:	2300      	movs	r3, #0
 8002850:	80bb      	strh	r3, [r7, #4]
	uint16_t zero_position_L = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	81fb      	strh	r3, [r7, #14]
	uint16_t zero_position_M = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	81bb      	strh	r3, [r7, #12]
	int8_t error;

	current_zero_position.raw = registerRead(AS5047P_ZPOSL);
 800285a:	2017      	movs	r0, #23
 800285c:	f000 f890 	bl	8002980 <registerRead>
 8002860:	4603      	mov	r3, r0
 8002862:	813b      	strh	r3, [r7, #8]
	if(current_zero_position.values.data < 0) return -1;

	error = registerWrite(AS5047P_ZPOSL, current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN));
 8002864:	893b      	ldrh	r3, [r7, #8]
 8002866:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800286a:	b29b      	uxth	r3, r3
 800286c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002870:	b29b      	uxth	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	2017      	movs	r0, #23
 8002876:	f000 f8a7 	bl	80029c8 <registerWrite>
 800287a:	4603      	mov	r3, r0
 800287c:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSL, 0x0000);
 800287e:	2100      	movs	r1, #0
 8002880:	2017      	movs	r0, #23
 8002882:	f000 f8a1 	bl	80029c8 <registerWrite>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	7afb      	ldrb	r3, [r7, #11]
 800288c:	4313      	orrs	r3, r2
 800288e:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8002890:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <as5147_setZeroPosition+0x5a>
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
 800289c:	e03f      	b.n	800291e <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 fd1c 	bl	80032dc <HAL_Delay>

	current_position.raw = registerRead(AS5047P_ANGLECOM);
 80028a4:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80028a8:	f000 f86a 	bl	8002980 <registerRead>
 80028ac:	4603      	mov	r3, r0
 80028ae:	80bb      	strh	r3, [r7, #4]
	if(current_position.values.data < 0) return -1;

	zero_position_L = (current_zero_position.values.data & (AS5047P_ZPOSL_COMP_I_ERR_EN | AS5047P_ZPOSL_COMP_H_ERR_EN) ) | (current_position.values.data & AS5047P_ZPOSL_ZPOSL);
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028be:	b21a      	sxth	r2, r3
 80028c0:	88bb      	ldrh	r3, [r7, #4]
 80028c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	81fb      	strh	r3, [r7, #14]
	zero_position_M = (current_position.values.data >> 6 ) & AS5047P_ZPOSM_ZPOSM;
 80028d6:	88bb      	ldrh	r3, [r7, #4]
 80028d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028dc:	b29b      	uxth	r3, r3
 80028de:	119b      	asrs	r3, r3, #6
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	81bb      	strh	r3, [r7, #12]

	error = registerWrite(AS5047P_ZPOSL, zero_position_L);
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	4619      	mov	r1, r3
 80028ea:	2017      	movs	r0, #23
 80028ec:	f000 f86c 	bl	80029c8 <registerWrite>
 80028f0:	4603      	mov	r3, r0
 80028f2:	72fb      	strb	r3, [r7, #11]
	error |= registerWrite(AS5047P_ZPOSM, zero_position_M);
 80028f4:	89bb      	ldrh	r3, [r7, #12]
 80028f6:	4619      	mov	r1, r3
 80028f8:	2016      	movs	r0, #22
 80028fa:	f000 f865 	bl	80029c8 <registerWrite>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	7afb      	ldrb	r3, [r7, #11]
 8002904:	4313      	orrs	r3, r2
 8002906:	72fb      	strb	r3, [r7, #11]
	if(error != 0) return -1;
 8002908:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <as5147_setZeroPosition+0xd2>
 8002910:	f04f 33ff 	mov.w	r3, #4294967295
 8002914:	e003      	b.n	800291e <as5147_setZeroPosition+0xda>

	HAL_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 fce0 	bl	80032dc <HAL_Delay>

	return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <as5147_readPosition>:
  * @brief  read current position from AS5147
  * @param  none
  * @retval position value without DAEC (0 ~ 360)
  */

float as5147_readPosition(){
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	Frame position = { 0, };
 800292e:	2300      	movs	r3, #0
 8002930:	80bb      	strh	r3, [r7, #4]

	position.raw = registerRead(AS5047P_ANGLECOM);
 8002932:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8002936:	f000 f823 	bl	8002980 <registerRead>
 800293a:	4603      	mov	r3, r0
 800293c:	80bb      	strh	r3, [r7, #4]

	return position.values.data * 360 / 16384.;
 800293e:	88bb      	ldrh	r3, [r7, #4]
 8002940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800294c:	fb03 f302 	mul.w	r3, r3, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fe0f 	bl	8000574 <__aeabi_i2d>
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <as5147_readPosition+0x54>)
 800295c:	f7fd ff9e 	bl	800089c <__aeabi_ddiv>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f7fe f946 	bl	8000bf8 <__aeabi_d2f>
 800296c:	4603      	mov	r3, r0
 800296e:	ee07 3a90 	vmov	s15, r3
}
 8002972:	eeb0 0a67 	vmov.f32	s0, s15
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40d00000 	.word	0x40d00000

08002980 <registerRead>:
  * @brief  read register according to register address
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @retval register value in register's address
  */

uint16_t registerRead(uint16_t resgister_address){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
	int16_t register_data = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	81fb      	strh	r3, [r7, #14]

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_READ);
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f856 	bl	8002a44 <packCommandFrame>
 8002998:	4603      	mov	r3, r0
 800299a:	81bb      	strh	r3, [r7, #12]
	write2ByteRegister(&command.raw, chip_num);
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <registerRead+0x44>)
 800299e:	781a      	ldrb	r2, [r3, #0]
 80029a0:	f107 030c 	add.w	r3, r7, #12
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fab4 	bl	8002f14 <write2ByteRegister>

	register_data = read2ByteRegister(chip_num);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <registerRead+0x44>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fa5b 	bl	8002e6c <read2ByteRegister>
 80029b6:	4603      	mov	r3, r0
 80029b8:	81fb      	strh	r3, [r7, #14]

	return register_data;
 80029ba:	89fb      	ldrh	r3, [r7, #14]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000020c 	.word	0x2000020c

080029c8 <registerWrite>:
  * @param  register_address register_address based on AS5147 datasheet & comment on as5147.h
  * @param  data register value based on AS5147 datasheet
  * @retval return 0
  */

int8_t registerWrite(uint16_t resgister_address, uint16_t data){
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	80fb      	strh	r3, [r7, #6]
 80029d4:	4613      	mov	r3, r2
 80029d6:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef state;

	Frame command = packCommandFrame(resgister_address, AS5047P_ACCESS_WRITE);
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f831 	bl	8002a44 <packCommandFrame>
 80029e2:	4603      	mov	r3, r0
 80029e4:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <registerWrite+0x78>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	f107 030c 	add.w	r3, r7, #12
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fa8f 	bl	8002f14 <write2ByteRegister>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <registerWrite+0x3e>
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	e017      	b.n	8002a36 <registerWrite+0x6e>

	command = packCommandFrame(data, AS5047P_ACCESS_WRITE);
 8002a06:	88bb      	ldrh	r3, [r7, #4]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f81a 	bl	8002a44 <packCommandFrame>
 8002a10:	4603      	mov	r3, r0
 8002a12:	81bb      	strh	r3, [r7, #12]
	state = write2ByteRegister(&command.raw, chip_num);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <registerWrite+0x78>)
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fa78 	bl	8002f14 <write2ByteRegister>
 8002a24:	4603      	mov	r3, r0
 8002a26:	73fb      	strb	r3, [r7, #15]
	if(state != HAL_OK) return -1;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <registerWrite+0x6c>
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	e000      	b.n	8002a36 <registerWrite+0x6e>

	return 0;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000020c 	.word	0x2000020c

08002a44 <packCommandFrame>:
  * @param  rw intput read or write state
  * @param  data register value based on AS5147 datasheet
  * @retval Frame struct which has data & R/W state & parity Bit 
  */

Frame packCommandFrame(uint16_t data, uint8_t rw){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	80fb      	strh	r3, [r7, #6]
 8002a50:	4613      	mov	r3, r2
 8002a52:	717b      	strb	r3, [r7, #5]
	Frame frame = { 0, };
 8002a54:	2300      	movs	r3, #0
 8002a56:	81bb      	strh	r3, [r7, #12]
	frame.values.data = data & AS5047P_FRAME_DATA;
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	f362 030d 	bfi	r3, r2, #0, #14
 8002a66:	81bb      	strh	r3, [r7, #12]
	frame.values.rw = rw;
 8002a68:	797b      	ldrb	r3, [r7, #5]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	f362 1386 	bfi	r3, r2, #6, #1
 8002a76:	737b      	strb	r3, [r7, #13]
	frame.values.pard = calcParity(frame.raw);
 8002a78:	89bb      	ldrh	r3, [r7, #12]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f80d 	bl	8002a9a <calcParity>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7b7b      	ldrb	r3, [r7, #13]
 8002a8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a8e:	737b      	strb	r3, [r7, #13]

	return frame;
 8002a90:	89bb      	ldrh	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <calcParity>:
/**
  * @brief calculate parity bit
  * @param  data register value
  * @retval data
  */
uint8_t calcParity(uint16_t data){
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 8;              // example for 8-bir (this line scales it up to 16 bit)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	4053      	eors	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	4053      	eors	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4053      	eors	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
	data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	4053      	eors	r3, r2
 8002ad2:	80fb      	strh	r3, [r7, #6]

	data = data & 0x0001;
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	80fb      	strh	r3, [r7, #6]

	return (uint8_t)data;
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	b2db      	uxtb	r3, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	0000      	movs	r0, r0
	...

08002af0 <calcRPM>:
  * @brief calculate rpm based on motor variable angle
  * @param  dif difference between current angle and pre-angle
  * @retval revolution per minute
  */

float calcRPM(float dif, float loop_time){
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	ed87 0a01 	vstr	s0, [r7, #4]
 8002afa:	edc7 0a00 	vstr	s1, [r7]
	if(dif < 0) dif += 360;
 8002afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	d507      	bpl.n	8002b1c <calcRPM+0x2c>
 8002b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b10:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002bc0 <calcRPM+0xd0>
 8002b14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b18:	edc7 7a01 	vstr	s15, [r7, #4]
	float w = (dif * (2*PI)/360.) * (1./loop_time);			// rad/sec
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fd fd3b 	bl	8000598 <__aeabi_f2d>
 8002b22:	a325      	add	r3, pc, #148	; (adr r3, 8002bb8 <calcRPM+0xc8>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fd8e 	bl	8000648 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <calcRPM+0xd4>)
 8002b3a:	f7fd feaf 	bl	800089c <__aeabi_ddiv>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	461d      	mov	r5, r3
 8002b46:	6838      	ldr	r0, [r7, #0]
 8002b48:	f7fd fd26 	bl	8000598 <__aeabi_f2d>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	491c      	ldr	r1, [pc, #112]	; (8002bc8 <calcRPM+0xd8>)
 8002b56:	f7fd fea1 	bl	800089c <__aeabi_ddiv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4620      	mov	r0, r4
 8002b60:	4629      	mov	r1, r5
 8002b62:	f7fd fd71 	bl	8000648 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fe f843 	bl	8000bf8 <__aeabi_d2f>
 8002b72:	4603      	mov	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]
	float rpm = (w * 60 / (2*PI));							// rotation/min
 8002b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002bcc <calcRPM+0xdc>
 8002b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b82:	ee17 0a90 	vmov	r0, s15
 8002b86:	f7fd fd07 	bl	8000598 <__aeabi_f2d>
 8002b8a:	a30b      	add	r3, pc, #44	; (adr r3, 8002bb8 <calcRPM+0xc8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f7fd fe84 	bl	800089c <__aeabi_ddiv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fe f82c 	bl	8000bf8 <__aeabi_d2f>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60bb      	str	r3, [r7, #8]
	return rpm;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	ee07 3a90 	vmov	s15, r3
}
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	53c8d4f1 	.word	0x53c8d4f1
 8002bbc:	401921fb 	.word	0x401921fb
 8002bc0:	43b40000 	.word	0x43b40000
 8002bc4:	40768000 	.word	0x40768000
 8002bc8:	3ff00000 	.word	0x3ff00000
 8002bcc:	42700000 	.word	0x42700000

08002bd0 <updatePosition>:
#include "sensor/position.h"

void updatePosition(MOTOR* motor, RC rc){
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	f107 0014 	add.w	r0, r7, #20
 8002bde:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	motor->pre_ang = motor->ang;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	605a      	str	r2, [r3, #4]

	sens_time = HAL_GetTick() - sens_start;
 8002bea:	f000 fb6b 	bl	80032c4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b33      	ldr	r3, [pc, #204]	; (8002cc0 <updatePosition+0xf0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	4a33      	ldr	r2, [pc, #204]	; (8002cc4 <updatePosition+0xf4>)
 8002bf8:	6013      	str	r3, [r2, #0]
	motor->ang = as5147_readPosition();
 8002bfa:	f7ff fe95 	bl	8002928 <as5147_readPosition>
 8002bfe:	eef0 7a40 	vmov.f32	s15, s0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edc3 7a02 	vstr	s15, [r3, #8]
	sens_start = HAL_GetTick();
 8002c08:	f000 fb5c 	bl	80032c4 <HAL_GetTick>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <updatePosition+0xf0>)
 8002c10:	6013      	str	r3, [r2, #0]

#if 1
	if(rc.aux3 > 1300){
 8002c12:	8c3b      	ldrh	r3, [r7, #32]
 8002c14:	f240 5214 	movw	r2, #1300	; 0x514
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d92b      	bls.n	8002c74 <updatePosition+0xa4>
		motor->ang = map(motor->ang, 180, 360, 0, 360);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c22:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002c26:	2200      	movs	r2, #0
 8002c28:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002c2c:	20b4      	movs	r0, #180	; 0xb4
 8002c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c32:	f7ff fa41 	bl	80020b8 <map>
 8002c36:	eef0 7a40 	vmov.f32	s15, s0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	edc3 7a02 	vstr	s15, [r3, #8]
		if(offset_flag == 1){
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <updatePosition+0xf8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d114      	bne.n	8002c74 <updatePosition+0xa4>
			motor->offset = map(motor->offset, 180, 360, 0, 360);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002c54:	2200      	movs	r2, #0
 8002c56:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002c5a:	20b4      	movs	r0, #180	; 0xb4
 8002c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c60:	f7ff fa2a 	bl	80020b8 <map>
 8002c64:	eef0 7a40 	vmov.f32	s15, s0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
			offset_flag = 0;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <updatePosition+0xf8>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	motor->ang -= motor->offset;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edc3 7a02 	vstr	s15, [r3, #8]
	if(motor->ang < 0)motor->ang += 360;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	d400      	bmi.n	8002c9c <updatePosition+0xcc>

}
 8002c9a:	e009      	b.n	8002cb0 <updatePosition+0xe0>
	if(motor->ang < 0)motor->ang += 360;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ca2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002ccc <updatePosition+0xfc>
 8002ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cba:	b004      	add	sp, #16
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	200028e4 	.word	0x200028e4
 8002cc4:	200028e0 	.word	0x200028e0
 8002cc8:	20002f34 	.word	0x20002f34
 8002ccc:	43b40000 	.word	0x43b40000

08002cd0 <updateRPM>:

void updateRPM(MOTOR* motor){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	motor->pre_rpm = motor->rpm;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
	motor->rpm = calcRPM(motor->pre_ang - motor->ang, 0.9/1000.);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf0:	eddf 0a21 	vldr	s1, [pc, #132]	; 8002d78 <updateRPM+0xa8>
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	f7ff fefa 	bl	8002af0 <calcRPM>
 8002cfc:	eef0 7a40 	vmov.f32	s15, s0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	edc3 7a04 	vstr	s15, [r3, #16]
	if(motor->rpm > RPM_MAX || motor->rpm < RPM_MIN){
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002d7c <updateRPM+0xac>
 8002d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	dc09      	bgt.n	8002d2e <updateRPM+0x5e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d20:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002d80 <updateRPM+0xb0>
 8002d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d503      	bpl.n	8002d36 <updateRPM+0x66>
		motor->rpm = motor->pre_rpm;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	611a      	str	r2, [r3, #16]
	}

#if 1
	motor->pre_lpf = motor->lpf;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	615a      	str	r2, [r3, #20]
	motor->lpf = LPF(motor->rpm, 0.9, motor->pre_rpm, motor->pre_lpf);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d50:	eef0 1a66 	vmov.f32	s3, s13
 8002d54:	eeb0 1a47 	vmov.f32	s2, s14
 8002d58:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002d84 <updateRPM+0xb4>
 8002d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d60:	f7ff f9e4 	bl	800212c <LPF>
 8002d64:	eef0 7a40 	vmov.f32	s15, s0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	edc3 7a06 	vstr	s15, [r3, #24]
#endif
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	3a6bedfa 	.word	0x3a6bedfa
 8002d7c:	45dac000 	.word	0x45dac000
 8002d80:	437a0000 	.word	0x437a0000
 8002d84:	3f666666 	.word	0x3f666666

08002d88 <setOffset>:
  * @brief  get offset for select front position
  * @param  none
  * @retval none
  */

void setOffset(MOTOR* motor){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

	motor->offset = as5147_readPosition();
 8002d90:	f7ff fdca 	bl	8002928 <as5147_readPosition>
 8002d94:	eef0 7a40 	vmov.f32	s15, s0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	edc3 7a00 	vstr	s15, [r3]

	offset_flag = 1;
 8002d9e:	4b03      	ldr	r3, [pc, #12]	; (8002dac <setOffset+0x24>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20002f34 	.word	0x20002f34

08002db0 <addChip>:
  * @param	GPIO_port GPIO init structure definition
  * @param	GPIO_num GPIO pin number
  * @retval boolean
  * success 1, if fail return false
  */
uint8_t addChip(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIO_port, uint16_t GPIO_num){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
	uint8_t chip_num = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75bb      	strb	r3, [r7, #22]
	uint8_t index = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]

	for(; index < 256; index++){
		if(chip_list[index].CS_pin == 0){
 8002dc6:	7dfa      	ldrb	r2, [r7, #23]
 8002dc8:	4927      	ldr	r1, [pc, #156]	; (8002e68 <addChip+0xb8>)
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <addChip+0x3a>
			chip_num = index;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
			break;
 8002de0:	bf00      	nop
		}
	}

	if(index != 255){
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2bff      	cmp	r3, #255	; 0xff
 8002de6:	d039      	beq.n	8002e5c <addChip+0xac>
 8002de8:	e003      	b.n	8002df2 <addChip+0x42>
	for(; index < 256; index++){
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	3301      	adds	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
		if(chip_list[index].CS_pin == 0){
 8002df0:	e7e9      	b.n	8002dc6 <addChip+0x16>
		chip_list[index].hspi = hspix;
 8002df2:	7dfa      	ldrb	r2, [r7, #23]
 8002df4:	491c      	ldr	r1, [pc, #112]	; (8002e68 <addChip+0xb8>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_port = GPIO_port;
 8002e04:	7dfa      	ldrb	r2, [r7, #23]
 8002e06:	4918      	ldr	r1, [pc, #96]	; (8002e68 <addChip+0xb8>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3304      	adds	r3, #4
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	601a      	str	r2, [r3, #0]
		chip_list[index].CS_pin = GPIO_num;
 8002e18:	7dfa      	ldrb	r2, [r7, #23]
 8002e1a:	4913      	ldr	r1, [pc, #76]	; (8002e68 <addChip+0xb8>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3308      	adds	r3, #8
 8002e28:	88fa      	ldrh	r2, [r7, #6]
 8002e2a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002e2c:	7dba      	ldrb	r2, [r7, #22]
 8002e2e:	490e      	ldr	r1, [pc, #56]	; (8002e68 <addChip+0xb8>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	7dba      	ldrb	r2, [r7, #22]
 8002e40:	4909      	ldr	r1, [pc, #36]	; (8002e68 <addChip+0xb8>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4619      	mov	r1, r3
 8002e54:	f000 ff38 	bl	8003cc8 <HAL_GPIO_WritePin>

		return 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <addChip+0xae>
	}else{
		return -1;
 8002e5c:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000210 	.word	0x20000210

08002e6c <read2ByteRegister>:
/**
  * @brief  read register value
  * @param  chip_num spi chip number
  * @retval data in register
  */
uint16_t read2ByteRegister(uint8_t chip_num){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
	uint16_t read_data = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	813b      	strh	r3, [r7, #8]
	uint16_t* pbuffer = &read_data;
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	4923      	ldr	r1, [pc, #140]	; (8002f10 <read2ByteRegister+0xa4>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3304      	adds	r3, #4
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	491e      	ldr	r1, [pc, #120]	; (8002f10 <read2ByteRegister+0xa4>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f000 ff0e 	bl	8003cc8 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Receive(chip_list[chip_num].hspi, (uint8_t*)pbuffer, 1, HAL_MAX_DELAY);
 8002eac:	79fa      	ldrb	r2, [r7, #7]
 8002eae:	4918      	ldr	r1, [pc, #96]	; (8002f10 <read2ByteRegister+0xa4>)
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	f002 f93b 	bl	800513e <HAL_SPI_Receive>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002ecc:	79fa      	ldrb	r2, [r7, #7]
 8002ece:	4910      	ldr	r1, [pc, #64]	; (8002f10 <read2ByteRegister+0xa4>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3304      	adds	r3, #4
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	490b      	ldr	r1, [pc, #44]	; (8002f10 <read2ByteRegister+0xa4>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f000 fee8 	bl	8003cc8 <HAL_GPIO_WritePin>

	if(state != HAL_OK){
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <read2ByteRegister+0x98>
		return state;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	e000      	b.n	8002f06 <read2ByteRegister+0x9a>
	}

	return read_data;
 8002f04:	893b      	ldrh	r3, [r7, #8]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000210 	.word	0x20000210

08002f14 <write2ByteRegister>:
  * @brief  write register value
  * @param	command data what will write in register
  * @param  chip_num spi chip number
  * @retval HAL status
  */
HAL_StatusTypeDef write2ByteRegister(uint16_t* command, uint8_t chip_num){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_RESET);
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4920      	ldr	r1, [pc, #128]	; (8002fa4 <write2ByteRegister+0x90>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3304      	adds	r3, #4
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	491b      	ldr	r1, [pc, #108]	; (8002fa4 <write2ByteRegister+0x90>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3308      	adds	r3, #8
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	2200      	movs	r2, #0
 8002f46:	4619      	mov	r1, r3
 8002f48:	f000 febe 	bl	8003cc8 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef state = HAL_SPI_Transmit(chip_list[chip_num].hspi, (uint8_t*)command, 1, HAL_MAX_DELAY);
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4915      	ldr	r1, [pc, #84]	; (8002fa4 <write2ByteRegister+0x90>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	2201      	movs	r2, #1
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	f001 ff7d 	bl	8004e62 <HAL_SPI_Transmit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(chip_list[chip_num].CS_port, chip_list[chip_num].CS_pin, GPIO_PIN_SET);
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	490d      	ldr	r1, [pc, #52]	; (8002fa4 <write2ByteRegister+0x90>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <write2ByteRegister+0x90>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	2201      	movs	r2, #1
 8002f92:	4619      	mov	r1, r3
 8002f94:	f000 fe98 	bl	8003cc8 <HAL_GPIO_WritePin>

	return state;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000210 	.word	0x20000210

08002fa8 <get_packet_moter>:

#include "tmtc/tmtc.h"

UART_HandleTypeDef huart2;

void get_packet_moter(MOTOR motor, SPT_Value setpoint_value){
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	f107 0c18 	add.w	ip, r7, #24
 8002fb4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002fb8:	eeb0 6a40 	vmov.f32	s12, s0
 8002fbc:	eef0 6a60 	vmov.f32	s13, s1
 8002fc0:	eeb0 7a41 	vmov.f32	s14, s2
 8002fc4:	eef0 7a61 	vmov.f32	s15, s3
 8002fc8:	ed87 6a00 	vstr	s12, [r7]
 8002fcc:	edc7 6a01 	vstr	s13, [r7, #4]
 8002fd0:	ed87 7a02 	vstr	s14, [r7, #8]
 8002fd4:	edc7 7a03 	vstr	s15, [r7, #12]
	payload.A = *(uint32_t*)(&motor.ang);
 8002fd8:	f107 0320 	add.w	r3, r7, #32
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <get_packet_moter+0x80>)
 8002fe0:	6013      	str	r3, [r2, #0]
	payload.B = *(uint32_t*)(&motor.rpm);
 8002fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0f      	ldr	r2, [pc, #60]	; (8003028 <get_packet_moter+0x80>)
 8002fea:	6053      	str	r3, [r2, #4]
	payload.C = *(uint32_t*)(&setpoint_value.speed);
 8002fec:	463b      	mov	r3, r7
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <get_packet_moter+0x80>)
 8002ff2:	6093      	str	r3, [r2, #8]
	payload.D = *(uint32_t*)(&motor.pwm);
 8002ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <get_packet_moter+0x80>)
 8002ffc:	60d3      	str	r3, [r2, #12]
	payload.E = 0x00;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <get_packet_moter+0x80>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
    payload.F = 0x00;
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <get_packet_moter+0x80>)
 8003006:	2200      	movs	r2, #0
 8003008:	615a      	str	r2, [r3, #20]
    payload.G = 0x00;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <get_packet_moter+0x80>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
    trans_pc(5,0);
 8003010:	2100      	movs	r1, #0
 8003012:	2005      	movs	r0, #5
 8003014:	f000 f836 	bl	8003084 <trans_pc>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003022:	b004      	add	sp, #16
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20002c4c 	.word	0x20002c4c

0800302c <get_packet_rc>:

void get_packet_rc(RC rc){
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	463c      	mov	r4, r7
 8003034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	payload.A = rc.throttle;
 8003038:	883b      	ldrh	r3, [r7, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <get_packet_rc+0x54>)
 800303e:	601a      	str	r2, [r3, #0]
	payload.B = rc.roll;
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	461a      	mov	r2, r3
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <get_packet_rc+0x54>)
 8003046:	605a      	str	r2, [r3, #4]
	payload.C = rc.pitch;
 8003048:	88bb      	ldrh	r3, [r7, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <get_packet_rc+0x54>)
 800304e:	609a      	str	r2, [r3, #8]
	payload.D = rc.yaw;
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	461a      	mov	r2, r3
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <get_packet_rc+0x54>)
 8003056:	60da      	str	r2, [r3, #12]
	payload.E = rc.aux1;
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	461a      	mov	r2, r3
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <get_packet_rc+0x54>)
 800305e:	611a      	str	r2, [r3, #16]
	payload.F = rc.aux2;
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	461a      	mov	r2, r3
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <get_packet_rc+0x54>)
 8003066:	615a      	str	r2, [r3, #20]
	payload.G = rc.aux3;
 8003068:	89bb      	ldrh	r3, [r7, #12]
 800306a:	461a      	mov	r2, r3
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <get_packet_rc+0x54>)
 800306e:	619a      	str	r2, [r3, #24]

    trans_pc(7,1);
 8003070:	2101      	movs	r1, #1
 8003072:	2007      	movs	r0, #7
 8003074:	f000 f806 	bl	8003084 <trans_pc>
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	20002c4c 	.word	0x20002c4c

08003084 <trans_pc>:
  * @brief  패킷 정의 후 UART 송신
  * @param  uint8_t 보내는 패킷구조체 중 실제 구조체 크기
  * @param  uint8_t 메시지ID
  * @retval None
  */
void trans_pc(uint8_t len, uint8_t msgid){
 8003084:	b5b0      	push	{r4, r5, r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	460a      	mov	r2, r1
 800308e:	71fb      	strb	r3, [r7, #7]
 8003090:	4613      	mov	r3, r2
 8003092:	71bb      	strb	r3, [r7, #6]
	tp.header = STX;
 8003094:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <trans_pc+0x18c>)
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	701a      	strb	r2, [r3, #0]
	tp.len = len;
 800309a:	4a5d      	ldr	r2, [pc, #372]	; (8003210 <trans_pc+0x18c>)
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	7053      	strb	r3, [r2, #1]
	tp.msgid = msgid;
 80030a0:	4a5b      	ldr	r2, [pc, #364]	; (8003210 <trans_pc+0x18c>)
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	7093      	strb	r3, [r2, #2]
	tp.payload = payload;
 80030a6:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <trans_pc+0x18c>)
 80030a8:	4a5a      	ldr	r2, [pc, #360]	; (8003214 <trans_pc+0x190>)
 80030aa:	1d1c      	adds	r4, r3, #4
 80030ac:	4615      	mov	r5, r2
 80030ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tp.end = ETX;
 80030ba:	4b55      	ldr	r3, [pc, #340]	; (8003210 <trans_pc+0x18c>)
 80030bc:	22ee      	movs	r2, #238	; 0xee
 80030be:	f883 2020 	strb.w	r2, [r3, #32]

	uint8_t buffer[32] = {
			tp.header,
 80030c2:	4b53      	ldr	r3, [pc, #332]	; (8003210 <trans_pc+0x18c>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
	uint8_t buffer[32] = {
 80030c6:	723b      	strb	r3, [r7, #8]
			tp.len,
 80030c8:	4b51      	ldr	r3, [pc, #324]	; (8003210 <trans_pc+0x18c>)
 80030ca:	785b      	ldrb	r3, [r3, #1]
	uint8_t buffer[32] = {
 80030cc:	727b      	strb	r3, [r7, #9]
			tp.msgid,
 80030ce:	4b50      	ldr	r3, [pc, #320]	; (8003210 <trans_pc+0x18c>)
 80030d0:	789b      	ldrb	r3, [r3, #2]
	uint8_t buffer[32] = {
 80030d2:	72bb      	strb	r3, [r7, #10]
			(uint8_t)((tp.payload.A & 0XFF000000) >> 24),
 80030d4:	4b4e      	ldr	r3, [pc, #312]	; (8003210 <trans_pc+0x18c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80030dc:	72fb      	strb	r3, [r7, #11]
			(uint8_t)((tp.payload.A & 0X00FF0000) >> 16),
 80030de:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <trans_pc+0x18c>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0c1b      	lsrs	r3, r3, #16
 80030e4:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80030e6:	733b      	strb	r3, [r7, #12]
			(uint8_t)((tp.payload.A & 0X0000FF00) >> 8),
 80030e8:	4b49      	ldr	r3, [pc, #292]	; (8003210 <trans_pc+0x18c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80030f0:	737b      	strb	r3, [r7, #13]
			(uint8_t)((tp.payload.A & 0X000000FF)),
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <trans_pc+0x18c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80030f8:	73bb      	strb	r3, [r7, #14]
			(uint8_t)((tp.payload.B & 0XFF000000) >> 24),
 80030fa:	4b45      	ldr	r3, [pc, #276]	; (8003210 <trans_pc+0x18c>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	0e1b      	lsrs	r3, r3, #24
 8003100:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003102:	73fb      	strb	r3, [r7, #15]
			(uint8_t)((tp.payload.B & 0X00FF0000) >> 16),
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <trans_pc+0x18c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800310c:	743b      	strb	r3, [r7, #16]
			(uint8_t)((tp.payload.B & 0X0000FF00) >> 8),
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <trans_pc+0x18c>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003116:	747b      	strb	r3, [r7, #17]
			(uint8_t)((tp.payload.B & 0X000000FF)),
 8003118:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <trans_pc+0x18c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800311e:	74bb      	strb	r3, [r7, #18]
			(uint8_t)((tp.payload.C & 0XFF000000) >> 24),
 8003120:	4b3b      	ldr	r3, [pc, #236]	; (8003210 <trans_pc+0x18c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003128:	74fb      	strb	r3, [r7, #19]
			(uint8_t)((tp.payload.C & 0X00FF0000) >> 16),
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <trans_pc+0x18c>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003132:	753b      	strb	r3, [r7, #20]
			(uint8_t)((tp.payload.C & 0X0000FF00) >> 8),
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <trans_pc+0x18c>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800313c:	757b      	strb	r3, [r7, #21]
			(uint8_t)((tp.payload.C & 0X000000FF)),
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <trans_pc+0x18c>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003144:	75bb      	strb	r3, [r7, #22]
			(uint8_t)((tp.payload.D & 0XFF000000) >> 24),
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <trans_pc+0x18c>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	0e1b      	lsrs	r3, r3, #24
 800314c:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800314e:	75fb      	strb	r3, [r7, #23]
			(uint8_t)((tp.payload.D & 0X00FF0000) >> 16),
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <trans_pc+0x18c>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003158:	763b      	strb	r3, [r7, #24]
			(uint8_t)((tp.payload.D & 0X0000FF00) >> 8),
 800315a:	4b2d      	ldr	r3, [pc, #180]	; (8003210 <trans_pc+0x18c>)
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003162:	767b      	strb	r3, [r7, #25]
			(uint8_t)((tp.payload.D & 0X000000FF)),
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <trans_pc+0x18c>)
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800316a:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((tp.payload.E & 0XFF000000) >> 24),
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <trans_pc+0x18c>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	0e1b      	lsrs	r3, r3, #24
 8003172:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003174:	76fb      	strb	r3, [r7, #27]
			(uint8_t)((tp.payload.E & 0X00FF0000) >> 16),
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <trans_pc+0x18c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800317e:	773b      	strb	r3, [r7, #28]
			(uint8_t)((tp.payload.E & 0X0000FF00) >> 8),
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <trans_pc+0x18c>)
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003188:	777b      	strb	r3, [r7, #29]
			(uint8_t)((tp.payload.E & 0X000000FF)),
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <trans_pc+0x18c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 8003190:	77bb      	strb	r3, [r7, #30]
			(uint8_t)((tp.payload.F & 0XFF000000) >> 24),
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <trans_pc+0x18c>)
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	0e1b      	lsrs	r3, r3, #24
 8003198:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 800319a:	77fb      	strb	r3, [r7, #31]
			(uint8_t)((tp.payload.F & 0X00FF0000) >> 16),
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <trans_pc+0x18c>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031a4:	f887 3020 	strb.w	r3, [r7, #32]
			(uint8_t)((tp.payload.F & 0X0000FF00) >> 8),
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <trans_pc+0x18c>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			(uint8_t)((tp.payload.F & 0X000000FF)),
 80031b4:	4b16      	ldr	r3, [pc, #88]	; (8003210 <trans_pc+0x18c>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			(uint8_t)((tp.payload.G & 0XFF000000) >> 24),
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <trans_pc+0x18c>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	0e1b      	lsrs	r3, r3, #24
 80031c4:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			(uint8_t)((tp.payload.G & 0X00FF0000) >> 16),
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <trans_pc+0x18c>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			(uint8_t)((tp.payload.G & 0X0000FF00) >> 8),
 80031d6:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <trans_pc+0x18c>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(uint8_t)((tp.payload.G & 0X000000FF)),
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <trans_pc+0x18c>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	b2db      	uxtb	r3, r3
	uint8_t buffer[32] = {
 80031e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			tp.end
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <trans_pc+0x18c>)
 80031ee:	f893 3020 	ldrb.w	r3, [r3, #32]
	uint8_t buffer[32] = {
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	};

	HAL_UART_Transmit(&huart2, buffer, 32, 1000); //읽어드린 값 터미널로 출력
 80031f6:	f107 0108 	add.w	r1, r7, #8
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	2220      	movs	r2, #32
 8003200:	4805      	ldr	r0, [pc, #20]	; (8003218 <trans_pc+0x194>)
 8003202:	f004 f869 	bl	80072d8 <HAL_UART_Transmit>
}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bdb0      	pop	{r4, r5, r7, pc}
 800320e:	bf00      	nop
 8003210:	20002f98 	.word	0x20002f98
 8003214:	20002c4c 	.word	0x20002c4c
 8003218:	20002c94 	.word	0x20002c94

0800321c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800321e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003220:	480d      	ldr	r0, [pc, #52]	; (8003258 <LoopForever+0x6>)
  ldr r1, =_edata
 8003222:	490e      	ldr	r1, [pc, #56]	; (800325c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003224:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <LoopForever+0xe>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003228:	e002      	b.n	8003230 <LoopCopyDataInit>

0800322a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800322a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322e:	3304      	adds	r3, #4

08003230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003234:	d3f9      	bcc.n	800322a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003238:	4c0b      	ldr	r4, [pc, #44]	; (8003268 <LoopForever+0x16>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800323c:	e001      	b.n	8003242 <LoopFillZerobss>

0800323e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003240:	3204      	adds	r2, #4

08003242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003244:	d3fb      	bcc.n	800323e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003246:	f7fe fdb1 	bl	8001dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324a:	f007 fecd 	bl	800afe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800324e:	f7fd fe9f 	bl	8000f90 <main>

08003252 <LoopForever>:

LoopForever:
    b LoopForever
 8003252:	e7fe      	b.n	8003252 <LoopForever>
  ldr   r0, =_estack
 8003254:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800325c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003260:	0800f110 	.word	0x0800f110
  ldr r2, =_sbss
 8003264:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003268:	20003064 	.word	0x20003064

0800326c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800326c:	e7fe      	b.n	800326c <ADC1_2_IRQHandler>

0800326e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003278:	2003      	movs	r0, #3
 800327a:	f000 f8fe 	bl	800347a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800327e:	2000      	movs	r0, #0
 8003280:	f7fe fc34 	bl	8001aec <HAL_InitTick>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	e001      	b.n	8003294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003290:	f7fe faa6 	bl	80017e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003294:	79fb      	ldrb	r3, [r7, #7]

}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_IncTick+0x1c>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_IncTick+0x20>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a03      	ldr	r2, [pc, #12]	; (80032bc <HAL_IncTick+0x1c>)
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	20003010 	.word	0x20003010
 80032c0:	20000008 	.word	0x20000008

080032c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return uwTick;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_GetTick+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20003010 	.word	0x20003010

080032dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff ffee 	bl	80032c4 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d004      	beq.n	8003300 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_Delay+0x40>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003300:	bf00      	nop
 8003302:	f7ff ffdf 	bl	80032c4 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	429a      	cmp	r2, r3
 8003310:	d8f7      	bhi.n	8003302 <HAL_Delay+0x26>
  {
  }
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000008 	.word	0x20000008

08003320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003352:	4a04      	ldr	r2, [pc, #16]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	60d3      	str	r3, [r2, #12]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ff4c 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800349e:	f7ff ff63 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	6978      	ldr	r0, [r7, #20]
 80034aa:	f7ff ffb3 	bl	8003414 <NVIC_EncodePriority>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff82 	bl	80033c0 <__NVIC_SetPriority>
}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff ff56 	bl	8003384 <__NVIC_EnableIRQ>
}
 80034d8:	bf00      	nop
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e08d      	b.n	800360e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_DMA_Init+0x138>)
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d80f      	bhi.n	800351e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_DMA_Init+0x13c>)
 8003506:	4413      	add	r3, r2
 8003508:	4a45      	ldr	r2, [pc, #276]	; (8003620 <HAL_DMA_Init+0x140>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	009a      	lsls	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a42      	ldr	r2, [pc, #264]	; (8003624 <HAL_DMA_Init+0x144>)
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
 800351c:	e00e      	b.n	800353c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	4b40      	ldr	r3, [pc, #256]	; (8003628 <HAL_DMA_Init+0x148>)
 8003526:	4413      	add	r3, r2
 8003528:	4a3d      	ldr	r2, [pc, #244]	; (8003620 <HAL_DMA_Init+0x140>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	091b      	lsrs	r3, r3, #4
 8003530:	009a      	lsls	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a3c      	ldr	r2, [pc, #240]	; (800362c <HAL_DMA_Init+0x14c>)
 800353a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9b6 	bl	8003900 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359c:	d102      	bne.n	80035a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <HAL_DMA_Init+0x104>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d80c      	bhi.n	80035e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9d6 	bl	800397c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e008      	b.n	80035f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40020407 	.word	0x40020407
 800361c:	bffdfff8 	.word	0xbffdfff8
 8003620:	cccccccd 	.word	0xcccccccd
 8003624:	40020000 	.word	0x40020000
 8003628:	bffdfbf8 	.word	0xbffdfbf8
 800362c:	40020400 	.word	0x40020400

08003630 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Start_IT+0x20>
 800364c:	2302      	movs	r3, #2
 800364e:	e066      	b.n	800371e <HAL_DMA_Start_IT+0xee>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d155      	bne.n	8003710 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f8fb 	bl	8003884 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 020e 	orr.w	r2, r2, #14
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e00f      	b.n	80036c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0204 	bic.w	r2, r2, #4
 80036b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 020a 	orr.w	r2, r2, #10
 80036c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e005      	b.n	800371c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800371c:	7dfb      	ldrb	r3, [r7, #23]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f003 031f 	and.w	r3, r3, #31
 8003746:	2204      	movs	r2, #4
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d026      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x7a>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d021      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0204 	bic.w	r2, r2, #4
 8003778:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f003 021f 	and.w	r2, r3, #31
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	2104      	movs	r1, #4
 8003788:	fa01 f202 	lsl.w	r2, r1, r2
 800378c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d071      	beq.n	800387a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800379e:	e06c      	b.n	800387a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2202      	movs	r2, #2
 80037aa:	409a      	lsls	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d02e      	beq.n	8003812 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d029      	beq.n	8003812 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 020a 	bic.w	r2, r2, #10
 80037da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2102      	movs	r1, #2
 80037f2:	fa01 f202 	lsl.w	r2, r1, r2
 80037f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d038      	beq.n	800387a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003810:	e033      	b.n	800387a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2208      	movs	r2, #8
 800381c:	409a      	lsls	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4013      	ands	r3, r2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02a      	beq.n	800387c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d025      	beq.n	800387c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020e 	bic.w	r2, r2, #14
 800383e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f202 	lsl.w	r2, r1, r2
 8003852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800387a:	bf00      	nop
 800387c:	bf00      	nop
}
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800389a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d108      	bne.n	80038e4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038e2:	e007      	b.n	80038f4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b16      	ldr	r3, [pc, #88]	; (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003910:	429a      	cmp	r2, r3
 8003912:	d802      	bhi.n	800391a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	e001      	b.n	800391e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800391c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	3b08      	subs	r3, #8
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800394a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	2201      	movs	r2, #1
 8003954:	409a      	lsls	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	651a      	str	r2, [r3, #80]	; 0x50
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40020407 	.word	0x40020407
 800396c:	40020800 	.word	0x40020800
 8003970:	40020820 	.word	0x40020820
 8003974:	cccccccd 	.word	0xcccccccd
 8003978:	40020880 	.word	0x40020880

0800397c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	461a      	mov	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800399e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	f003 031f 	and.w	r3, r3, #31
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	1000823f 	.word	0x1000823f
 80039c0:	40020940 	.word	0x40020940

080039c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039d2:	e15a      	b.n	8003c8a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 814c 	beq.w	8003c84 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d00b      	beq.n	8003a0c <HAL_GPIO_Init+0x48>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d007      	beq.n	8003a0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a00:	2b11      	cmp	r3, #17
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b12      	cmp	r3, #18
 8003a0a:	d130      	bne.n	8003a6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4013      	ands	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a42:	2201      	movs	r2, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 0201 	and.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_Init+0xea>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b12      	cmp	r3, #18
 8003aac:	d123      	bne.n	8003af6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	08da      	lsrs	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3208      	adds	r2, #8
 8003ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	220f      	movs	r2, #15
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	6939      	ldr	r1, [r7, #16]
 8003af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	2203      	movs	r2, #3
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0203 	and.w	r2, r3, #3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80a6 	beq.w	8003c84 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_GPIO_Init+0x2e4>)
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3c:	4a5a      	ldr	r2, [pc, #360]	; (8003ca8 <HAL_GPIO_Init+0x2e4>)
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	6613      	str	r3, [r2, #96]	; 0x60
 8003b44:	4b58      	ldr	r3, [pc, #352]	; (8003ca8 <HAL_GPIO_Init+0x2e4>)
 8003b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b50:	4a56      	ldr	r2, [pc, #344]	; (8003cac <HAL_GPIO_Init+0x2e8>)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	089b      	lsrs	r3, r3, #2
 8003b56:	3302      	adds	r3, #2
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	220f      	movs	r2, #15
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b7a:	d01f      	beq.n	8003bbc <HAL_GPIO_Init+0x1f8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a4c      	ldr	r2, [pc, #304]	; (8003cb0 <HAL_GPIO_Init+0x2ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d019      	beq.n	8003bb8 <HAL_GPIO_Init+0x1f4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <HAL_GPIO_Init+0x2f0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_GPIO_Init+0x1f0>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <HAL_GPIO_Init+0x2f4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00d      	beq.n	8003bb0 <HAL_GPIO_Init+0x1ec>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a49      	ldr	r2, [pc, #292]	; (8003cbc <HAL_GPIO_Init+0x2f8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <HAL_GPIO_Init+0x1e8>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a48      	ldr	r2, [pc, #288]	; (8003cc0 <HAL_GPIO_Init+0x2fc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_GPIO_Init+0x1e4>
 8003ba4:	2305      	movs	r3, #5
 8003ba6:	e00a      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003ba8:	2306      	movs	r3, #6
 8003baa:	e008      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003bac:	2304      	movs	r3, #4
 8003bae:	e006      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e004      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e002      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <HAL_GPIO_Init+0x1fa>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	f002 0203 	and.w	r2, r2, #3
 8003bc4:	0092      	lsls	r2, r2, #2
 8003bc6:	4093      	lsls	r3, r2
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bce:	4937      	ldr	r1, [pc, #220]	; (8003cac <HAL_GPIO_Init+0x2e8>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	3302      	adds	r3, #2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bdc:	4b39      	ldr	r3, [pc, #228]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c06:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c2a:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c54:	4a1b      	ldr	r2, [pc, #108]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c5a:	4b1a      	ldr	r3, [pc, #104]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7e:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_GPIO_Init+0x300>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3301      	adds	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f ae9d 	bne.w	80039d4 <HAL_GPIO_Init+0x10>
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	48000400 	.word	0x48000400
 8003cb4:	48000800 	.word	0x48000800
 8003cb8:	48000c00 	.word	0x48000c00
 8003cbc:	48001000 	.word	0x48001000
 8003cc0:	48001400 	.word	0x48001400
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd8:	787b      	ldrb	r3, [r7, #1]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cde:	887a      	ldrh	r2, [r7, #2]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d141      	bne.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d12:	d131      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d14:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d2c:	4a41      	ldr	r2, [pc, #260]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2232      	movs	r2, #50	; 0x32
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	0c9b      	lsrs	r3, r3, #18
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	e002      	b.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5e:	d102      	bne.n	8003d66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f2      	bne.n	8003d4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d66:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d72:	d158      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e057      	b.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7e:	4a2d      	ldr	r2, [pc, #180]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d88:	e04d      	b.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d141      	bne.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d131      	bne.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da0:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2232      	movs	r2, #50	; 0x32
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	4a1c      	ldr	r2, [pc, #112]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	0c9b      	lsrs	r3, r3, #18
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	e002      	b.n	8003dde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d102      	bne.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f2      	bne.n	8003dd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfe:	d112      	bne.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e011      	b.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e14:	e007      	b.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40007000 	.word	0x40007000
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	431bde83 	.word	0x431bde83

08003e40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4e:	6093      	str	r3, [r2, #8]
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40007000 	.word	0x40007000

08003e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e308      	b.n	8004484 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d075      	beq.n	8003f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4ba3      	ldr	r3, [pc, #652]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4ba0      	ldr	r3, [pc, #640]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d102      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3e>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d002      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x44>
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	4b99      	ldr	r3, [pc, #612]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05b      	beq.n	8003f68 <HAL_RCC_OscConfig+0x108>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d157      	bne.n	8003f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e2e3      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ec4:	d106      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x74>
 8003ec6:	4b91      	ldr	r3, [pc, #580]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a90      	ldr	r2, [pc, #576]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed0:	6013      	str	r3, [r2, #0]
 8003ed2:	e01d      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x98>
 8003ede:	4b8b      	ldr	r3, [pc, #556]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a8a      	ldr	r2, [pc, #552]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a87      	ldr	r2, [pc, #540]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e00b      	b.n	8003f10 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	4b84      	ldr	r3, [pc, #528]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a83      	ldr	r2, [pc, #524]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	4b81      	ldr	r3, [pc, #516]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a80      	ldr	r2, [pc, #512]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d013      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7ff f9d4 	bl	80032c4 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f20:	f7ff f9d0 	bl	80032c4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e2a8      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f32:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0xc0>
 8003f3e:	e014      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7ff f9c0 	bl	80032c4 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7ff f9bc 	bl	80032c4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e294      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f5a:	4b6c      	ldr	r3, [pc, #432]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0xe8>
 8003f66:	e000      	b.n	8003f6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d075      	beq.n	8004062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_OscConfig+0x136>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_OscConfig+0x13c>
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d11f      	bne.n	8003fdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f9c:	4b5b      	ldr	r3, [pc, #364]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x154>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e267      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb4:	4b55      	ldr	r3, [pc, #340]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	061b      	lsls	r3, r3, #24
 8003fc2:	4952      	ldr	r1, [pc, #328]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fc8:	4b51      	ldr	r3, [pc, #324]	; (8004110 <HAL_RCC_OscConfig+0x2b0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd fd8d 	bl	8001aec <HAL_InitTick>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d043      	beq.n	8004060 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e253      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d023      	beq.n	800402c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe4:	4b49      	ldr	r3, [pc, #292]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7ff f968 	bl	80032c4 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7ff f964 	bl	80032c4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e23c      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	4b40      	ldr	r3, [pc, #256]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4939      	ldr	r1, [pc, #228]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8004026:	4313      	orrs	r3, r2
 8004028:	604b      	str	r3, [r1, #4]
 800402a:	e01a      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800402c:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a36      	ldr	r2, [pc, #216]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8004032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7ff f944 	bl	80032c4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004040:	f7ff f940 	bl	80032c4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e218      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004052:	4b2e      	ldr	r3, [pc, #184]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x1e0>
 800405e:	e000      	b.n	8004062 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7ff f91d 	bl	80032c4 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800408e:	f7ff f919 	bl	80032c4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b02      	cmp	r3, #2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e1f1      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ef      	beq.n	800408e <HAL_RCC_OscConfig+0x22e>
 80040ae:	e01b      	b.n	80040e8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040b6:	4a15      	ldr	r2, [pc, #84]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c0:	f7ff f900 	bl	80032c4 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c8:	f7ff f8fc 	bl	80032c4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1d4      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ef      	bne.n	80040c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80ab 	beq.w	800424c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040fa:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x2b4>
 8004106:	2301      	movs	r3, #1
 8004108:	e005      	b.n	8004116 <HAL_RCC_OscConfig+0x2b6>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	20000004 	.word	0x20000004
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	4baf      	ldr	r3, [pc, #700]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	4aae      	ldr	r2, [pc, #696]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004124:	6593      	str	r3, [r2, #88]	; 0x58
 8004126:	4bac      	ldr	r3, [pc, #688]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004132:	2301      	movs	r3, #1
 8004134:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004136:	4ba9      	ldr	r3, [pc, #676]	; (80043dc <HAL_RCC_OscConfig+0x57c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d118      	bne.n	8004174 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004142:	4ba6      	ldr	r3, [pc, #664]	; (80043dc <HAL_RCC_OscConfig+0x57c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <HAL_RCC_OscConfig+0x57c>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414e:	f7ff f8b9 	bl	80032c4 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7ff f8b5 	bl	80032c4 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e18d      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004168:	4b9c      	ldr	r3, [pc, #624]	; (80043dc <HAL_RCC_OscConfig+0x57c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d108      	bne.n	800418e <HAL_RCC_OscConfig+0x32e>
 800417c:	4b96      	ldr	r3, [pc, #600]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	4a95      	ldr	r2, [pc, #596]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800418c:	e024      	b.n	80041d8 <HAL_RCC_OscConfig+0x378>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d110      	bne.n	80041b8 <HAL_RCC_OscConfig+0x358>
 8004196:	4b90      	ldr	r3, [pc, #576]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	4a8e      	ldr	r2, [pc, #568]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800419e:	f043 0304 	orr.w	r3, r3, #4
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041a6:	4b8c      	ldr	r3, [pc, #560]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	4a8a      	ldr	r2, [pc, #552]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041b6:	e00f      	b.n	80041d8 <HAL_RCC_OscConfig+0x378>
 80041b8:	4b87      	ldr	r3, [pc, #540]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	4a86      	ldr	r2, [pc, #536]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041c8:	4b83      	ldr	r3, [pc, #524]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a82      	ldr	r2, [pc, #520]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d016      	beq.n	800420e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7ff f870 	bl	80032c4 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e8:	f7ff f86c 	bl	80032c4 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e142      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ed      	beq.n	80041e8 <HAL_RCC_OscConfig+0x388>
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7ff f859 	bl	80032c4 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7ff f855 	bl	80032c4 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	; 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e12b      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ed      	bne.n	8004216 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800423a:	7ffb      	ldrb	r3, [r7, #31]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004240:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	4a64      	ldr	r2, [pc, #400]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d03c      	beq.n	80042d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01c      	beq.n	800429a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004260:	4b5d      	ldr	r3, [pc, #372]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	4a5c      	ldr	r2, [pc, #368]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7ff f828 	bl	80032c4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004278:	f7ff f824 	bl	80032c4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0fc      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800428c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ef      	beq.n	8004278 <HAL_RCC_OscConfig+0x418>
 8004298:	e01b      	b.n	80042d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800429c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a0:	4a4d      	ldr	r2, [pc, #308]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7ff f80b 	bl	80032c4 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042b2:	f7ff f807 	bl	80032c4 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0df      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c4:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80042c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ef      	bne.n	80042b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80d3 	beq.w	8004482 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	f000 808d 	beq.w	8004404 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d15a      	bne.n	80043a8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80042f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fe:	f7fe ffe1 	bl	80032c4 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004306:	f7fe ffdd 	bl	80032c4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0b5      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004318:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_RCC_OscConfig+0x580>)
 800432a:	4013      	ands	r3, r2
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6a11      	ldr	r1, [r2, #32]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004334:	3a01      	subs	r2, #1
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	4311      	orrs	r1, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800433e:	0212      	lsls	r2, r2, #8
 8004340:	4311      	orrs	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004346:	0852      	lsrs	r2, r2, #1
 8004348:	3a01      	subs	r2, #1
 800434a:	0552      	lsls	r2, r2, #21
 800434c:	4311      	orrs	r1, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004352:	0852      	lsrs	r2, r2, #1
 8004354:	3a01      	subs	r2, #1
 8004356:	0652      	lsls	r2, r2, #25
 8004358:	4311      	orrs	r1, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800435e:	06d2      	lsls	r2, r2, #27
 8004360:	430a      	orrs	r2, r1
 8004362:	491d      	ldr	r1, [pc, #116]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004364:	4313      	orrs	r3, r2
 8004366:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800436e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004372:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800437a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe ffa0 	bl	80032c4 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fe ff9c 	bl	80032c4 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e074      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x528>
 80043a6:	e06c      	b.n	8004482 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCC_OscConfig+0x578>)
 80043c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe ff78 	bl	80032c4 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d6:	e00e      	b.n	80043f6 <HAL_RCC_OscConfig+0x596>
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
 80043e0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe ff6e 	bl	80032c4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e046      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_OscConfig+0x62c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x584>
 8004402:	e03e      	b.n	8004482 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e039      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_RCC_OscConfig+0x62c>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	429a      	cmp	r2, r3
 8004422:	d12c      	bne.n	800447e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d123      	bne.n	800447e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11b      	bne.n	800447e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d113      	bne.n	800447e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	085b      	lsrs	r3, r3, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d109      	bne.n	800447e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e11e      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b91      	ldr	r3, [pc, #580]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b8e      	ldr	r3, [pc, #568]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	498c      	ldr	r1, [pc, #560]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b8a      	ldr	r3, [pc, #552]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e106      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d073      	beq.n	80045cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d129      	bne.n	8004540 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ec:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0f4      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044fc:	f000 f9d0 	bl	80048a0 <RCC_GetSysClockFreqFromPLLSource>
 8004500:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4a7c      	ldr	r2, [pc, #496]	; (80046f8 <HAL_RCC_ClockConfig+0x268>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d93f      	bls.n	800458a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800450a:	4b7a      	ldr	r3, [pc, #488]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d009      	beq.n	800452a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d033      	beq.n	800458a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004526:	2b00      	cmp	r3, #0
 8004528:	d12f      	bne.n	800458a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800452a:	4b72      	ldr	r3, [pc, #456]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004532:	4a70      	ldr	r2, [pc, #448]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004538:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e024      	b.n	800458a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d107      	bne.n	8004558 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004548:	4b6a      	ldr	r3, [pc, #424]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e0c6      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004558:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0be      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004568:	f000 f8ce 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 800456c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4a61      	ldr	r2, [pc, #388]	; (80046f8 <HAL_RCC_ClockConfig+0x268>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d909      	bls.n	800458a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004576:	4b5f      	ldr	r3, [pc, #380]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800457e:	4a5d      	ldr	r2, [pc, #372]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4957      	ldr	r1, [pc, #348]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fe fe92 	bl	80032c4 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fe fe8e 	bl	80032c4 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e095      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b4e      	ldr	r3, [pc, #312]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d023      	beq.n	8004620 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a42      	ldr	r2, [pc, #264]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80045ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045fc:	4b3d      	ldr	r3, [pc, #244]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004604:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800460a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b39      	ldr	r3, [pc, #228]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4936      	ldr	r1, [pc, #216]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	e008      	b.n	8004632 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d105      	bne.n	8004632 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	4a32      	ldr	r2, [pc, #200]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800462c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004630:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004632:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d21d      	bcs.n	800467c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 020f 	bic.w	r2, r3, #15
 8004648:	4929      	ldr	r1, [pc, #164]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004650:	f7fe fe38 	bl	80032c4 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fe fe34 	bl	80032c4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e03b      	b.n	80046e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_RCC_ClockConfig+0x260>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 030f 	and.w	r3, r3, #15
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d1ed      	bne.n	8004658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b1a      	ldr	r3, [pc, #104]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4917      	ldr	r1, [pc, #92]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a6:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490f      	ldr	r1, [pc, #60]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ba:	f000 f825 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490c      	ldr	r1, [pc, #48]	; (80046fc <HAL_RCC_ClockConfig+0x26c>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x270>)
 80046d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046da:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd fa04 	bl	8001aec <HAL_InitTick>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40022000 	.word	0x40022000
 80046f4:	40021000 	.word	0x40021000
 80046f8:	04c4b400 	.word	0x04c4b400
 80046fc:	0800eb04 	.word	0x0800eb04
 8004700:	20000000 	.word	0x20000000
 8004704:	20000004 	.word	0x20000004

08004708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b04      	cmp	r3, #4
 8004718:	d102      	bne.n	8004720 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e047      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	2b08      	cmp	r3, #8
 800472a:	d102      	bne.n	8004732 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e03e      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004732:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d136      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	3301      	adds	r3, #1
 8004754:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d10c      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800475c:	4a1a      	ldr	r2, [pc, #104]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004766:	68d2      	ldr	r2, [r2, #12]
 8004768:	0a12      	lsrs	r2, r2, #8
 800476a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
      break;
 8004774:	e00c      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004776:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004780:	68d2      	ldr	r2, [r2, #12]
 8004782:	0a12      	lsrs	r2, r2, #8
 8004784:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004788:	fb02 f303 	mul.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]
      break;
 800478e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	3301      	adds	r3, #1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e001      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047b0:	693b      	ldr	r3, [r7, #16]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	00f42400 	.word	0x00f42400
 80047c8:	007a1200 	.word	0x007a1200

080047cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d0:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	20000000 	.word	0x20000000

080047e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047e8:	f7ff fff0 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4904      	ldr	r1, [pc, #16]	; (800480c <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	0800eb14 	.word	0x0800eb14

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004814:	f7ff ffda 	bl	80047cc <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0adb      	lsrs	r3, r3, #11
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	0800eb14 	.word	0x0800eb14

0800483c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	220f      	movs	r2, #15
 800484a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0203 	and.w	r2, r3, #3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_GetClockConfig+0x5c>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	08db      	lsrs	r3, r3, #3
 8004876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800487e:	4b07      	ldr	r3, [pc, #28]	; (800489c <HAL_RCC_GetClockConfig+0x60>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	40022000 	.word	0x40022000

080048a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d10c      	bne.n	80048de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ce:	68d2      	ldr	r2, [r2, #12]
 80048d0:	0a12      	lsrs	r2, r2, #8
 80048d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	617b      	str	r3, [r7, #20]
    break;
 80048dc:	e00c      	b.n	80048f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048de:	4a12      	ldr	r2, [pc, #72]	; (8004928 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	4a0e      	ldr	r2, [pc, #56]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	0a12      	lsrs	r2, r2, #8
 80048ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
    break;
 80048f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0e5b      	lsrs	r3, r3, #25
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	3301      	adds	r3, #1
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004912:	687b      	ldr	r3, [r7, #4]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40021000 	.word	0x40021000
 8004924:	007a1200 	.word	0x007a1200
 8004928:	00f42400 	.word	0x00f42400

0800492c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004934:	2300      	movs	r3, #0
 8004936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004938:	2300      	movs	r3, #0
 800493a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8098 	beq.w	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494a:	2300      	movs	r3, #0
 800494c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494e:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10d      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495a:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	4a3f      	ldr	r2, [pc, #252]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6593      	str	r3, [r2, #88]	; 0x58
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004972:	2301      	movs	r3, #1
 8004974:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004976:	4b3a      	ldr	r3, [pc, #232]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a39      	ldr	r2, [pc, #228]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004982:	f7fe fc9f 	bl	80032c4 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004988:	e009      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fe fc9b 	bl	80032c4 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d902      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	74fb      	strb	r3, [r7, #19]
        break;
 800499c:	e005      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800499e:	4b30      	ldr	r3, [pc, #192]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ef      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d159      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b0:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01e      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d019      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049cc:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049e8:	4b1c      	ldr	r3, [pc, #112]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	4a1b      	ldr	r2, [pc, #108]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fe fc5b 	bl	80032c4 <HAL_GetTick>
 8004a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a10:	e00b      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a12:	f7fe fc57 	bl	80032c4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d902      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	74fb      	strb	r3, [r7, #19]
            break;
 8004a28:	e006      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ec      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4903      	ldr	r1, [pc, #12]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	74bb      	strb	r3, [r7, #18]
 8004a5a:	e005      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a68:	7c7b      	ldrb	r3, [r7, #17]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d105      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4ba6      	ldr	r3, [pc, #664]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4aa5      	ldr	r2, [pc, #660]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a86:	4ba0      	ldr	r3, [pc, #640]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f023 0203 	bic.w	r2, r3, #3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	499c      	ldr	r1, [pc, #624]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aa8:	4b97      	ldr	r3, [pc, #604]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f023 020c 	bic.w	r2, r3, #12
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4994      	ldr	r1, [pc, #592]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aca:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	498b      	ldr	r1, [pc, #556]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aec:	4b86      	ldr	r3, [pc, #536]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	4983      	ldr	r1, [pc, #524]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0e:	4b7e      	ldr	r3, [pc, #504]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	497a      	ldr	r1, [pc, #488]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b30:	4b75      	ldr	r3, [pc, #468]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	4972      	ldr	r1, [pc, #456]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b52:	4b6d      	ldr	r3, [pc, #436]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	4969      	ldr	r1, [pc, #420]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b74:	4b64      	ldr	r3, [pc, #400]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	4961      	ldr	r1, [pc, #388]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b96:	4b5c      	ldr	r3, [pc, #368]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	4958      	ldr	r1, [pc, #352]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	4950      	ldr	r1, [pc, #320]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd6:	d105      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d015      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bf0:	4b45      	ldr	r3, [pc, #276]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	4942      	ldr	r1, [pc, #264]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c0e:	d105      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c10:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d015      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	4934      	ldr	r1, [pc, #208]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c48:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c60:	4b29      	ldr	r3, [pc, #164]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6e:	4926      	ldr	r1, [pc, #152]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	4918      	ldr	r1, [pc, #96]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb8:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	490a      	ldr	r1, [pc, #40]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e09d      	b.n	8004e5a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d108      	bne.n	8004d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d2e:	d009      	beq.n	8004d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	61da      	str	r2, [r3, #28]
 8004d36:	e005      	b.n	8004d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc fd68 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d84:	d902      	bls.n	8004d8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	e002      	b.n	8004d92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d9a:	d007      	beq.n	8004dac <HAL_SPI_Init+0xa0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	ea42 0103 	orr.w	r1, r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	f003 0204 	and.w	r2, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e28:	ea42 0103 	orr.w	r1, r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69da      	ldr	r2, [r3, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b088      	sub	sp, #32
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_SPI_Transmit+0x22>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e158      	b.n	8005136 <HAL_SPI_Transmit+0x2d4>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e8c:	f7fe fa1a 	bl	80032c4 <HAL_GetTick>
 8004e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ea6:	e13d      	b.n	8005124 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0x52>
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eb8:	e134      	b.n	8005124 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	88fa      	ldrh	r2, [r7, #6]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f04:	d10f      	bne.n	8004f26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d007      	beq.n	8004f44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f4c:	d94b      	bls.n	8004fe6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_Transmit+0xfa>
 8004f56:	8afb      	ldrh	r3, [r7, #22]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d13e      	bne.n	8004fda <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	881a      	ldrh	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	1c9a      	adds	r2, r3, #2
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f80:	e02b      	b.n	8004fda <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d112      	bne.n	8004fb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb4:	e011      	b.n	8004fda <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fb6:	f7fe f985 	bl	80032c4 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d803      	bhi.n	8004fce <HAL_SPI_Transmit+0x16c>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d102      	bne.n	8004fd4 <HAL_SPI_Transmit+0x172>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fd8:	e0a4      	b.n	8005124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ce      	bne.n	8004f82 <HAL_SPI_Transmit+0x120>
 8004fe4:	e07c      	b.n	80050e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_SPI_Transmit+0x192>
 8004fee:	8afb      	ldrh	r3, [r7, #22]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d170      	bne.n	80050d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d912      	bls.n	8005024 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b02      	subs	r3, #2
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005022:	e058      	b.n	80050d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800504a:	e044      	b.n	80050d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d12b      	bne.n	80050b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d912      	bls.n	800508a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	1c9a      	adds	r2, r3, #2
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b02      	subs	r3, #2
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005088:	e025      	b.n	80050d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	7812      	ldrb	r2, [r2, #0]
 8005096:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c5a      	adds	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050b0:	e011      	b.n	80050d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b2:	f7fe f907 	bl	80032c4 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d803      	bhi.n	80050ca <HAL_SPI_Transmit+0x268>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d102      	bne.n	80050d0 <HAL_SPI_Transmit+0x26e>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050d4:	e026      	b.n	8005124 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1b5      	bne.n	800504c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	6839      	ldr	r1, [r7, #0]
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fcdf 	bl	8005aa8 <SPI_EndRxTxTransaction>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	77fb      	strb	r3, [r7, #31]
 8005120:	e000      	b.n	8005124 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005134:	7ffb      	ldrb	r3, [r7, #31]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af02      	add	r7, sp, #8
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515a:	d112      	bne.n	8005182 <HAL_SPI_Receive+0x44>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10e      	bne.n	8005182 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2204      	movs	r2, #4
 8005168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800516c:	88fa      	ldrh	r2, [r7, #6]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f910 	bl	800539e <HAL_SPI_TransmitReceive>
 800517e:	4603      	mov	r3, r0
 8005180:	e109      	b.n	8005396 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_SPI_Receive+0x52>
 800518c:	2302      	movs	r3, #2
 800518e:	e102      	b.n	8005396 <HAL_SPI_Receive+0x258>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005198:	f7fe f894 	bl	80032c4 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80051aa:	2302      	movs	r3, #2
 80051ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051ae:	e0e9      	b.n	8005384 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_Receive+0x7e>
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051c0:	e0e0      	b.n	8005384 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2204      	movs	r2, #4
 80051c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	88fa      	ldrh	r2, [r7, #6]
 80051e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800520c:	d908      	bls.n	8005220 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	e007      	b.n	8005230 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800522e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005238:	d10f      	bne.n	800525a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005258:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d007      	beq.n	8005278 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005276:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005280:	d867      	bhi.n	8005352 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005282:	e030      	b.n	80052e6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d117      	bne.n	80052c2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f103 020c 	add.w	r2, r3, #12
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80052c0:	e011      	b.n	80052e6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052c2:	f7fd ffff 	bl	80032c4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d803      	bhi.n	80052da <HAL_SPI_Receive+0x19c>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d102      	bne.n	80052e0 <HAL_SPI_Receive+0x1a2>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052e4:	e04e      	b.n	8005384 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1c8      	bne.n	8005284 <HAL_SPI_Receive+0x146>
 80052f2:	e034      	b.n	800535e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d115      	bne.n	800532e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	b292      	uxth	r2, r2
 800530e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800532c:	e011      	b.n	8005352 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800532e:	f7fd ffc9 	bl	80032c4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d803      	bhi.n	8005346 <HAL_SPI_Receive+0x208>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d102      	bne.n	800534c <HAL_SPI_Receive+0x20e>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005350:	e018      	b.n	8005384 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ca      	bne.n	80052f4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fb48 	bl	80059f8 <SPI_EndRxTransaction>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	75fb      	strb	r3, [r7, #23]
 8005380:	e000      	b.n	8005384 <HAL_SPI_Receive+0x246>
  }

error :
 8005382:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005394:	7dfb      	ldrb	r3, [r7, #23]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b08a      	sub	sp, #40	; 0x28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_SPI_TransmitReceive+0x26>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e1fb      	b.n	80057bc <HAL_SPI_TransmitReceive+0x41e>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053cc:	f7fd ff7a 	bl	80032c4 <HAL_GetTick>
 80053d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80053e0:	887b      	ldrh	r3, [r7, #2]
 80053e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053e8:	7efb      	ldrb	r3, [r7, #27]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d00e      	beq.n	800540c <HAL_SPI_TransmitReceive+0x6e>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f4:	d106      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <HAL_SPI_TransmitReceive+0x66>
 80053fe:	7efb      	ldrb	r3, [r7, #27]
 8005400:	2b04      	cmp	r3, #4
 8005402:	d003      	beq.n	800540c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005404:	2302      	movs	r3, #2
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800540a:	e1cd      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d005      	beq.n	800541e <HAL_SPI_TransmitReceive+0x80>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_SPI_TransmitReceive+0x80>
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d103      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005424:	e1c0      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b04      	cmp	r3, #4
 8005430:	d003      	beq.n	800543a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2205      	movs	r2, #5
 8005436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	887a      	ldrh	r2, [r7, #2]
 800544a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	887a      	ldrh	r2, [r7, #2]
 8005452:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	887a      	ldrh	r2, [r7, #2]
 8005466:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800547c:	d802      	bhi.n	8005484 <HAL_SPI_TransmitReceive+0xe6>
 800547e:	8a3b      	ldrh	r3, [r7, #16]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d908      	bls.n	8005496 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	e007      	b.n	80054a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d007      	beq.n	80054c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054cc:	d97c      	bls.n	80055c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x13e>
 80054d6:	8a7b      	ldrh	r3, [r7, #18]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d169      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	881a      	ldrh	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	1c9a      	adds	r2, r3, #2
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005500:	e056      	b.n	80055b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d11b      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x1aa>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x1aa>
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b01      	cmp	r3, #1
 800551e:	d113      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d11c      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x1f2>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	b292      	uxth	r2, r2
 800556e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	1c9a      	adds	r2, r3, #2
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800558c:	2301      	movs	r3, #1
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005590:	f7fd fe98 	bl	80032c4 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559c:	429a      	cmp	r2, r3
 800559e:	d807      	bhi.n	80055b0 <HAL_SPI_TransmitReceive+0x212>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d003      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80055ae:	e0fb      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1a3      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x164>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d19d      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x164>
 80055c6:	e0df      	b.n	8005788 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_SPI_TransmitReceive+0x23a>
 80055d0:	8a7b      	ldrh	r3, [r7, #18]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	f040 80cb 	bne.w	800576e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d912      	bls.n	8005608 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b02      	subs	r3, #2
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005606:	e0b2      	b.n	800576e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	330c      	adds	r3, #12
 8005612:	7812      	ldrb	r2, [r2, #0]
 8005614:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800562e:	e09e      	b.n	800576e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d134      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x30a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02f      	beq.n	80056a8 <HAL_SPI_TransmitReceive+0x30a>
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12c      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d912      	bls.n	800567e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	881a      	ldrh	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b02      	subs	r3, #2
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567c:	e012      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	7812      	ldrb	r2, [r2, #0]
 800568a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d148      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x3aa>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d042      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d923      	bls.n	8005716 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	b292      	uxth	r2, r2
 80056da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	1c9a      	adds	r2, r3, #2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b02      	subs	r3, #2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d81f      	bhi.n	8005744 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	e016      	b.n	8005744 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f103 020c 	add.w	r2, r3, #12
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005744:	2301      	movs	r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005748:	f7fd fdbc 	bl	80032c4 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005754:	429a      	cmp	r2, r3
 8005756:	d803      	bhi.n	8005760 <HAL_SPI_TransmitReceive+0x3c2>
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d102      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x3c8>
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800576c:	e01c      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	f47f af5b 	bne.w	8005630 <HAL_SPI_TransmitReceive+0x292>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	f47f af54 	bne.w	8005630 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005788:	69fa      	ldr	r2, [r7, #28]
 800578a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f98b 	bl	8005aa8 <SPI_EndRxTxTransaction>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
 80057a4:	e000      	b.n	80057a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80057a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3728      	adds	r7, #40	; 0x28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057d4:	f7fd fd76 	bl	80032c4 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	1a9b      	subs	r3, r3, r2
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	4413      	add	r3, r2
 80057e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057e4:	f7fd fd6e 	bl	80032c4 <HAL_GetTick>
 80057e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057ea:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	015b      	lsls	r3, r3, #5
 80057f0:	0d1b      	lsrs	r3, r3, #20
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	fb02 f303 	mul.w	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fa:	e054      	b.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d050      	beq.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005804:	f7fd fd5e 	bl	80032c4 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	429a      	cmp	r2, r3
 8005812:	d902      	bls.n	800581a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d13d      	bne.n	8005896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005832:	d111      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800583c:	d004      	beq.n	8005848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005846:	d107      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005860:	d10f      	bne.n	8005882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e017      	b.n	80058c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d19b      	bne.n	80057fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000000 	.word	0x20000000

080058d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80058e2:	f7fd fcef 	bl	80032c4 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058f2:	f7fd fce7 	bl	80032c4 <HAL_GetTick>
 80058f6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80058f8:	4b3e      	ldr	r3, [pc, #248]	; (80059f4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00da      	lsls	r2, r3, #3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	0d1b      	lsrs	r3, r3, #20
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	fb02 f303 	mul.w	r3, r2, r3
 800590e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005910:	e062      	b.n	80059d8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005918:	d109      	bne.n	800592e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d106      	bne.n	800592e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800592c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d050      	beq.n	80059d8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005936:	f7fd fcc5 	bl	80032c4 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	429a      	cmp	r2, r3
 8005944:	d902      	bls.n	800594c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d13d      	bne.n	80059c8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800595a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005964:	d111      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d004      	beq.n	800597a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d107      	bne.n	800598a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005988:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005992:	d10f      	bne.n	80059b4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e010      	b.n	80059ea <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	4013      	ands	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d194      	bne.n	8005912 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000000 	.word	0x20000000

080059f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a0c:	d111      	bne.n	8005a32 <SPI_EndRxTransaction+0x3a>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a16:	d004      	beq.n	8005a22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a20:	d107      	bne.n	8005a32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fec1 	bl	80057c4 <SPI_WaitFlagStateUntilTimeout>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e023      	b.n	8005aa0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a60:	d11d      	bne.n	8005a9e <SPI_EndRxTransaction+0xa6>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6a:	d004      	beq.n	8005a76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	d113      	bne.n	8005a9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff ff26 	bl	80058d4 <SPI_WaitFifoStateUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e000      	b.n	8005aa0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af02      	add	r7, sp, #8
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ff07 	bl	80058d4 <SPI_WaitFifoStateUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad0:	f043 0220 	orr.w	r2, r3, #32
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e027      	b.n	8005b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff fe6c 	bl	80057c4 <SPI_WaitFlagStateUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d007      	beq.n	8005b02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af6:	f043 0220 	orr.w	r2, r3, #32
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e014      	b.n	8005b2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fee0 	bl	80058d4 <SPI_WaitFifoStateUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e000      	b.n	8005b2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e049      	b.n	8005bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fb feae 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3304      	adds	r3, #4
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 fdb0 	bl	80066d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e04a      	b.n	8005c92 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x6c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d013      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x6c>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x6c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x6c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <HAL_TIM_Base_Start_IT+0xc8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x6c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a19      	ldr	r2, [pc, #100]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d115      	bne.n	8005c7c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d015      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0xaa>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c68:	d011      	beq.n	8005c8e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e000      	b.n	8005c90 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	00010007 	.word	0x00010007

08005cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e049      	b.n	8005d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f841 	bl	8005d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f000 fcee 	bl	80066d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_TIM_PWM_Start+0x24>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	bf14      	ite	ne
 8005d98:	2301      	movne	r3, #1
 8005d9a:	2300      	moveq	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e03c      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d109      	bne.n	8005dba <HAL_TIM_PWM_Start+0x3e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	bf14      	ite	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	2300      	moveq	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	e02f      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d109      	bne.n	8005dd4 <HAL_TIM_PWM_Start+0x58>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	bf14      	ite	ne
 8005dcc:	2301      	movne	r3, #1
 8005dce:	2300      	moveq	r3, #0
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	e022      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d109      	bne.n	8005dee <HAL_TIM_PWM_Start+0x72>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	bf14      	ite	ne
 8005de6:	2301      	movne	r3, #1
 8005de8:	2300      	moveq	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	e015      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b10      	cmp	r3, #16
 8005df2:	d109      	bne.n	8005e08 <HAL_TIM_PWM_Start+0x8c>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	bf14      	ite	ne
 8005e00:	2301      	movne	r3, #1
 8005e02:	2300      	moveq	r3, #0
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e008      	b.n	8005e1a <HAL_TIM_PWM_Start+0x9e>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	bf14      	ite	ne
 8005e14:	2301      	movne	r3, #1
 8005e16:	2300      	moveq	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e097      	b.n	8005f52 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0xb6>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e30:	e023      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xc6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e40:	e01b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xd6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b0c      	cmp	r3, #12
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0xe6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xf6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xfe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f84a 	bl	8006f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a33      	ldr	r2, [pc, #204]	; (8005f5c <HAL_TIM_PWM_Start+0x1e0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_TIM_PWM_Start+0x13e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a32      	ldr	r2, [pc, #200]	; (8005f60 <HAL_TIM_PWM_Start+0x1e4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_PWM_Start+0x13e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a30      	ldr	r2, [pc, #192]	; (8005f64 <HAL_TIM_PWM_Start+0x1e8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_PWM_Start+0x13e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2f      	ldr	r2, [pc, #188]	; (8005f68 <HAL_TIM_PWM_Start+0x1ec>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_PWM_Start+0x13e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <HAL_TIM_PWM_Start+0x1f0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_PWM_Start+0x142>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_TIM_PWM_Start+0x144>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <HAL_TIM_PWM_Start+0x1e0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d018      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x194>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d013      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x194>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <HAL_TIM_PWM_Start+0x1f4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00e      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x194>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_PWM_Start+0x1f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x194>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a17      	ldr	r2, [pc, #92]	; (8005f60 <HAL_TIM_PWM_Start+0x1e4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_TIM_PWM_Start+0x194>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_TIM_PWM_Start+0x1e8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d115      	bne.n	8005f3c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <HAL_TIM_PWM_Start+0x1fc>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b06      	cmp	r3, #6
 8005f20:	d015      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x1d2>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d011      	beq.n	8005f4e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	e008      	b.n	8005f4e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e000      	b.n	8005f50 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40013400 	.word	0x40013400
 8005f64:	40014000 	.word	0x40014000
 8005f68:	40014400 	.word	0x40014400
 8005f6c:	40014800 	.word	0x40014800
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	00010007 	.word	0x00010007

08005f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d122      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d11b      	bne.n	8005fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0202 	mvn.w	r2, #2
 8005fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fb6c 	bl	800669c <HAL_TIM_IC_CaptureCallback>
 8005fc4:	e005      	b.n	8005fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb5e 	bl	8006688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb6f 	bl	80066b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d122      	bne.n	800602c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0204 	mvn.w	r2, #4
 8005ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fb42 	bl	800669c <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fb34 	bl	8006688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb45 	bl	80066b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b08      	cmp	r3, #8
 8006038:	d122      	bne.n	8006080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b08      	cmp	r3, #8
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0208 	mvn.w	r2, #8
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2204      	movs	r2, #4
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fb18 	bl	800669c <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb0a 	bl	8006688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fb1b 	bl	80066b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b10      	cmp	r3, #16
 800608c:	d122      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	2b10      	cmp	r3, #16
 800609a:	d11b      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0210 	mvn.w	r2, #16
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2208      	movs	r2, #8
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 faee 	bl	800669c <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fae0 	bl	8006688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 faf1 	bl	80066b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0201 	mvn.w	r2, #1
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fb58 	bl	80017b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006118:	2b80      	cmp	r3, #128	; 0x80
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 f84a 	bl	80071c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 f83d 	bl	80071d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d10e      	bne.n	8006186 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d107      	bne.n	8006186 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa9f 	bl	80066c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0320 	and.w	r3, r3, #32
 8006190:	2b20      	cmp	r3, #32
 8006192:	d10e      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0220 	mvn.w	r2, #32
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fffd 	bl	80071ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c0:	d10f      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d0:	d107      	bne.n	80061e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80061da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f803 	bl	80071e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f0:	d10f      	bne.n	8006212 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006200:	d107      	bne.n	8006212 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fff5 	bl	80071fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006220:	d10f      	bne.n	8006242 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800622c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006230:	d107      	bne.n	8006242 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800623a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 ffe7 	bl	8007210 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800624c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006250:	d10f      	bne.n	8006272 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006260:	d107      	bne.n	8006272 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800626a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 ffd9 	bl	8007224 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006292:	2302      	movs	r3, #2
 8006294:	e0fd      	b.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b14      	cmp	r3, #20
 80062a2:	f200 80f0 	bhi.w	8006486 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	08006301 	.word	0x08006301
 80062b0:	08006487 	.word	0x08006487
 80062b4:	08006487 	.word	0x08006487
 80062b8:	08006487 	.word	0x08006487
 80062bc:	08006341 	.word	0x08006341
 80062c0:	08006487 	.word	0x08006487
 80062c4:	08006487 	.word	0x08006487
 80062c8:	08006487 	.word	0x08006487
 80062cc:	08006383 	.word	0x08006383
 80062d0:	08006487 	.word	0x08006487
 80062d4:	08006487 	.word	0x08006487
 80062d8:	08006487 	.word	0x08006487
 80062dc:	080063c3 	.word	0x080063c3
 80062e0:	08006487 	.word	0x08006487
 80062e4:	08006487 	.word	0x08006487
 80062e8:	08006487 	.word	0x08006487
 80062ec:	08006405 	.word	0x08006405
 80062f0:	08006487 	.word	0x08006487
 80062f4:	08006487 	.word	0x08006487
 80062f8:	08006487 	.word	0x08006487
 80062fc:	08006445 	.word	0x08006445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fa76 	bl	80067f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0208 	orr.w	r2, r2, #8
 800631a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0204 	bic.w	r2, r2, #4
 800632a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6999      	ldr	r1, [r3, #24]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	619a      	str	r2, [r3, #24]
      break;
 800633e:	e0a3      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fae6 	bl	8006918 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800635a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800636a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6999      	ldr	r1, [r3, #24]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	021a      	lsls	r2, r3, #8
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	619a      	str	r2, [r3, #24]
      break;
 8006380:	e082      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fb4f 	bl	8006a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0208 	orr.w	r2, r2, #8
 800639c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0204 	bic.w	r2, r2, #4
 80063ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69d9      	ldr	r1, [r3, #28]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	61da      	str	r2, [r3, #28]
      break;
 80063c0:	e062      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fbb7 	bl	8006b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69d9      	ldr	r1, [r3, #28]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	021a      	lsls	r2, r3, #8
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	61da      	str	r2, [r3, #28]
      break;
 8006402:	e041      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fc20 	bl	8006c50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0208 	orr.w	r2, r2, #8
 800641e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0204 	bic.w	r2, r2, #4
 800642e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006442:	e021      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fc64 	bl	8006d18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	021a      	lsls	r2, r3, #8
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006484:	e000      	b.n	8006488 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop

0800649c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_TIM_ConfigClockSource+0x18>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e0dd      	b.n	8006670 <HAL_TIM_ConfigClockSource+0x1d4>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80064d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a62      	ldr	r2, [pc, #392]	; (8006678 <HAL_TIM_ConfigClockSource+0x1dc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	f000 80a9 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 80064f4:	4a60      	ldr	r2, [pc, #384]	; (8006678 <HAL_TIM_ConfigClockSource+0x1dc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	f200 80ae 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 80064fc:	4a5f      	ldr	r2, [pc, #380]	; (800667c <HAL_TIM_ConfigClockSource+0x1e0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	f000 80a1 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 8006504:	4a5d      	ldr	r2, [pc, #372]	; (800667c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	f200 80a6 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 800650c:	4a5c      	ldr	r2, [pc, #368]	; (8006680 <HAL_TIM_ConfigClockSource+0x1e4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	f000 8099 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 8006514:	4a5a      	ldr	r2, [pc, #360]	; (8006680 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	f200 809e 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 800651c:	4a59      	ldr	r2, [pc, #356]	; (8006684 <HAL_TIM_ConfigClockSource+0x1e8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	f000 8091 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 8006524:	4a57      	ldr	r2, [pc, #348]	; (8006684 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	f200 8096 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 800652c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006530:	f000 8089 	beq.w	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 8006534:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006538:	f200 808e 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006540:	d03e      	beq.n	80065c0 <HAL_TIM_ConfigClockSource+0x124>
 8006542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006546:	f200 8087 	bhi.w	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654e:	f000 8085 	beq.w	800665c <HAL_TIM_ConfigClockSource+0x1c0>
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006556:	d87f      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006558:	2b70      	cmp	r3, #112	; 0x70
 800655a:	d01a      	beq.n	8006592 <HAL_TIM_ConfigClockSource+0xf6>
 800655c:	2b70      	cmp	r3, #112	; 0x70
 800655e:	d87b      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006560:	2b60      	cmp	r3, #96	; 0x60
 8006562:	d050      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x16a>
 8006564:	2b60      	cmp	r3, #96	; 0x60
 8006566:	d877      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006568:	2b50      	cmp	r3, #80	; 0x50
 800656a:	d03c      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x14a>
 800656c:	2b50      	cmp	r3, #80	; 0x50
 800656e:	d873      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	d058      	beq.n	8006626 <HAL_TIM_ConfigClockSource+0x18a>
 8006574:	2b40      	cmp	r3, #64	; 0x40
 8006576:	d86f      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006578:	2b30      	cmp	r3, #48	; 0x30
 800657a:	d064      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 800657c:	2b30      	cmp	r3, #48	; 0x30
 800657e:	d86b      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006580:	2b20      	cmp	r3, #32
 8006582:	d060      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 8006584:	2b20      	cmp	r3, #32
 8006586:	d867      	bhi.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d05c      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
 800658c:	2b10      	cmp	r3, #16
 800658e:	d05a      	beq.n	8006646 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006590:	e062      	b.n	8006658 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	6899      	ldr	r1, [r3, #8]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f000 fc9b 	bl	8006edc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	609a      	str	r2, [r3, #8]
      break;
 80065be:	e04e      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6899      	ldr	r1, [r3, #8]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f000 fc84 	bl	8006edc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e2:	609a      	str	r2, [r3, #8]
      break;
 80065e4:	e03b      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	461a      	mov	r2, r3
 80065f4:	f000 fbf6 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2150      	movs	r1, #80	; 0x50
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc4f 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006604:	e02b      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6859      	ldr	r1, [r3, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	461a      	mov	r2, r3
 8006614:	f000 fc15 	bl	8006e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2160      	movs	r1, #96	; 0x60
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fc3f 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006624:	e01b      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	6859      	ldr	r1, [r3, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	461a      	mov	r2, r3
 8006634:	f000 fbd6 	bl	8006de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2140      	movs	r1, #64	; 0x40
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fc2f 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006644:	e00b      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f000 fc26 	bl	8006ea2 <TIM_ITRx_SetConfig>
        break;
 8006656:	e002      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8006658:	bf00      	nop
 800665a:	e000      	b.n	800665e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800665c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	00100070 	.word	0x00100070
 800667c:	00100040 	.word	0x00100040
 8006680:	00100030 	.word	0x00100030
 8006684:	00100020 	.word	0x00100020

08006688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <TIM_Base_SetConfig+0x104>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x38>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x38>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a39      	ldr	r2, [pc, #228]	; (80067e0 <TIM_Base_SetConfig+0x108>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x38>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a38      	ldr	r2, [pc, #224]	; (80067e4 <TIM_Base_SetConfig+0x10c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x38>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a37      	ldr	r2, [pc, #220]	; (80067e8 <TIM_Base_SetConfig+0x110>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <TIM_Base_SetConfig+0x104>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01b      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d017      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <TIM_Base_SetConfig+0x108>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d013      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a29      	ldr	r2, [pc, #164]	; (80067e4 <TIM_Base_SetConfig+0x10c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00f      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a28      	ldr	r2, [pc, #160]	; (80067e8 <TIM_Base_SetConfig+0x110>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00b      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a27      	ldr	r2, [pc, #156]	; (80067ec <TIM_Base_SetConfig+0x114>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d007      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <TIM_Base_SetConfig+0x118>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d003      	beq.n	8006762 <TIM_Base_SetConfig+0x8a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a25      	ldr	r2, [pc, #148]	; (80067f4 <TIM_Base_SetConfig+0x11c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d108      	bne.n	8006774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <TIM_Base_SetConfig+0x104>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00f      	beq.n	80067c0 <TIM_Base_SetConfig+0xe8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <TIM_Base_SetConfig+0x110>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_Base_SetConfig+0xe8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a10      	ldr	r2, [pc, #64]	; (80067ec <TIM_Base_SetConfig+0x114>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_Base_SetConfig+0xe8>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0f      	ldr	r2, [pc, #60]	; (80067f0 <TIM_Base_SetConfig+0x118>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0xe8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <TIM_Base_SetConfig+0x11c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d103      	bne.n	80067c8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	615a      	str	r2, [r3, #20]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40012c00 	.word	0x40012c00
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40013400 	.word	0x40013400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800

080067f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f023 0302 	bic.w	r3, r3, #2
 8006844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2c      	ldr	r2, [pc, #176]	; (8006904 <TIM_OC1_SetConfig+0x10c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_OC1_SetConfig+0x80>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <TIM_OC1_SetConfig+0x110>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC1_SetConfig+0x80>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a2a      	ldr	r2, [pc, #168]	; (800690c <TIM_OC1_SetConfig+0x114>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC1_SetConfig+0x80>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a29      	ldr	r2, [pc, #164]	; (8006910 <TIM_OC1_SetConfig+0x118>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC1_SetConfig+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a28      	ldr	r2, [pc, #160]	; (8006914 <TIM_OC1_SetConfig+0x11c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10c      	bne.n	8006892 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0308 	bic.w	r3, r3, #8
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <TIM_OC1_SetConfig+0x10c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00f      	beq.n	80068ba <TIM_OC1_SetConfig+0xc2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <TIM_OC1_SetConfig+0x110>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_OC1_SetConfig+0xc2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <TIM_OC1_SetConfig+0x114>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_OC1_SetConfig+0xc2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a18      	ldr	r2, [pc, #96]	; (8006910 <TIM_OC1_SetConfig+0x118>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_OC1_SetConfig+0xc2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a17      	ldr	r2, [pc, #92]	; (8006914 <TIM_OC1_SetConfig+0x11c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d111      	bne.n	80068de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400
 8006914:	40014800 	.word	0x40014800

08006918 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0210 	bic.w	r2, r3, #16
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f023 0320 	bic.w	r3, r3, #32
 8006966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <TIM_OC2_SetConfig+0x100>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_OC2_SetConfig+0x6c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <TIM_OC2_SetConfig+0x104>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10d      	bne.n	80069a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800698a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a1d      	ldr	r2, [pc, #116]	; (8006a18 <TIM_OC2_SetConfig+0x100>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_OC2_SetConfig+0xb0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <TIM_OC2_SetConfig+0x104>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_OC2_SetConfig+0xb0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a1b      	ldr	r2, [pc, #108]	; (8006a20 <TIM_OC2_SetConfig+0x108>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_OC2_SetConfig+0xb0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a1a      	ldr	r2, [pc, #104]	; (8006a24 <TIM_OC2_SetConfig+0x10c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0xb0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <TIM_OC2_SetConfig+0x110>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d113      	bne.n	80069f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40012c00 	.word	0x40012c00
 8006a1c:	40013400 	.word	0x40013400
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <TIM_OC3_SetConfig+0xfc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC3_SetConfig+0x6a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <TIM_OC3_SetConfig+0x100>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10d      	bne.n	8006ab2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <TIM_OC3_SetConfig+0xfc>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00f      	beq.n	8006ada <TIM_OC3_SetConfig+0xae>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a1b      	ldr	r2, [pc, #108]	; (8006b2c <TIM_OC3_SetConfig+0x100>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00b      	beq.n	8006ada <TIM_OC3_SetConfig+0xae>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <TIM_OC3_SetConfig+0x104>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d007      	beq.n	8006ada <TIM_OC3_SetConfig+0xae>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a19      	ldr	r2, [pc, #100]	; (8006b34 <TIM_OC3_SetConfig+0x108>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC3_SetConfig+0xae>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <TIM_OC3_SetConfig+0x10c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d113      	bne.n	8006b02 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	621a      	str	r2, [r3, #32]
}
 8006b1c:	bf00      	nop
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	40012c00 	.word	0x40012c00
 8006b2c:	40013400 	.word	0x40013400
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40014400 	.word	0x40014400
 8006b38:	40014800 	.word	0x40014800

08006b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a28      	ldr	r2, [pc, #160]	; (8006c3c <TIM_OC4_SetConfig+0x100>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_OC4_SetConfig+0x6c>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <TIM_OC4_SetConfig+0x104>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d10d      	bne.n	8006bc4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	031b      	lsls	r3, r3, #12
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <TIM_OC4_SetConfig+0x100>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00f      	beq.n	8006bec <TIM_OC4_SetConfig+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <TIM_OC4_SetConfig+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00b      	beq.n	8006bec <TIM_OC4_SetConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <TIM_OC4_SetConfig+0x108>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d007      	beq.n	8006bec <TIM_OC4_SetConfig+0xb0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <TIM_OC4_SetConfig+0x10c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d003      	beq.n	8006bec <TIM_OC4_SetConfig+0xb0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <TIM_OC4_SetConfig+0x110>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d113      	bne.n	8006c14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bfa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	019b      	lsls	r3, r3, #6
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	019b      	lsls	r3, r3, #6
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40012c00 	.word	0x40012c00
 8006c40:	40013400 	.word	0x40013400
 8006c44:	40014000 	.word	0x40014000
 8006c48:	40014400 	.word	0x40014400
 8006c4c:	40014800 	.word	0x40014800

08006c50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <TIM_OC5_SetConfig+0xb4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_OC5_SetConfig+0x7a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <TIM_OC5_SetConfig+0xb8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_OC5_SetConfig+0x7a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <TIM_OC5_SetConfig+0xbc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_OC5_SetConfig+0x7a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a14      	ldr	r2, [pc, #80]	; (8006d10 <TIM_OC5_SetConfig+0xc0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_OC5_SetConfig+0x7a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <TIM_OC5_SetConfig+0xc4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d109      	bne.n	8006cde <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	621a      	str	r2, [r3, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	371c      	adds	r7, #28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40013400 	.word	0x40013400
 8006d0c:	40014000 	.word	0x40014000
 8006d10:	40014400 	.word	0x40014400
 8006d14:	40014800 	.word	0x40014800

08006d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	051b      	lsls	r3, r3, #20
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <TIM_OC6_SetConfig+0xb8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00f      	beq.n	8006d94 <TIM_OC6_SetConfig+0x7c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <TIM_OC6_SetConfig+0xbc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00b      	beq.n	8006d94 <TIM_OC6_SetConfig+0x7c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a16      	ldr	r2, [pc, #88]	; (8006dd8 <TIM_OC6_SetConfig+0xc0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d007      	beq.n	8006d94 <TIM_OC6_SetConfig+0x7c>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a15      	ldr	r2, [pc, #84]	; (8006ddc <TIM_OC6_SetConfig+0xc4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC6_SetConfig+0x7c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a14      	ldr	r2, [pc, #80]	; (8006de0 <TIM_OC6_SetConfig+0xc8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d109      	bne.n	8006da8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	029b      	lsls	r3, r3, #10
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40012c00 	.word	0x40012c00
 8006dd4:	40013400 	.word	0x40013400
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 030a 	bic.w	r3, r3, #10
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	031b      	lsls	r3, r3, #12
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f043 0307 	orr.w	r3, r3, #7
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e065      	b.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2b      	ldr	r2, [pc, #172]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1b      	ldr	r2, [pc, #108]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d018      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff6:	d013      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a18      	ldr	r2, [pc, #96]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00e      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d009      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a12      	ldr	r2, [pc, #72]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a13      	ldr	r2, [pc, #76]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d10c      	bne.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	4313      	orrs	r3, r2
 8007030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	40012c00 	.word	0x40012c00
 800705c:	40013400 	.word	0x40013400
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	40014000 	.word	0x40014000

0800706c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007084:	2302      	movs	r3, #2
 8007086:	e087      	b.n	8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d106      	bne.n	8007124 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1e      	ldr	r2, [pc, #120]	; (80071a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1d      	ldr	r2, [pc, #116]	; (80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d126      	bne.n	8007186 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	051b      	lsls	r3, r3, #20
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d004      	beq.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a0d      	ldr	r2, [pc, #52]	; (80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d106      	bne.n	8007186 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40013400 	.word	0x40013400

080071ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e042      	b.n	80072d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007250:	2b00      	cmp	r3, #0
 8007252:	d106      	bne.n	8007262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fa fb85 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2224      	movs	r2, #36	; 0x24
 8007266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0201 	bic.w	r2, r2, #1
 8007278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f928 	bl	80074d0 <UART_SetConfig>
 8007280:	4603      	mov	r3, r0
 8007282:	2b01      	cmp	r3, #1
 8007284:	d101      	bne.n	800728a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e022      	b.n	80072d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fbba 	bl	8007a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f042 0201 	orr.w	r2, r2, #1
 80072c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fc41 	bl	8007b50 <UART_CheckIdleState>
 80072ce:	4603      	mov	r3, r0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08a      	sub	sp, #40	; 0x28
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	f040 8083 	bne.w	80073fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_UART_Transmit+0x28>
 80072fa:	88fb      	ldrh	r3, [r7, #6]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e07b      	b.n	80073fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800730a:	2b01      	cmp	r3, #1
 800730c:	d101      	bne.n	8007312 <HAL_UART_Transmit+0x3a>
 800730e:	2302      	movs	r3, #2
 8007310:	e074      	b.n	80073fc <HAL_UART_Transmit+0x124>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2221      	movs	r2, #33	; 0x21
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800732a:	f7fb ffcb 	bl	80032c4 <HAL_GetTick>
 800732e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	88fa      	ldrh	r2, [r7, #6]
 8007334:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007348:	d108      	bne.n	800735c <HAL_UART_Transmit+0x84>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	e003      	b.n	8007364 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800736c:	e02c      	b.n	80073c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	2180      	movs	r1, #128	; 0x80
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fc34 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e039      	b.n	80073fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	3302      	adds	r3, #2
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e007      	b.n	80073b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1cc      	bne.n	800736e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2200      	movs	r2, #0
 80073dc:	2140      	movs	r1, #64	; 0x40
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 fc01 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e006      	b.n	80073fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e000      	b.n	80073fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80073fa:	2302      	movs	r3, #2
  }
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	2b20      	cmp	r3, #32
 800741a:	d131      	bne.n	8007480 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_UART_Receive_DMA+0x24>
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e02a      	b.n	8007482 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_UART_Receive_DMA+0x36>
 8007436:	2302      	movs	r3, #2
 8007438:	e023      	b.n	8007482 <HAL_UART_Receive_DMA+0x7e>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0f      	ldr	r2, [pc, #60]	; (800748c <HAL_UART_Receive_DMA+0x88>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800746e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	461a      	mov	r2, r3
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fc36 	bl	8007ce8 <UART_Start_Receive_DMA>
 800747c:	4603      	mov	r3, r0
 800747e:	e000      	b.n	8007482 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	40008000 	.word	0x40008000

08007490 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d0:	b5b0      	push	{r4, r5, r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4baf      	ldr	r3, [pc, #700]	; (80077b8 <UART_SetConfig+0x2e8>)
 80074fc:	4013      	ands	r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6812      	ldr	r2, [r2, #0]
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	430b      	orrs	r3, r1
 8007506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4aa4      	ldr	r2, [pc, #656]	; (80077bc <UART_SetConfig+0x2ec>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d004      	beq.n	8007538 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	4313      	orrs	r3, r2
 8007536:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007542:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6812      	ldr	r2, [r2, #0]
 800754a:	69f9      	ldr	r1, [r7, #28]
 800754c:	430b      	orrs	r3, r1
 800754e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	f023 010f 	bic.w	r1, r3, #15
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	430a      	orrs	r2, r1
 8007564:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a95      	ldr	r2, [pc, #596]	; (80077c0 <UART_SetConfig+0x2f0>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d120      	bne.n	80075b2 <UART_SetConfig+0xe2>
 8007570:	4b94      	ldr	r3, [pc, #592]	; (80077c4 <UART_SetConfig+0x2f4>)
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b03      	cmp	r3, #3
 800757c:	d816      	bhi.n	80075ac <UART_SetConfig+0xdc>
 800757e:	a201      	add	r2, pc, #4	; (adr r2, 8007584 <UART_SetConfig+0xb4>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	08007595 	.word	0x08007595
 8007588:	080075a1 	.word	0x080075a1
 800758c:	0800759b 	.word	0x0800759b
 8007590:	080075a7 	.word	0x080075a7
 8007594:	2301      	movs	r3, #1
 8007596:	76fb      	strb	r3, [r7, #27]
 8007598:	e0bc      	b.n	8007714 <UART_SetConfig+0x244>
 800759a:	2302      	movs	r3, #2
 800759c:	76fb      	strb	r3, [r7, #27]
 800759e:	e0b9      	b.n	8007714 <UART_SetConfig+0x244>
 80075a0:	2304      	movs	r3, #4
 80075a2:	76fb      	strb	r3, [r7, #27]
 80075a4:	e0b6      	b.n	8007714 <UART_SetConfig+0x244>
 80075a6:	2308      	movs	r3, #8
 80075a8:	76fb      	strb	r3, [r7, #27]
 80075aa:	e0b3      	b.n	8007714 <UART_SetConfig+0x244>
 80075ac:	2310      	movs	r3, #16
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e0b0      	b.n	8007714 <UART_SetConfig+0x244>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a84      	ldr	r2, [pc, #528]	; (80077c8 <UART_SetConfig+0x2f8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d132      	bne.n	8007622 <UART_SetConfig+0x152>
 80075bc:	4b81      	ldr	r3, [pc, #516]	; (80077c4 <UART_SetConfig+0x2f4>)
 80075be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075c2:	f003 030c 	and.w	r3, r3, #12
 80075c6:	2b0c      	cmp	r3, #12
 80075c8:	d828      	bhi.n	800761c <UART_SetConfig+0x14c>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <UART_SetConfig+0x100>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007605 	.word	0x08007605
 80075d4:	0800761d 	.word	0x0800761d
 80075d8:	0800761d 	.word	0x0800761d
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	08007611 	.word	0x08007611
 80075e4:	0800761d 	.word	0x0800761d
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800760b 	.word	0x0800760b
 80075f4:	0800761d 	.word	0x0800761d
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	08007617 	.word	0x08007617
 8007604:	2300      	movs	r3, #0
 8007606:	76fb      	strb	r3, [r7, #27]
 8007608:	e084      	b.n	8007714 <UART_SetConfig+0x244>
 800760a:	2302      	movs	r3, #2
 800760c:	76fb      	strb	r3, [r7, #27]
 800760e:	e081      	b.n	8007714 <UART_SetConfig+0x244>
 8007610:	2304      	movs	r3, #4
 8007612:	76fb      	strb	r3, [r7, #27]
 8007614:	e07e      	b.n	8007714 <UART_SetConfig+0x244>
 8007616:	2308      	movs	r3, #8
 8007618:	76fb      	strb	r3, [r7, #27]
 800761a:	e07b      	b.n	8007714 <UART_SetConfig+0x244>
 800761c:	2310      	movs	r3, #16
 800761e:	76fb      	strb	r3, [r7, #27]
 8007620:	e078      	b.n	8007714 <UART_SetConfig+0x244>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a69      	ldr	r2, [pc, #420]	; (80077cc <UART_SetConfig+0x2fc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d120      	bne.n	800766e <UART_SetConfig+0x19e>
 800762c:	4b65      	ldr	r3, [pc, #404]	; (80077c4 <UART_SetConfig+0x2f4>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007636:	2b30      	cmp	r3, #48	; 0x30
 8007638:	d013      	beq.n	8007662 <UART_SetConfig+0x192>
 800763a:	2b30      	cmp	r3, #48	; 0x30
 800763c:	d814      	bhi.n	8007668 <UART_SetConfig+0x198>
 800763e:	2b20      	cmp	r3, #32
 8007640:	d009      	beq.n	8007656 <UART_SetConfig+0x186>
 8007642:	2b20      	cmp	r3, #32
 8007644:	d810      	bhi.n	8007668 <UART_SetConfig+0x198>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <UART_SetConfig+0x180>
 800764a:	2b10      	cmp	r3, #16
 800764c:	d006      	beq.n	800765c <UART_SetConfig+0x18c>
 800764e:	e00b      	b.n	8007668 <UART_SetConfig+0x198>
 8007650:	2300      	movs	r3, #0
 8007652:	76fb      	strb	r3, [r7, #27]
 8007654:	e05e      	b.n	8007714 <UART_SetConfig+0x244>
 8007656:	2302      	movs	r3, #2
 8007658:	76fb      	strb	r3, [r7, #27]
 800765a:	e05b      	b.n	8007714 <UART_SetConfig+0x244>
 800765c:	2304      	movs	r3, #4
 800765e:	76fb      	strb	r3, [r7, #27]
 8007660:	e058      	b.n	8007714 <UART_SetConfig+0x244>
 8007662:	2308      	movs	r3, #8
 8007664:	76fb      	strb	r3, [r7, #27]
 8007666:	e055      	b.n	8007714 <UART_SetConfig+0x244>
 8007668:	2310      	movs	r3, #16
 800766a:	76fb      	strb	r3, [r7, #27]
 800766c:	e052      	b.n	8007714 <UART_SetConfig+0x244>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a57      	ldr	r2, [pc, #348]	; (80077d0 <UART_SetConfig+0x300>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d120      	bne.n	80076ba <UART_SetConfig+0x1ea>
 8007678:	4b52      	ldr	r3, [pc, #328]	; (80077c4 <UART_SetConfig+0x2f4>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007682:	2bc0      	cmp	r3, #192	; 0xc0
 8007684:	d013      	beq.n	80076ae <UART_SetConfig+0x1de>
 8007686:	2bc0      	cmp	r3, #192	; 0xc0
 8007688:	d814      	bhi.n	80076b4 <UART_SetConfig+0x1e4>
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d009      	beq.n	80076a2 <UART_SetConfig+0x1d2>
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d810      	bhi.n	80076b4 <UART_SetConfig+0x1e4>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <UART_SetConfig+0x1cc>
 8007696:	2b40      	cmp	r3, #64	; 0x40
 8007698:	d006      	beq.n	80076a8 <UART_SetConfig+0x1d8>
 800769a:	e00b      	b.n	80076b4 <UART_SetConfig+0x1e4>
 800769c:	2300      	movs	r3, #0
 800769e:	76fb      	strb	r3, [r7, #27]
 80076a0:	e038      	b.n	8007714 <UART_SetConfig+0x244>
 80076a2:	2302      	movs	r3, #2
 80076a4:	76fb      	strb	r3, [r7, #27]
 80076a6:	e035      	b.n	8007714 <UART_SetConfig+0x244>
 80076a8:	2304      	movs	r3, #4
 80076aa:	76fb      	strb	r3, [r7, #27]
 80076ac:	e032      	b.n	8007714 <UART_SetConfig+0x244>
 80076ae:	2308      	movs	r3, #8
 80076b0:	76fb      	strb	r3, [r7, #27]
 80076b2:	e02f      	b.n	8007714 <UART_SetConfig+0x244>
 80076b4:	2310      	movs	r3, #16
 80076b6:	76fb      	strb	r3, [r7, #27]
 80076b8:	e02c      	b.n	8007714 <UART_SetConfig+0x244>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a3f      	ldr	r2, [pc, #252]	; (80077bc <UART_SetConfig+0x2ec>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d125      	bne.n	8007710 <UART_SetConfig+0x240>
 80076c4:	4b3f      	ldr	r3, [pc, #252]	; (80077c4 <UART_SetConfig+0x2f4>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076d2:	d017      	beq.n	8007704 <UART_SetConfig+0x234>
 80076d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076d8:	d817      	bhi.n	800770a <UART_SetConfig+0x23a>
 80076da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076de:	d00b      	beq.n	80076f8 <UART_SetConfig+0x228>
 80076e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e4:	d811      	bhi.n	800770a <UART_SetConfig+0x23a>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <UART_SetConfig+0x222>
 80076ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ee:	d006      	beq.n	80076fe <UART_SetConfig+0x22e>
 80076f0:	e00b      	b.n	800770a <UART_SetConfig+0x23a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	76fb      	strb	r3, [r7, #27]
 80076f6:	e00d      	b.n	8007714 <UART_SetConfig+0x244>
 80076f8:	2302      	movs	r3, #2
 80076fa:	76fb      	strb	r3, [r7, #27]
 80076fc:	e00a      	b.n	8007714 <UART_SetConfig+0x244>
 80076fe:	2304      	movs	r3, #4
 8007700:	76fb      	strb	r3, [r7, #27]
 8007702:	e007      	b.n	8007714 <UART_SetConfig+0x244>
 8007704:	2308      	movs	r3, #8
 8007706:	76fb      	strb	r3, [r7, #27]
 8007708:	e004      	b.n	8007714 <UART_SetConfig+0x244>
 800770a:	2310      	movs	r3, #16
 800770c:	76fb      	strb	r3, [r7, #27]
 800770e:	e001      	b.n	8007714 <UART_SetConfig+0x244>
 8007710:	2310      	movs	r3, #16
 8007712:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a28      	ldr	r2, [pc, #160]	; (80077bc <UART_SetConfig+0x2ec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	f040 809e 	bne.w	800785c <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b08      	cmp	r3, #8
 8007724:	d823      	bhi.n	800776e <UART_SetConfig+0x29e>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0x25c>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007751 	.word	0x08007751
 8007730:	0800776f 	.word	0x0800776f
 8007734:	08007759 	.word	0x08007759
 8007738:	0800776f 	.word	0x0800776f
 800773c:	0800775f 	.word	0x0800775f
 8007740:	0800776f 	.word	0x0800776f
 8007744:	0800776f 	.word	0x0800776f
 8007748:	0800776f 	.word	0x0800776f
 800774c:	08007767 	.word	0x08007767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007750:	f7fd f848 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8007754:	6178      	str	r0, [r7, #20]
        break;
 8007756:	e00f      	b.n	8007778 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <UART_SetConfig+0x304>)
 800775a:	617b      	str	r3, [r7, #20]
        break;
 800775c:	e00c      	b.n	8007778 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800775e:	f7fc ffd3 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 8007762:	6178      	str	r0, [r7, #20]
        break;
 8007764:	e008      	b.n	8007778 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776a:	617b      	str	r3, [r7, #20]
        break;
 800776c:	e004      	b.n	8007778 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	76bb      	strb	r3, [r7, #26]
        break;
 8007776:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 812e 	beq.w	80079dc <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	4a14      	ldr	r2, [pc, #80]	; (80077d8 <UART_SetConfig+0x308>)
 8007786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800778a:	461a      	mov	r2, r3
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007792:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	4413      	add	r3, r2
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d305      	bcc.n	80077b0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d915      	bls.n	80077dc <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	76bb      	strb	r3, [r7, #26]
 80077b4:	e112      	b.n	80079dc <UART_SetConfig+0x50c>
 80077b6:	bf00      	nop
 80077b8:	cfff69f3 	.word	0xcfff69f3
 80077bc:	40008000 	.word	0x40008000
 80077c0:	40013800 	.word	0x40013800
 80077c4:	40021000 	.word	0x40021000
 80077c8:	40004400 	.word	0x40004400
 80077cc:	40004800 	.word	0x40004800
 80077d0:	40004c00 	.word	0x40004c00
 80077d4:	00f42400 	.word	0x00f42400
 80077d8:	0800eb1c 	.word	0x0800eb1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	4618      	mov	r0, r3
 80077e0:	f04f 0100 	mov.w	r1, #0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	4a86      	ldr	r2, [pc, #536]	; (8007a04 <UART_SetConfig+0x534>)
 80077ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f04f 0300 	mov.w	r3, #0
 80077f4:	f7f9 fa50 	bl	8000c98 <__aeabi_uldivmod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4610      	mov	r0, r2
 80077fe:	4619      	mov	r1, r3
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	020b      	lsls	r3, r1, #8
 800780a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800780e:	0202      	lsls	r2, r0, #8
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	6849      	ldr	r1, [r1, #4]
 8007814:	0849      	lsrs	r1, r1, #1
 8007816:	4608      	mov	r0, r1
 8007818:	f04f 0100 	mov.w	r1, #0
 800781c:	1814      	adds	r4, r2, r0
 800781e:	eb43 0501 	adc.w	r5, r3, r1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	461a      	mov	r2, r3
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	4620      	mov	r0, r4
 800782e:	4629      	mov	r1, r5
 8007830:	f7f9 fa32 	bl	8000c98 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4613      	mov	r3, r2
 800783a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007842:	d308      	bcc.n	8007856 <UART_SetConfig+0x386>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784a:	d204      	bcs.n	8007856 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	60da      	str	r2, [r3, #12]
 8007854:	e0c2      	b.n	80079dc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	76bb      	strb	r3, [r7, #26]
 800785a:	e0bf      	b.n	80079dc <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007864:	d165      	bne.n	8007932 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8007866:	7efb      	ldrb	r3, [r7, #27]
 8007868:	2b08      	cmp	r3, #8
 800786a:	d828      	bhi.n	80078be <UART_SetConfig+0x3ee>
 800786c:	a201      	add	r2, pc, #4	; (adr r2, 8007874 <UART_SetConfig+0x3a4>)
 800786e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007872:	bf00      	nop
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a9 	.word	0x080078a9
 8007880:	080078bf 	.word	0x080078bf
 8007884:	080078af 	.word	0x080078af
 8007888:	080078bf 	.word	0x080078bf
 800788c:	080078bf 	.word	0x080078bf
 8007890:	080078bf 	.word	0x080078bf
 8007894:	080078b7 	.word	0x080078b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007898:	f7fc ffa4 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 800789c:	6178      	str	r0, [r7, #20]
        break;
 800789e:	e013      	b.n	80078c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078a0:	f7fc ffb6 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 80078a4:	6178      	str	r0, [r7, #20]
        break;
 80078a6:	e00f      	b.n	80078c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a8:	4b57      	ldr	r3, [pc, #348]	; (8007a08 <UART_SetConfig+0x538>)
 80078aa:	617b      	str	r3, [r7, #20]
        break;
 80078ac:	e00c      	b.n	80078c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ae:	f7fc ff2b 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 80078b2:	6178      	str	r0, [r7, #20]
        break;
 80078b4:	e008      	b.n	80078c8 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ba:	617b      	str	r3, [r7, #20]
        break;
 80078bc:	e004      	b.n	80078c8 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	76bb      	strb	r3, [r7, #26]
        break;
 80078c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 8086 	beq.w	80079dc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	4a4b      	ldr	r2, [pc, #300]	; (8007a04 <UART_SetConfig+0x534>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	461a      	mov	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e2:	005a      	lsls	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	441a      	add	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2b0f      	cmp	r3, #15
 80078fc:	d916      	bls.n	800792c <UART_SetConfig+0x45c>
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007904:	d212      	bcs.n	800792c <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f023 030f 	bic.w	r3, r3, #15
 800790e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	085b      	lsrs	r3, r3, #1
 8007914:	b29b      	uxth	r3, r3
 8007916:	f003 0307 	and.w	r3, r3, #7
 800791a:	b29a      	uxth	r2, r3
 800791c:	89fb      	ldrh	r3, [r7, #14]
 800791e:	4313      	orrs	r3, r2
 8007920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	89fa      	ldrh	r2, [r7, #14]
 8007928:	60da      	str	r2, [r3, #12]
 800792a:	e057      	b.n	80079dc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	76bb      	strb	r3, [r7, #26]
 8007930:	e054      	b.n	80079dc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007932:	7efb      	ldrb	r3, [r7, #27]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d828      	bhi.n	800798a <UART_SetConfig+0x4ba>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x470>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	0800798b 	.word	0x0800798b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fc ff3e 	bl	80047e4 <HAL_RCC_GetPCLK1Freq>
 8007968:	6178      	str	r0, [r7, #20]
        break;
 800796a:	e013      	b.n	8007994 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fc ff50 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 8007970:	6178      	str	r0, [r7, #20]
        break;
 8007972:	e00f      	b.n	8007994 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <UART_SetConfig+0x538>)
 8007976:	617b      	str	r3, [r7, #20]
        break;
 8007978:	e00c      	b.n	8007994 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fc fec5 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 800797e:	6178      	str	r0, [r7, #20]
        break;
 8007980:	e008      	b.n	8007994 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	617b      	str	r3, [r7, #20]
        break;
 8007988:	e004      	b.n	8007994 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	76bb      	strb	r3, [r7, #26]
        break;
 8007992:	bf00      	nop
    }

    if (pclk != 0U)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d020      	beq.n	80079dc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	4a19      	ldr	r2, [pc, #100]	; (8007a04 <UART_SetConfig+0x534>)
 80079a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a4:	461a      	mov	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	085b      	lsrs	r3, r3, #1
 80079b2:	441a      	add	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079bc:	b29b      	uxth	r3, r3
 80079be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	d908      	bls.n	80079d8 <UART_SetConfig+0x508>
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079cc:	d204      	bcs.n	80079d8 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	e001      	b.n	80079dc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bdb0      	pop	{r4, r5, r7, pc}
 8007a02:	bf00      	nop
 8007a04:	0800eb1c 	.word	0x0800eb1c
 8007a08:	00f42400 	.word	0x00f42400

08007a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f003 0308 	and.w	r3, r3, #8
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	f003 0320 	and.w	r3, r3, #32
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01a      	beq.n	8007b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b0a:	d10a      	bne.n	8007b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	605a      	str	r2, [r3, #4]
  }
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b60:	f7fb fbb0 	bl	80032c4 <HAL_GetTick>
 8007b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d10e      	bne.n	8007b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f82f 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e025      	b.n	8007bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d10e      	bne.n	8007bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f819 	bl	8007be6 <UART_WaitOnFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e00f      	b.n	8007bde <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	603b      	str	r3, [r7, #0]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf6:	e062      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d05e      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c00:	f7fb fb60 	bl	80032c4 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d302      	bcc.n	8007c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11d      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c24:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e045      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d02e      	beq.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6e:	d126      	bne.n	8007cbe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c88:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0201 	bic.w	r2, r2, #1
 8007c98:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e00f      	b.n	8007cde <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69da      	ldr	r2, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	bf0c      	ite	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	2300      	movne	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d08d      	beq.n	8007bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	88fa      	ldrh	r2, [r7, #6]
 8007d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2222      	movs	r2, #34	; 0x22
 8007d10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d02c      	beq.n	8007d76 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d20:	4a25      	ldr	r2, [pc, #148]	; (8007db8 <UART_Start_Receive_DMA+0xd0>)
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d28:	4a24      	ldr	r2, [pc, #144]	; (8007dbc <UART_Start_Receive_DMA+0xd4>)
 8007d2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d30:	4a23      	ldr	r2, [pc, #140]	; (8007dc0 <UART_Start_Receive_DMA+0xd8>)
 8007d32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d38:	2200      	movs	r2, #0
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3324      	adds	r3, #36	; 0x24
 8007d46:	4619      	mov	r1, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	88fb      	ldrh	r3, [r7, #6]
 8007d50:	f7fb fc6e 	bl	8003630 <HAL_DMA_Start_IT>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00d      	beq.n	8007d76 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2210      	movs	r2, #16
 8007d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e01c      	b.n	8007db0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d8c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0201 	orr.w	r2, r2, #1
 8007d9c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dac:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	08007e65 	.word	0x08007e65
 8007dbc:	08007eff 	.word	0x08007eff
 8007dc0:	08007f37 	.word	0x08007f37

08007dc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007dda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007dea:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d107      	bne.n	8007e44 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0210 	bic.w	r2, r2, #16
 8007e42:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d12b      	bne.n	8007ed8 <UART_DMAReceiveCplt+0x74>
  {
    huart->RxXferCount = 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e96:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d107      	bne.n	8007ed8 <UART_DMAReceiveCplt+0x74>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0210 	bic.w	r2, r2, #16
 8007ed6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d107      	bne.n	8007ef0 <UART_DMAReceiveCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fae5 	bl	80074b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007eee:	e002      	b.n	8007ef6 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7f9 fb0b 	bl	800150c <HAL_UART_RxCpltCallback>
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b084      	sub	sp, #16
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d109      	bne.n	8007f28 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fac9 	bl	80074b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f26:	e002      	b.n	8007f2e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff fab1 	bl	8007490 <HAL_UART_RxHalfCpltCallback>
}
 8007f2e:	bf00      	nop
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f42:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f4a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b80      	cmp	r3, #128	; 0x80
 8007f60:	d109      	bne.n	8007f76 <UART_DMAError+0x40>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b21      	cmp	r3, #33	; 0x21
 8007f66:	d106      	bne.n	8007f76 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007f70:	6978      	ldr	r0, [r7, #20]
 8007f72:	f7ff ff27 	bl	8007dc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d109      	bne.n	8007f98 <UART_DMAError+0x62>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2b22      	cmp	r3, #34	; 0x22
 8007f88:	d106      	bne.n	8007f98 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7ff ff34 	bl	8007e00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9e:	f043 0210 	orr.w	r2, r3, #16
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fa8:	6978      	ldr	r0, [r7, #20]
 8007faa:	f7ff fa7b 	bl	80074a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_UARTEx_DisableFifoMode+0x16>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e027      	b.n	800801c <HAL_UARTEx_DisableFifoMode+0x66>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	; 0x24
 8007fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0201 	bic.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ffa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800803c:	2302      	movs	r3, #2
 800803e:	e02d      	b.n	800809c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2224      	movs	r2, #36	; 0x24
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0201 	bic.w	r2, r2, #1
 8008066:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f84f 	bl	8008120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e02d      	b.n	8008118 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2224      	movs	r2, #36	; 0x24
 80080c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f811 	bl	8008120 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2220      	movs	r2, #32
 800810a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008140:	e031      	b.n	80081a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008142:	2308      	movs	r3, #8
 8008144:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008146:	2308      	movs	r3, #8
 8008148:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	0e5b      	lsrs	r3, r3, #25
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	0f5b      	lsrs	r3, r3, #29
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f003 0307 	and.w	r3, r3, #7
 8008168:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	7b3a      	ldrb	r2, [r7, #12]
 800816e:	4911      	ldr	r1, [pc, #68]	; (80081b4 <UARTEx_SetNbDataToProcess+0x94>)
 8008170:	5c8a      	ldrb	r2, [r1, r2]
 8008172:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008176:	7b3a      	ldrb	r2, [r7, #12]
 8008178:	490f      	ldr	r1, [pc, #60]	; (80081b8 <UARTEx_SetNbDataToProcess+0x98>)
 800817a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800817c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008180:	b29a      	uxth	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	7b7a      	ldrb	r2, [r7, #13]
 800818c:	4909      	ldr	r1, [pc, #36]	; (80081b4 <UARTEx_SetNbDataToProcess+0x94>)
 800818e:	5c8a      	ldrb	r2, [r1, r2]
 8008190:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008194:	7b7a      	ldrb	r2, [r7, #13]
 8008196:	4908      	ldr	r1, [pc, #32]	; (80081b8 <UARTEx_SetNbDataToProcess+0x98>)
 8008198:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800819a:	fb93 f3f2 	sdiv	r3, r3, r2
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	0800eb34 	.word	0x0800eb34
 80081b8:	0800eb3c 	.word	0x0800eb3c

080081bc <__NVIC_SetPriority>:
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	db0a      	blt.n	80081e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	490c      	ldr	r1, [pc, #48]	; (8008208 <__NVIC_SetPriority+0x4c>)
 80081d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081da:	0112      	lsls	r2, r2, #4
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	440b      	add	r3, r1
 80081e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081e4:	e00a      	b.n	80081fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	4908      	ldr	r1, [pc, #32]	; (800820c <__NVIC_SetPriority+0x50>)
 80081ec:	79fb      	ldrb	r3, [r7, #7]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	3b04      	subs	r3, #4
 80081f4:	0112      	lsls	r2, r2, #4
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	440b      	add	r3, r1
 80081fa:	761a      	strb	r2, [r3, #24]
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr
 8008208:	e000e100 	.word	0xe000e100
 800820c:	e000ed00 	.word	0xe000ed00

08008210 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008214:	4b05      	ldr	r3, [pc, #20]	; (800822c <SysTick_Handler+0x1c>)
 8008216:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008218:	f001 fdbc 	bl	8009d94 <xTaskGetSchedulerState>
 800821c:	4603      	mov	r3, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d001      	beq.n	8008226 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008222:	f002 fc61 	bl	800aae8 <xPortSysTickHandler>
  }
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	e000e010 	.word	0xe000e010

08008230 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008234:	2100      	movs	r1, #0
 8008236:	f06f 0004 	mvn.w	r0, #4
 800823a:	f7ff ffbf 	bl	80081bc <__NVIC_SetPriority>
#endif
}
 800823e:	bf00      	nop
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800824a:	f3ef 8305 	mrs	r3, IPSR
 800824e:	603b      	str	r3, [r7, #0]
  return(result);
 8008250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008256:	f06f 0305 	mvn.w	r3, #5
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e00c      	b.n	8008278 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <osKernelInitialize+0x44>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d105      	bne.n	8008272 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008266:	4b08      	ldr	r3, [pc, #32]	; (8008288 <osKernelInitialize+0x44>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800826c:	2300      	movs	r3, #0
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	e002      	b.n	8008278 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008272:	f04f 33ff 	mov.w	r3, #4294967295
 8008276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20000e10 	.word	0x20000e10

0800828c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008292:	f3ef 8305 	mrs	r3, IPSR
 8008296:	603b      	str	r3, [r7, #0]
  return(result);
 8008298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800829e:	f06f 0305 	mvn.w	r3, #5
 80082a2:	607b      	str	r3, [r7, #4]
 80082a4:	e010      	b.n	80082c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082a6:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <osKernelStart+0x48>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d109      	bne.n	80082c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ae:	f7ff ffbf 	bl	8008230 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <osKernelStart+0x48>)
 80082b4:	2202      	movs	r2, #2
 80082b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082b8:	f001 f924 	bl	8009504 <vTaskStartScheduler>
      stat = osOK;
 80082bc:	2300      	movs	r3, #0
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e002      	b.n	80082c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295
 80082c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082c8:	687b      	ldr	r3, [r7, #4]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000e10 	.word	0x20000e10

080082d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08e      	sub	sp, #56	; 0x38
 80082dc:	af04      	add	r7, sp, #16
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e8:	f3ef 8305 	mrs	r3, IPSR
 80082ec:	617b      	str	r3, [r7, #20]
  return(result);
 80082ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d17e      	bne.n	80083f2 <osThreadNew+0x11a>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d07b      	beq.n	80083f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082fe:	2318      	movs	r3, #24
 8008300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d045      	beq.n	800839e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <osThreadNew+0x48>
        name = attr->name;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <osThreadNew+0x6e>
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	2b38      	cmp	r3, #56	; 0x38
 8008338:	d805      	bhi.n	8008346 <osThreadNew+0x6e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <osThreadNew+0x72>
        return (NULL);
 8008346:	2300      	movs	r3, #0
 8008348:	e054      	b.n	80083f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00e      	beq.n	8008380 <osThreadNew+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	2b5b      	cmp	r3, #91	; 0x5b
 8008368:	d90a      	bls.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d006      	beq.n	8008380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <osThreadNew+0xa8>
        mem = 1;
 800837a:	2301      	movs	r3, #1
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e010      	b.n	80083a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <osThreadNew+0xca>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <osThreadNew+0xca>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <osThreadNew+0xca>
          mem = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	e001      	b.n	80083a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d110      	bne.n	80083ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083b0:	9202      	str	r2, [sp, #8]
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 feca 	bl	8009158 <xTaskCreateStatic>
 80083c4:	4603      	mov	r3, r0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e013      	b.n	80083f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d110      	bne.n	80083f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f107 0310 	add.w	r3, r7, #16
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 ff15 	bl	8009212 <xTaskCreate>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <osThreadNew+0x11a>
            hTask = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083f2:	693b      	ldr	r3, [r7, #16]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3728      	adds	r7, #40	; 0x28
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008404:	f3ef 8305 	mrs	r3, IPSR
 8008408:	60bb      	str	r3, [r7, #8]
  return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <osDelay+0x1c>
    stat = osErrorISR;
 8008410:	f06f 0305 	mvn.w	r3, #5
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e007      	b.n	8008428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 f83a 	bl	800949c <vTaskDelay>
    }
  }

  return (stat);
 8008428:	68fb      	ldr	r3, [r7, #12]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f002 f972 	bl	800a724 <pvTimerGetTimerID>
 8008440:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <TimerCallback+0x22>
    callb->func (callb->arg);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	6852      	ldr	r2, [r2, #4]
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
  }
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	; 0x30
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	607a      	str	r2, [r7, #4]
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	460b      	mov	r3, r1
 800846a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800846c:	2300      	movs	r3, #0
 800846e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008470:	f3ef 8305 	mrs	r3, IPSR
 8008474:	613b      	str	r3, [r7, #16]
  return(result);
 8008476:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008478:	2b00      	cmp	r3, #0
 800847a:	d163      	bne.n	8008544 <osTimerNew+0xe8>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d060      	beq.n	8008544 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008482:	2008      	movs	r0, #8
 8008484:	f002 fbc0 	bl	800ac08 <pvPortMalloc>
 8008488:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d059      	beq.n	8008544 <osTimerNew+0xe8>
      callb->func = func;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	e001      	b.n	80084ac <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80084a8:	2301      	movs	r3, #1
 80084aa:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
 80084b0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01c      	beq.n	80084f6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <osTimerNew+0x6e>
          name = attr->name;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d006      	beq.n	80084e0 <osTimerNew+0x84>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b2b      	cmp	r3, #43	; 0x2b
 80084d8:	d902      	bls.n	80084e0 <osTimerNew+0x84>
          mem = 1;
 80084da:	2301      	movs	r3, #1
 80084dc:	61bb      	str	r3, [r7, #24]
 80084de:	e00c      	b.n	80084fa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d108      	bne.n	80084fa <osTimerNew+0x9e>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <osTimerNew+0x9e>
            mem = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e001      	b.n	80084fa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d10c      	bne.n	800851a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <osTimerNew+0xf4>)
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	2101      	movs	r1, #1
 8008510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008512:	f001 fd88 	bl	800a026 <xTimerCreateStatic>
 8008516:	6238      	str	r0, [r7, #32]
 8008518:	e00b      	b.n	8008532 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d108      	bne.n	8008532 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <osTimerNew+0xf4>)
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	69fa      	ldr	r2, [r7, #28]
 8008528:	2101      	movs	r1, #1
 800852a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800852c:	f001 fd5a 	bl	8009fe4 <xTimerCreate>
 8008530:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d105      	bne.n	8008544 <osTimerNew+0xe8>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d002      	beq.n	8008544 <osTimerNew+0xe8>
        vPortFree (callb);
 800853e:	6978      	ldr	r0, [r7, #20]
 8008540:	f002 fc2e 	bl	800ada0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008544:	6a3b      	ldr	r3, [r7, #32]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3728      	adds	r7, #40	; 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08008433 	.word	0x08008433

08008554 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008562:	f3ef 8305 	mrs	r3, IPSR
 8008566:	60fb      	str	r3, [r7, #12]
  return(result);
 8008568:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <osTimerStart+0x22>
    stat = osErrorISR;
 800856e:	f06f 0305 	mvn.w	r3, #5
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e017      	b.n	80085a6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <osTimerStart+0x30>
    stat = osErrorParameter;
 800857c:	f06f 0303 	mvn.w	r3, #3
 8008580:	617b      	str	r3, [r7, #20]
 8008582:	e010      	b.n	80085a6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8008584:	2300      	movs	r3, #0
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	2104      	movs	r1, #4
 800858e:	6938      	ldr	r0, [r7, #16]
 8008590:	f001 fdc2 	bl	800a118 <xTimerGenericCommand>
 8008594:	4603      	mov	r3, r0
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <osTimerStart+0x4c>
      stat = osOK;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	e002      	b.n	80085a6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80085a0:	f06f 0302 	mvn.w	r3, #2
 80085a4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80085a6:	697b      	ldr	r3, [r7, #20]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <vApplicationGetIdleTaskMemory+0x2c>)
 80085c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	4a06      	ldr	r2, [pc, #24]	; (80085e0 <vApplicationGetIdleTaskMemory+0x30>)
 80085c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2280      	movs	r2, #128	; 0x80
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000e14 	.word	0x20000e14
 80085e0:	20000e70 	.word	0x20000e70

080085e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a07      	ldr	r2, [pc, #28]	; (8008610 <vApplicationGetTimerTaskMemory+0x2c>)
 80085f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <vApplicationGetTimerTaskMemory+0x30>)
 80085fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008602:	601a      	str	r2, [r3, #0]
}
 8008604:	bf00      	nop
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	20001070 	.word	0x20001070
 8008614:	200010cc 	.word	0x200010cc

08008618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f103 0208 	add.w	r2, r3, #8
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f04f 32ff 	mov.w	r2, #4294967295
 8008630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f103 0208 	add.w	r2, r3, #8
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f103 0208 	add.w	r2, r3, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d0:	d103      	bne.n	80086da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	60fb      	str	r3, [r7, #12]
 80086d8:	e00c      	b.n	80086f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3308      	adds	r3, #8
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	e002      	b.n	80086e8 <vListInsert+0x2e>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d2f6      	bcs.n	80086e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	601a      	str	r2, [r3, #0]
}
 8008720:	bf00      	nop
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6892      	ldr	r2, [r2, #8]
 8008742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d103      	bne.n	8008760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689a      	ldr	r2, [r3, #8]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087aa:	f002 f90b 	bl	800a9c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	441a      	add	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	3b01      	subs	r3, #1
 80087dc:	68f9      	ldr	r1, [r7, #12]
 80087de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80087e0:	fb01 f303 	mul.w	r3, r1, r3
 80087e4:	441a      	add	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d114      	bne.n	800882a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d01a      	beq.n	800883e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3310      	adds	r3, #16
 800880c:	4618      	mov	r0, r3
 800880e:	f001 f903 	bl	8009a18 <xTaskRemoveFromEventList>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d012      	beq.n	800883e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008818:	4b0c      	ldr	r3, [pc, #48]	; (800884c <xQueueGenericReset+0xcc>)
 800881a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	e009      	b.n	800883e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3310      	adds	r3, #16
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fef2 	bl	8008618 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3324      	adds	r3, #36	; 0x24
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff feed 	bl	8008618 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800883e:	f002 f8f1 	bl	800aa24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008842:	2301      	movs	r3, #1
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	e000ed04 	.word	0xe000ed04

08008850 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08e      	sub	sp, #56	; 0x38
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10a      	bne.n	8008896 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <xQueueGenericCreateStatic+0x52>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <xQueueGenericCreateStatic+0x56>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueGenericCreateStatic+0x58>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	623b      	str	r3, [r7, #32]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d102      	bne.n	80088ce <xQueueGenericCreateStatic+0x7e>
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericCreateStatic+0x82>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericCreateStatic+0x84>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	61fb      	str	r3, [r7, #28]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088ee:	2350      	movs	r3, #80	; 0x50
 80088f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b50      	cmp	r3, #80	; 0x50
 80088f6:	d00a      	beq.n	800890e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	61bb      	str	r3, [r7, #24]
}
 800890a:	bf00      	nop
 800890c:	e7fe      	b.n	800890c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800890e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00d      	beq.n	8008936 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008922:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	4613      	mov	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 f805 	bl	8008940 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008938:	4618      	mov	r0, r3
 800893a:	3730      	adds	r7, #48	; 0x30
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	e002      	b.n	8008962 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800896e:	2101      	movs	r1, #1
 8008970:	69b8      	ldr	r0, [r7, #24]
 8008972:	f7ff ff05 	bl	8008780 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	78fa      	ldrb	r2, [r7, #3]
 800897a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	; 0x38
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueGenericSend+0x32>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <xQueueGenericSend+0x40>
 80089c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <xQueueGenericSend+0x44>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xQueueGenericSend+0x46>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <xQueueGenericSend+0x60>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x6e>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <xQueueGenericSend+0x72>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <xQueueGenericSend+0x74>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xQueueGenericSend+0x8e>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	623b      	str	r3, [r7, #32]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a16:	f001 f9bd 	bl	8009d94 <xTaskGetSchedulerState>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <xQueueGenericSend+0x9e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <xQueueGenericSend+0xa2>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueGenericSend+0xa4>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10a      	bne.n	8008a46 <xQueueGenericSend+0xbe>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	61fb      	str	r3, [r7, #28]
}
 8008a42:	bf00      	nop
 8008a44:	e7fe      	b.n	8008a44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a46:	f001 ffbd 	bl	800a9c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d302      	bcc.n	8008a5c <xQueueGenericSend+0xd4>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d129      	bne.n	8008ab0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a62:	f000 fa0b 	bl	8008e7c <prvCopyDataToQueue>
 8008a66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d010      	beq.n	8008a92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	3324      	adds	r3, #36	; 0x24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 ffcf 	bl	8009a18 <xTaskRemoveFromEventList>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d013      	beq.n	8008aa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a80:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	e00a      	b.n	8008aa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a98:	4b39      	ldr	r3, [pc, #228]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008aa8:	f001 ffbc 	bl	800aa24 <vPortExitCritical>
				return pdPASS;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e063      	b.n	8008b78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d103      	bne.n	8008abe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ab6:	f001 ffb5 	bl	800aa24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	e05c      	b.n	8008b78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac4:	f107 0314 	add.w	r3, r7, #20
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f001 f809 	bl	8009ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ad2:	f001 ffa7 	bl	800aa24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ad6:	f000 fd7b 	bl	80095d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ada:	f001 ff73 	bl	800a9c4 <vPortEnterCritical>
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae4:	b25b      	sxtb	r3, r3
 8008ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aea:	d103      	bne.n	8008af4 <xQueueGenericSend+0x16c>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x182>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0a:	f001 ff8b 	bl	800aa24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b0e:	1d3a      	adds	r2, r7, #4
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f000 fff8 	bl	8009b0c <xTaskCheckForTimeOut>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d124      	bne.n	8008b6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b24:	f000 faa2 	bl	800906c <prvIsQueueFull>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d018      	beq.n	8008b60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	3310      	adds	r3, #16
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff1e 	bl	8009978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b3e:	f000 fa2d 	bl	8008f9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b42:	f000 fd53 	bl	80095ec <xTaskResumeAll>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f af7c 	bne.w	8008a46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <xQueueGenericSend+0x1f8>)
 8008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	e772      	b.n	8008a46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b62:	f000 fa1b 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b66:	f000 fd41 	bl	80095ec <xTaskResumeAll>
 8008b6a:	e76c      	b.n	8008a46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b6e:	f000 fa15 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b72:	f000 fd3b 	bl	80095ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3738      	adds	r7, #56	; 0x38
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	e000ed04 	.word	0xe000ed04

08008b84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b090      	sub	sp, #64	; 0x40
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10a      	bne.n	8008bb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bae:	bf00      	nop
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGenericSendFromISR+0x3c>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <xQueueGenericSendFromISR+0x40>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <xQueueGenericSendFromISR+0x42>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10a      	bne.n	8008be0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d103      	bne.n	8008bee <xQueueGenericSendFromISR+0x6a>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <xQueueGenericSendFromISR+0x6e>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <xQueueGenericSendFromISR+0x70>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	623b      	str	r3, [r7, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c0e:	f001 ffbb 	bl	800ab88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c12:	f3ef 8211 	mrs	r2, BASEPRI
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	61fa      	str	r2, [r7, #28]
 8008c28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <xQueueGenericSendFromISR+0xbc>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d12f      	bne.n	8008ca0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c56:	f000 f911 	bl	8008e7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d112      	bne.n	8008c8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d016      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	3324      	adds	r3, #36	; 0x24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fed1 	bl	8009a18 <xTaskRemoveFromEventList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00e      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	e007      	b.n	8008c9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	b25a      	sxtb	r2, r3
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008c9e:	e001      	b.n	8008ca4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3740      	adds	r7, #64	; 0x40
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b08c      	sub	sp, #48	; 0x30
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10a      	bne.n	8008cec <xQueueReceive+0x30>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	623b      	str	r3, [r7, #32]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d103      	bne.n	8008cfa <xQueueReceive+0x3e>
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <xQueueReceive+0x42>
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e000      	b.n	8008d00 <xQueueReceive+0x44>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xQueueReceive+0x5e>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	61fb      	str	r3, [r7, #28]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d1a:	f001 f83b 	bl	8009d94 <xTaskGetSchedulerState>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <xQueueReceive+0x6e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <xQueueReceive+0x72>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <xQueueReceive+0x74>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xQueueReceive+0x8e>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61bb      	str	r3, [r7, #24]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d4a:	f001 fe3b 	bl	800a9c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01f      	beq.n	8008d9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d5e:	f000 f8f7 	bl	8008f50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	1e5a      	subs	r2, r3, #1
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00f      	beq.n	8008d92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	3310      	adds	r3, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fe4e 	bl	8009a18 <xTaskRemoveFromEventList>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d007      	beq.n	8008d92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d82:	4b3d      	ldr	r3, [pc, #244]	; (8008e78 <xQueueReceive+0x1bc>)
 8008d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d92:	f001 fe47 	bl	800aa24 <vPortExitCritical>
				return pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e069      	b.n	8008e6e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008da0:	f001 fe40 	bl	800aa24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008da4:	2300      	movs	r3, #0
 8008da6:	e062      	b.n	8008e6e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d106      	bne.n	8008dbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dae:	f107 0310 	add.w	r3, r7, #16
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fe94 	bl	8009ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008db8:	2301      	movs	r3, #1
 8008dba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dbc:	f001 fe32 	bl	800aa24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dc0:	f000 fc06 	bl	80095d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dc4:	f001 fdfe 	bl	800a9c4 <vPortEnterCritical>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dce:	b25b      	sxtb	r3, r3
 8008dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd4:	d103      	bne.n	8008dde <xQueueReceive+0x122>
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dea:	d103      	bne.n	8008df4 <xQueueReceive+0x138>
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df4:	f001 fe16 	bl	800aa24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008df8:	1d3a      	adds	r2, r7, #4
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	4611      	mov	r1, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fe83 	bl	8009b0c <xTaskCheckForTimeOut>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d123      	bne.n	8008e54 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e0e:	f000 f917 	bl	8009040 <prvIsQueueEmpty>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d017      	beq.n	8008e48 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	3324      	adds	r3, #36	; 0x24
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fda9 	bl	8009978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e28:	f000 f8b8 	bl	8008f9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e2c:	f000 fbde 	bl	80095ec <xTaskResumeAll>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d189      	bne.n	8008d4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <xQueueReceive+0x1bc>)
 8008e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	e780      	b.n	8008d4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e4a:	f000 f8a7 	bl	8008f9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e4e:	f000 fbcd 	bl	80095ec <xTaskResumeAll>
 8008e52:	e77a      	b.n	8008d4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e56:	f000 f8a1 	bl	8008f9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e5a:	f000 fbc7 	bl	80095ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e60:	f000 f8ee 	bl	8009040 <prvIsQueueEmpty>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f af6f 	beq.w	8008d4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3730      	adds	r7, #48	; 0x30
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	e000ed04 	.word	0xe000ed04

08008e7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d14d      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 ff92 	bl	8009dd0 <xTaskPriorityDisinherit>
 8008eac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	609a      	str	r2, [r3, #8]
 8008eb4:	e043      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d119      	bne.n	8008ef0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6858      	ldr	r0, [r3, #4]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	68b9      	ldr	r1, [r7, #8]
 8008ec8:	f002 f8b2 	bl	800b030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	441a      	add	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d32b      	bcc.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
 8008eee:	e026      	b.n	8008f3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	68d8      	ldr	r0, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	461a      	mov	r2, r3
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	f002 f898 	bl	800b030 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f08:	425b      	negs	r3, r3
 8008f0a:	441a      	add	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68da      	ldr	r2, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d207      	bcs.n	8008f2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	425b      	negs	r3, r3
 8008f26:	441a      	add	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d105      	bne.n	8008f3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f46:	697b      	ldr	r3, [r7, #20]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d018      	beq.n	8008f94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68da      	ldr	r2, [r3, #12]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	441a      	add	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d303      	bcc.n	8008f84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68d9      	ldr	r1, [r3, #12]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6838      	ldr	r0, [r7, #0]
 8008f90:	f002 f84e 	bl	800b030 <memcpy>
	}
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fa4:	f001 fd0e 	bl	800a9c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fb0:	e011      	b.n	8008fd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d012      	beq.n	8008fe0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3324      	adds	r3, #36	; 0x24
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 fd2a 	bl	8009a18 <xTaskRemoveFromEventList>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fca:	f000 fe01 	bl	8009bd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	dce9      	bgt.n	8008fb2 <prvUnlockQueue+0x16>
 8008fde:	e000      	b.n	8008fe2 <prvUnlockQueue+0x46>
					break;
 8008fe0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	22ff      	movs	r2, #255	; 0xff
 8008fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fea:	f001 fd1b 	bl	800aa24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fee:	f001 fce9 	bl	800a9c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ffa:	e011      	b.n	8009020 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d012      	beq.n	800902a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3310      	adds	r3, #16
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fd05 	bl	8009a18 <xTaskRemoveFromEventList>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009014:	f000 fddc 	bl	8009bd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	3b01      	subs	r3, #1
 800901c:	b2db      	uxtb	r3, r3
 800901e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dce9      	bgt.n	8008ffc <prvUnlockQueue+0x60>
 8009028:	e000      	b.n	800902c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800902a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	22ff      	movs	r2, #255	; 0xff
 8009030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009034:	f001 fcf6 	bl	800aa24 <vPortExitCritical>
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009048:	f001 fcbc 	bl	800a9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009054:	2301      	movs	r3, #1
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	e001      	b.n	800905e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f001 fce1 	bl	800aa24 <vPortExitCritical>

	return xReturn;
 8009062:	68fb      	ldr	r3, [r7, #12]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009074:	f001 fca6 	bl	800a9c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009080:	429a      	cmp	r2, r3
 8009082:	d102      	bne.n	800908a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fcc9 	bl	800aa24 <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090a6:	2300      	movs	r3, #0
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e014      	b.n	80090d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090ac:	4a0f      	ldr	r2, [pc, #60]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090b8:	490c      	ldr	r1, [pc, #48]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090c2:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <vQueueAddToRegistry+0x50>)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ce:	e006      	b.n	80090de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b07      	cmp	r3, #7
 80090da:	d9e7      	bls.n	80090ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20003014 	.word	0x20003014

080090f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009100:	f001 fc60 	bl	800a9c4 <vPortEnterCritical>
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800910a:	b25b      	sxtb	r3, r3
 800910c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009110:	d103      	bne.n	800911a <vQueueWaitForMessageRestricted+0x2a>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009120:	b25b      	sxtb	r3, r3
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d103      	bne.n	8009130 <vQueueWaitForMessageRestricted+0x40>
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009130:	f001 fc78 	bl	800aa24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	3324      	adds	r3, #36	; 0x24
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fc3b 	bl	80099c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800914a:	6978      	ldr	r0, [r7, #20]
 800914c:	f7ff ff26 	bl	8008f9c <prvUnlockQueue>
	}
 8009150:	bf00      	nop
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	; 0x38
 800915c:	af04      	add	r7, sp, #16
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xTaskCreateStatic+0x2a>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	623b      	str	r3, [r7, #32]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xTaskCreateStatic+0x46>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	61fb      	str	r3, [r7, #28]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800919e:	235c      	movs	r3, #92	; 0x5c
 80091a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b5c      	cmp	r3, #92	; 0x5c
 80091a6:	d00a      	beq.n	80091be <xTaskCreateStatic+0x66>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	61bb      	str	r3, [r7, #24]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d01e      	beq.n	8009204 <xTaskCreateStatic+0xac>
 80091c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01b      	beq.n	8009204 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80091d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80091de:	2300      	movs	r3, #0
 80091e0:	9303      	str	r3, [sp, #12]
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	9302      	str	r3, [sp, #8]
 80091e6:	f107 0314 	add.w	r3, r7, #20
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 f850 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091fe:	f000 f8dd 	bl	80093bc <prvAddNewTaskToReadyList>
 8009202:	e001      	b.n	8009208 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009204:	2300      	movs	r3, #0
 8009206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009208:	697b      	ldr	r3, [r7, #20]
	}
 800920a:	4618      	mov	r0, r3
 800920c:	3728      	adds	r7, #40	; 0x28
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009212:	b580      	push	{r7, lr}
 8009214:	b08c      	sub	sp, #48	; 0x30
 8009216:	af04      	add	r7, sp, #16
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fcee 	bl	800ac08 <pvPortMalloc>
 800922c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00e      	beq.n	8009252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009234:	205c      	movs	r0, #92	; 0x5c
 8009236:	f001 fce7 	bl	800ac08 <pvPortMalloc>
 800923a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
 8009248:	e005      	b.n	8009256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f001 fda8 	bl	800ada0 <vPortFree>
 8009250:	e001      	b.n	8009256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d017      	beq.n	800928c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	2300      	movs	r3, #0
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f80e 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009280:	69f8      	ldr	r0, [r7, #28]
 8009282:	f000 f89b 	bl	80093bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009286:	2301      	movs	r3, #1
 8009288:	61bb      	str	r3, [r7, #24]
 800928a:	e002      	b.n	8009292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800928c:	f04f 33ff 	mov.w	r3, #4294967295
 8009290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009292:	69bb      	ldr	r3, [r7, #24]
	}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	461a      	mov	r2, r3
 80092b4:	21a5      	movs	r1, #165	; 0xa5
 80092b6:	f001 fec9 	bl	800b04c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80092c4:	3b01      	subs	r3, #1
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01f      	beq.n	800933a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
 80092fe:	e012      	b.n	8009326 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	4413      	add	r3, r2
 8009306:	7819      	ldrb	r1, [r3, #0]
 8009308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	3334      	adds	r3, #52	; 0x34
 8009310:	460a      	mov	r2, r1
 8009312:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d006      	beq.n	800932e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	3301      	adds	r3, #1
 8009324:	61fb      	str	r3, [r7, #28]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	2b0f      	cmp	r3, #15
 800932a:	d9e9      	bls.n	8009300 <prvInitialiseNewTask+0x64>
 800932c:	e000      	b.n	8009330 <prvInitialiseNewTask+0x94>
			{
				break;
 800932e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	2200      	movs	r2, #0
 8009334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009338:	e003      	b.n	8009342 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	2b37      	cmp	r3, #55	; 0x37
 8009346:	d901      	bls.n	800934c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009348:	2337      	movs	r3, #55	; 0x37
 800934a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009350:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935a:	2200      	movs	r2, #0
 800935c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	3304      	adds	r3, #4
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff f978 	bl	8008658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936a:	3318      	adds	r3, #24
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff f973 	bl	8008658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009376:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	2200      	movs	r2, #0
 800938c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	68f9      	ldr	r1, [r7, #12]
 800939a:	69b8      	ldr	r0, [r7, #24]
 800939c:	f001 f9e2 	bl	800a764 <pxPortInitialiseStack>
 80093a0:	4602      	mov	r2, r0
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093b2:	bf00      	nop
 80093b4:	3720      	adds	r7, #32
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093c4:	f001 fafe 	bl	800a9c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093c8:	4b2d      	ldr	r3, [pc, #180]	; (8009480 <prvAddNewTaskToReadyList+0xc4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3301      	adds	r3, #1
 80093ce:	4a2c      	ldr	r2, [pc, #176]	; (8009480 <prvAddNewTaskToReadyList+0xc4>)
 80093d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093d2:	4b2c      	ldr	r3, [pc, #176]	; (8009484 <prvAddNewTaskToReadyList+0xc8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093da:	4a2a      	ldr	r2, [pc, #168]	; (8009484 <prvAddNewTaskToReadyList+0xc8>)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093e0:	4b27      	ldr	r3, [pc, #156]	; (8009480 <prvAddNewTaskToReadyList+0xc4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d110      	bne.n	800940a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093e8:	f000 fc16 	bl	8009c18 <prvInitialiseTaskLists>
 80093ec:	e00d      	b.n	800940a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ee:	4b26      	ldr	r3, [pc, #152]	; (8009488 <prvAddNewTaskToReadyList+0xcc>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093f6:	4b23      	ldr	r3, [pc, #140]	; (8009484 <prvAddNewTaskToReadyList+0xc8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	429a      	cmp	r2, r3
 8009402:	d802      	bhi.n	800940a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009404:	4a1f      	ldr	r2, [pc, #124]	; (8009484 <prvAddNewTaskToReadyList+0xc8>)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800940a:	4b20      	ldr	r3, [pc, #128]	; (800948c <prvAddNewTaskToReadyList+0xd0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3301      	adds	r3, #1
 8009410:	4a1e      	ldr	r2, [pc, #120]	; (800948c <prvAddNewTaskToReadyList+0xd0>)
 8009412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009414:	4b1d      	ldr	r3, [pc, #116]	; (800948c <prvAddNewTaskToReadyList+0xd0>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009420:	4b1b      	ldr	r3, [pc, #108]	; (8009490 <prvAddNewTaskToReadyList+0xd4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	429a      	cmp	r2, r3
 8009426:	d903      	bls.n	8009430 <prvAddNewTaskToReadyList+0x74>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	4a18      	ldr	r2, [pc, #96]	; (8009490 <prvAddNewTaskToReadyList+0xd4>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4a15      	ldr	r2, [pc, #84]	; (8009494 <prvAddNewTaskToReadyList+0xd8>)
 800943e:	441a      	add	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7ff f913 	bl	8008672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800944c:	f001 faea 	bl	800aa24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009450:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <prvAddNewTaskToReadyList+0xcc>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00e      	beq.n	8009476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009458:	4b0a      	ldr	r3, [pc, #40]	; (8009484 <prvAddNewTaskToReadyList+0xc8>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	429a      	cmp	r2, r3
 8009464:	d207      	bcs.n	8009476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <prvAddNewTaskToReadyList+0xdc>)
 8009468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200019a0 	.word	0x200019a0
 8009484:	200014cc 	.word	0x200014cc
 8009488:	200019ac 	.word	0x200019ac
 800948c:	200019bc 	.word	0x200019bc
 8009490:	200019a8 	.word	0x200019a8
 8009494:	200014d0 	.word	0x200014d0
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d017      	beq.n	80094de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <vTaskDelay+0x60>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <vTaskDelay+0x30>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	60bb      	str	r3, [r7, #8]
}
 80094c8:	bf00      	nop
 80094ca:	e7fe      	b.n	80094ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094cc:	f000 f880 	bl	80095d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094d0:	2100      	movs	r1, #0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fcea 	bl	8009eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094d8:	f000 f888 	bl	80095ec <xTaskResumeAll>
 80094dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d107      	bne.n	80094f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094e4:	4b06      	ldr	r3, [pc, #24]	; (8009500 <vTaskDelay+0x64>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094f4:	bf00      	nop
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200019c8 	.word	0x200019c8
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08a      	sub	sp, #40	; 0x28
 8009508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009512:	463a      	mov	r2, r7
 8009514:	1d39      	adds	r1, r7, #4
 8009516:	f107 0308 	add.w	r3, r7, #8
 800951a:	4618      	mov	r0, r3
 800951c:	f7ff f848 	bl	80085b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	9202      	str	r2, [sp, #8]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	2300      	movs	r3, #0
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	2300      	movs	r3, #0
 8009530:	460a      	mov	r2, r1
 8009532:	4921      	ldr	r1, [pc, #132]	; (80095b8 <vTaskStartScheduler+0xb4>)
 8009534:	4821      	ldr	r0, [pc, #132]	; (80095bc <vTaskStartScheduler+0xb8>)
 8009536:	f7ff fe0f 	bl	8009158 <xTaskCreateStatic>
 800953a:	4603      	mov	r3, r0
 800953c:	4a20      	ldr	r2, [pc, #128]	; (80095c0 <vTaskStartScheduler+0xbc>)
 800953e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009540:	4b1f      	ldr	r3, [pc, #124]	; (80095c0 <vTaskStartScheduler+0xbc>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009548:	2301      	movs	r3, #1
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e001      	b.n	8009552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800954e:	2300      	movs	r3, #0
 8009550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2b01      	cmp	r3, #1
 8009556:	d102      	bne.n	800955e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009558:	f000 fcfc 	bl	8009f54 <xTimerCreateTimerTask>
 800955c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d116      	bne.n	8009592 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	613b      	str	r3, [r7, #16]
}
 8009576:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <vTaskStartScheduler+0xc0>)
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009580:	4b11      	ldr	r3, [pc, #68]	; (80095c8 <vTaskStartScheduler+0xc4>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009586:	4b11      	ldr	r3, [pc, #68]	; (80095cc <vTaskStartScheduler+0xc8>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800958c:	f001 f978 	bl	800a880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009590:	e00e      	b.n	80095b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d10a      	bne.n	80095b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60fb      	str	r3, [r7, #12]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <vTaskStartScheduler+0xaa>
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	0800ea94 	.word	0x0800ea94
 80095bc:	08009be9 	.word	0x08009be9
 80095c0:	200019c4 	.word	0x200019c4
 80095c4:	200019c0 	.word	0x200019c0
 80095c8:	200019ac 	.word	0x200019ac
 80095cc:	200019a4 	.word	0x200019a4

080095d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095d0:	b480      	push	{r7}
 80095d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095d4:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <vTaskSuspendAll+0x18>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	4a03      	ldr	r2, [pc, #12]	; (80095e8 <vTaskSuspendAll+0x18>)
 80095dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095de:	bf00      	nop
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	200019c8 	.word	0x200019c8

080095ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095fa:	4b42      	ldr	r3, [pc, #264]	; (8009704 <xTaskResumeAll+0x118>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <xTaskResumeAll+0x2c>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	f383 8811 	msr	BASEPRI, r3
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	603b      	str	r3, [r7, #0]
}
 8009614:	bf00      	nop
 8009616:	e7fe      	b.n	8009616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009618:	f001 f9d4 	bl	800a9c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800961c:	4b39      	ldr	r3, [pc, #228]	; (8009704 <xTaskResumeAll+0x118>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3b01      	subs	r3, #1
 8009622:	4a38      	ldr	r2, [pc, #224]	; (8009704 <xTaskResumeAll+0x118>)
 8009624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009626:	4b37      	ldr	r3, [pc, #220]	; (8009704 <xTaskResumeAll+0x118>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d162      	bne.n	80096f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800962e:	4b36      	ldr	r3, [pc, #216]	; (8009708 <xTaskResumeAll+0x11c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d05e      	beq.n	80096f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009636:	e02f      	b.n	8009698 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009638:	4b34      	ldr	r3, [pc, #208]	; (800970c <xTaskResumeAll+0x120>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3318      	adds	r3, #24
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff f871 	bl	800872c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3304      	adds	r3, #4
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff f86c 	bl	800872c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009658:	4b2d      	ldr	r3, [pc, #180]	; (8009710 <xTaskResumeAll+0x124>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d903      	bls.n	8009668 <xTaskResumeAll+0x7c>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	4a2a      	ldr	r2, [pc, #168]	; (8009710 <xTaskResumeAll+0x124>)
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4a27      	ldr	r2, [pc, #156]	; (8009714 <xTaskResumeAll+0x128>)
 8009676:	441a      	add	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f7fe fff7 	bl	8008672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009688:	4b23      	ldr	r3, [pc, #140]	; (8009718 <xTaskResumeAll+0x12c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	429a      	cmp	r2, r3
 8009690:	d302      	bcc.n	8009698 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009692:	4b22      	ldr	r3, [pc, #136]	; (800971c <xTaskResumeAll+0x130>)
 8009694:	2201      	movs	r2, #1
 8009696:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009698:	4b1c      	ldr	r3, [pc, #112]	; (800970c <xTaskResumeAll+0x120>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1cb      	bne.n	8009638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096a6:	f000 fb55 	bl	8009d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096aa:	4b1d      	ldr	r3, [pc, #116]	; (8009720 <xTaskResumeAll+0x134>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d010      	beq.n	80096d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096b6:	f000 f847 	bl	8009748 <xTaskIncrementTick>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80096c0:	4b16      	ldr	r3, [pc, #88]	; (800971c <xTaskResumeAll+0x130>)
 80096c2:	2201      	movs	r2, #1
 80096c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f1      	bne.n	80096b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80096d2:	4b13      	ldr	r3, [pc, #76]	; (8009720 <xTaskResumeAll+0x134>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096d8:	4b10      	ldr	r3, [pc, #64]	; (800971c <xTaskResumeAll+0x130>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d009      	beq.n	80096f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096e0:	2301      	movs	r3, #1
 80096e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096e4:	4b0f      	ldr	r3, [pc, #60]	; (8009724 <xTaskResumeAll+0x138>)
 80096e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ea:	601a      	str	r2, [r3, #0]
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096f4:	f001 f996 	bl	800aa24 <vPortExitCritical>

	return xAlreadyYielded;
 80096f8:	68bb      	ldr	r3, [r7, #8]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	200019c8 	.word	0x200019c8
 8009708:	200019a0 	.word	0x200019a0
 800970c:	20001960 	.word	0x20001960
 8009710:	200019a8 	.word	0x200019a8
 8009714:	200014d0 	.word	0x200014d0
 8009718:	200014cc 	.word	0x200014cc
 800971c:	200019b4 	.word	0x200019b4
 8009720:	200019b0 	.word	0x200019b0
 8009724:	e000ed04 	.word	0xe000ed04

08009728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800972e:	4b05      	ldr	r3, [pc, #20]	; (8009744 <xTaskGetTickCount+0x1c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009734:	687b      	ldr	r3, [r7, #4]
}
 8009736:	4618      	mov	r0, r3
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	200019a4 	.word	0x200019a4

08009748 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009752:	4b4f      	ldr	r3, [pc, #316]	; (8009890 <xTaskIncrementTick+0x148>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	f040 808f 	bne.w	800987a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800975c:	4b4d      	ldr	r3, [pc, #308]	; (8009894 <xTaskIncrementTick+0x14c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3301      	adds	r3, #1
 8009762:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009764:	4a4b      	ldr	r2, [pc, #300]	; (8009894 <xTaskIncrementTick+0x14c>)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d120      	bne.n	80097b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009770:	4b49      	ldr	r3, [pc, #292]	; (8009898 <xTaskIncrementTick+0x150>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <xTaskIncrementTick+0x48>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	603b      	str	r3, [r7, #0]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <xTaskIncrementTick+0x46>
 8009790:	4b41      	ldr	r3, [pc, #260]	; (8009898 <xTaskIncrementTick+0x150>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
 8009796:	4b41      	ldr	r3, [pc, #260]	; (800989c <xTaskIncrementTick+0x154>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a3f      	ldr	r2, [pc, #252]	; (8009898 <xTaskIncrementTick+0x150>)
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	4a3f      	ldr	r2, [pc, #252]	; (800989c <xTaskIncrementTick+0x154>)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	4b3e      	ldr	r3, [pc, #248]	; (80098a0 <xTaskIncrementTick+0x158>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	4a3d      	ldr	r2, [pc, #244]	; (80098a0 <xTaskIncrementTick+0x158>)
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	f000 fad1 	bl	8009d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097b2:	4b3c      	ldr	r3, [pc, #240]	; (80098a4 <xTaskIncrementTick+0x15c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d349      	bcc.n	8009850 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097bc:	4b36      	ldr	r3, [pc, #216]	; (8009898 <xTaskIncrementTick+0x150>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d104      	bne.n	80097d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c6:	4b37      	ldr	r3, [pc, #220]	; (80098a4 <xTaskIncrementTick+0x15c>)
 80097c8:	f04f 32ff 	mov.w	r2, #4294967295
 80097cc:	601a      	str	r2, [r3, #0]
					break;
 80097ce:	e03f      	b.n	8009850 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097d0:	4b31      	ldr	r3, [pc, #196]	; (8009898 <xTaskIncrementTick+0x150>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d203      	bcs.n	80097f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097e8:	4a2e      	ldr	r2, [pc, #184]	; (80098a4 <xTaskIncrementTick+0x15c>)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097ee:	e02f      	b.n	8009850 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fe ff99 	bl	800872c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d004      	beq.n	800980c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	3318      	adds	r3, #24
 8009806:	4618      	mov	r0, r3
 8009808:	f7fe ff90 	bl	800872c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <xTaskIncrementTick+0x160>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d903      	bls.n	8009820 <xTaskIncrementTick+0xd8>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	4a22      	ldr	r2, [pc, #136]	; (80098a8 <xTaskIncrementTick+0x160>)
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4a1f      	ldr	r2, [pc, #124]	; (80098ac <xTaskIncrementTick+0x164>)
 800982e:	441a      	add	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7fe ff1b 	bl	8008672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009840:	4b1b      	ldr	r3, [pc, #108]	; (80098b0 <xTaskIncrementTick+0x168>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009846:	429a      	cmp	r2, r3
 8009848:	d3b8      	bcc.n	80097bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800984a:	2301      	movs	r3, #1
 800984c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800984e:	e7b5      	b.n	80097bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009850:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <xTaskIncrementTick+0x168>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009856:	4915      	ldr	r1, [pc, #84]	; (80098ac <xTaskIncrementTick+0x164>)
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	440b      	add	r3, r1
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d901      	bls.n	800986c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800986c:	4b11      	ldr	r3, [pc, #68]	; (80098b4 <xTaskIncrementTick+0x16c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d007      	beq.n	8009884 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	e004      	b.n	8009884 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <xTaskIncrementTick+0x170>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	4a0d      	ldr	r2, [pc, #52]	; (80098b8 <xTaskIncrementTick+0x170>)
 8009882:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009884:	697b      	ldr	r3, [r7, #20]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200019c8 	.word	0x200019c8
 8009894:	200019a4 	.word	0x200019a4
 8009898:	20001958 	.word	0x20001958
 800989c:	2000195c 	.word	0x2000195c
 80098a0:	200019b8 	.word	0x200019b8
 80098a4:	200019c0 	.word	0x200019c0
 80098a8:	200019a8 	.word	0x200019a8
 80098ac:	200014d0 	.word	0x200014d0
 80098b0:	200014cc 	.word	0x200014cc
 80098b4:	200019b4 	.word	0x200019b4
 80098b8:	200019b0 	.word	0x200019b0

080098bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098c2:	4b28      	ldr	r3, [pc, #160]	; (8009964 <vTaskSwitchContext+0xa8>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ca:	4b27      	ldr	r3, [pc, #156]	; (8009968 <vTaskSwitchContext+0xac>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098d0:	e041      	b.n	8009956 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80098d2:	4b25      	ldr	r3, [pc, #148]	; (8009968 <vTaskSwitchContext+0xac>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d8:	4b24      	ldr	r3, [pc, #144]	; (800996c <vTaskSwitchContext+0xb0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	60fb      	str	r3, [r7, #12]
 80098de:	e010      	b.n	8009902 <vTaskSwitchContext+0x46>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <vTaskSwitchContext+0x40>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	607b      	str	r3, [r7, #4]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <vTaskSwitchContext+0x3e>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3b01      	subs	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	491b      	ldr	r1, [pc, #108]	; (8009970 <vTaskSwitchContext+0xb4>)
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	440b      	add	r3, r1
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0e4      	beq.n	80098e0 <vTaskSwitchContext+0x24>
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4613      	mov	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4a13      	ldr	r2, [pc, #76]	; (8009970 <vTaskSwitchContext+0xb4>)
 8009922:	4413      	add	r3, r2
 8009924:	60bb      	str	r3, [r7, #8]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	605a      	str	r2, [r3, #4]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	3308      	adds	r3, #8
 8009938:	429a      	cmp	r2, r3
 800993a:	d104      	bne.n	8009946 <vTaskSwitchContext+0x8a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	605a      	str	r2, [r3, #4]
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	4a09      	ldr	r2, [pc, #36]	; (8009974 <vTaskSwitchContext+0xb8>)
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	4a06      	ldr	r2, [pc, #24]	; (800996c <vTaskSwitchContext+0xb0>)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6013      	str	r3, [r2, #0]
}
 8009956:	bf00      	nop
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	200019c8 	.word	0x200019c8
 8009968:	200019b4 	.word	0x200019b4
 800996c:	200019a8 	.word	0x200019a8
 8009970:	200014d0 	.word	0x200014d0
 8009974:	200014cc 	.word	0x200014cc

08009978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	60fb      	str	r3, [r7, #12]
}
 800999a:	bf00      	nop
 800999c:	e7fe      	b.n	800999c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800999e:	4b07      	ldr	r3, [pc, #28]	; (80099bc <vTaskPlaceOnEventList+0x44>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3318      	adds	r3, #24
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7fe fe87 	bl	80086ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ac:	2101      	movs	r1, #1
 80099ae:	6838      	ldr	r0, [r7, #0]
 80099b0:	f000 fa7c 	bl	8009eac <prvAddCurrentTaskToDelayedList>
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}
 80099bc:	200014cc 	.word	0x200014cc

080099c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	617b      	str	r3, [r7, #20]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099e8:	4b0a      	ldr	r3, [pc, #40]	; (8009a14 <vTaskPlaceOnEventListRestricted+0x54>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3318      	adds	r3, #24
 80099ee:	4619      	mov	r1, r3
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f7fe fe3e 	bl	8008672 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80099fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009a00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	68b8      	ldr	r0, [r7, #8]
 8009a06:	f000 fa51 	bl	8009eac <prvAddCurrentTaskToDelayedList>
	}
 8009a0a:	bf00      	nop
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200014cc 	.word	0x200014cc

08009a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10a      	bne.n	8009a44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3318      	adds	r3, #24
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7fe fe6f 	bl	800872c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <xTaskRemoveFromEventList+0xb0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d11d      	bne.n	8009a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fe66 	bl	800872c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a64:	4b19      	ldr	r3, [pc, #100]	; (8009acc <xTaskRemoveFromEventList+0xb4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d903      	bls.n	8009a74 <xTaskRemoveFromEventList+0x5c>
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	4a16      	ldr	r2, [pc, #88]	; (8009acc <xTaskRemoveFromEventList+0xb4>)
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4a13      	ldr	r2, [pc, #76]	; (8009ad0 <xTaskRemoveFromEventList+0xb8>)
 8009a82:	441a      	add	r2, r3
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7fe fdf1 	bl	8008672 <vListInsertEnd>
 8009a90:	e005      	b.n	8009a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	3318      	adds	r3, #24
 8009a96:	4619      	mov	r1, r3
 8009a98:	480e      	ldr	r0, [pc, #56]	; (8009ad4 <xTaskRemoveFromEventList+0xbc>)
 8009a9a:	f7fe fdea 	bl	8008672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	; (8009ad8 <xTaskRemoveFromEventList+0xc0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d905      	bls.n	8009ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aac:	2301      	movs	r3, #1
 8009aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <xTaskRemoveFromEventList+0xc4>)
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e001      	b.n	8009abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009abc:	697b      	ldr	r3, [r7, #20]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200019c8 	.word	0x200019c8
 8009acc:	200019a8 	.word	0x200019a8
 8009ad0:	200014d0 	.word	0x200014d0
 8009ad4:	20001960 	.word	0x20001960
 8009ad8:	200014cc 	.word	0x200014cc
 8009adc:	200019b4 	.word	0x200019b4

08009ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ae8:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <vTaskInternalSetTimeOutState+0x24>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009af0:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <vTaskInternalSetTimeOutState+0x28>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	605a      	str	r2, [r3, #4]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	200019b8 	.word	0x200019b8
 8009b08:	200019a4 	.word	0x200019a4

08009b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	613b      	str	r3, [r7, #16]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	60fb      	str	r3, [r7, #12]
}
 8009b4a:	bf00      	nop
 8009b4c:	e7fe      	b.n	8009b4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009b4e:	f000 ff39 	bl	800a9c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b52:	4b1d      	ldr	r3, [pc, #116]	; (8009bc8 <xTaskCheckForTimeOut+0xbc>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d102      	bne.n	8009b72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	e023      	b.n	8009bba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <xTaskCheckForTimeOut+0xc0>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d007      	beq.n	8009b8e <xTaskCheckForTimeOut+0x82>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	69ba      	ldr	r2, [r7, #24]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d302      	bcc.n	8009b8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e015      	b.n	8009bba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d20b      	bcs.n	8009bb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff ff9b 	bl	8009ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	61fb      	str	r3, [r7, #28]
 8009bae:	e004      	b.n	8009bba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bba:	f000 ff33 	bl	800aa24 <vPortExitCritical>

	return xReturn;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200019a4 	.word	0x200019a4
 8009bcc:	200019b8 	.word	0x200019b8

08009bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bd4:	4b03      	ldr	r3, [pc, #12]	; (8009be4 <vTaskMissedYield+0x14>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
}
 8009bda:	bf00      	nop
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	200019b4 	.word	0x200019b4

08009be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bf0:	f000 f852 	bl	8009c98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <prvIdleTask+0x28>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d9f9      	bls.n	8009bf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <prvIdleTask+0x2c>)
 8009bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c0c:	e7f0      	b.n	8009bf0 <prvIdleTask+0x8>
 8009c0e:	bf00      	nop
 8009c10:	200014d0 	.word	0x200014d0
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e00c      	b.n	8009c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4a12      	ldr	r2, [pc, #72]	; (8009c78 <prvInitialiseTaskLists+0x60>)
 8009c30:	4413      	add	r3, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fcf0 	bl	8008618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	607b      	str	r3, [r7, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b37      	cmp	r3, #55	; 0x37
 8009c42:	d9ef      	bls.n	8009c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c44:	480d      	ldr	r0, [pc, #52]	; (8009c7c <prvInitialiseTaskLists+0x64>)
 8009c46:	f7fe fce7 	bl	8008618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c4a:	480d      	ldr	r0, [pc, #52]	; (8009c80 <prvInitialiseTaskLists+0x68>)
 8009c4c:	f7fe fce4 	bl	8008618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c50:	480c      	ldr	r0, [pc, #48]	; (8009c84 <prvInitialiseTaskLists+0x6c>)
 8009c52:	f7fe fce1 	bl	8008618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c56:	480c      	ldr	r0, [pc, #48]	; (8009c88 <prvInitialiseTaskLists+0x70>)
 8009c58:	f7fe fcde 	bl	8008618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c5c:	480b      	ldr	r0, [pc, #44]	; (8009c8c <prvInitialiseTaskLists+0x74>)
 8009c5e:	f7fe fcdb 	bl	8008618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c62:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <prvInitialiseTaskLists+0x78>)
 8009c64:	4a05      	ldr	r2, [pc, #20]	; (8009c7c <prvInitialiseTaskLists+0x64>)
 8009c66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c68:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <prvInitialiseTaskLists+0x7c>)
 8009c6a:	4a05      	ldr	r2, [pc, #20]	; (8009c80 <prvInitialiseTaskLists+0x68>)
 8009c6c:	601a      	str	r2, [r3, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	200014d0 	.word	0x200014d0
 8009c7c:	20001930 	.word	0x20001930
 8009c80:	20001944 	.word	0x20001944
 8009c84:	20001960 	.word	0x20001960
 8009c88:	20001974 	.word	0x20001974
 8009c8c:	2000198c 	.word	0x2000198c
 8009c90:	20001958 	.word	0x20001958
 8009c94:	2000195c 	.word	0x2000195c

08009c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c9e:	e019      	b.n	8009cd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ca0:	f000 fe90 	bl	800a9c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca4:	4b10      	ldr	r3, [pc, #64]	; (8009ce8 <prvCheckTasksWaitingTermination+0x50>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fd3b 	bl	800872c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cb6:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <prvCheckTasksWaitingTermination+0x54>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	4a0b      	ldr	r2, [pc, #44]	; (8009cec <prvCheckTasksWaitingTermination+0x54>)
 8009cbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <prvCheckTasksWaitingTermination+0x58>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	4a0a      	ldr	r2, [pc, #40]	; (8009cf0 <prvCheckTasksWaitingTermination+0x58>)
 8009cc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cca:	f000 feab 	bl	800aa24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f810 	bl	8009cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd4:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <prvCheckTasksWaitingTermination+0x58>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1e1      	bne.n	8009ca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20001974 	.word	0x20001974
 8009cec:	200019a0 	.word	0x200019a0
 8009cf0:	20001988 	.word	0x20001988

08009cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d108      	bne.n	8009d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 f848 	bl	800ada0 <vPortFree>
				vPortFree( pxTCB );
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 f845 	bl	800ada0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d16:	e018      	b.n	8009d4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d103      	bne.n	8009d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f001 f83c 	bl	800ada0 <vPortFree>
	}
 8009d28:	e00f      	b.n	8009d4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d00a      	beq.n	8009d4a <prvDeleteTCB+0x56>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	60fb      	str	r3, [r7, #12]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <prvDeleteTCB+0x54>
	}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d5a:	4b0c      	ldr	r3, [pc, #48]	; (8009d8c <prvResetNextTaskUnblockTime+0x38>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <prvResetNextTaskUnblockTime+0x3c>)
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d6c:	e008      	b.n	8009d80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <prvResetNextTaskUnblockTime+0x38>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	4a04      	ldr	r2, [pc, #16]	; (8009d90 <prvResetNextTaskUnblockTime+0x3c>)
 8009d7e:	6013      	str	r3, [r2, #0]
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	20001958 	.word	0x20001958
 8009d90:	200019c0 	.word	0x200019c0

08009d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d9a:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <xTaskGetSchedulerState+0x34>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009da2:	2301      	movs	r3, #1
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	e008      	b.n	8009dba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da8:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <xTaskGetSchedulerState+0x38>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009db0:	2302      	movs	r3, #2
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	e001      	b.n	8009dba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009dba:	687b      	ldr	r3, [r7, #4]
	}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	200019ac 	.word	0x200019ac
 8009dcc:	200019c8 	.word	0x200019c8

08009dd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d056      	beq.n	8009e94 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009de6:	4b2e      	ldr	r3, [pc, #184]	; (8009ea0 <xTaskPriorityDisinherit+0xd0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d00a      	beq.n	8009e06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	60fb      	str	r3, [r7, #12]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	60bb      	str	r3, [r7, #8]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e28:	1e5a      	subs	r2, r3, #1
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d02c      	beq.n	8009e94 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d128      	bne.n	8009e94 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe fc70 	bl	800872c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e64:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <xTaskPriorityDisinherit+0xd4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d903      	bls.n	8009e74 <xTaskPriorityDisinherit+0xa4>
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a0c      	ldr	r2, [pc, #48]	; (8009ea4 <xTaskPriorityDisinherit+0xd4>)
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4a09      	ldr	r2, [pc, #36]	; (8009ea8 <xTaskPriorityDisinherit+0xd8>)
 8009e82:	441a      	add	r2, r3
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f7fe fbf1 	bl	8008672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e94:	697b      	ldr	r3, [r7, #20]
	}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3718      	adds	r7, #24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	200014cc 	.word	0x200014cc
 8009ea4:	200019a8 	.word	0x200019a8
 8009ea8:	200014d0 	.word	0x200014d0

08009eac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009eb6:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <prvAddCurrentTaskToDelayedList+0x90>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebc:	4b20      	ldr	r3, [pc, #128]	; (8009f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fc32 	bl	800872c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d10a      	bne.n	8009ee6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ed6:	4b1a      	ldr	r3, [pc, #104]	; (8009f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3304      	adds	r3, #4
 8009edc:	4619      	mov	r1, r3
 8009ede:	4819      	ldr	r0, [pc, #100]	; (8009f44 <prvAddCurrentTaskToDelayedList+0x98>)
 8009ee0:	f7fe fbc7 	bl	8008672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ee4:	e026      	b.n	8009f34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009eee:	4b14      	ldr	r3, [pc, #80]	; (8009f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d209      	bcs.n	8009f12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4b0f      	ldr	r3, [pc, #60]	; (8009f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	3304      	adds	r3, #4
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f7fe fbd5 	bl	80086ba <vListInsert>
}
 8009f10:	e010      	b.n	8009f34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f12:	4b0e      	ldr	r3, [pc, #56]	; (8009f4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	4610      	mov	r0, r2
 8009f20:	f7fe fbcb 	bl	80086ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d202      	bcs.n	8009f34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009f2e:	4a08      	ldr	r2, [pc, #32]	; (8009f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6013      	str	r3, [r2, #0]
}
 8009f34:	bf00      	nop
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	200019a4 	.word	0x200019a4
 8009f40:	200014cc 	.word	0x200014cc
 8009f44:	2000198c 	.word	0x2000198c
 8009f48:	2000195c 	.word	0x2000195c
 8009f4c:	20001958 	.word	0x20001958
 8009f50:	200019c0 	.word	0x200019c0

08009f54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	; 0x28
 8009f58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009f5e:	f000 fba1 	bl	800a6a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <xTimerCreateTimerTask+0x80>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d021      	beq.n	8009fae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f72:	1d3a      	adds	r2, r7, #4
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	f107 030c 	add.w	r3, r7, #12
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fb31 	bl	80085e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	9202      	str	r2, [sp, #8]
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	460a      	mov	r2, r1
 8009f94:	4910      	ldr	r1, [pc, #64]	; (8009fd8 <xTimerCreateTimerTask+0x84>)
 8009f96:	4811      	ldr	r0, [pc, #68]	; (8009fdc <xTimerCreateTimerTask+0x88>)
 8009f98:	f7ff f8de 	bl	8009158 <xTaskCreateStatic>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <xTimerCreateTimerTask+0x8c>)
 8009fa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009fa2:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <xTimerCreateTimerTask+0x8c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009faa:	2301      	movs	r3, #1
 8009fac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10a      	bne.n	8009fca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	613b      	str	r3, [r7, #16]
}
 8009fc6:	bf00      	nop
 8009fc8:	e7fe      	b.n	8009fc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009fca:	697b      	ldr	r3, [r7, #20]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	200019fc 	.word	0x200019fc
 8009fd8:	0800ea9c 	.word	0x0800ea9c
 8009fdc:	0800a24d 	.word	0x0800a24d
 8009fe0:	20001a00 	.word	0x20001a00

08009fe4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009ff2:	202c      	movs	r0, #44	; 0x2c
 8009ff4:	f000 fe08 	bl	800ac08 <pvPortMalloc>
 8009ff8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00d      	beq.n	800a01c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f843 	bl	800a0a2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a01c:	697b      	ldr	r3, [r7, #20]
	}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a026:	b580      	push	{r7, lr}
 800a028:	b08a      	sub	sp, #40	; 0x28
 800a02a:	af02      	add	r7, sp, #8
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a034:	232c      	movs	r3, #44	; 0x2c
 800a036:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b2c      	cmp	r3, #44	; 0x2c
 800a03c:	d00a      	beq.n	800a054 <xTimerCreateStatic+0x2e>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	61bb      	str	r3, [r7, #24]
}
 800a050:	bf00      	nop
 800a052:	e7fe      	b.n	800a052 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a054:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xTimerCreateStatic+0x4c>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	617b      	str	r3, [r7, #20]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	2202      	movs	r2, #2
 800a080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	9301      	str	r3, [sp, #4]
 800a088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08a:	9300      	str	r3, [sp, #0]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	68b9      	ldr	r1, [r7, #8]
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	f000 f805 	bl	800a0a2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a098:	69fb      	ldr	r3, [r7, #28]
	}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b086      	sub	sp, #24
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	617b      	str	r3, [r7, #20]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01e      	beq.n	800a110 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a0d2:	f000 fae7 	bl	800a6a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	6a3a      	ldr	r2, [r7, #32]
 800a0ec:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fe fab0 	bl	8008658 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a104:	f043 0304 	orr.w	r3, r3, #4
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a110:	bf00      	nop
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08a      	sub	sp, #40	; 0x28
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	623b      	str	r3, [r7, #32]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <xTimerGenericCommand+0x98>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d02a      	beq.n	800a1a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	dc18      	bgt.n	800a192 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a160:	f7ff fe18 	bl	8009d94 <xTaskGetSchedulerState>
 800a164:	4603      	mov	r3, r0
 800a166:	2b02      	cmp	r3, #2
 800a168:	d109      	bne.n	800a17e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a16a:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <xTimerGenericCommand+0x98>)
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f107 0110 	add.w	r1, r7, #16
 800a172:	2300      	movs	r3, #0
 800a174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a176:	f7fe fc07 	bl	8008988 <xQueueGenericSend>
 800a17a:	6278      	str	r0, [r7, #36]	; 0x24
 800a17c:	e012      	b.n	800a1a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a17e:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <xTimerGenericCommand+0x98>)
 800a180:	6818      	ldr	r0, [r3, #0]
 800a182:	f107 0110 	add.w	r1, r7, #16
 800a186:	2300      	movs	r3, #0
 800a188:	2200      	movs	r2, #0
 800a18a:	f7fe fbfd 	bl	8008988 <xQueueGenericSend>
 800a18e:	6278      	str	r0, [r7, #36]	; 0x24
 800a190:	e008      	b.n	800a1a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a192:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <xTimerGenericCommand+0x98>)
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f107 0110 	add.w	r1, r7, #16
 800a19a:	2300      	movs	r3, #0
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	f7fe fcf1 	bl	8008b84 <xQueueGenericSendFromISR>
 800a1a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3728      	adds	r7, #40	; 0x28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200019fc 	.word	0x200019fc

0800a1b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1be:	4b22      	ldr	r3, [pc, #136]	; (800a248 <prvProcessExpiredTimer+0x94>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe faad 	bl	800872c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d8:	f003 0304 	and.w	r3, r3, #4
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d022      	beq.n	800a226 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	699a      	ldr	r2, [r3, #24]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	18d1      	adds	r1, r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	6978      	ldr	r0, [r7, #20]
 800a1ee:	f000 f8d1 	bl	800a394 <prvInsertTimerInActiveList>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01f      	beq.n	800a238 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	2100      	movs	r1, #0
 800a202:	6978      	ldr	r0, [r7, #20]
 800a204:	f7ff ff88 	bl	800a118 <xTimerGenericCommand>
 800a208:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d113      	bne.n	800a238 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	60fb      	str	r3, [r7, #12]
}
 800a222:	bf00      	nop
 800a224:	e7fe      	b.n	800a224 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a22c:	f023 0301 	bic.w	r3, r3, #1
 800a230:	b2da      	uxtb	r2, r3
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	6978      	ldr	r0, [r7, #20]
 800a23e:	4798      	blx	r3
}
 800a240:	bf00      	nop
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200019f4 	.word	0x200019f4

0800a24c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a254:	f107 0308 	add.w	r3, r7, #8
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f857 	bl	800a30c <prvGetNextExpireTime>
 800a25e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4619      	mov	r1, r3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f803 	bl	800a270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a26a:	f000 f8d5 	bl	800a418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a26e:	e7f1      	b.n	800a254 <prvTimerTask+0x8>

0800a270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a27a:	f7ff f9a9 	bl	80095d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f000 f866 	bl	800a354 <prvSampleTimeNow>
 800a288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d130      	bne.n	800a2f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <prvProcessTimerOrBlockTask+0x3c>
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d806      	bhi.n	800a2ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a29e:	f7ff f9a5 	bl	80095ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2a2:	68f9      	ldr	r1, [r7, #12]
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f7ff ff85 	bl	800a1b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2aa:	e024      	b.n	800a2f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2b2:	4b13      	ldr	r3, [pc, #76]	; (800a300 <prvProcessTimerOrBlockTask+0x90>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <prvProcessTimerOrBlockTask+0x50>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e000      	b.n	800a2c2 <prvProcessTimerOrBlockTask+0x52>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2c4:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <prvProcessTimerOrBlockTask+0x94>)
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f7fe ff0d 	bl	80090f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a2d6:	f7ff f989 	bl	80095ec <xTaskResumeAll>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10a      	bne.n	800a2f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a2e0:	4b09      	ldr	r3, [pc, #36]	; (800a308 <prvProcessTimerOrBlockTask+0x98>)
 800a2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
}
 800a2f0:	e001      	b.n	800a2f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a2f2:	f7ff f97b 	bl	80095ec <xTaskResumeAll>
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	200019f8 	.word	0x200019f8
 800a304:	200019fc 	.word	0x200019fc
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a314:	4b0e      	ldr	r3, [pc, #56]	; (800a350 <prvGetNextExpireTime+0x44>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <prvGetNextExpireTime+0x16>
 800a31e:	2201      	movs	r2, #1
 800a320:	e000      	b.n	800a324 <prvGetNextExpireTime+0x18>
 800a322:	2200      	movs	r2, #0
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d105      	bne.n	800a33c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a330:	4b07      	ldr	r3, [pc, #28]	; (800a350 <prvGetNextExpireTime+0x44>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e001      	b.n	800a340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a340:	68fb      	ldr	r3, [r7, #12]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	200019f4 	.word	0x200019f4

0800a354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a35c:	f7ff f9e4 	bl	8009728 <xTaskGetTickCount>
 800a360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a362:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <prvSampleTimeNow+0x3c>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d205      	bcs.n	800a378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a36c:	f000 f936 	bl	800a5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	e002      	b.n	800a37e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a37e:	4a04      	ldr	r2, [pc, #16]	; (800a390 <prvSampleTimeNow+0x3c>)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a384:	68fb      	ldr	r3, [r7, #12]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20001a04 	.word	0x20001a04

0800a394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]
 800a3a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d812      	bhi.n	800a3e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	1ad2      	subs	r2, r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	e01b      	b.n	800a406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ce:	4b10      	ldr	r3, [pc, #64]	; (800a410 <prvInsertTimerInActiveList+0x7c>)
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7fe f96e 	bl	80086ba <vListInsert>
 800a3de:	e012      	b.n	800a406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d206      	bcs.n	800a3f6 <prvInsertTimerInActiveList+0x62>
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d302      	bcc.n	800a3f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e007      	b.n	800a406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3f6:	4b07      	ldr	r3, [pc, #28]	; (800a414 <prvInsertTimerInActiveList+0x80>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	4619      	mov	r1, r3
 800a400:	4610      	mov	r0, r2
 800a402:	f7fe f95a 	bl	80086ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a406:	697b      	ldr	r3, [r7, #20]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	200019f8 	.word	0x200019f8
 800a414:	200019f4 	.word	0x200019f4

0800a418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08e      	sub	sp, #56	; 0x38
 800a41c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a41e:	e0ca      	b.n	800a5b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	da18      	bge.n	800a458 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a426:	1d3b      	adds	r3, r7, #4
 800a428:	3304      	adds	r3, #4
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	61fb      	str	r3, [r7, #28]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a44e:	6850      	ldr	r0, [r2, #4]
 800a450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a452:	6892      	ldr	r2, [r2, #8]
 800a454:	4611      	mov	r1, r2
 800a456:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f2c0 80aa 	blt.w	800a5b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d004      	beq.n	800a476 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	3304      	adds	r3, #4
 800a470:	4618      	mov	r0, r3
 800a472:	f7fe f95b 	bl	800872c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a476:	463b      	mov	r3, r7
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff ff6b 	bl	800a354 <prvSampleTimeNow>
 800a47e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b09      	cmp	r3, #9
 800a484:	f200 8097 	bhi.w	800a5b6 <prvProcessReceivedCommands+0x19e>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <prvProcessReceivedCommands+0x78>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4b9 	.word	0x0800a4b9
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4b9 	.word	0x0800a4b9
 800a49c:	0800a52d 	.word	0x0800a52d
 800a4a0:	0800a541 	.word	0x0800a541
 800a4a4:	0800a58b 	.word	0x0800a58b
 800a4a8:	0800a4b9 	.word	0x0800a4b9
 800a4ac:	0800a4b9 	.word	0x0800a4b9
 800a4b0:	0800a52d 	.word	0x0800a52d
 800a4b4:	0800a541 	.word	0x0800a541
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	b2da      	uxtb	r2, r3
 800a4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	18d1      	adds	r1, r2, r3
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4d8:	f7ff ff5c 	bl	800a394 <prvInsertTimerInActiveList>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d069      	beq.n	800a5b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	6a1b      	ldr	r3, [r3, #32]
 800a4e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d05e      	beq.n	800a5b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	441a      	add	r2, r3
 800a500:	2300      	movs	r3, #0
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	2100      	movs	r1, #0
 800a508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a50a:	f7ff fe05 	bl	800a118 <xTimerGenericCommand>
 800a50e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d14f      	bne.n	800a5b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	61bb      	str	r3, [r7, #24]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a532:	f023 0301 	bic.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a53e:	e03a      	b.n	800a5b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a546:	f043 0301 	orr.w	r3, r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	617b      	str	r3, [r7, #20]
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	18d1      	adds	r1, r2, r3
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a584:	f7ff ff06 	bl	800a394 <prvInsertTimerInActiveList>
					break;
 800a588:	e015      	b.n	800a5b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a59a:	f000 fc01 	bl	800ada0 <vPortFree>
 800a59e:	e00a      	b.n	800a5b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5b2:	e000      	b.n	800a5b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a5b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5b6:	4b08      	ldr	r3, [pc, #32]	; (800a5d8 <prvProcessReceivedCommands+0x1c0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	1d39      	adds	r1, r7, #4
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe fb7c 	bl	8008cbc <xQueueReceive>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f47f af2a 	bne.w	800a420 <prvProcessReceivedCommands+0x8>
	}
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	3730      	adds	r7, #48	; 0x30
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	200019fc 	.word	0x200019fc

0800a5dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5e2:	e048      	b.n	800a676 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5e4:	4b2d      	ldr	r3, [pc, #180]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ee:	4b2b      	ldr	r3, [pc, #172]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3304      	adds	r3, #4
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe f895 	bl	800872c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d02e      	beq.n	800a676 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	4413      	add	r3, r2
 800a620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	429a      	cmp	r2, r3
 800a628:	d90e      	bls.n	800a648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a636:	4b19      	ldr	r3, [pc, #100]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4619      	mov	r1, r3
 800a640:	4610      	mov	r0, r2
 800a642:	f7fe f83a 	bl	80086ba <vListInsert>
 800a646:	e016      	b.n	800a676 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a648:	2300      	movs	r3, #0
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2300      	movs	r3, #0
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	2100      	movs	r1, #0
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff fd60 	bl	800a118 <xTimerGenericCommand>
 800a658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	603b      	str	r3, [r7, #0]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1b1      	bne.n	800a5e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a680:	4b06      	ldr	r3, [pc, #24]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a686:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <prvSwitchTimerLists+0xc4>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a04      	ldr	r2, [pc, #16]	; (800a69c <prvSwitchTimerLists+0xc0>)
 800a68c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a68e:	4a04      	ldr	r2, [pc, #16]	; (800a6a0 <prvSwitchTimerLists+0xc4>)
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	6013      	str	r3, [r2, #0]
}
 800a694:	bf00      	nop
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	200019f4 	.word	0x200019f4
 800a6a0:	200019f8 	.word	0x200019f8

0800a6a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6aa:	f000 f98b 	bl	800a9c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6ae:	4b15      	ldr	r3, [pc, #84]	; (800a704 <prvCheckForValidListAndQueue+0x60>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d120      	bne.n	800a6f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a6b6:	4814      	ldr	r0, [pc, #80]	; (800a708 <prvCheckForValidListAndQueue+0x64>)
 800a6b8:	f7fd ffae 	bl	8008618 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a6bc:	4813      	ldr	r0, [pc, #76]	; (800a70c <prvCheckForValidListAndQueue+0x68>)
 800a6be:	f7fd ffab 	bl	8008618 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a6c2:	4b13      	ldr	r3, [pc, #76]	; (800a710 <prvCheckForValidListAndQueue+0x6c>)
 800a6c4:	4a10      	ldr	r2, [pc, #64]	; (800a708 <prvCheckForValidListAndQueue+0x64>)
 800a6c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a6c8:	4b12      	ldr	r3, [pc, #72]	; (800a714 <prvCheckForValidListAndQueue+0x70>)
 800a6ca:	4a10      	ldr	r2, [pc, #64]	; (800a70c <prvCheckForValidListAndQueue+0x68>)
 800a6cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4b11      	ldr	r3, [pc, #68]	; (800a718 <prvCheckForValidListAndQueue+0x74>)
 800a6d4:	4a11      	ldr	r2, [pc, #68]	; (800a71c <prvCheckForValidListAndQueue+0x78>)
 800a6d6:	2110      	movs	r1, #16
 800a6d8:	200a      	movs	r0, #10
 800a6da:	f7fe f8b9 	bl	8008850 <xQueueGenericCreateStatic>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	4a08      	ldr	r2, [pc, #32]	; (800a704 <prvCheckForValidListAndQueue+0x60>)
 800a6e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvCheckForValidListAndQueue+0x60>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a6ec:	4b05      	ldr	r3, [pc, #20]	; (800a704 <prvCheckForValidListAndQueue+0x60>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	490b      	ldr	r1, [pc, #44]	; (800a720 <prvCheckForValidListAndQueue+0x7c>)
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fcd2 	bl	800909c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6f8:	f000 f994 	bl	800aa24 <vPortExitCritical>
}
 800a6fc:	bf00      	nop
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200019fc 	.word	0x200019fc
 800a708:	200019cc 	.word	0x200019cc
 800a70c:	200019e0 	.word	0x200019e0
 800a710:	200019f4 	.word	0x200019f4
 800a714:	200019f8 	.word	0x200019f8
 800a718:	20001aa8 	.word	0x20001aa8
 800a71c:	20001a08 	.word	0x20001a08
 800a720:	0800eaa4 	.word	0x0800eaa4

0800a724 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <pvTimerGetTimerID+0x28>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60fb      	str	r3, [r7, #12]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a74c:	f000 f93a 	bl	800a9c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a756:	f000 f965 	bl	800aa24 <vPortExitCritical>

	return pvReturn;
 800a75a:	693b      	ldr	r3, [r7, #16]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3b04      	subs	r3, #4
 800a774:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a77c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3b04      	subs	r3, #4
 800a782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	f023 0201 	bic.w	r2, r3, #1
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3b04      	subs	r3, #4
 800a792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <pxPortInitialiseStack+0x64>)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3b14      	subs	r3, #20
 800a79e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3b04      	subs	r3, #4
 800a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f06f 0202 	mvn.w	r2, #2
 800a7b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	3b20      	subs	r3, #32
 800a7b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	0800a7cd 	.word	0x0800a7cd

0800a7cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7d6:	4b12      	ldr	r3, [pc, #72]	; (800a820 <prvTaskExitError+0x54>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7de:	d00a      	beq.n	800a7f6 <prvTaskExitError+0x2a>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <prvTaskExitError+0x28>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	60bb      	str	r3, [r7, #8]
}
 800a808:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a80a:	bf00      	nop
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0fc      	beq.n	800a80c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a812:	bf00      	nop
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	2000000c 	.word	0x2000000c
	...

0800a830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <pxCurrentTCBConst2>)
 800a832:	6819      	ldr	r1, [r3, #0]
 800a834:	6808      	ldr	r0, [r1, #0]
 800a836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83a:	f380 8809 	msr	PSP, r0
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f04f 0000 	mov.w	r0, #0
 800a846:	f380 8811 	msr	BASEPRI, r0
 800a84a:	4770      	bx	lr
 800a84c:	f3af 8000 	nop.w

0800a850 <pxCurrentTCBConst2>:
 800a850:	200014cc 	.word	0x200014cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop

0800a858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a858:	4808      	ldr	r0, [pc, #32]	; (800a87c <prvPortStartFirstTask+0x24>)
 800a85a:	6800      	ldr	r0, [r0, #0]
 800a85c:	6800      	ldr	r0, [r0, #0]
 800a85e:	f380 8808 	msr	MSP, r0
 800a862:	f04f 0000 	mov.w	r0, #0
 800a866:	f380 8814 	msr	CONTROL, r0
 800a86a:	b662      	cpsie	i
 800a86c:	b661      	cpsie	f
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	df00      	svc	0
 800a878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a87a:	bf00      	nop
 800a87c:	e000ed08 	.word	0xe000ed08

0800a880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a886:	4b46      	ldr	r3, [pc, #280]	; (800a9a0 <xPortStartScheduler+0x120>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a46      	ldr	r2, [pc, #280]	; (800a9a4 <xPortStartScheduler+0x124>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d10a      	bne.n	800a8a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a894:	f383 8811 	msr	BASEPRI, r3
 800a898:	f3bf 8f6f 	isb	sy
 800a89c:	f3bf 8f4f 	dsb	sy
 800a8a0:	613b      	str	r3, [r7, #16]
}
 800a8a2:	bf00      	nop
 800a8a4:	e7fe      	b.n	800a8a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8a6:	4b3e      	ldr	r3, [pc, #248]	; (800a9a0 <xPortStartScheduler+0x120>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a3f      	ldr	r2, [pc, #252]	; (800a9a8 <xPortStartScheduler+0x128>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d10a      	bne.n	800a8c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	60fb      	str	r3, [r7, #12]
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8c6:	4b39      	ldr	r3, [pc, #228]	; (800a9ac <xPortStartScheduler+0x12c>)
 800a8c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	22ff      	movs	r2, #255	; 0xff
 800a8d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	4b31      	ldr	r3, [pc, #196]	; (800a9b0 <xPortStartScheduler+0x130>)
 800a8ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ee:	4b31      	ldr	r3, [pc, #196]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a8f0:	2207      	movs	r2, #7
 800a8f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8f4:	e009      	b.n	800a90a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a8f6:	4b2f      	ldr	r3, [pc, #188]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	4a2d      	ldr	r2, [pc, #180]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a8fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	b2db      	uxtb	r3, r3
 800a904:	005b      	lsls	r3, r3, #1
 800a906:	b2db      	uxtb	r3, r3
 800a908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a90a:	78fb      	ldrb	r3, [r7, #3]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d0ef      	beq.n	800a8f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a916:	4b27      	ldr	r3, [pc, #156]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f1c3 0307 	rsb	r3, r3, #7
 800a91e:	2b04      	cmp	r3, #4
 800a920:	d00a      	beq.n	800a938 <xPortStartScheduler+0xb8>
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	60bb      	str	r3, [r7, #8]
}
 800a934:	bf00      	nop
 800a936:	e7fe      	b.n	800a936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a938:	4b1e      	ldr	r3, [pc, #120]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	021b      	lsls	r3, r3, #8
 800a93e:	4a1d      	ldr	r2, [pc, #116]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a942:	4b1c      	ldr	r3, [pc, #112]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a94a:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <xPortStartScheduler+0x134>)
 800a94c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	b2da      	uxtb	r2, r3
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a956:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a17      	ldr	r2, [pc, #92]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a95c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a962:	4b15      	ldr	r3, [pc, #84]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a14      	ldr	r2, [pc, #80]	; (800a9b8 <xPortStartScheduler+0x138>)
 800a968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a96c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a96e:	f000 f8dd 	bl	800ab2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a972:	4b12      	ldr	r3, [pc, #72]	; (800a9bc <xPortStartScheduler+0x13c>)
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a978:	f000 f8fc 	bl	800ab74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <xPortStartScheduler+0x140>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a0f      	ldr	r2, [pc, #60]	; (800a9c0 <xPortStartScheduler+0x140>)
 800a982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a988:	f7ff ff66 	bl	800a858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a98c:	f7fe ff96 	bl	80098bc <vTaskSwitchContext>
	prvTaskExitError();
 800a990:	f7ff ff1c 	bl	800a7cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	e000ed00 	.word	0xe000ed00
 800a9a4:	410fc271 	.word	0x410fc271
 800a9a8:	410fc270 	.word	0x410fc270
 800a9ac:	e000e400 	.word	0xe000e400
 800a9b0:	20001af8 	.word	0x20001af8
 800a9b4:	20001afc 	.word	0x20001afc
 800a9b8:	e000ed20 	.word	0xe000ed20
 800a9bc:	2000000c 	.word	0x2000000c
 800a9c0:	e000ef34 	.word	0xe000ef34

0800a9c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	607b      	str	r3, [r7, #4]
}
 800a9dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9de:	4b0f      	ldr	r3, [pc, #60]	; (800aa1c <vPortEnterCritical+0x58>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	4a0d      	ldr	r2, [pc, #52]	; (800aa1c <vPortEnterCritical+0x58>)
 800a9e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9e8:	4b0c      	ldr	r3, [pc, #48]	; (800aa1c <vPortEnterCritical+0x58>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d10f      	bne.n	800aa10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9f0:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <vPortEnterCritical+0x5c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <vPortEnterCritical+0x4c>
	__asm volatile
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	603b      	str	r3, [r7, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	e7fe      	b.n	800aa0e <vPortEnterCritical+0x4a>
	}
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr
 800aa1c:	2000000c 	.word	0x2000000c
 800aa20:	e000ed04 	.word	0xe000ed04

0800aa24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa2a:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <vPortExitCritical+0x50>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <vPortExitCritical+0x24>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	f383 8811 	msr	BASEPRI, r3
 800aa3a:	f3bf 8f6f 	isb	sy
 800aa3e:	f3bf 8f4f 	dsb	sy
 800aa42:	607b      	str	r3, [r7, #4]
}
 800aa44:	bf00      	nop
 800aa46:	e7fe      	b.n	800aa46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa48:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <vPortExitCritical+0x50>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4a09      	ldr	r2, [pc, #36]	; (800aa74 <vPortExitCritical+0x50>)
 800aa50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa52:	4b08      	ldr	r3, [pc, #32]	; (800aa74 <vPortExitCritical+0x50>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <vPortExitCritical+0x42>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	f383 8811 	msr	BASEPRI, r3
}
 800aa64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000000c 	.word	0x2000000c
	...

0800aa80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa80:	f3ef 8009 	mrs	r0, PSP
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <pxCurrentTCBConst>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f01e 0f10 	tst.w	lr, #16
 800aa90:	bf08      	it	eq
 800aa92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	6010      	str	r0, [r2, #0]
 800aa9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aaa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aaa4:	f380 8811 	msr	BASEPRI, r0
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f7fe ff04 	bl	80098bc <vTaskSwitchContext>
 800aab4:	f04f 0000 	mov.w	r0, #0
 800aab8:	f380 8811 	msr	BASEPRI, r0
 800aabc:	bc09      	pop	{r0, r3}
 800aabe:	6819      	ldr	r1, [r3, #0]
 800aac0:	6808      	ldr	r0, [r1, #0]
 800aac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac6:	f01e 0f10 	tst.w	lr, #16
 800aaca:	bf08      	it	eq
 800aacc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aad0:	f380 8809 	msr	PSP, r0
 800aad4:	f3bf 8f6f 	isb	sy
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	f3af 8000 	nop.w

0800aae0 <pxCurrentTCBConst>:
 800aae0:	200014cc 	.word	0x200014cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop

0800aae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab02:	f7fe fe21 	bl	8009748 <xTaskIncrementTick>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab0c:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <xPortSysTickHandler+0x40>)
 800ab0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	2300      	movs	r3, #0
 800ab16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	f383 8811 	msr	BASEPRI, r3
}
 800ab1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab20:	bf00      	nop
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <vPortSetupTimerInterrupt+0x34>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <vPortSetupTimerInterrupt+0x38>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <vPortSetupTimerInterrupt+0x3c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <vPortSetupTimerInterrupt+0x40>)
 800ab42:	fba2 2303 	umull	r2, r3, r2, r3
 800ab46:	099b      	lsrs	r3, r3, #6
 800ab48:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <vPortSetupTimerInterrupt+0x44>)
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab4e:	4b04      	ldr	r3, [pc, #16]	; (800ab60 <vPortSetupTimerInterrupt+0x34>)
 800ab50:	2207      	movs	r2, #7
 800ab52:	601a      	str	r2, [r3, #0]
}
 800ab54:	bf00      	nop
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	e000e010 	.word	0xe000e010
 800ab64:	e000e018 	.word	0xe000e018
 800ab68:	20000000 	.word	0x20000000
 800ab6c:	10624dd3 	.word	0x10624dd3
 800ab70:	e000e014 	.word	0xe000e014

0800ab74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab84 <vPortEnableVFP+0x10>
 800ab78:	6801      	ldr	r1, [r0, #0]
 800ab7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab7e:	6001      	str	r1, [r0, #0]
 800ab80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab82:	bf00      	nop
 800ab84:	e000ed88 	.word	0xe000ed88

0800ab88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab8e:	f3ef 8305 	mrs	r3, IPSR
 800ab92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	d914      	bls.n	800abc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab9a:	4a17      	ldr	r2, [pc, #92]	; (800abf8 <vPortValidateInterruptPriority+0x70>)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4413      	add	r3, r2
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aba4:	4b15      	ldr	r3, [pc, #84]	; (800abfc <vPortValidateInterruptPriority+0x74>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	7afa      	ldrb	r2, [r7, #11]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d20a      	bcs.n	800abc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	607b      	str	r3, [r7, #4]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abc4:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <vPortValidateInterruptPriority+0x78>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800abcc:	4b0d      	ldr	r3, [pc, #52]	; (800ac04 <vPortValidateInterruptPriority+0x7c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d90a      	bls.n	800abea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	603b      	str	r3, [r7, #0]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <vPortValidateInterruptPriority+0x60>
	}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	e000e3f0 	.word	0xe000e3f0
 800abfc:	20001af8 	.word	0x20001af8
 800ac00:	e000ed0c 	.word	0xe000ed0c
 800ac04:	20001afc 	.word	0x20001afc

0800ac08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b08a      	sub	sp, #40	; 0x28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac10:	2300      	movs	r3, #0
 800ac12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac14:	f7fe fcdc 	bl	80095d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac18:	4b5b      	ldr	r3, [pc, #364]	; (800ad88 <pvPortMalloc+0x180>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac20:	f000 f920 	bl	800ae64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac24:	4b59      	ldr	r3, [pc, #356]	; (800ad8c <pvPortMalloc+0x184>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4013      	ands	r3, r2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f040 8093 	bne.w	800ad58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01d      	beq.n	800ac74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ac38:	2208      	movs	r2, #8
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d014      	beq.n	800ac74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f023 0307 	bic.w	r3, r3, #7
 800ac50:	3308      	adds	r3, #8
 800ac52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <pvPortMalloc+0x6c>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	617b      	str	r3, [r7, #20]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d06e      	beq.n	800ad58 <pvPortMalloc+0x150>
 800ac7a:	4b45      	ldr	r3, [pc, #276]	; (800ad90 <pvPortMalloc+0x188>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d869      	bhi.n	800ad58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac84:	4b43      	ldr	r3, [pc, #268]	; (800ad94 <pvPortMalloc+0x18c>)
 800ac86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac88:	4b42      	ldr	r3, [pc, #264]	; (800ad94 <pvPortMalloc+0x18c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac8e:	e004      	b.n	800ac9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d903      	bls.n	800acac <pvPortMalloc+0xa4>
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f1      	bne.n	800ac90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acac:	4b36      	ldr	r3, [pc, #216]	; (800ad88 <pvPortMalloc+0x180>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d050      	beq.n	800ad58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800acb6:	6a3b      	ldr	r3, [r7, #32]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2208      	movs	r2, #8
 800acbc:	4413      	add	r3, r2
 800acbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	1ad2      	subs	r2, r2, r3
 800acd0:	2308      	movs	r3, #8
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d91f      	bls.n	800ad18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <pvPortMalloc+0xf8>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	613b      	str	r3, [r7, #16]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad12:	69b8      	ldr	r0, [r7, #24]
 800ad14:	f000 f908 	bl	800af28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad18:	4b1d      	ldr	r3, [pc, #116]	; (800ad90 <pvPortMalloc+0x188>)
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	4a1b      	ldr	r2, [pc, #108]	; (800ad90 <pvPortMalloc+0x188>)
 800ad24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad26:	4b1a      	ldr	r3, [pc, #104]	; (800ad90 <pvPortMalloc+0x188>)
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	4b1b      	ldr	r3, [pc, #108]	; (800ad98 <pvPortMalloc+0x190>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d203      	bcs.n	800ad3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad32:	4b17      	ldr	r3, [pc, #92]	; (800ad90 <pvPortMalloc+0x188>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a18      	ldr	r2, [pc, #96]	; (800ad98 <pvPortMalloc+0x190>)
 800ad38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <pvPortMalloc+0x184>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	431a      	orrs	r2, r3
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad4e:	4b13      	ldr	r3, [pc, #76]	; (800ad9c <pvPortMalloc+0x194>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3301      	adds	r3, #1
 800ad54:	4a11      	ldr	r2, [pc, #68]	; (800ad9c <pvPortMalloc+0x194>)
 800ad56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad58:	f7fe fc48 	bl	80095ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	f003 0307 	and.w	r3, r3, #7
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <pvPortMalloc+0x174>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	60fb      	str	r3, [r7, #12]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <pvPortMalloc+0x172>
	return pvReturn;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3728      	adds	r7, #40	; 0x28
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20002708 	.word	0x20002708
 800ad8c:	2000271c 	.word	0x2000271c
 800ad90:	2000270c 	.word	0x2000270c
 800ad94:	20002700 	.word	0x20002700
 800ad98:	20002710 	.word	0x20002710
 800ad9c:	20002714 	.word	0x20002714

0800ada0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d04d      	beq.n	800ae4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adb2:	2308      	movs	r3, #8
 800adb4:	425b      	negs	r3, r3
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	4413      	add	r3, r2
 800adba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <vPortFree+0xb8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4013      	ands	r3, r2
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <vPortFree+0x44>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60fb      	str	r3, [r7, #12]
}
 800ade0:	bf00      	nop
 800ade2:	e7fe      	b.n	800ade2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00a      	beq.n	800ae02 <vPortFree+0x62>
	__asm volatile
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	60bb      	str	r3, [r7, #8]
}
 800adfe:	bf00      	nop
 800ae00:	e7fe      	b.n	800ae00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	685a      	ldr	r2, [r3, #4]
 800ae06:	4b14      	ldr	r3, [pc, #80]	; (800ae58 <vPortFree+0xb8>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01e      	beq.n	800ae4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11a      	bne.n	800ae4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	685a      	ldr	r2, [r3, #4]
 800ae1c:	4b0e      	ldr	r3, [pc, #56]	; (800ae58 <vPortFree+0xb8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	43db      	mvns	r3, r3
 800ae22:	401a      	ands	r2, r3
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae28:	f7fe fbd2 	bl	80095d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	685a      	ldr	r2, [r3, #4]
 800ae30:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <vPortFree+0xbc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4413      	add	r3, r2
 800ae36:	4a09      	ldr	r2, [pc, #36]	; (800ae5c <vPortFree+0xbc>)
 800ae38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae3a:	6938      	ldr	r0, [r7, #16]
 800ae3c:	f000 f874 	bl	800af28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae40:	4b07      	ldr	r3, [pc, #28]	; (800ae60 <vPortFree+0xc0>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3301      	adds	r3, #1
 800ae46:	4a06      	ldr	r2, [pc, #24]	; (800ae60 <vPortFree+0xc0>)
 800ae48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae4a:	f7fe fbcf 	bl	80095ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae4e:	bf00      	nop
 800ae50:	3718      	adds	r7, #24
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	2000271c 	.word	0x2000271c
 800ae5c:	2000270c 	.word	0x2000270c
 800ae60:	20002718 	.word	0x20002718

0800ae64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ae6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae70:	4b27      	ldr	r3, [pc, #156]	; (800af10 <prvHeapInit+0xac>)
 800ae72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f003 0307 	and.w	r3, r3, #7
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00c      	beq.n	800ae98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3307      	adds	r3, #7
 800ae82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0307 	bic.w	r3, r3, #7
 800ae8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	4a1f      	ldr	r2, [pc, #124]	; (800af10 <prvHeapInit+0xac>)
 800ae94:	4413      	add	r3, r2
 800ae96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae9c:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <prvHeapInit+0xb0>)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <prvHeapInit+0xb0>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	4413      	add	r3, r2
 800aeae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	1a9b      	subs	r3, r3, r2
 800aeb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0307 	bic.w	r3, r3, #7
 800aebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4a15      	ldr	r2, [pc, #84]	; (800af18 <prvHeapInit+0xb4>)
 800aec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aec6:	4b14      	ldr	r3, [pc, #80]	; (800af18 <prvHeapInit+0xb4>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2200      	movs	r2, #0
 800aecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aece:	4b12      	ldr	r3, [pc, #72]	; (800af18 <prvHeapInit+0xb4>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	1ad2      	subs	r2, r2, r3
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aee4:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvHeapInit+0xb4>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <prvHeapInit+0xb8>)
 800aef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <prvHeapInit+0xbc>)
 800aefa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <prvHeapInit+0xc0>)
 800aefe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af02:	601a      	str	r2, [r3, #0]
}
 800af04:	bf00      	nop
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr
 800af10:	20001b00 	.word	0x20001b00
 800af14:	20002700 	.word	0x20002700
 800af18:	20002708 	.word	0x20002708
 800af1c:	20002710 	.word	0x20002710
 800af20:	2000270c 	.word	0x2000270c
 800af24:	2000271c 	.word	0x2000271c

0800af28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af30:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <prvInsertBlockIntoFreeList+0xac>)
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e002      	b.n	800af3c <prvInsertBlockIntoFreeList+0x14>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	429a      	cmp	r2, r3
 800af44:	d8f7      	bhi.n	800af36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	4413      	add	r3, r2
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	429a      	cmp	r2, r3
 800af56:	d108      	bne.n	800af6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	441a      	add	r2, r3
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	441a      	add	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d118      	bne.n	800afb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4b15      	ldr	r3, [pc, #84]	; (800afd8 <prvInsertBlockIntoFreeList+0xb0>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d00d      	beq.n	800afa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	441a      	add	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	e008      	b.n	800afb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afa6:	4b0c      	ldr	r3, [pc, #48]	; (800afd8 <prvInsertBlockIntoFreeList+0xb0>)
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e003      	b.n	800afb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d002      	beq.n	800afc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc6:	bf00      	nop
 800afc8:	3714      	adds	r7, #20
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20002700 	.word	0x20002700
 800afd8:	20002708 	.word	0x20002708

0800afdc <__errno>:
 800afdc:	4b01      	ldr	r3, [pc, #4]	; (800afe4 <__errno+0x8>)
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20000010 	.word	0x20000010

0800afe8 <__libc_init_array>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	4d0d      	ldr	r5, [pc, #52]	; (800b020 <__libc_init_array+0x38>)
 800afec:	4c0d      	ldr	r4, [pc, #52]	; (800b024 <__libc_init_array+0x3c>)
 800afee:	1b64      	subs	r4, r4, r5
 800aff0:	10a4      	asrs	r4, r4, #2
 800aff2:	2600      	movs	r6, #0
 800aff4:	42a6      	cmp	r6, r4
 800aff6:	d109      	bne.n	800b00c <__libc_init_array+0x24>
 800aff8:	4d0b      	ldr	r5, [pc, #44]	; (800b028 <__libc_init_array+0x40>)
 800affa:	4c0c      	ldr	r4, [pc, #48]	; (800b02c <__libc_init_array+0x44>)
 800affc:	f003 fd26 	bl	800ea4c <_init>
 800b000:	1b64      	subs	r4, r4, r5
 800b002:	10a4      	asrs	r4, r4, #2
 800b004:	2600      	movs	r6, #0
 800b006:	42a6      	cmp	r6, r4
 800b008:	d105      	bne.n	800b016 <__libc_init_array+0x2e>
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b010:	4798      	blx	r3
 800b012:	3601      	adds	r6, #1
 800b014:	e7ee      	b.n	800aff4 <__libc_init_array+0xc>
 800b016:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01a:	4798      	blx	r3
 800b01c:	3601      	adds	r6, #1
 800b01e:	e7f2      	b.n	800b006 <__libc_init_array+0x1e>
 800b020:	0800f108 	.word	0x0800f108
 800b024:	0800f108 	.word	0x0800f108
 800b028:	0800f108 	.word	0x0800f108
 800b02c:	0800f10c 	.word	0x0800f10c

0800b030 <memcpy>:
 800b030:	440a      	add	r2, r1
 800b032:	4291      	cmp	r1, r2
 800b034:	f100 33ff 	add.w	r3, r0, #4294967295
 800b038:	d100      	bne.n	800b03c <memcpy+0xc>
 800b03a:	4770      	bx	lr
 800b03c:	b510      	push	{r4, lr}
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b046:	4291      	cmp	r1, r2
 800b048:	d1f9      	bne.n	800b03e <memcpy+0xe>
 800b04a:	bd10      	pop	{r4, pc}

0800b04c <memset>:
 800b04c:	4402      	add	r2, r0
 800b04e:	4603      	mov	r3, r0
 800b050:	4293      	cmp	r3, r2
 800b052:	d100      	bne.n	800b056 <memset+0xa>
 800b054:	4770      	bx	lr
 800b056:	f803 1b01 	strb.w	r1, [r3], #1
 800b05a:	e7f9      	b.n	800b050 <memset+0x4>

0800b05c <__cvt>:
 800b05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	ec55 4b10 	vmov	r4, r5, d0
 800b064:	2d00      	cmp	r5, #0
 800b066:	460e      	mov	r6, r1
 800b068:	4619      	mov	r1, r3
 800b06a:	462b      	mov	r3, r5
 800b06c:	bfbb      	ittet	lt
 800b06e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b072:	461d      	movlt	r5, r3
 800b074:	2300      	movge	r3, #0
 800b076:	232d      	movlt	r3, #45	; 0x2d
 800b078:	700b      	strb	r3, [r1, #0]
 800b07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b07c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b080:	4691      	mov	r9, r2
 800b082:	f023 0820 	bic.w	r8, r3, #32
 800b086:	bfbc      	itt	lt
 800b088:	4622      	movlt	r2, r4
 800b08a:	4614      	movlt	r4, r2
 800b08c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b090:	d005      	beq.n	800b09e <__cvt+0x42>
 800b092:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b096:	d100      	bne.n	800b09a <__cvt+0x3e>
 800b098:	3601      	adds	r6, #1
 800b09a:	2102      	movs	r1, #2
 800b09c:	e000      	b.n	800b0a0 <__cvt+0x44>
 800b09e:	2103      	movs	r1, #3
 800b0a0:	ab03      	add	r3, sp, #12
 800b0a2:	9301      	str	r3, [sp, #4]
 800b0a4:	ab02      	add	r3, sp, #8
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	ec45 4b10 	vmov	d0, r4, r5
 800b0ac:	4653      	mov	r3, sl
 800b0ae:	4632      	mov	r2, r6
 800b0b0:	f000 fcca 	bl	800ba48 <_dtoa_r>
 800b0b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	d102      	bne.n	800b0c2 <__cvt+0x66>
 800b0bc:	f019 0f01 	tst.w	r9, #1
 800b0c0:	d022      	beq.n	800b108 <__cvt+0xac>
 800b0c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0c6:	eb07 0906 	add.w	r9, r7, r6
 800b0ca:	d110      	bne.n	800b0ee <__cvt+0x92>
 800b0cc:	783b      	ldrb	r3, [r7, #0]
 800b0ce:	2b30      	cmp	r3, #48	; 0x30
 800b0d0:	d10a      	bne.n	800b0e8 <__cvt+0x8c>
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	f7f5 fd1d 	bl	8000b18 <__aeabi_dcmpeq>
 800b0de:	b918      	cbnz	r0, 800b0e8 <__cvt+0x8c>
 800b0e0:	f1c6 0601 	rsb	r6, r6, #1
 800b0e4:	f8ca 6000 	str.w	r6, [sl]
 800b0e8:	f8da 3000 	ldr.w	r3, [sl]
 800b0ec:	4499      	add	r9, r3
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7f5 fd0f 	bl	8000b18 <__aeabi_dcmpeq>
 800b0fa:	b108      	cbz	r0, 800b100 <__cvt+0xa4>
 800b0fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b100:	2230      	movs	r2, #48	; 0x30
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	454b      	cmp	r3, r9
 800b106:	d307      	bcc.n	800b118 <__cvt+0xbc>
 800b108:	9b03      	ldr	r3, [sp, #12]
 800b10a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b10c:	1bdb      	subs	r3, r3, r7
 800b10e:	4638      	mov	r0, r7
 800b110:	6013      	str	r3, [r2, #0]
 800b112:	b004      	add	sp, #16
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	1c59      	adds	r1, r3, #1
 800b11a:	9103      	str	r1, [sp, #12]
 800b11c:	701a      	strb	r2, [r3, #0]
 800b11e:	e7f0      	b.n	800b102 <__cvt+0xa6>

0800b120 <__exponent>:
 800b120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b122:	4603      	mov	r3, r0
 800b124:	2900      	cmp	r1, #0
 800b126:	bfb8      	it	lt
 800b128:	4249      	neglt	r1, r1
 800b12a:	f803 2b02 	strb.w	r2, [r3], #2
 800b12e:	bfb4      	ite	lt
 800b130:	222d      	movlt	r2, #45	; 0x2d
 800b132:	222b      	movge	r2, #43	; 0x2b
 800b134:	2909      	cmp	r1, #9
 800b136:	7042      	strb	r2, [r0, #1]
 800b138:	dd2a      	ble.n	800b190 <__exponent+0x70>
 800b13a:	f10d 0407 	add.w	r4, sp, #7
 800b13e:	46a4      	mov	ip, r4
 800b140:	270a      	movs	r7, #10
 800b142:	46a6      	mov	lr, r4
 800b144:	460a      	mov	r2, r1
 800b146:	fb91 f6f7 	sdiv	r6, r1, r7
 800b14a:	fb07 1516 	mls	r5, r7, r6, r1
 800b14e:	3530      	adds	r5, #48	; 0x30
 800b150:	2a63      	cmp	r2, #99	; 0x63
 800b152:	f104 34ff 	add.w	r4, r4, #4294967295
 800b156:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b15a:	4631      	mov	r1, r6
 800b15c:	dcf1      	bgt.n	800b142 <__exponent+0x22>
 800b15e:	3130      	adds	r1, #48	; 0x30
 800b160:	f1ae 0502 	sub.w	r5, lr, #2
 800b164:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b168:	1c44      	adds	r4, r0, #1
 800b16a:	4629      	mov	r1, r5
 800b16c:	4561      	cmp	r1, ip
 800b16e:	d30a      	bcc.n	800b186 <__exponent+0x66>
 800b170:	f10d 0209 	add.w	r2, sp, #9
 800b174:	eba2 020e 	sub.w	r2, r2, lr
 800b178:	4565      	cmp	r5, ip
 800b17a:	bf88      	it	hi
 800b17c:	2200      	movhi	r2, #0
 800b17e:	4413      	add	r3, r2
 800b180:	1a18      	subs	r0, r3, r0
 800b182:	b003      	add	sp, #12
 800b184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b18a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b18e:	e7ed      	b.n	800b16c <__exponent+0x4c>
 800b190:	2330      	movs	r3, #48	; 0x30
 800b192:	3130      	adds	r1, #48	; 0x30
 800b194:	7083      	strb	r3, [r0, #2]
 800b196:	70c1      	strb	r1, [r0, #3]
 800b198:	1d03      	adds	r3, r0, #4
 800b19a:	e7f1      	b.n	800b180 <__exponent+0x60>

0800b19c <_printf_float>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	ed2d 8b02 	vpush	{d8}
 800b1a4:	b08d      	sub	sp, #52	; 0x34
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1ac:	4616      	mov	r6, r2
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	4605      	mov	r5, r0
 800b1b2:	f001 fa35 	bl	800c620 <_localeconv_r>
 800b1b6:	f8d0 a000 	ldr.w	sl, [r0]
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	f7f5 f830 	bl	8000220 <strlen>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1d0:	3307      	adds	r3, #7
 800b1d2:	f023 0307 	bic.w	r3, r3, #7
 800b1d6:	f103 0208 	add.w	r2, r3, #8
 800b1da:	f8c8 2000 	str.w	r2, [r8]
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1ee:	9307      	str	r3, [sp, #28]
 800b1f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1f4:	ee08 0a10 	vmov	s16, r0
 800b1f8:	4b9f      	ldr	r3, [pc, #636]	; (800b478 <_printf_float+0x2dc>)
 800b1fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	f7f5 fcbb 	bl	8000b7c <__aeabi_dcmpun>
 800b206:	bb88      	cbnz	r0, 800b26c <_printf_float+0xd0>
 800b208:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b20c:	4b9a      	ldr	r3, [pc, #616]	; (800b478 <_printf_float+0x2dc>)
 800b20e:	f04f 32ff 	mov.w	r2, #4294967295
 800b212:	f7f5 fc95 	bl	8000b40 <__aeabi_dcmple>
 800b216:	bb48      	cbnz	r0, 800b26c <_printf_float+0xd0>
 800b218:	2200      	movs	r2, #0
 800b21a:	2300      	movs	r3, #0
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 fc84 	bl	8000b2c <__aeabi_dcmplt>
 800b224:	b110      	cbz	r0, 800b22c <_printf_float+0x90>
 800b226:	232d      	movs	r3, #45	; 0x2d
 800b228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22c:	4b93      	ldr	r3, [pc, #588]	; (800b47c <_printf_float+0x2e0>)
 800b22e:	4894      	ldr	r0, [pc, #592]	; (800b480 <_printf_float+0x2e4>)
 800b230:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b234:	bf94      	ite	ls
 800b236:	4698      	movls	r8, r3
 800b238:	4680      	movhi	r8, r0
 800b23a:	2303      	movs	r3, #3
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	9b05      	ldr	r3, [sp, #20]
 800b240:	f023 0204 	bic.w	r2, r3, #4
 800b244:	6022      	str	r2, [r4, #0]
 800b246:	f04f 0900 	mov.w	r9, #0
 800b24a:	9700      	str	r7, [sp, #0]
 800b24c:	4633      	mov	r3, r6
 800b24e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b250:	4621      	mov	r1, r4
 800b252:	4628      	mov	r0, r5
 800b254:	f000 f9d8 	bl	800b608 <_printf_common>
 800b258:	3001      	adds	r0, #1
 800b25a:	f040 8090 	bne.w	800b37e <_printf_float+0x1e2>
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295
 800b262:	b00d      	add	sp, #52	; 0x34
 800b264:	ecbd 8b02 	vpop	{d8}
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26c:	4642      	mov	r2, r8
 800b26e:	464b      	mov	r3, r9
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	f7f5 fc82 	bl	8000b7c <__aeabi_dcmpun>
 800b278:	b140      	cbz	r0, 800b28c <_printf_float+0xf0>
 800b27a:	464b      	mov	r3, r9
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfbc      	itt	lt
 800b280:	232d      	movlt	r3, #45	; 0x2d
 800b282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b286:	487f      	ldr	r0, [pc, #508]	; (800b484 <_printf_float+0x2e8>)
 800b288:	4b7f      	ldr	r3, [pc, #508]	; (800b488 <_printf_float+0x2ec>)
 800b28a:	e7d1      	b.n	800b230 <_printf_float+0x94>
 800b28c:	6863      	ldr	r3, [r4, #4]
 800b28e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b292:	9206      	str	r2, [sp, #24]
 800b294:	1c5a      	adds	r2, r3, #1
 800b296:	d13f      	bne.n	800b318 <_printf_float+0x17c>
 800b298:	2306      	movs	r3, #6
 800b29a:	6063      	str	r3, [r4, #4]
 800b29c:	9b05      	ldr	r3, [sp, #20]
 800b29e:	6861      	ldr	r1, [r4, #4]
 800b2a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9303      	str	r3, [sp, #12]
 800b2a8:	ab0a      	add	r3, sp, #40	; 0x28
 800b2aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2ae:	ab09      	add	r3, sp, #36	; 0x24
 800b2b0:	ec49 8b10 	vmov	d0, r8, r9
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f7ff fecd 	bl	800b05c <__cvt>
 800b2c2:	9b06      	ldr	r3, [sp, #24]
 800b2c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c6:	2b47      	cmp	r3, #71	; 0x47
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	d108      	bne.n	800b2de <_printf_float+0x142>
 800b2cc:	1cc8      	adds	r0, r1, #3
 800b2ce:	db02      	blt.n	800b2d6 <_printf_float+0x13a>
 800b2d0:	6863      	ldr	r3, [r4, #4]
 800b2d2:	4299      	cmp	r1, r3
 800b2d4:	dd41      	ble.n	800b35a <_printf_float+0x1be>
 800b2d6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2da:	fa5f fb8b 	uxtb.w	fp, fp
 800b2de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2e2:	d820      	bhi.n	800b326 <_printf_float+0x18a>
 800b2e4:	3901      	subs	r1, #1
 800b2e6:	465a      	mov	r2, fp
 800b2e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2ec:	9109      	str	r1, [sp, #36]	; 0x24
 800b2ee:	f7ff ff17 	bl	800b120 <__exponent>
 800b2f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f4:	1813      	adds	r3, r2, r0
 800b2f6:	2a01      	cmp	r2, #1
 800b2f8:	4681      	mov	r9, r0
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	dc02      	bgt.n	800b304 <_printf_float+0x168>
 800b2fe:	6822      	ldr	r2, [r4, #0]
 800b300:	07d2      	lsls	r2, r2, #31
 800b302:	d501      	bpl.n	800b308 <_printf_float+0x16c>
 800b304:	3301      	adds	r3, #1
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d09c      	beq.n	800b24a <_printf_float+0xae>
 800b310:	232d      	movs	r3, #45	; 0x2d
 800b312:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b316:	e798      	b.n	800b24a <_printf_float+0xae>
 800b318:	9a06      	ldr	r2, [sp, #24]
 800b31a:	2a47      	cmp	r2, #71	; 0x47
 800b31c:	d1be      	bne.n	800b29c <_printf_float+0x100>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1bc      	bne.n	800b29c <_printf_float+0x100>
 800b322:	2301      	movs	r3, #1
 800b324:	e7b9      	b.n	800b29a <_printf_float+0xfe>
 800b326:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b32a:	d118      	bne.n	800b35e <_printf_float+0x1c2>
 800b32c:	2900      	cmp	r1, #0
 800b32e:	6863      	ldr	r3, [r4, #4]
 800b330:	dd0b      	ble.n	800b34a <_printf_float+0x1ae>
 800b332:	6121      	str	r1, [r4, #16]
 800b334:	b913      	cbnz	r3, 800b33c <_printf_float+0x1a0>
 800b336:	6822      	ldr	r2, [r4, #0]
 800b338:	07d0      	lsls	r0, r2, #31
 800b33a:	d502      	bpl.n	800b342 <_printf_float+0x1a6>
 800b33c:	3301      	adds	r3, #1
 800b33e:	440b      	add	r3, r1
 800b340:	6123      	str	r3, [r4, #16]
 800b342:	65a1      	str	r1, [r4, #88]	; 0x58
 800b344:	f04f 0900 	mov.w	r9, #0
 800b348:	e7de      	b.n	800b308 <_printf_float+0x16c>
 800b34a:	b913      	cbnz	r3, 800b352 <_printf_float+0x1b6>
 800b34c:	6822      	ldr	r2, [r4, #0]
 800b34e:	07d2      	lsls	r2, r2, #31
 800b350:	d501      	bpl.n	800b356 <_printf_float+0x1ba>
 800b352:	3302      	adds	r3, #2
 800b354:	e7f4      	b.n	800b340 <_printf_float+0x1a4>
 800b356:	2301      	movs	r3, #1
 800b358:	e7f2      	b.n	800b340 <_printf_float+0x1a4>
 800b35a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b360:	4299      	cmp	r1, r3
 800b362:	db05      	blt.n	800b370 <_printf_float+0x1d4>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	6121      	str	r1, [r4, #16]
 800b368:	07d8      	lsls	r0, r3, #31
 800b36a:	d5ea      	bpl.n	800b342 <_printf_float+0x1a6>
 800b36c:	1c4b      	adds	r3, r1, #1
 800b36e:	e7e7      	b.n	800b340 <_printf_float+0x1a4>
 800b370:	2900      	cmp	r1, #0
 800b372:	bfd4      	ite	le
 800b374:	f1c1 0202 	rsble	r2, r1, #2
 800b378:	2201      	movgt	r2, #1
 800b37a:	4413      	add	r3, r2
 800b37c:	e7e0      	b.n	800b340 <_printf_float+0x1a4>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	055a      	lsls	r2, r3, #21
 800b382:	d407      	bmi.n	800b394 <_printf_float+0x1f8>
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	4642      	mov	r2, r8
 800b388:	4631      	mov	r1, r6
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	d12c      	bne.n	800b3ec <_printf_float+0x250>
 800b392:	e764      	b.n	800b25e <_printf_float+0xc2>
 800b394:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b398:	f240 80e0 	bls.w	800b55c <_printf_float+0x3c0>
 800b39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f7f5 fbb8 	bl	8000b18 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d034      	beq.n	800b416 <_printf_float+0x27a>
 800b3ac:	4a37      	ldr	r2, [pc, #220]	; (800b48c <_printf_float+0x2f0>)
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4631      	mov	r1, r6
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	47b8      	blx	r7
 800b3b6:	3001      	adds	r0, #1
 800b3b8:	f43f af51 	beq.w	800b25e <_printf_float+0xc2>
 800b3bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	db02      	blt.n	800b3ca <_printf_float+0x22e>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	07d8      	lsls	r0, r3, #31
 800b3c8:	d510      	bpl.n	800b3ec <_printf_float+0x250>
 800b3ca:	ee18 3a10 	vmov	r3, s16
 800b3ce:	4652      	mov	r2, sl
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	47b8      	blx	r7
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	f43f af41 	beq.w	800b25e <_printf_float+0xc2>
 800b3dc:	f04f 0800 	mov.w	r8, #0
 800b3e0:	f104 091a 	add.w	r9, r4, #26
 800b3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4543      	cmp	r3, r8
 800b3ea:	dc09      	bgt.n	800b400 <_printf_float+0x264>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	079b      	lsls	r3, r3, #30
 800b3f0:	f100 8105 	bmi.w	800b5fe <_printf_float+0x462>
 800b3f4:	68e0      	ldr	r0, [r4, #12]
 800b3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f8:	4298      	cmp	r0, r3
 800b3fa:	bfb8      	it	lt
 800b3fc:	4618      	movlt	r0, r3
 800b3fe:	e730      	b.n	800b262 <_printf_float+0xc6>
 800b400:	2301      	movs	r3, #1
 800b402:	464a      	mov	r2, r9
 800b404:	4631      	mov	r1, r6
 800b406:	4628      	mov	r0, r5
 800b408:	47b8      	blx	r7
 800b40a:	3001      	adds	r0, #1
 800b40c:	f43f af27 	beq.w	800b25e <_printf_float+0xc2>
 800b410:	f108 0801 	add.w	r8, r8, #1
 800b414:	e7e6      	b.n	800b3e4 <_printf_float+0x248>
 800b416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dc39      	bgt.n	800b490 <_printf_float+0x2f4>
 800b41c:	4a1b      	ldr	r2, [pc, #108]	; (800b48c <_printf_float+0x2f0>)
 800b41e:	2301      	movs	r3, #1
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	f43f af19 	beq.w	800b25e <_printf_float+0xc2>
 800b42c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b430:	4313      	orrs	r3, r2
 800b432:	d102      	bne.n	800b43a <_printf_float+0x29e>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07d9      	lsls	r1, r3, #31
 800b438:	d5d8      	bpl.n	800b3ec <_printf_float+0x250>
 800b43a:	ee18 3a10 	vmov	r3, s16
 800b43e:	4652      	mov	r2, sl
 800b440:	4631      	mov	r1, r6
 800b442:	4628      	mov	r0, r5
 800b444:	47b8      	blx	r7
 800b446:	3001      	adds	r0, #1
 800b448:	f43f af09 	beq.w	800b25e <_printf_float+0xc2>
 800b44c:	f04f 0900 	mov.w	r9, #0
 800b450:	f104 0a1a 	add.w	sl, r4, #26
 800b454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b456:	425b      	negs	r3, r3
 800b458:	454b      	cmp	r3, r9
 800b45a:	dc01      	bgt.n	800b460 <_printf_float+0x2c4>
 800b45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b45e:	e792      	b.n	800b386 <_printf_float+0x1ea>
 800b460:	2301      	movs	r3, #1
 800b462:	4652      	mov	r2, sl
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f aef7 	beq.w	800b25e <_printf_float+0xc2>
 800b470:	f109 0901 	add.w	r9, r9, #1
 800b474:	e7ee      	b.n	800b454 <_printf_float+0x2b8>
 800b476:	bf00      	nop
 800b478:	7fefffff 	.word	0x7fefffff
 800b47c:	0800eb48 	.word	0x0800eb48
 800b480:	0800eb4c 	.word	0x0800eb4c
 800b484:	0800eb54 	.word	0x0800eb54
 800b488:	0800eb50 	.word	0x0800eb50
 800b48c:	0800eb58 	.word	0x0800eb58
 800b490:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b494:	429a      	cmp	r2, r3
 800b496:	bfa8      	it	ge
 800b498:	461a      	movge	r2, r3
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	4691      	mov	r9, r2
 800b49e:	dc37      	bgt.n	800b510 <_printf_float+0x374>
 800b4a0:	f04f 0b00 	mov.w	fp, #0
 800b4a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4a8:	f104 021a 	add.w	r2, r4, #26
 800b4ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4ae:	9305      	str	r3, [sp, #20]
 800b4b0:	eba3 0309 	sub.w	r3, r3, r9
 800b4b4:	455b      	cmp	r3, fp
 800b4b6:	dc33      	bgt.n	800b520 <_printf_float+0x384>
 800b4b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	db3b      	blt.n	800b538 <_printf_float+0x39c>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	07da      	lsls	r2, r3, #31
 800b4c4:	d438      	bmi.n	800b538 <_printf_float+0x39c>
 800b4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4c8:	9b05      	ldr	r3, [sp, #20]
 800b4ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	eba2 0901 	sub.w	r9, r2, r1
 800b4d2:	4599      	cmp	r9, r3
 800b4d4:	bfa8      	it	ge
 800b4d6:	4699      	movge	r9, r3
 800b4d8:	f1b9 0f00 	cmp.w	r9, #0
 800b4dc:	dc35      	bgt.n	800b54a <_printf_float+0x3ae>
 800b4de:	f04f 0800 	mov.w	r8, #0
 800b4e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4e6:	f104 0a1a 	add.w	sl, r4, #26
 800b4ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ee:	1a9b      	subs	r3, r3, r2
 800b4f0:	eba3 0309 	sub.w	r3, r3, r9
 800b4f4:	4543      	cmp	r3, r8
 800b4f6:	f77f af79 	ble.w	800b3ec <_printf_float+0x250>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4652      	mov	r2, sl
 800b4fe:	4631      	mov	r1, r6
 800b500:	4628      	mov	r0, r5
 800b502:	47b8      	blx	r7
 800b504:	3001      	adds	r0, #1
 800b506:	f43f aeaa 	beq.w	800b25e <_printf_float+0xc2>
 800b50a:	f108 0801 	add.w	r8, r8, #1
 800b50e:	e7ec      	b.n	800b4ea <_printf_float+0x34e>
 800b510:	4613      	mov	r3, r2
 800b512:	4631      	mov	r1, r6
 800b514:	4642      	mov	r2, r8
 800b516:	4628      	mov	r0, r5
 800b518:	47b8      	blx	r7
 800b51a:	3001      	adds	r0, #1
 800b51c:	d1c0      	bne.n	800b4a0 <_printf_float+0x304>
 800b51e:	e69e      	b.n	800b25e <_printf_float+0xc2>
 800b520:	2301      	movs	r3, #1
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	9205      	str	r2, [sp, #20]
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f ae97 	beq.w	800b25e <_printf_float+0xc2>
 800b530:	9a05      	ldr	r2, [sp, #20]
 800b532:	f10b 0b01 	add.w	fp, fp, #1
 800b536:	e7b9      	b.n	800b4ac <_printf_float+0x310>
 800b538:	ee18 3a10 	vmov	r3, s16
 800b53c:	4652      	mov	r2, sl
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	47b8      	blx	r7
 800b544:	3001      	adds	r0, #1
 800b546:	d1be      	bne.n	800b4c6 <_printf_float+0x32a>
 800b548:	e689      	b.n	800b25e <_printf_float+0xc2>
 800b54a:	9a05      	ldr	r2, [sp, #20]
 800b54c:	464b      	mov	r3, r9
 800b54e:	4442      	add	r2, r8
 800b550:	4631      	mov	r1, r6
 800b552:	4628      	mov	r0, r5
 800b554:	47b8      	blx	r7
 800b556:	3001      	adds	r0, #1
 800b558:	d1c1      	bne.n	800b4de <_printf_float+0x342>
 800b55a:	e680      	b.n	800b25e <_printf_float+0xc2>
 800b55c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b55e:	2a01      	cmp	r2, #1
 800b560:	dc01      	bgt.n	800b566 <_printf_float+0x3ca>
 800b562:	07db      	lsls	r3, r3, #31
 800b564:	d538      	bpl.n	800b5d8 <_printf_float+0x43c>
 800b566:	2301      	movs	r3, #1
 800b568:	4642      	mov	r2, r8
 800b56a:	4631      	mov	r1, r6
 800b56c:	4628      	mov	r0, r5
 800b56e:	47b8      	blx	r7
 800b570:	3001      	adds	r0, #1
 800b572:	f43f ae74 	beq.w	800b25e <_printf_float+0xc2>
 800b576:	ee18 3a10 	vmov	r3, s16
 800b57a:	4652      	mov	r2, sl
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f ae6b 	beq.w	800b25e <_printf_float+0xc2>
 800b588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	f7f5 fac2 	bl	8000b18 <__aeabi_dcmpeq>
 800b594:	b9d8      	cbnz	r0, 800b5ce <_printf_float+0x432>
 800b596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b598:	f108 0201 	add.w	r2, r8, #1
 800b59c:	3b01      	subs	r3, #1
 800b59e:	4631      	mov	r1, r6
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	47b8      	blx	r7
 800b5a4:	3001      	adds	r0, #1
 800b5a6:	d10e      	bne.n	800b5c6 <_printf_float+0x42a>
 800b5a8:	e659      	b.n	800b25e <_printf_float+0xc2>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4652      	mov	r2, sl
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	f43f ae52 	beq.w	800b25e <_printf_float+0xc2>
 800b5ba:	f108 0801 	add.w	r8, r8, #1
 800b5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	4543      	cmp	r3, r8
 800b5c4:	dcf1      	bgt.n	800b5aa <_printf_float+0x40e>
 800b5c6:	464b      	mov	r3, r9
 800b5c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5cc:	e6dc      	b.n	800b388 <_printf_float+0x1ec>
 800b5ce:	f04f 0800 	mov.w	r8, #0
 800b5d2:	f104 0a1a 	add.w	sl, r4, #26
 800b5d6:	e7f2      	b.n	800b5be <_printf_float+0x422>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	4642      	mov	r2, r8
 800b5dc:	e7df      	b.n	800b59e <_printf_float+0x402>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	464a      	mov	r2, r9
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	47b8      	blx	r7
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	f43f ae38 	beq.w	800b25e <_printf_float+0xc2>
 800b5ee:	f108 0801 	add.w	r8, r8, #1
 800b5f2:	68e3      	ldr	r3, [r4, #12]
 800b5f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5f6:	1a5b      	subs	r3, r3, r1
 800b5f8:	4543      	cmp	r3, r8
 800b5fa:	dcf0      	bgt.n	800b5de <_printf_float+0x442>
 800b5fc:	e6fa      	b.n	800b3f4 <_printf_float+0x258>
 800b5fe:	f04f 0800 	mov.w	r8, #0
 800b602:	f104 0919 	add.w	r9, r4, #25
 800b606:	e7f4      	b.n	800b5f2 <_printf_float+0x456>

0800b608 <_printf_common>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	4616      	mov	r6, r2
 800b60e:	4699      	mov	r9, r3
 800b610:	688a      	ldr	r2, [r1, #8]
 800b612:	690b      	ldr	r3, [r1, #16]
 800b614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b618:	4293      	cmp	r3, r2
 800b61a:	bfb8      	it	lt
 800b61c:	4613      	movlt	r3, r2
 800b61e:	6033      	str	r3, [r6, #0]
 800b620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b624:	4607      	mov	r7, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b10a      	cbz	r2, 800b62e <_printf_common+0x26>
 800b62a:	3301      	adds	r3, #1
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	0699      	lsls	r1, r3, #26
 800b632:	bf42      	ittt	mi
 800b634:	6833      	ldrmi	r3, [r6, #0]
 800b636:	3302      	addmi	r3, #2
 800b638:	6033      	strmi	r3, [r6, #0]
 800b63a:	6825      	ldr	r5, [r4, #0]
 800b63c:	f015 0506 	ands.w	r5, r5, #6
 800b640:	d106      	bne.n	800b650 <_printf_common+0x48>
 800b642:	f104 0a19 	add.w	sl, r4, #25
 800b646:	68e3      	ldr	r3, [r4, #12]
 800b648:	6832      	ldr	r2, [r6, #0]
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	dc26      	bgt.n	800b69e <_printf_common+0x96>
 800b650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b654:	1e13      	subs	r3, r2, #0
 800b656:	6822      	ldr	r2, [r4, #0]
 800b658:	bf18      	it	ne
 800b65a:	2301      	movne	r3, #1
 800b65c:	0692      	lsls	r2, r2, #26
 800b65e:	d42b      	bmi.n	800b6b8 <_printf_common+0xb0>
 800b660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b664:	4649      	mov	r1, r9
 800b666:	4638      	mov	r0, r7
 800b668:	47c0      	blx	r8
 800b66a:	3001      	adds	r0, #1
 800b66c:	d01e      	beq.n	800b6ac <_printf_common+0xa4>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	68e5      	ldr	r5, [r4, #12]
 800b672:	6832      	ldr	r2, [r6, #0]
 800b674:	f003 0306 	and.w	r3, r3, #6
 800b678:	2b04      	cmp	r3, #4
 800b67a:	bf08      	it	eq
 800b67c:	1aad      	subeq	r5, r5, r2
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	bf0c      	ite	eq
 800b684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b688:	2500      	movne	r5, #0
 800b68a:	4293      	cmp	r3, r2
 800b68c:	bfc4      	itt	gt
 800b68e:	1a9b      	subgt	r3, r3, r2
 800b690:	18ed      	addgt	r5, r5, r3
 800b692:	2600      	movs	r6, #0
 800b694:	341a      	adds	r4, #26
 800b696:	42b5      	cmp	r5, r6
 800b698:	d11a      	bne.n	800b6d0 <_printf_common+0xc8>
 800b69a:	2000      	movs	r0, #0
 800b69c:	e008      	b.n	800b6b0 <_printf_common+0xa8>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	47c0      	blx	r8
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d103      	bne.n	800b6b4 <_printf_common+0xac>
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	e7c6      	b.n	800b646 <_printf_common+0x3e>
 800b6b8:	18e1      	adds	r1, r4, r3
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	2030      	movs	r0, #48	; 0x30
 800b6be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6c2:	4422      	add	r2, r4
 800b6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6cc:	3302      	adds	r3, #2
 800b6ce:	e7c7      	b.n	800b660 <_printf_common+0x58>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c0      	blx	r8
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d0e6      	beq.n	800b6ac <_printf_common+0xa4>
 800b6de:	3601      	adds	r6, #1
 800b6e0:	e7d9      	b.n	800b696 <_printf_common+0x8e>
	...

0800b6e4 <_printf_i>:
 800b6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	4691      	mov	r9, r2
 800b6ec:	7e27      	ldrb	r7, [r4, #24]
 800b6ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b6f0:	2f78      	cmp	r7, #120	; 0x78
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	469a      	mov	sl, r3
 800b6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6fa:	d807      	bhi.n	800b70c <_printf_i+0x28>
 800b6fc:	2f62      	cmp	r7, #98	; 0x62
 800b6fe:	d80a      	bhi.n	800b716 <_printf_i+0x32>
 800b700:	2f00      	cmp	r7, #0
 800b702:	f000 80d8 	beq.w	800b8b6 <_printf_i+0x1d2>
 800b706:	2f58      	cmp	r7, #88	; 0x58
 800b708:	f000 80a3 	beq.w	800b852 <_printf_i+0x16e>
 800b70c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b714:	e03a      	b.n	800b78c <_printf_i+0xa8>
 800b716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b71a:	2b15      	cmp	r3, #21
 800b71c:	d8f6      	bhi.n	800b70c <_printf_i+0x28>
 800b71e:	a001      	add	r0, pc, #4	; (adr r0, 800b724 <_printf_i+0x40>)
 800b720:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b791 	.word	0x0800b791
 800b72c:	0800b70d 	.word	0x0800b70d
 800b730:	0800b70d 	.word	0x0800b70d
 800b734:	0800b70d 	.word	0x0800b70d
 800b738:	0800b70d 	.word	0x0800b70d
 800b73c:	0800b791 	.word	0x0800b791
 800b740:	0800b70d 	.word	0x0800b70d
 800b744:	0800b70d 	.word	0x0800b70d
 800b748:	0800b70d 	.word	0x0800b70d
 800b74c:	0800b70d 	.word	0x0800b70d
 800b750:	0800b89d 	.word	0x0800b89d
 800b754:	0800b7c1 	.word	0x0800b7c1
 800b758:	0800b87f 	.word	0x0800b87f
 800b75c:	0800b70d 	.word	0x0800b70d
 800b760:	0800b70d 	.word	0x0800b70d
 800b764:	0800b8bf 	.word	0x0800b8bf
 800b768:	0800b70d 	.word	0x0800b70d
 800b76c:	0800b7c1 	.word	0x0800b7c1
 800b770:	0800b70d 	.word	0x0800b70d
 800b774:	0800b70d 	.word	0x0800b70d
 800b778:	0800b887 	.word	0x0800b887
 800b77c:	680b      	ldr	r3, [r1, #0]
 800b77e:	1d1a      	adds	r2, r3, #4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	600a      	str	r2, [r1, #0]
 800b784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b78c:	2301      	movs	r3, #1
 800b78e:	e0a3      	b.n	800b8d8 <_printf_i+0x1f4>
 800b790:	6825      	ldr	r5, [r4, #0]
 800b792:	6808      	ldr	r0, [r1, #0]
 800b794:	062e      	lsls	r6, r5, #24
 800b796:	f100 0304 	add.w	r3, r0, #4
 800b79a:	d50a      	bpl.n	800b7b2 <_printf_i+0xce>
 800b79c:	6805      	ldr	r5, [r0, #0]
 800b79e:	600b      	str	r3, [r1, #0]
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	da03      	bge.n	800b7ac <_printf_i+0xc8>
 800b7a4:	232d      	movs	r3, #45	; 0x2d
 800b7a6:	426d      	negs	r5, r5
 800b7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ac:	485e      	ldr	r0, [pc, #376]	; (800b928 <_printf_i+0x244>)
 800b7ae:	230a      	movs	r3, #10
 800b7b0:	e019      	b.n	800b7e6 <_printf_i+0x102>
 800b7b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7b6:	6805      	ldr	r5, [r0, #0]
 800b7b8:	600b      	str	r3, [r1, #0]
 800b7ba:	bf18      	it	ne
 800b7bc:	b22d      	sxthne	r5, r5
 800b7be:	e7ef      	b.n	800b7a0 <_printf_i+0xbc>
 800b7c0:	680b      	ldr	r3, [r1, #0]
 800b7c2:	6825      	ldr	r5, [r4, #0]
 800b7c4:	1d18      	adds	r0, r3, #4
 800b7c6:	6008      	str	r0, [r1, #0]
 800b7c8:	0628      	lsls	r0, r5, #24
 800b7ca:	d501      	bpl.n	800b7d0 <_printf_i+0xec>
 800b7cc:	681d      	ldr	r5, [r3, #0]
 800b7ce:	e002      	b.n	800b7d6 <_printf_i+0xf2>
 800b7d0:	0669      	lsls	r1, r5, #25
 800b7d2:	d5fb      	bpl.n	800b7cc <_printf_i+0xe8>
 800b7d4:	881d      	ldrh	r5, [r3, #0]
 800b7d6:	4854      	ldr	r0, [pc, #336]	; (800b928 <_printf_i+0x244>)
 800b7d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b7da:	bf0c      	ite	eq
 800b7dc:	2308      	moveq	r3, #8
 800b7de:	230a      	movne	r3, #10
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7e6:	6866      	ldr	r6, [r4, #4]
 800b7e8:	60a6      	str	r6, [r4, #8]
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	bfa2      	ittt	ge
 800b7ee:	6821      	ldrge	r1, [r4, #0]
 800b7f0:	f021 0104 	bicge.w	r1, r1, #4
 800b7f4:	6021      	strge	r1, [r4, #0]
 800b7f6:	b90d      	cbnz	r5, 800b7fc <_printf_i+0x118>
 800b7f8:	2e00      	cmp	r6, #0
 800b7fa:	d04d      	beq.n	800b898 <_printf_i+0x1b4>
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b802:	fb03 5711 	mls	r7, r3, r1, r5
 800b806:	5dc7      	ldrb	r7, [r0, r7]
 800b808:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b80c:	462f      	mov	r7, r5
 800b80e:	42bb      	cmp	r3, r7
 800b810:	460d      	mov	r5, r1
 800b812:	d9f4      	bls.n	800b7fe <_printf_i+0x11a>
 800b814:	2b08      	cmp	r3, #8
 800b816:	d10b      	bne.n	800b830 <_printf_i+0x14c>
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	07df      	lsls	r7, r3, #31
 800b81c:	d508      	bpl.n	800b830 <_printf_i+0x14c>
 800b81e:	6923      	ldr	r3, [r4, #16]
 800b820:	6861      	ldr	r1, [r4, #4]
 800b822:	4299      	cmp	r1, r3
 800b824:	bfde      	ittt	le
 800b826:	2330      	movle	r3, #48	; 0x30
 800b828:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b82c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b830:	1b92      	subs	r2, r2, r6
 800b832:	6122      	str	r2, [r4, #16]
 800b834:	f8cd a000 	str.w	sl, [sp]
 800b838:	464b      	mov	r3, r9
 800b83a:	aa03      	add	r2, sp, #12
 800b83c:	4621      	mov	r1, r4
 800b83e:	4640      	mov	r0, r8
 800b840:	f7ff fee2 	bl	800b608 <_printf_common>
 800b844:	3001      	adds	r0, #1
 800b846:	d14c      	bne.n	800b8e2 <_printf_i+0x1fe>
 800b848:	f04f 30ff 	mov.w	r0, #4294967295
 800b84c:	b004      	add	sp, #16
 800b84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b852:	4835      	ldr	r0, [pc, #212]	; (800b928 <_printf_i+0x244>)
 800b854:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	680e      	ldr	r6, [r1, #0]
 800b85c:	061f      	lsls	r7, r3, #24
 800b85e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b862:	600e      	str	r6, [r1, #0]
 800b864:	d514      	bpl.n	800b890 <_printf_i+0x1ac>
 800b866:	07d9      	lsls	r1, r3, #31
 800b868:	bf44      	itt	mi
 800b86a:	f043 0320 	orrmi.w	r3, r3, #32
 800b86e:	6023      	strmi	r3, [r4, #0]
 800b870:	b91d      	cbnz	r5, 800b87a <_printf_i+0x196>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	f023 0320 	bic.w	r3, r3, #32
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	2310      	movs	r3, #16
 800b87c:	e7b0      	b.n	800b7e0 <_printf_i+0xfc>
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	f043 0320 	orr.w	r3, r3, #32
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	2378      	movs	r3, #120	; 0x78
 800b888:	4828      	ldr	r0, [pc, #160]	; (800b92c <_printf_i+0x248>)
 800b88a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b88e:	e7e3      	b.n	800b858 <_printf_i+0x174>
 800b890:	065e      	lsls	r6, r3, #25
 800b892:	bf48      	it	mi
 800b894:	b2ad      	uxthmi	r5, r5
 800b896:	e7e6      	b.n	800b866 <_printf_i+0x182>
 800b898:	4616      	mov	r6, r2
 800b89a:	e7bb      	b.n	800b814 <_printf_i+0x130>
 800b89c:	680b      	ldr	r3, [r1, #0]
 800b89e:	6826      	ldr	r6, [r4, #0]
 800b8a0:	6960      	ldr	r0, [r4, #20]
 800b8a2:	1d1d      	adds	r5, r3, #4
 800b8a4:	600d      	str	r5, [r1, #0]
 800b8a6:	0635      	lsls	r5, r6, #24
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	d501      	bpl.n	800b8b0 <_printf_i+0x1cc>
 800b8ac:	6018      	str	r0, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <_printf_i+0x1d2>
 800b8b0:	0671      	lsls	r1, r6, #25
 800b8b2:	d5fb      	bpl.n	800b8ac <_printf_i+0x1c8>
 800b8b4:	8018      	strh	r0, [r3, #0]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	4616      	mov	r6, r2
 800b8bc:	e7ba      	b.n	800b834 <_printf_i+0x150>
 800b8be:	680b      	ldr	r3, [r1, #0]
 800b8c0:	1d1a      	adds	r2, r3, #4
 800b8c2:	600a      	str	r2, [r1, #0]
 800b8c4:	681e      	ldr	r6, [r3, #0]
 800b8c6:	6862      	ldr	r2, [r4, #4]
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7f4 fcb0 	bl	8000230 <memchr>
 800b8d0:	b108      	cbz	r0, 800b8d6 <_printf_i+0x1f2>
 800b8d2:	1b80      	subs	r0, r0, r6
 800b8d4:	6060      	str	r0, [r4, #4]
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e0:	e7a8      	b.n	800b834 <_printf_i+0x150>
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	47d0      	blx	sl
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d0ab      	beq.n	800b848 <_printf_i+0x164>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	079b      	lsls	r3, r3, #30
 800b8f4:	d413      	bmi.n	800b91e <_printf_i+0x23a>
 800b8f6:	68e0      	ldr	r0, [r4, #12]
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	4298      	cmp	r0, r3
 800b8fc:	bfb8      	it	lt
 800b8fe:	4618      	movlt	r0, r3
 800b900:	e7a4      	b.n	800b84c <_printf_i+0x168>
 800b902:	2301      	movs	r3, #1
 800b904:	4632      	mov	r2, r6
 800b906:	4649      	mov	r1, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	47d0      	blx	sl
 800b90c:	3001      	adds	r0, #1
 800b90e:	d09b      	beq.n	800b848 <_printf_i+0x164>
 800b910:	3501      	adds	r5, #1
 800b912:	68e3      	ldr	r3, [r4, #12]
 800b914:	9903      	ldr	r1, [sp, #12]
 800b916:	1a5b      	subs	r3, r3, r1
 800b918:	42ab      	cmp	r3, r5
 800b91a:	dcf2      	bgt.n	800b902 <_printf_i+0x21e>
 800b91c:	e7eb      	b.n	800b8f6 <_printf_i+0x212>
 800b91e:	2500      	movs	r5, #0
 800b920:	f104 0619 	add.w	r6, r4, #25
 800b924:	e7f5      	b.n	800b912 <_printf_i+0x22e>
 800b926:	bf00      	nop
 800b928:	0800eb5a 	.word	0x0800eb5a
 800b92c:	0800eb6b 	.word	0x0800eb6b

0800b930 <quorem>:
 800b930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	6903      	ldr	r3, [r0, #16]
 800b936:	690c      	ldr	r4, [r1, #16]
 800b938:	42a3      	cmp	r3, r4
 800b93a:	4607      	mov	r7, r0
 800b93c:	f2c0 8081 	blt.w	800ba42 <quorem+0x112>
 800b940:	3c01      	subs	r4, #1
 800b942:	f101 0814 	add.w	r8, r1, #20
 800b946:	f100 0514 	add.w	r5, r0, #20
 800b94a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b954:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b958:	3301      	adds	r3, #1
 800b95a:	429a      	cmp	r2, r3
 800b95c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b960:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b964:	fbb2 f6f3 	udiv	r6, r2, r3
 800b968:	d331      	bcc.n	800b9ce <quorem+0x9e>
 800b96a:	f04f 0e00 	mov.w	lr, #0
 800b96e:	4640      	mov	r0, r8
 800b970:	46ac      	mov	ip, r5
 800b972:	46f2      	mov	sl, lr
 800b974:	f850 2b04 	ldr.w	r2, [r0], #4
 800b978:	b293      	uxth	r3, r2
 800b97a:	fb06 e303 	mla	r3, r6, r3, lr
 800b97e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b982:	b29b      	uxth	r3, r3
 800b984:	ebaa 0303 	sub.w	r3, sl, r3
 800b988:	0c12      	lsrs	r2, r2, #16
 800b98a:	f8dc a000 	ldr.w	sl, [ip]
 800b98e:	fb06 e202 	mla	r2, r6, r2, lr
 800b992:	fa13 f38a 	uxtah	r3, r3, sl
 800b996:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b99a:	fa1f fa82 	uxth.w	sl, r2
 800b99e:	f8dc 2000 	ldr.w	r2, [ip]
 800b9a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b9a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9b0:	4581      	cmp	r9, r0
 800b9b2:	f84c 3b04 	str.w	r3, [ip], #4
 800b9b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9ba:	d2db      	bcs.n	800b974 <quorem+0x44>
 800b9bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9c0:	b92b      	cbnz	r3, 800b9ce <quorem+0x9e>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	3b04      	subs	r3, #4
 800b9c6:	429d      	cmp	r5, r3
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	d32e      	bcc.n	800ba2a <quorem+0xfa>
 800b9cc:	613c      	str	r4, [r7, #16]
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f001 f8b0 	bl	800cb34 <__mcmp>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	db24      	blt.n	800ba22 <quorem+0xf2>
 800b9d8:	3601      	adds	r6, #1
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f04f 0c00 	mov.w	ip, #0
 800b9e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9e4:	f8d0 e000 	ldr.w	lr, [r0]
 800b9e8:	b293      	uxth	r3, r2
 800b9ea:	ebac 0303 	sub.w	r3, ip, r3
 800b9ee:	0c12      	lsrs	r2, r2, #16
 800b9f0:	fa13 f38e 	uxtah	r3, r3, lr
 800b9f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba02:	45c1      	cmp	r9, r8
 800ba04:	f840 3b04 	str.w	r3, [r0], #4
 800ba08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba0c:	d2e8      	bcs.n	800b9e0 <quorem+0xb0>
 800ba0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba16:	b922      	cbnz	r2, 800ba22 <quorem+0xf2>
 800ba18:	3b04      	subs	r3, #4
 800ba1a:	429d      	cmp	r5, r3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	d30a      	bcc.n	800ba36 <quorem+0x106>
 800ba20:	613c      	str	r4, [r7, #16]
 800ba22:	4630      	mov	r0, r6
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	6812      	ldr	r2, [r2, #0]
 800ba2c:	3b04      	subs	r3, #4
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	d1cc      	bne.n	800b9cc <quorem+0x9c>
 800ba32:	3c01      	subs	r4, #1
 800ba34:	e7c7      	b.n	800b9c6 <quorem+0x96>
 800ba36:	6812      	ldr	r2, [r2, #0]
 800ba38:	3b04      	subs	r3, #4
 800ba3a:	2a00      	cmp	r2, #0
 800ba3c:	d1f0      	bne.n	800ba20 <quorem+0xf0>
 800ba3e:	3c01      	subs	r4, #1
 800ba40:	e7eb      	b.n	800ba1a <quorem+0xea>
 800ba42:	2000      	movs	r0, #0
 800ba44:	e7ee      	b.n	800ba24 <quorem+0xf4>
	...

0800ba48 <_dtoa_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	ed2d 8b02 	vpush	{d8}
 800ba50:	ec57 6b10 	vmov	r6, r7, d0
 800ba54:	b095      	sub	sp, #84	; 0x54
 800ba56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba5c:	9105      	str	r1, [sp, #20]
 800ba5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ba62:	4604      	mov	r4, r0
 800ba64:	9209      	str	r2, [sp, #36]	; 0x24
 800ba66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba68:	b975      	cbnz	r5, 800ba88 <_dtoa_r+0x40>
 800ba6a:	2010      	movs	r0, #16
 800ba6c:	f000 fddc 	bl	800c628 <malloc>
 800ba70:	4602      	mov	r2, r0
 800ba72:	6260      	str	r0, [r4, #36]	; 0x24
 800ba74:	b920      	cbnz	r0, 800ba80 <_dtoa_r+0x38>
 800ba76:	4bb2      	ldr	r3, [pc, #712]	; (800bd40 <_dtoa_r+0x2f8>)
 800ba78:	21ea      	movs	r1, #234	; 0xea
 800ba7a:	48b2      	ldr	r0, [pc, #712]	; (800bd44 <_dtoa_r+0x2fc>)
 800ba7c:	f001 fa24 	bl	800cec8 <__assert_func>
 800ba80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba84:	6005      	str	r5, [r0, #0]
 800ba86:	60c5      	str	r5, [r0, #12]
 800ba88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba8a:	6819      	ldr	r1, [r3, #0]
 800ba8c:	b151      	cbz	r1, 800baa4 <_dtoa_r+0x5c>
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	604a      	str	r2, [r1, #4]
 800ba92:	2301      	movs	r3, #1
 800ba94:	4093      	lsls	r3, r2
 800ba96:	608b      	str	r3, [r1, #8]
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fe0d 	bl	800c6b8 <_Bfree>
 800ba9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa0:	2200      	movs	r2, #0
 800baa2:	601a      	str	r2, [r3, #0]
 800baa4:	1e3b      	subs	r3, r7, #0
 800baa6:	bfb9      	ittee	lt
 800baa8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800baac:	9303      	strlt	r3, [sp, #12]
 800baae:	2300      	movge	r3, #0
 800bab0:	f8c8 3000 	strge.w	r3, [r8]
 800bab4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bab8:	4ba3      	ldr	r3, [pc, #652]	; (800bd48 <_dtoa_r+0x300>)
 800baba:	bfbc      	itt	lt
 800babc:	2201      	movlt	r2, #1
 800babe:	f8c8 2000 	strlt.w	r2, [r8]
 800bac2:	ea33 0309 	bics.w	r3, r3, r9
 800bac6:	d11b      	bne.n	800bb00 <_dtoa_r+0xb8>
 800bac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800baca:	f242 730f 	movw	r3, #9999	; 0x270f
 800bace:	6013      	str	r3, [r2, #0]
 800bad0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bad4:	4333      	orrs	r3, r6
 800bad6:	f000 857a 	beq.w	800c5ce <_dtoa_r+0xb86>
 800bada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800badc:	b963      	cbnz	r3, 800baf8 <_dtoa_r+0xb0>
 800bade:	4b9b      	ldr	r3, [pc, #620]	; (800bd4c <_dtoa_r+0x304>)
 800bae0:	e024      	b.n	800bb2c <_dtoa_r+0xe4>
 800bae2:	4b9b      	ldr	r3, [pc, #620]	; (800bd50 <_dtoa_r+0x308>)
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	3308      	adds	r3, #8
 800bae8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	9800      	ldr	r0, [sp, #0]
 800baee:	b015      	add	sp, #84	; 0x54
 800baf0:	ecbd 8b02 	vpop	{d8}
 800baf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf8:	4b94      	ldr	r3, [pc, #592]	; (800bd4c <_dtoa_r+0x304>)
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	3303      	adds	r3, #3
 800bafe:	e7f3      	b.n	800bae8 <_dtoa_r+0xa0>
 800bb00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb04:	2200      	movs	r2, #0
 800bb06:	ec51 0b17 	vmov	r0, r1, d7
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bb10:	f7f5 f802 	bl	8000b18 <__aeabi_dcmpeq>
 800bb14:	4680      	mov	r8, r0
 800bb16:	b158      	cbz	r0, 800bb30 <_dtoa_r+0xe8>
 800bb18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 8551 	beq.w	800c5c8 <_dtoa_r+0xb80>
 800bb26:	488b      	ldr	r0, [pc, #556]	; (800bd54 <_dtoa_r+0x30c>)
 800bb28:	6018      	str	r0, [r3, #0]
 800bb2a:	1e43      	subs	r3, r0, #1
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	e7dd      	b.n	800baec <_dtoa_r+0xa4>
 800bb30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bb34:	aa12      	add	r2, sp, #72	; 0x48
 800bb36:	a913      	add	r1, sp, #76	; 0x4c
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f001 f89f 	bl	800cc7c <__d2b>
 800bb3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb42:	4683      	mov	fp, r0
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d07c      	beq.n	800bc42 <_dtoa_r+0x1fa>
 800bb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bb4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bb56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb62:	4b7d      	ldr	r3, [pc, #500]	; (800bd58 <_dtoa_r+0x310>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fbb5 	bl	80002d8 <__aeabi_dsub>
 800bb6e:	a36e      	add	r3, pc, #440	; (adr r3, 800bd28 <_dtoa_r+0x2e0>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f7f4 fd68 	bl	8000648 <__aeabi_dmul>
 800bb78:	a36d      	add	r3, pc, #436	; (adr r3, 800bd30 <_dtoa_r+0x2e8>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fbad 	bl	80002dc <__adddf3>
 800bb82:	4606      	mov	r6, r0
 800bb84:	4628      	mov	r0, r5
 800bb86:	460f      	mov	r7, r1
 800bb88:	f7f4 fcf4 	bl	8000574 <__aeabi_i2d>
 800bb8c:	a36a      	add	r3, pc, #424	; (adr r3, 800bd38 <_dtoa_r+0x2f0>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f7f4 fd59 	bl	8000648 <__aeabi_dmul>
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	f7f4 fb9d 	bl	80002dc <__adddf3>
 800bba2:	4606      	mov	r6, r0
 800bba4:	460f      	mov	r7, r1
 800bba6:	f7f4 ffff 	bl	8000ba8 <__aeabi_d2iz>
 800bbaa:	2200      	movs	r2, #0
 800bbac:	4682      	mov	sl, r0
 800bbae:	2300      	movs	r3, #0
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 ffba 	bl	8000b2c <__aeabi_dcmplt>
 800bbb8:	b148      	cbz	r0, 800bbce <_dtoa_r+0x186>
 800bbba:	4650      	mov	r0, sl
 800bbbc:	f7f4 fcda 	bl	8000574 <__aeabi_i2d>
 800bbc0:	4632      	mov	r2, r6
 800bbc2:	463b      	mov	r3, r7
 800bbc4:	f7f4 ffa8 	bl	8000b18 <__aeabi_dcmpeq>
 800bbc8:	b908      	cbnz	r0, 800bbce <_dtoa_r+0x186>
 800bbca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbce:	f1ba 0f16 	cmp.w	sl, #22
 800bbd2:	d854      	bhi.n	800bc7e <_dtoa_r+0x236>
 800bbd4:	4b61      	ldr	r3, [pc, #388]	; (800bd5c <_dtoa_r+0x314>)
 800bbd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbe2:	f7f4 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d04b      	beq.n	800bc82 <_dtoa_r+0x23a>
 800bbea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbee:	2300      	movs	r3, #0
 800bbf0:	930e      	str	r3, [sp, #56]	; 0x38
 800bbf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbf4:	1b5d      	subs	r5, r3, r5
 800bbf6:	1e6b      	subs	r3, r5, #1
 800bbf8:	9304      	str	r3, [sp, #16]
 800bbfa:	bf43      	ittte	mi
 800bbfc:	2300      	movmi	r3, #0
 800bbfe:	f1c5 0801 	rsbmi	r8, r5, #1
 800bc02:	9304      	strmi	r3, [sp, #16]
 800bc04:	f04f 0800 	movpl.w	r8, #0
 800bc08:	f1ba 0f00 	cmp.w	sl, #0
 800bc0c:	db3b      	blt.n	800bc86 <_dtoa_r+0x23e>
 800bc0e:	9b04      	ldr	r3, [sp, #16]
 800bc10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bc14:	4453      	add	r3, sl
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	9306      	str	r3, [sp, #24]
 800bc1c:	9b05      	ldr	r3, [sp, #20]
 800bc1e:	2b09      	cmp	r3, #9
 800bc20:	d869      	bhi.n	800bcf6 <_dtoa_r+0x2ae>
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	bfc4      	itt	gt
 800bc26:	3b04      	subgt	r3, #4
 800bc28:	9305      	strgt	r3, [sp, #20]
 800bc2a:	9b05      	ldr	r3, [sp, #20]
 800bc2c:	f1a3 0302 	sub.w	r3, r3, #2
 800bc30:	bfcc      	ite	gt
 800bc32:	2500      	movgt	r5, #0
 800bc34:	2501      	movle	r5, #1
 800bc36:	2b03      	cmp	r3, #3
 800bc38:	d869      	bhi.n	800bd0e <_dtoa_r+0x2c6>
 800bc3a:	e8df f003 	tbb	[pc, r3]
 800bc3e:	4e2c      	.short	0x4e2c
 800bc40:	5a4c      	.short	0x5a4c
 800bc42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bc46:	441d      	add	r5, r3
 800bc48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc4c:	2b20      	cmp	r3, #32
 800bc4e:	bfc1      	itttt	gt
 800bc50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc58:	fa09 f303 	lslgt.w	r3, r9, r3
 800bc5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc60:	bfda      	itte	le
 800bc62:	f1c3 0320 	rsble	r3, r3, #32
 800bc66:	fa06 f003 	lslle.w	r0, r6, r3
 800bc6a:	4318      	orrgt	r0, r3
 800bc6c:	f7f4 fc72 	bl	8000554 <__aeabi_ui2d>
 800bc70:	2301      	movs	r3, #1
 800bc72:	4606      	mov	r6, r0
 800bc74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bc78:	3d01      	subs	r5, #1
 800bc7a:	9310      	str	r3, [sp, #64]	; 0x40
 800bc7c:	e771      	b.n	800bb62 <_dtoa_r+0x11a>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7b6      	b.n	800bbf0 <_dtoa_r+0x1a8>
 800bc82:	900e      	str	r0, [sp, #56]	; 0x38
 800bc84:	e7b5      	b.n	800bbf2 <_dtoa_r+0x1aa>
 800bc86:	f1ca 0300 	rsb	r3, sl, #0
 800bc8a:	9306      	str	r3, [sp, #24]
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	eba8 080a 	sub.w	r8, r8, sl
 800bc92:	930d      	str	r3, [sp, #52]	; 0x34
 800bc94:	e7c2      	b.n	800bc1c <_dtoa_r+0x1d4>
 800bc96:	2300      	movs	r3, #0
 800bc98:	9308      	str	r3, [sp, #32]
 800bc9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc39      	bgt.n	800bd14 <_dtoa_r+0x2cc>
 800bca0:	f04f 0901 	mov.w	r9, #1
 800bca4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bca8:	464b      	mov	r3, r9
 800bcaa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bcae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	6042      	str	r2, [r0, #4]
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	f102 0614 	add.w	r6, r2, #20
 800bcba:	429e      	cmp	r6, r3
 800bcbc:	6841      	ldr	r1, [r0, #4]
 800bcbe:	d92f      	bls.n	800bd20 <_dtoa_r+0x2d8>
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 fcb9 	bl	800c638 <_Balloc>
 800bcc6:	9000      	str	r0, [sp, #0]
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d14b      	bne.n	800bd64 <_dtoa_r+0x31c>
 800bccc:	4b24      	ldr	r3, [pc, #144]	; (800bd60 <_dtoa_r+0x318>)
 800bcce:	4602      	mov	r2, r0
 800bcd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bcd4:	e6d1      	b.n	800ba7a <_dtoa_r+0x32>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e7de      	b.n	800bc98 <_dtoa_r+0x250>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	9308      	str	r3, [sp, #32]
 800bcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce0:	eb0a 0903 	add.w	r9, sl, r3
 800bce4:	f109 0301 	add.w	r3, r9, #1
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	bfb8      	it	lt
 800bcee:	2301      	movlt	r3, #1
 800bcf0:	e7dd      	b.n	800bcae <_dtoa_r+0x266>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e7f2      	b.n	800bcdc <_dtoa_r+0x294>
 800bcf6:	2501      	movs	r5, #1
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9305      	str	r3, [sp, #20]
 800bcfc:	9508      	str	r5, [sp, #32]
 800bcfe:	f04f 39ff 	mov.w	r9, #4294967295
 800bd02:	2200      	movs	r2, #0
 800bd04:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd08:	2312      	movs	r3, #18
 800bd0a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd0c:	e7cf      	b.n	800bcae <_dtoa_r+0x266>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	9308      	str	r3, [sp, #32]
 800bd12:	e7f4      	b.n	800bcfe <_dtoa_r+0x2b6>
 800bd14:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bd18:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd1c:	464b      	mov	r3, r9
 800bd1e:	e7c6      	b.n	800bcae <_dtoa_r+0x266>
 800bd20:	3101      	adds	r1, #1
 800bd22:	6041      	str	r1, [r0, #4]
 800bd24:	0052      	lsls	r2, r2, #1
 800bd26:	e7c6      	b.n	800bcb6 <_dtoa_r+0x26e>
 800bd28:	636f4361 	.word	0x636f4361
 800bd2c:	3fd287a7 	.word	0x3fd287a7
 800bd30:	8b60c8b3 	.word	0x8b60c8b3
 800bd34:	3fc68a28 	.word	0x3fc68a28
 800bd38:	509f79fb 	.word	0x509f79fb
 800bd3c:	3fd34413 	.word	0x3fd34413
 800bd40:	0800eb89 	.word	0x0800eb89
 800bd44:	0800eba0 	.word	0x0800eba0
 800bd48:	7ff00000 	.word	0x7ff00000
 800bd4c:	0800eb85 	.word	0x0800eb85
 800bd50:	0800eb7c 	.word	0x0800eb7c
 800bd54:	0800eb59 	.word	0x0800eb59
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	0800ec98 	.word	0x0800ec98
 800bd60:	0800ebff 	.word	0x0800ebff
 800bd64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd66:	9a00      	ldr	r2, [sp, #0]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	9b01      	ldr	r3, [sp, #4]
 800bd6c:	2b0e      	cmp	r3, #14
 800bd6e:	f200 80ad 	bhi.w	800becc <_dtoa_r+0x484>
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	f000 80aa 	beq.w	800becc <_dtoa_r+0x484>
 800bd78:	f1ba 0f00 	cmp.w	sl, #0
 800bd7c:	dd36      	ble.n	800bdec <_dtoa_r+0x3a4>
 800bd7e:	4ac3      	ldr	r2, [pc, #780]	; (800c08c <_dtoa_r+0x644>)
 800bd80:	f00a 030f 	and.w	r3, sl, #15
 800bd84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd88:	ed93 7b00 	vldr	d7, [r3]
 800bd8c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bd90:	ea4f 172a 	mov.w	r7, sl, asr #4
 800bd94:	eeb0 8a47 	vmov.f32	s16, s14
 800bd98:	eef0 8a67 	vmov.f32	s17, s15
 800bd9c:	d016      	beq.n	800bdcc <_dtoa_r+0x384>
 800bd9e:	4bbc      	ldr	r3, [pc, #752]	; (800c090 <_dtoa_r+0x648>)
 800bda0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bda4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bda8:	f7f4 fd78 	bl	800089c <__aeabi_ddiv>
 800bdac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb0:	f007 070f 	and.w	r7, r7, #15
 800bdb4:	2503      	movs	r5, #3
 800bdb6:	4eb6      	ldr	r6, [pc, #728]	; (800c090 <_dtoa_r+0x648>)
 800bdb8:	b957      	cbnz	r7, 800bdd0 <_dtoa_r+0x388>
 800bdba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdbe:	ec53 2b18 	vmov	r2, r3, d8
 800bdc2:	f7f4 fd6b 	bl	800089c <__aeabi_ddiv>
 800bdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdca:	e029      	b.n	800be20 <_dtoa_r+0x3d8>
 800bdcc:	2502      	movs	r5, #2
 800bdce:	e7f2      	b.n	800bdb6 <_dtoa_r+0x36e>
 800bdd0:	07f9      	lsls	r1, r7, #31
 800bdd2:	d508      	bpl.n	800bde6 <_dtoa_r+0x39e>
 800bdd4:	ec51 0b18 	vmov	r0, r1, d8
 800bdd8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bddc:	f7f4 fc34 	bl	8000648 <__aeabi_dmul>
 800bde0:	ec41 0b18 	vmov	d8, r0, r1
 800bde4:	3501      	adds	r5, #1
 800bde6:	107f      	asrs	r7, r7, #1
 800bde8:	3608      	adds	r6, #8
 800bdea:	e7e5      	b.n	800bdb8 <_dtoa_r+0x370>
 800bdec:	f000 80a6 	beq.w	800bf3c <_dtoa_r+0x4f4>
 800bdf0:	f1ca 0600 	rsb	r6, sl, #0
 800bdf4:	4ba5      	ldr	r3, [pc, #660]	; (800c08c <_dtoa_r+0x644>)
 800bdf6:	4fa6      	ldr	r7, [pc, #664]	; (800c090 <_dtoa_r+0x648>)
 800bdf8:	f006 020f 	and.w	r2, r6, #15
 800bdfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800be08:	f7f4 fc1e 	bl	8000648 <__aeabi_dmul>
 800be0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be10:	1136      	asrs	r6, r6, #4
 800be12:	2300      	movs	r3, #0
 800be14:	2502      	movs	r5, #2
 800be16:	2e00      	cmp	r6, #0
 800be18:	f040 8085 	bne.w	800bf26 <_dtoa_r+0x4de>
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1d2      	bne.n	800bdc6 <_dtoa_r+0x37e>
 800be20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 808c 	beq.w	800bf40 <_dtoa_r+0x4f8>
 800be28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be2c:	4b99      	ldr	r3, [pc, #612]	; (800c094 <_dtoa_r+0x64c>)
 800be2e:	2200      	movs	r2, #0
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fe7a 	bl	8000b2c <__aeabi_dcmplt>
 800be38:	2800      	cmp	r0, #0
 800be3a:	f000 8081 	beq.w	800bf40 <_dtoa_r+0x4f8>
 800be3e:	9b01      	ldr	r3, [sp, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d07d      	beq.n	800bf40 <_dtoa_r+0x4f8>
 800be44:	f1b9 0f00 	cmp.w	r9, #0
 800be48:	dd3c      	ble.n	800bec4 <_dtoa_r+0x47c>
 800be4a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	2200      	movs	r2, #0
 800be52:	4b91      	ldr	r3, [pc, #580]	; (800c098 <_dtoa_r+0x650>)
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fbf6 	bl	8000648 <__aeabi_dmul>
 800be5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be60:	3501      	adds	r5, #1
 800be62:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800be66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be6a:	4628      	mov	r0, r5
 800be6c:	f7f4 fb82 	bl	8000574 <__aeabi_i2d>
 800be70:	4632      	mov	r2, r6
 800be72:	463b      	mov	r3, r7
 800be74:	f7f4 fbe8 	bl	8000648 <__aeabi_dmul>
 800be78:	4b88      	ldr	r3, [pc, #544]	; (800c09c <_dtoa_r+0x654>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	f7f4 fa2e 	bl	80002dc <__adddf3>
 800be80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800be84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d15c      	bne.n	800bf4a <_dtoa_r+0x502>
 800be90:	4b83      	ldr	r3, [pc, #524]	; (800c0a0 <_dtoa_r+0x658>)
 800be92:	2200      	movs	r2, #0
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fa1e 	bl	80002d8 <__aeabi_dsub>
 800be9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea0:	4606      	mov	r6, r0
 800bea2:	460f      	mov	r7, r1
 800bea4:	f7f4 fe60 	bl	8000b68 <__aeabi_dcmpgt>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f040 8296 	bne.w	800c3da <_dtoa_r+0x992>
 800beae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800beb2:	4630      	mov	r0, r6
 800beb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 fe37 	bl	8000b2c <__aeabi_dcmplt>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f040 8288 	bne.w	800c3d4 <_dtoa_r+0x98c>
 800bec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bec8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800becc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f2c0 8158 	blt.w	800c184 <_dtoa_r+0x73c>
 800bed4:	f1ba 0f0e 	cmp.w	sl, #14
 800bed8:	f300 8154 	bgt.w	800c184 <_dtoa_r+0x73c>
 800bedc:	4b6b      	ldr	r3, [pc, #428]	; (800c08c <_dtoa_r+0x644>)
 800bede:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bee2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f280 80e3 	bge.w	800c0b4 <_dtoa_r+0x66c>
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f300 80df 	bgt.w	800c0b4 <_dtoa_r+0x66c>
 800bef6:	f040 826d 	bne.w	800c3d4 <_dtoa_r+0x98c>
 800befa:	4b69      	ldr	r3, [pc, #420]	; (800c0a0 <_dtoa_r+0x658>)
 800befc:	2200      	movs	r2, #0
 800befe:	4640      	mov	r0, r8
 800bf00:	4649      	mov	r1, r9
 800bf02:	f7f4 fba1 	bl	8000648 <__aeabi_dmul>
 800bf06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0a:	f7f4 fe23 	bl	8000b54 <__aeabi_dcmpge>
 800bf0e:	9e01      	ldr	r6, [sp, #4]
 800bf10:	4637      	mov	r7, r6
 800bf12:	2800      	cmp	r0, #0
 800bf14:	f040 8243 	bne.w	800c39e <_dtoa_r+0x956>
 800bf18:	9d00      	ldr	r5, [sp, #0]
 800bf1a:	2331      	movs	r3, #49	; 0x31
 800bf1c:	f805 3b01 	strb.w	r3, [r5], #1
 800bf20:	f10a 0a01 	add.w	sl, sl, #1
 800bf24:	e23f      	b.n	800c3a6 <_dtoa_r+0x95e>
 800bf26:	07f2      	lsls	r2, r6, #31
 800bf28:	d505      	bpl.n	800bf36 <_dtoa_r+0x4ee>
 800bf2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2e:	f7f4 fb8b 	bl	8000648 <__aeabi_dmul>
 800bf32:	3501      	adds	r5, #1
 800bf34:	2301      	movs	r3, #1
 800bf36:	1076      	asrs	r6, r6, #1
 800bf38:	3708      	adds	r7, #8
 800bf3a:	e76c      	b.n	800be16 <_dtoa_r+0x3ce>
 800bf3c:	2502      	movs	r5, #2
 800bf3e:	e76f      	b.n	800be20 <_dtoa_r+0x3d8>
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	f8cd a01c 	str.w	sl, [sp, #28]
 800bf46:	930c      	str	r3, [sp, #48]	; 0x30
 800bf48:	e78d      	b.n	800be66 <_dtoa_r+0x41e>
 800bf4a:	9900      	ldr	r1, [sp, #0]
 800bf4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bf4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf50:	4b4e      	ldr	r3, [pc, #312]	; (800c08c <_dtoa_r+0x644>)
 800bf52:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf56:	4401      	add	r1, r0
 800bf58:	9102      	str	r1, [sp, #8]
 800bf5a:	9908      	ldr	r1, [sp, #32]
 800bf5c:	eeb0 8a47 	vmov.f32	s16, s14
 800bf60:	eef0 8a67 	vmov.f32	s17, s15
 800bf64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	d045      	beq.n	800bffc <_dtoa_r+0x5b4>
 800bf70:	494c      	ldr	r1, [pc, #304]	; (800c0a4 <_dtoa_r+0x65c>)
 800bf72:	2000      	movs	r0, #0
 800bf74:	f7f4 fc92 	bl	800089c <__aeabi_ddiv>
 800bf78:	ec53 2b18 	vmov	r2, r3, d8
 800bf7c:	f7f4 f9ac 	bl	80002d8 <__aeabi_dsub>
 800bf80:	9d00      	ldr	r5, [sp, #0]
 800bf82:	ec41 0b18 	vmov	d8, r0, r1
 800bf86:	4639      	mov	r1, r7
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7f4 fe0d 	bl	8000ba8 <__aeabi_d2iz>
 800bf8e:	900c      	str	r0, [sp, #48]	; 0x30
 800bf90:	f7f4 faf0 	bl	8000574 <__aeabi_i2d>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	4630      	mov	r0, r6
 800bf9a:	4639      	mov	r1, r7
 800bf9c:	f7f4 f99c 	bl	80002d8 <__aeabi_dsub>
 800bfa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfa2:	3330      	adds	r3, #48	; 0x30
 800bfa4:	f805 3b01 	strb.w	r3, [r5], #1
 800bfa8:	ec53 2b18 	vmov	r2, r3, d8
 800bfac:	4606      	mov	r6, r0
 800bfae:	460f      	mov	r7, r1
 800bfb0:	f7f4 fdbc 	bl	8000b2c <__aeabi_dcmplt>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	d165      	bne.n	800c084 <_dtoa_r+0x63c>
 800bfb8:	4632      	mov	r2, r6
 800bfba:	463b      	mov	r3, r7
 800bfbc:	4935      	ldr	r1, [pc, #212]	; (800c094 <_dtoa_r+0x64c>)
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f7f4 f98a 	bl	80002d8 <__aeabi_dsub>
 800bfc4:	ec53 2b18 	vmov	r2, r3, d8
 800bfc8:	f7f4 fdb0 	bl	8000b2c <__aeabi_dcmplt>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	f040 80b9 	bne.w	800c144 <_dtoa_r+0x6fc>
 800bfd2:	9b02      	ldr	r3, [sp, #8]
 800bfd4:	429d      	cmp	r5, r3
 800bfd6:	f43f af75 	beq.w	800bec4 <_dtoa_r+0x47c>
 800bfda:	4b2f      	ldr	r3, [pc, #188]	; (800c098 <_dtoa_r+0x650>)
 800bfdc:	ec51 0b18 	vmov	r0, r1, d8
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f7f4 fb31 	bl	8000648 <__aeabi_dmul>
 800bfe6:	4b2c      	ldr	r3, [pc, #176]	; (800c098 <_dtoa_r+0x650>)
 800bfe8:	ec41 0b18 	vmov	d8, r0, r1
 800bfec:	2200      	movs	r2, #0
 800bfee:	4630      	mov	r0, r6
 800bff0:	4639      	mov	r1, r7
 800bff2:	f7f4 fb29 	bl	8000648 <__aeabi_dmul>
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	e7c4      	b.n	800bf86 <_dtoa_r+0x53e>
 800bffc:	ec51 0b17 	vmov	r0, r1, d7
 800c000:	f7f4 fb22 	bl	8000648 <__aeabi_dmul>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	9d00      	ldr	r5, [sp, #0]
 800c008:	930c      	str	r3, [sp, #48]	; 0x30
 800c00a:	ec41 0b18 	vmov	d8, r0, r1
 800c00e:	4639      	mov	r1, r7
 800c010:	4630      	mov	r0, r6
 800c012:	f7f4 fdc9 	bl	8000ba8 <__aeabi_d2iz>
 800c016:	9011      	str	r0, [sp, #68]	; 0x44
 800c018:	f7f4 faac 	bl	8000574 <__aeabi_i2d>
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4630      	mov	r0, r6
 800c022:	4639      	mov	r1, r7
 800c024:	f7f4 f958 	bl	80002d8 <__aeabi_dsub>
 800c028:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c02a:	3330      	adds	r3, #48	; 0x30
 800c02c:	f805 3b01 	strb.w	r3, [r5], #1
 800c030:	9b02      	ldr	r3, [sp, #8]
 800c032:	429d      	cmp	r5, r3
 800c034:	4606      	mov	r6, r0
 800c036:	460f      	mov	r7, r1
 800c038:	f04f 0200 	mov.w	r2, #0
 800c03c:	d134      	bne.n	800c0a8 <_dtoa_r+0x660>
 800c03e:	4b19      	ldr	r3, [pc, #100]	; (800c0a4 <_dtoa_r+0x65c>)
 800c040:	ec51 0b18 	vmov	r0, r1, d8
 800c044:	f7f4 f94a 	bl	80002dc <__adddf3>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4630      	mov	r0, r6
 800c04e:	4639      	mov	r1, r7
 800c050:	f7f4 fd8a 	bl	8000b68 <__aeabi_dcmpgt>
 800c054:	2800      	cmp	r0, #0
 800c056:	d175      	bne.n	800c144 <_dtoa_r+0x6fc>
 800c058:	ec53 2b18 	vmov	r2, r3, d8
 800c05c:	4911      	ldr	r1, [pc, #68]	; (800c0a4 <_dtoa_r+0x65c>)
 800c05e:	2000      	movs	r0, #0
 800c060:	f7f4 f93a 	bl	80002d8 <__aeabi_dsub>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4630      	mov	r0, r6
 800c06a:	4639      	mov	r1, r7
 800c06c:	f7f4 fd5e 	bl	8000b2c <__aeabi_dcmplt>
 800c070:	2800      	cmp	r0, #0
 800c072:	f43f af27 	beq.w	800bec4 <_dtoa_r+0x47c>
 800c076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c078:	1e6b      	subs	r3, r5, #1
 800c07a:	930c      	str	r3, [sp, #48]	; 0x30
 800c07c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c080:	2b30      	cmp	r3, #48	; 0x30
 800c082:	d0f8      	beq.n	800c076 <_dtoa_r+0x62e>
 800c084:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c088:	e04a      	b.n	800c120 <_dtoa_r+0x6d8>
 800c08a:	bf00      	nop
 800c08c:	0800ec98 	.word	0x0800ec98
 800c090:	0800ec70 	.word	0x0800ec70
 800c094:	3ff00000 	.word	0x3ff00000
 800c098:	40240000 	.word	0x40240000
 800c09c:	401c0000 	.word	0x401c0000
 800c0a0:	40140000 	.word	0x40140000
 800c0a4:	3fe00000 	.word	0x3fe00000
 800c0a8:	4baf      	ldr	r3, [pc, #700]	; (800c368 <_dtoa_r+0x920>)
 800c0aa:	f7f4 facd 	bl	8000648 <__aeabi_dmul>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	460f      	mov	r7, r1
 800c0b2:	e7ac      	b.n	800c00e <_dtoa_r+0x5c6>
 800c0b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0b8:	9d00      	ldr	r5, [sp, #0]
 800c0ba:	4642      	mov	r2, r8
 800c0bc:	464b      	mov	r3, r9
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	f7f4 fbeb 	bl	800089c <__aeabi_ddiv>
 800c0c6:	f7f4 fd6f 	bl	8000ba8 <__aeabi_d2iz>
 800c0ca:	9002      	str	r0, [sp, #8]
 800c0cc:	f7f4 fa52 	bl	8000574 <__aeabi_i2d>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	f7f4 fab8 	bl	8000648 <__aeabi_dmul>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	4630      	mov	r0, r6
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f7f4 f8fa 	bl	80002d8 <__aeabi_dsub>
 800c0e4:	9e02      	ldr	r6, [sp, #8]
 800c0e6:	9f01      	ldr	r7, [sp, #4]
 800c0e8:	3630      	adds	r6, #48	; 0x30
 800c0ea:	f805 6b01 	strb.w	r6, [r5], #1
 800c0ee:	9e00      	ldr	r6, [sp, #0]
 800c0f0:	1bae      	subs	r6, r5, r6
 800c0f2:	42b7      	cmp	r7, r6
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	d137      	bne.n	800c16a <_dtoa_r+0x722>
 800c0fa:	f7f4 f8ef 	bl	80002dc <__adddf3>
 800c0fe:	4642      	mov	r2, r8
 800c100:	464b      	mov	r3, r9
 800c102:	4606      	mov	r6, r0
 800c104:	460f      	mov	r7, r1
 800c106:	f7f4 fd2f 	bl	8000b68 <__aeabi_dcmpgt>
 800c10a:	b9c8      	cbnz	r0, 800c140 <_dtoa_r+0x6f8>
 800c10c:	4642      	mov	r2, r8
 800c10e:	464b      	mov	r3, r9
 800c110:	4630      	mov	r0, r6
 800c112:	4639      	mov	r1, r7
 800c114:	f7f4 fd00 	bl	8000b18 <__aeabi_dcmpeq>
 800c118:	b110      	cbz	r0, 800c120 <_dtoa_r+0x6d8>
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	07d9      	lsls	r1, r3, #31
 800c11e:	d40f      	bmi.n	800c140 <_dtoa_r+0x6f8>
 800c120:	4620      	mov	r0, r4
 800c122:	4659      	mov	r1, fp
 800c124:	f000 fac8 	bl	800c6b8 <_Bfree>
 800c128:	2300      	movs	r3, #0
 800c12a:	702b      	strb	r3, [r5, #0]
 800c12c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c12e:	f10a 0001 	add.w	r0, sl, #1
 800c132:	6018      	str	r0, [r3, #0]
 800c134:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c136:	2b00      	cmp	r3, #0
 800c138:	f43f acd8 	beq.w	800baec <_dtoa_r+0xa4>
 800c13c:	601d      	str	r5, [r3, #0]
 800c13e:	e4d5      	b.n	800baec <_dtoa_r+0xa4>
 800c140:	f8cd a01c 	str.w	sl, [sp, #28]
 800c144:	462b      	mov	r3, r5
 800c146:	461d      	mov	r5, r3
 800c148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c14c:	2a39      	cmp	r2, #57	; 0x39
 800c14e:	d108      	bne.n	800c162 <_dtoa_r+0x71a>
 800c150:	9a00      	ldr	r2, [sp, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d1f7      	bne.n	800c146 <_dtoa_r+0x6fe>
 800c156:	9a07      	ldr	r2, [sp, #28]
 800c158:	9900      	ldr	r1, [sp, #0]
 800c15a:	3201      	adds	r2, #1
 800c15c:	9207      	str	r2, [sp, #28]
 800c15e:	2230      	movs	r2, #48	; 0x30
 800c160:	700a      	strb	r2, [r1, #0]
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	3201      	adds	r2, #1
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	e78c      	b.n	800c084 <_dtoa_r+0x63c>
 800c16a:	4b7f      	ldr	r3, [pc, #508]	; (800c368 <_dtoa_r+0x920>)
 800c16c:	2200      	movs	r2, #0
 800c16e:	f7f4 fa6b 	bl	8000648 <__aeabi_dmul>
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	4606      	mov	r6, r0
 800c178:	460f      	mov	r7, r1
 800c17a:	f7f4 fccd 	bl	8000b18 <__aeabi_dcmpeq>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d09b      	beq.n	800c0ba <_dtoa_r+0x672>
 800c182:	e7cd      	b.n	800c120 <_dtoa_r+0x6d8>
 800c184:	9a08      	ldr	r2, [sp, #32]
 800c186:	2a00      	cmp	r2, #0
 800c188:	f000 80c4 	beq.w	800c314 <_dtoa_r+0x8cc>
 800c18c:	9a05      	ldr	r2, [sp, #20]
 800c18e:	2a01      	cmp	r2, #1
 800c190:	f300 80a8 	bgt.w	800c2e4 <_dtoa_r+0x89c>
 800c194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c196:	2a00      	cmp	r2, #0
 800c198:	f000 80a0 	beq.w	800c2dc <_dtoa_r+0x894>
 800c19c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1a0:	9e06      	ldr	r6, [sp, #24]
 800c1a2:	4645      	mov	r5, r8
 800c1a4:	9a04      	ldr	r2, [sp, #16]
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	441a      	add	r2, r3
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4498      	add	r8, r3
 800c1ae:	9204      	str	r2, [sp, #16]
 800c1b0:	f000 fb3e 	bl	800c830 <__i2b>
 800c1b4:	4607      	mov	r7, r0
 800c1b6:	2d00      	cmp	r5, #0
 800c1b8:	dd0b      	ble.n	800c1d2 <_dtoa_r+0x78a>
 800c1ba:	9b04      	ldr	r3, [sp, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	dd08      	ble.n	800c1d2 <_dtoa_r+0x78a>
 800c1c0:	42ab      	cmp	r3, r5
 800c1c2:	9a04      	ldr	r2, [sp, #16]
 800c1c4:	bfa8      	it	ge
 800c1c6:	462b      	movge	r3, r5
 800c1c8:	eba8 0803 	sub.w	r8, r8, r3
 800c1cc:	1aed      	subs	r5, r5, r3
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	9304      	str	r3, [sp, #16]
 800c1d2:	9b06      	ldr	r3, [sp, #24]
 800c1d4:	b1fb      	cbz	r3, 800c216 <_dtoa_r+0x7ce>
 800c1d6:	9b08      	ldr	r3, [sp, #32]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 809f 	beq.w	800c31c <_dtoa_r+0x8d4>
 800c1de:	2e00      	cmp	r6, #0
 800c1e0:	dd11      	ble.n	800c206 <_dtoa_r+0x7be>
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	4632      	mov	r2, r6
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 fbde 	bl	800c9a8 <__pow5mult>
 800c1ec:	465a      	mov	r2, fp
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fb32 	bl	800c85c <__multiply>
 800c1f8:	4659      	mov	r1, fp
 800c1fa:	9007      	str	r0, [sp, #28]
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 fa5b 	bl	800c6b8 <_Bfree>
 800c202:	9b07      	ldr	r3, [sp, #28]
 800c204:	469b      	mov	fp, r3
 800c206:	9b06      	ldr	r3, [sp, #24]
 800c208:	1b9a      	subs	r2, r3, r6
 800c20a:	d004      	beq.n	800c216 <_dtoa_r+0x7ce>
 800c20c:	4659      	mov	r1, fp
 800c20e:	4620      	mov	r0, r4
 800c210:	f000 fbca 	bl	800c9a8 <__pow5mult>
 800c214:	4683      	mov	fp, r0
 800c216:	2101      	movs	r1, #1
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fb09 	bl	800c830 <__i2b>
 800c21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c220:	2b00      	cmp	r3, #0
 800c222:	4606      	mov	r6, r0
 800c224:	dd7c      	ble.n	800c320 <_dtoa_r+0x8d8>
 800c226:	461a      	mov	r2, r3
 800c228:	4601      	mov	r1, r0
 800c22a:	4620      	mov	r0, r4
 800c22c:	f000 fbbc 	bl	800c9a8 <__pow5mult>
 800c230:	9b05      	ldr	r3, [sp, #20]
 800c232:	2b01      	cmp	r3, #1
 800c234:	4606      	mov	r6, r0
 800c236:	dd76      	ble.n	800c326 <_dtoa_r+0x8de>
 800c238:	2300      	movs	r3, #0
 800c23a:	9306      	str	r3, [sp, #24]
 800c23c:	6933      	ldr	r3, [r6, #16]
 800c23e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c242:	6918      	ldr	r0, [r3, #16]
 800c244:	f000 faa4 	bl	800c790 <__hi0bits>
 800c248:	f1c0 0020 	rsb	r0, r0, #32
 800c24c:	9b04      	ldr	r3, [sp, #16]
 800c24e:	4418      	add	r0, r3
 800c250:	f010 001f 	ands.w	r0, r0, #31
 800c254:	f000 8086 	beq.w	800c364 <_dtoa_r+0x91c>
 800c258:	f1c0 0320 	rsb	r3, r0, #32
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	dd7f      	ble.n	800c360 <_dtoa_r+0x918>
 800c260:	f1c0 001c 	rsb	r0, r0, #28
 800c264:	9b04      	ldr	r3, [sp, #16]
 800c266:	4403      	add	r3, r0
 800c268:	4480      	add	r8, r0
 800c26a:	4405      	add	r5, r0
 800c26c:	9304      	str	r3, [sp, #16]
 800c26e:	f1b8 0f00 	cmp.w	r8, #0
 800c272:	dd05      	ble.n	800c280 <_dtoa_r+0x838>
 800c274:	4659      	mov	r1, fp
 800c276:	4642      	mov	r2, r8
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 fbef 	bl	800ca5c <__lshift>
 800c27e:	4683      	mov	fp, r0
 800c280:	9b04      	ldr	r3, [sp, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	dd05      	ble.n	800c292 <_dtoa_r+0x84a>
 800c286:	4631      	mov	r1, r6
 800c288:	461a      	mov	r2, r3
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fbe6 	bl	800ca5c <__lshift>
 800c290:	4606      	mov	r6, r0
 800c292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c294:	2b00      	cmp	r3, #0
 800c296:	d069      	beq.n	800c36c <_dtoa_r+0x924>
 800c298:	4631      	mov	r1, r6
 800c29a:	4658      	mov	r0, fp
 800c29c:	f000 fc4a 	bl	800cb34 <__mcmp>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	da63      	bge.n	800c36c <_dtoa_r+0x924>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4659      	mov	r1, fp
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fa26 	bl	800c6fc <__multadd>
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2b6:	4683      	mov	fp, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 818f 	beq.w	800c5dc <_dtoa_r+0xb94>
 800c2be:	4639      	mov	r1, r7
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	220a      	movs	r2, #10
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f000 fa19 	bl	800c6fc <__multadd>
 800c2ca:	f1b9 0f00 	cmp.w	r9, #0
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	f300 808e 	bgt.w	800c3f0 <_dtoa_r+0x9a8>
 800c2d4:	9b05      	ldr	r3, [sp, #20]
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	dc50      	bgt.n	800c37c <_dtoa_r+0x934>
 800c2da:	e089      	b.n	800c3f0 <_dtoa_r+0x9a8>
 800c2dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c2de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2e2:	e75d      	b.n	800c1a0 <_dtoa_r+0x758>
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	1e5e      	subs	r6, r3, #1
 800c2e8:	9b06      	ldr	r3, [sp, #24]
 800c2ea:	42b3      	cmp	r3, r6
 800c2ec:	bfbf      	itttt	lt
 800c2ee:	9b06      	ldrlt	r3, [sp, #24]
 800c2f0:	9606      	strlt	r6, [sp, #24]
 800c2f2:	1af2      	sublt	r2, r6, r3
 800c2f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c2f6:	bfb6      	itet	lt
 800c2f8:	189b      	addlt	r3, r3, r2
 800c2fa:	1b9e      	subge	r6, r3, r6
 800c2fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c2fe:	9b01      	ldr	r3, [sp, #4]
 800c300:	bfb8      	it	lt
 800c302:	2600      	movlt	r6, #0
 800c304:	2b00      	cmp	r3, #0
 800c306:	bfb5      	itete	lt
 800c308:	eba8 0503 	sublt.w	r5, r8, r3
 800c30c:	9b01      	ldrge	r3, [sp, #4]
 800c30e:	2300      	movlt	r3, #0
 800c310:	4645      	movge	r5, r8
 800c312:	e747      	b.n	800c1a4 <_dtoa_r+0x75c>
 800c314:	9e06      	ldr	r6, [sp, #24]
 800c316:	9f08      	ldr	r7, [sp, #32]
 800c318:	4645      	mov	r5, r8
 800c31a:	e74c      	b.n	800c1b6 <_dtoa_r+0x76e>
 800c31c:	9a06      	ldr	r2, [sp, #24]
 800c31e:	e775      	b.n	800c20c <_dtoa_r+0x7c4>
 800c320:	9b05      	ldr	r3, [sp, #20]
 800c322:	2b01      	cmp	r3, #1
 800c324:	dc18      	bgt.n	800c358 <_dtoa_r+0x910>
 800c326:	9b02      	ldr	r3, [sp, #8]
 800c328:	b9b3      	cbnz	r3, 800c358 <_dtoa_r+0x910>
 800c32a:	9b03      	ldr	r3, [sp, #12]
 800c32c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c330:	b9a3      	cbnz	r3, 800c35c <_dtoa_r+0x914>
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c338:	0d1b      	lsrs	r3, r3, #20
 800c33a:	051b      	lsls	r3, r3, #20
 800c33c:	b12b      	cbz	r3, 800c34a <_dtoa_r+0x902>
 800c33e:	9b04      	ldr	r3, [sp, #16]
 800c340:	3301      	adds	r3, #1
 800c342:	9304      	str	r3, [sp, #16]
 800c344:	f108 0801 	add.w	r8, r8, #1
 800c348:	2301      	movs	r3, #1
 800c34a:	9306      	str	r3, [sp, #24]
 800c34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f47f af74 	bne.w	800c23c <_dtoa_r+0x7f4>
 800c354:	2001      	movs	r0, #1
 800c356:	e779      	b.n	800c24c <_dtoa_r+0x804>
 800c358:	2300      	movs	r3, #0
 800c35a:	e7f6      	b.n	800c34a <_dtoa_r+0x902>
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	e7f4      	b.n	800c34a <_dtoa_r+0x902>
 800c360:	d085      	beq.n	800c26e <_dtoa_r+0x826>
 800c362:	4618      	mov	r0, r3
 800c364:	301c      	adds	r0, #28
 800c366:	e77d      	b.n	800c264 <_dtoa_r+0x81c>
 800c368:	40240000 	.word	0x40240000
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dc38      	bgt.n	800c3e4 <_dtoa_r+0x99c>
 800c372:	9b05      	ldr	r3, [sp, #20]
 800c374:	2b02      	cmp	r3, #2
 800c376:	dd35      	ble.n	800c3e4 <_dtoa_r+0x99c>
 800c378:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c37c:	f1b9 0f00 	cmp.w	r9, #0
 800c380:	d10d      	bne.n	800c39e <_dtoa_r+0x956>
 800c382:	4631      	mov	r1, r6
 800c384:	464b      	mov	r3, r9
 800c386:	2205      	movs	r2, #5
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 f9b7 	bl	800c6fc <__multadd>
 800c38e:	4601      	mov	r1, r0
 800c390:	4606      	mov	r6, r0
 800c392:	4658      	mov	r0, fp
 800c394:	f000 fbce 	bl	800cb34 <__mcmp>
 800c398:	2800      	cmp	r0, #0
 800c39a:	f73f adbd 	bgt.w	800bf18 <_dtoa_r+0x4d0>
 800c39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a0:	9d00      	ldr	r5, [sp, #0]
 800c3a2:	ea6f 0a03 	mvn.w	sl, r3
 800c3a6:	f04f 0800 	mov.w	r8, #0
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 f983 	bl	800c6b8 <_Bfree>
 800c3b2:	2f00      	cmp	r7, #0
 800c3b4:	f43f aeb4 	beq.w	800c120 <_dtoa_r+0x6d8>
 800c3b8:	f1b8 0f00 	cmp.w	r8, #0
 800c3bc:	d005      	beq.n	800c3ca <_dtoa_r+0x982>
 800c3be:	45b8      	cmp	r8, r7
 800c3c0:	d003      	beq.n	800c3ca <_dtoa_r+0x982>
 800c3c2:	4641      	mov	r1, r8
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 f977 	bl	800c6b8 <_Bfree>
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 f973 	bl	800c6b8 <_Bfree>
 800c3d2:	e6a5      	b.n	800c120 <_dtoa_r+0x6d8>
 800c3d4:	2600      	movs	r6, #0
 800c3d6:	4637      	mov	r7, r6
 800c3d8:	e7e1      	b.n	800c39e <_dtoa_r+0x956>
 800c3da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c3dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3e0:	4637      	mov	r7, r6
 800c3e2:	e599      	b.n	800bf18 <_dtoa_r+0x4d0>
 800c3e4:	9b08      	ldr	r3, [sp, #32]
 800c3e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 80fd 	beq.w	800c5ea <_dtoa_r+0xba2>
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	dd05      	ble.n	800c400 <_dtoa_r+0x9b8>
 800c3f4:	4639      	mov	r1, r7
 800c3f6:	462a      	mov	r2, r5
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fb2f 	bl	800ca5c <__lshift>
 800c3fe:	4607      	mov	r7, r0
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d05c      	beq.n	800c4c0 <_dtoa_r+0xa78>
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 f915 	bl	800c638 <_Balloc>
 800c40e:	4605      	mov	r5, r0
 800c410:	b928      	cbnz	r0, 800c41e <_dtoa_r+0x9d6>
 800c412:	4b80      	ldr	r3, [pc, #512]	; (800c614 <_dtoa_r+0xbcc>)
 800c414:	4602      	mov	r2, r0
 800c416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c41a:	f7ff bb2e 	b.w	800ba7a <_dtoa_r+0x32>
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	3202      	adds	r2, #2
 800c422:	0092      	lsls	r2, r2, #2
 800c424:	f107 010c 	add.w	r1, r7, #12
 800c428:	300c      	adds	r0, #12
 800c42a:	f7fe fe01 	bl	800b030 <memcpy>
 800c42e:	2201      	movs	r2, #1
 800c430:	4629      	mov	r1, r5
 800c432:	4620      	mov	r0, r4
 800c434:	f000 fb12 	bl	800ca5c <__lshift>
 800c438:	9b00      	ldr	r3, [sp, #0]
 800c43a:	3301      	adds	r3, #1
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	444b      	add	r3, r9
 800c442:	9307      	str	r3, [sp, #28]
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	46b8      	mov	r8, r7
 800c44c:	9306      	str	r3, [sp, #24]
 800c44e:	4607      	mov	r7, r0
 800c450:	9b01      	ldr	r3, [sp, #4]
 800c452:	4631      	mov	r1, r6
 800c454:	3b01      	subs	r3, #1
 800c456:	4658      	mov	r0, fp
 800c458:	9302      	str	r3, [sp, #8]
 800c45a:	f7ff fa69 	bl	800b930 <quorem>
 800c45e:	4603      	mov	r3, r0
 800c460:	3330      	adds	r3, #48	; 0x30
 800c462:	9004      	str	r0, [sp, #16]
 800c464:	4641      	mov	r1, r8
 800c466:	4658      	mov	r0, fp
 800c468:	9308      	str	r3, [sp, #32]
 800c46a:	f000 fb63 	bl	800cb34 <__mcmp>
 800c46e:	463a      	mov	r2, r7
 800c470:	4681      	mov	r9, r0
 800c472:	4631      	mov	r1, r6
 800c474:	4620      	mov	r0, r4
 800c476:	f000 fb79 	bl	800cb6c <__mdiff>
 800c47a:	68c2      	ldr	r2, [r0, #12]
 800c47c:	9b08      	ldr	r3, [sp, #32]
 800c47e:	4605      	mov	r5, r0
 800c480:	bb02      	cbnz	r2, 800c4c4 <_dtoa_r+0xa7c>
 800c482:	4601      	mov	r1, r0
 800c484:	4658      	mov	r0, fp
 800c486:	f000 fb55 	bl	800cb34 <__mcmp>
 800c48a:	9b08      	ldr	r3, [sp, #32]
 800c48c:	4602      	mov	r2, r0
 800c48e:	4629      	mov	r1, r5
 800c490:	4620      	mov	r0, r4
 800c492:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c496:	f000 f90f 	bl	800c6b8 <_Bfree>
 800c49a:	9b05      	ldr	r3, [sp, #20]
 800c49c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c49e:	9d01      	ldr	r5, [sp, #4]
 800c4a0:	ea43 0102 	orr.w	r1, r3, r2
 800c4a4:	9b06      	ldr	r3, [sp, #24]
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	9b08      	ldr	r3, [sp, #32]
 800c4aa:	d10d      	bne.n	800c4c8 <_dtoa_r+0xa80>
 800c4ac:	2b39      	cmp	r3, #57	; 0x39
 800c4ae:	d029      	beq.n	800c504 <_dtoa_r+0xabc>
 800c4b0:	f1b9 0f00 	cmp.w	r9, #0
 800c4b4:	dd01      	ble.n	800c4ba <_dtoa_r+0xa72>
 800c4b6:	9b04      	ldr	r3, [sp, #16]
 800c4b8:	3331      	adds	r3, #49	; 0x31
 800c4ba:	9a02      	ldr	r2, [sp, #8]
 800c4bc:	7013      	strb	r3, [r2, #0]
 800c4be:	e774      	b.n	800c3aa <_dtoa_r+0x962>
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	e7b9      	b.n	800c438 <_dtoa_r+0x9f0>
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	e7e2      	b.n	800c48e <_dtoa_r+0xa46>
 800c4c8:	f1b9 0f00 	cmp.w	r9, #0
 800c4cc:	db06      	blt.n	800c4dc <_dtoa_r+0xa94>
 800c4ce:	9905      	ldr	r1, [sp, #20]
 800c4d0:	ea41 0909 	orr.w	r9, r1, r9
 800c4d4:	9906      	ldr	r1, [sp, #24]
 800c4d6:	ea59 0101 	orrs.w	r1, r9, r1
 800c4da:	d120      	bne.n	800c51e <_dtoa_r+0xad6>
 800c4dc:	2a00      	cmp	r2, #0
 800c4de:	ddec      	ble.n	800c4ba <_dtoa_r+0xa72>
 800c4e0:	4659      	mov	r1, fp
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	f000 fab8 	bl	800ca5c <__lshift>
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4683      	mov	fp, r0
 800c4f0:	f000 fb20 	bl	800cb34 <__mcmp>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	dc02      	bgt.n	800c500 <_dtoa_r+0xab8>
 800c4fa:	d1de      	bne.n	800c4ba <_dtoa_r+0xa72>
 800c4fc:	07da      	lsls	r2, r3, #31
 800c4fe:	d5dc      	bpl.n	800c4ba <_dtoa_r+0xa72>
 800c500:	2b39      	cmp	r3, #57	; 0x39
 800c502:	d1d8      	bne.n	800c4b6 <_dtoa_r+0xa6e>
 800c504:	9a02      	ldr	r2, [sp, #8]
 800c506:	2339      	movs	r3, #57	; 0x39
 800c508:	7013      	strb	r3, [r2, #0]
 800c50a:	462b      	mov	r3, r5
 800c50c:	461d      	mov	r5, r3
 800c50e:	3b01      	subs	r3, #1
 800c510:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c514:	2a39      	cmp	r2, #57	; 0x39
 800c516:	d050      	beq.n	800c5ba <_dtoa_r+0xb72>
 800c518:	3201      	adds	r2, #1
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	e745      	b.n	800c3aa <_dtoa_r+0x962>
 800c51e:	2a00      	cmp	r2, #0
 800c520:	dd03      	ble.n	800c52a <_dtoa_r+0xae2>
 800c522:	2b39      	cmp	r3, #57	; 0x39
 800c524:	d0ee      	beq.n	800c504 <_dtoa_r+0xabc>
 800c526:	3301      	adds	r3, #1
 800c528:	e7c7      	b.n	800c4ba <_dtoa_r+0xa72>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	9907      	ldr	r1, [sp, #28]
 800c52e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c532:	428a      	cmp	r2, r1
 800c534:	d02a      	beq.n	800c58c <_dtoa_r+0xb44>
 800c536:	4659      	mov	r1, fp
 800c538:	2300      	movs	r3, #0
 800c53a:	220a      	movs	r2, #10
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 f8dd 	bl	800c6fc <__multadd>
 800c542:	45b8      	cmp	r8, r7
 800c544:	4683      	mov	fp, r0
 800c546:	f04f 0300 	mov.w	r3, #0
 800c54a:	f04f 020a 	mov.w	r2, #10
 800c54e:	4641      	mov	r1, r8
 800c550:	4620      	mov	r0, r4
 800c552:	d107      	bne.n	800c564 <_dtoa_r+0xb1c>
 800c554:	f000 f8d2 	bl	800c6fc <__multadd>
 800c558:	4680      	mov	r8, r0
 800c55a:	4607      	mov	r7, r0
 800c55c:	9b01      	ldr	r3, [sp, #4]
 800c55e:	3301      	adds	r3, #1
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	e775      	b.n	800c450 <_dtoa_r+0xa08>
 800c564:	f000 f8ca 	bl	800c6fc <__multadd>
 800c568:	4639      	mov	r1, r7
 800c56a:	4680      	mov	r8, r0
 800c56c:	2300      	movs	r3, #0
 800c56e:	220a      	movs	r2, #10
 800c570:	4620      	mov	r0, r4
 800c572:	f000 f8c3 	bl	800c6fc <__multadd>
 800c576:	4607      	mov	r7, r0
 800c578:	e7f0      	b.n	800c55c <_dtoa_r+0xb14>
 800c57a:	f1b9 0f00 	cmp.w	r9, #0
 800c57e:	9a00      	ldr	r2, [sp, #0]
 800c580:	bfcc      	ite	gt
 800c582:	464d      	movgt	r5, r9
 800c584:	2501      	movle	r5, #1
 800c586:	4415      	add	r5, r2
 800c588:	f04f 0800 	mov.w	r8, #0
 800c58c:	4659      	mov	r1, fp
 800c58e:	2201      	movs	r2, #1
 800c590:	4620      	mov	r0, r4
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f000 fa62 	bl	800ca5c <__lshift>
 800c598:	4631      	mov	r1, r6
 800c59a:	4683      	mov	fp, r0
 800c59c:	f000 faca 	bl	800cb34 <__mcmp>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	dcb2      	bgt.n	800c50a <_dtoa_r+0xac2>
 800c5a4:	d102      	bne.n	800c5ac <_dtoa_r+0xb64>
 800c5a6:	9b01      	ldr	r3, [sp, #4]
 800c5a8:	07db      	lsls	r3, r3, #31
 800c5aa:	d4ae      	bmi.n	800c50a <_dtoa_r+0xac2>
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	461d      	mov	r5, r3
 800c5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5b4:	2a30      	cmp	r2, #48	; 0x30
 800c5b6:	d0fa      	beq.n	800c5ae <_dtoa_r+0xb66>
 800c5b8:	e6f7      	b.n	800c3aa <_dtoa_r+0x962>
 800c5ba:	9a00      	ldr	r2, [sp, #0]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d1a5      	bne.n	800c50c <_dtoa_r+0xac4>
 800c5c0:	f10a 0a01 	add.w	sl, sl, #1
 800c5c4:	2331      	movs	r3, #49	; 0x31
 800c5c6:	e779      	b.n	800c4bc <_dtoa_r+0xa74>
 800c5c8:	4b13      	ldr	r3, [pc, #76]	; (800c618 <_dtoa_r+0xbd0>)
 800c5ca:	f7ff baaf 	b.w	800bb2c <_dtoa_r+0xe4>
 800c5ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f47f aa86 	bne.w	800bae2 <_dtoa_r+0x9a>
 800c5d6:	4b11      	ldr	r3, [pc, #68]	; (800c61c <_dtoa_r+0xbd4>)
 800c5d8:	f7ff baa8 	b.w	800bb2c <_dtoa_r+0xe4>
 800c5dc:	f1b9 0f00 	cmp.w	r9, #0
 800c5e0:	dc03      	bgt.n	800c5ea <_dtoa_r+0xba2>
 800c5e2:	9b05      	ldr	r3, [sp, #20]
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	f73f aec9 	bgt.w	800c37c <_dtoa_r+0x934>
 800c5ea:	9d00      	ldr	r5, [sp, #0]
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	f7ff f99e 	bl	800b930 <quorem>
 800c5f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c5f8:	f805 3b01 	strb.w	r3, [r5], #1
 800c5fc:	9a00      	ldr	r2, [sp, #0]
 800c5fe:	1aaa      	subs	r2, r5, r2
 800c600:	4591      	cmp	r9, r2
 800c602:	ddba      	ble.n	800c57a <_dtoa_r+0xb32>
 800c604:	4659      	mov	r1, fp
 800c606:	2300      	movs	r3, #0
 800c608:	220a      	movs	r2, #10
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 f876 	bl	800c6fc <__multadd>
 800c610:	4683      	mov	fp, r0
 800c612:	e7eb      	b.n	800c5ec <_dtoa_r+0xba4>
 800c614:	0800ebff 	.word	0x0800ebff
 800c618:	0800eb58 	.word	0x0800eb58
 800c61c:	0800eb7c 	.word	0x0800eb7c

0800c620 <_localeconv_r>:
 800c620:	4800      	ldr	r0, [pc, #0]	; (800c624 <_localeconv_r+0x4>)
 800c622:	4770      	bx	lr
 800c624:	20000164 	.word	0x20000164

0800c628 <malloc>:
 800c628:	4b02      	ldr	r3, [pc, #8]	; (800c634 <malloc+0xc>)
 800c62a:	4601      	mov	r1, r0
 800c62c:	6818      	ldr	r0, [r3, #0]
 800c62e:	f000 bbe1 	b.w	800cdf4 <_malloc_r>
 800c632:	bf00      	nop
 800c634:	20000010 	.word	0x20000010

0800c638 <_Balloc>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c63c:	4604      	mov	r4, r0
 800c63e:	460d      	mov	r5, r1
 800c640:	b976      	cbnz	r6, 800c660 <_Balloc+0x28>
 800c642:	2010      	movs	r0, #16
 800c644:	f7ff fff0 	bl	800c628 <malloc>
 800c648:	4602      	mov	r2, r0
 800c64a:	6260      	str	r0, [r4, #36]	; 0x24
 800c64c:	b920      	cbnz	r0, 800c658 <_Balloc+0x20>
 800c64e:	4b18      	ldr	r3, [pc, #96]	; (800c6b0 <_Balloc+0x78>)
 800c650:	4818      	ldr	r0, [pc, #96]	; (800c6b4 <_Balloc+0x7c>)
 800c652:	2166      	movs	r1, #102	; 0x66
 800c654:	f000 fc38 	bl	800cec8 <__assert_func>
 800c658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c65c:	6006      	str	r6, [r0, #0]
 800c65e:	60c6      	str	r6, [r0, #12]
 800c660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c662:	68f3      	ldr	r3, [r6, #12]
 800c664:	b183      	cbz	r3, 800c688 <_Balloc+0x50>
 800c666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c66e:	b9b8      	cbnz	r0, 800c6a0 <_Balloc+0x68>
 800c670:	2101      	movs	r1, #1
 800c672:	fa01 f605 	lsl.w	r6, r1, r5
 800c676:	1d72      	adds	r2, r6, #5
 800c678:	0092      	lsls	r2, r2, #2
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 fb5a 	bl	800cd34 <_calloc_r>
 800c680:	b160      	cbz	r0, 800c69c <_Balloc+0x64>
 800c682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c686:	e00e      	b.n	800c6a6 <_Balloc+0x6e>
 800c688:	2221      	movs	r2, #33	; 0x21
 800c68a:	2104      	movs	r1, #4
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 fb51 	bl	800cd34 <_calloc_r>
 800c692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c694:	60f0      	str	r0, [r6, #12]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e4      	bne.n	800c666 <_Balloc+0x2e>
 800c69c:	2000      	movs	r0, #0
 800c69e:	bd70      	pop	{r4, r5, r6, pc}
 800c6a0:	6802      	ldr	r2, [r0, #0]
 800c6a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6ac:	e7f7      	b.n	800c69e <_Balloc+0x66>
 800c6ae:	bf00      	nop
 800c6b0:	0800eb89 	.word	0x0800eb89
 800c6b4:	0800ec10 	.word	0x0800ec10

0800c6b8 <_Bfree>:
 800c6b8:	b570      	push	{r4, r5, r6, lr}
 800c6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6bc:	4605      	mov	r5, r0
 800c6be:	460c      	mov	r4, r1
 800c6c0:	b976      	cbnz	r6, 800c6e0 <_Bfree+0x28>
 800c6c2:	2010      	movs	r0, #16
 800c6c4:	f7ff ffb0 	bl	800c628 <malloc>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	6268      	str	r0, [r5, #36]	; 0x24
 800c6cc:	b920      	cbnz	r0, 800c6d8 <_Bfree+0x20>
 800c6ce:	4b09      	ldr	r3, [pc, #36]	; (800c6f4 <_Bfree+0x3c>)
 800c6d0:	4809      	ldr	r0, [pc, #36]	; (800c6f8 <_Bfree+0x40>)
 800c6d2:	218a      	movs	r1, #138	; 0x8a
 800c6d4:	f000 fbf8 	bl	800cec8 <__assert_func>
 800c6d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6dc:	6006      	str	r6, [r0, #0]
 800c6de:	60c6      	str	r6, [r0, #12]
 800c6e0:	b13c      	cbz	r4, 800c6f2 <_Bfree+0x3a>
 800c6e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6e4:	6862      	ldr	r2, [r4, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6ec:	6021      	str	r1, [r4, #0]
 800c6ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}
 800c6f4:	0800eb89 	.word	0x0800eb89
 800c6f8:	0800ec10 	.word	0x0800ec10

0800c6fc <__multadd>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	690e      	ldr	r6, [r1, #16]
 800c702:	4607      	mov	r7, r0
 800c704:	4698      	mov	r8, r3
 800c706:	460c      	mov	r4, r1
 800c708:	f101 0014 	add.w	r0, r1, #20
 800c70c:	2300      	movs	r3, #0
 800c70e:	6805      	ldr	r5, [r0, #0]
 800c710:	b2a9      	uxth	r1, r5
 800c712:	fb02 8101 	mla	r1, r2, r1, r8
 800c716:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c71a:	0c2d      	lsrs	r5, r5, #16
 800c71c:	fb02 c505 	mla	r5, r2, r5, ip
 800c720:	b289      	uxth	r1, r1
 800c722:	3301      	adds	r3, #1
 800c724:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c728:	429e      	cmp	r6, r3
 800c72a:	f840 1b04 	str.w	r1, [r0], #4
 800c72e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c732:	dcec      	bgt.n	800c70e <__multadd+0x12>
 800c734:	f1b8 0f00 	cmp.w	r8, #0
 800c738:	d022      	beq.n	800c780 <__multadd+0x84>
 800c73a:	68a3      	ldr	r3, [r4, #8]
 800c73c:	42b3      	cmp	r3, r6
 800c73e:	dc19      	bgt.n	800c774 <__multadd+0x78>
 800c740:	6861      	ldr	r1, [r4, #4]
 800c742:	4638      	mov	r0, r7
 800c744:	3101      	adds	r1, #1
 800c746:	f7ff ff77 	bl	800c638 <_Balloc>
 800c74a:	4605      	mov	r5, r0
 800c74c:	b928      	cbnz	r0, 800c75a <__multadd+0x5e>
 800c74e:	4602      	mov	r2, r0
 800c750:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <__multadd+0x8c>)
 800c752:	480e      	ldr	r0, [pc, #56]	; (800c78c <__multadd+0x90>)
 800c754:	21b5      	movs	r1, #181	; 0xb5
 800c756:	f000 fbb7 	bl	800cec8 <__assert_func>
 800c75a:	6922      	ldr	r2, [r4, #16]
 800c75c:	3202      	adds	r2, #2
 800c75e:	f104 010c 	add.w	r1, r4, #12
 800c762:	0092      	lsls	r2, r2, #2
 800c764:	300c      	adds	r0, #12
 800c766:	f7fe fc63 	bl	800b030 <memcpy>
 800c76a:	4621      	mov	r1, r4
 800c76c:	4638      	mov	r0, r7
 800c76e:	f7ff ffa3 	bl	800c6b8 <_Bfree>
 800c772:	462c      	mov	r4, r5
 800c774:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c778:	3601      	adds	r6, #1
 800c77a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c77e:	6126      	str	r6, [r4, #16]
 800c780:	4620      	mov	r0, r4
 800c782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c786:	bf00      	nop
 800c788:	0800ebff 	.word	0x0800ebff
 800c78c:	0800ec10 	.word	0x0800ec10

0800c790 <__hi0bits>:
 800c790:	0c03      	lsrs	r3, r0, #16
 800c792:	041b      	lsls	r3, r3, #16
 800c794:	b9d3      	cbnz	r3, 800c7cc <__hi0bits+0x3c>
 800c796:	0400      	lsls	r0, r0, #16
 800c798:	2310      	movs	r3, #16
 800c79a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c79e:	bf04      	itt	eq
 800c7a0:	0200      	lsleq	r0, r0, #8
 800c7a2:	3308      	addeq	r3, #8
 800c7a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7a8:	bf04      	itt	eq
 800c7aa:	0100      	lsleq	r0, r0, #4
 800c7ac:	3304      	addeq	r3, #4
 800c7ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7b2:	bf04      	itt	eq
 800c7b4:	0080      	lsleq	r0, r0, #2
 800c7b6:	3302      	addeq	r3, #2
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	db05      	blt.n	800c7c8 <__hi0bits+0x38>
 800c7bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7c0:	f103 0301 	add.w	r3, r3, #1
 800c7c4:	bf08      	it	eq
 800c7c6:	2320      	moveq	r3, #32
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	4770      	bx	lr
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e7e4      	b.n	800c79a <__hi0bits+0xa>

0800c7d0 <__lo0bits>:
 800c7d0:	6803      	ldr	r3, [r0, #0]
 800c7d2:	f013 0207 	ands.w	r2, r3, #7
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	d00b      	beq.n	800c7f2 <__lo0bits+0x22>
 800c7da:	07da      	lsls	r2, r3, #31
 800c7dc:	d424      	bmi.n	800c828 <__lo0bits+0x58>
 800c7de:	0798      	lsls	r0, r3, #30
 800c7e0:	bf49      	itett	mi
 800c7e2:	085b      	lsrmi	r3, r3, #1
 800c7e4:	089b      	lsrpl	r3, r3, #2
 800c7e6:	2001      	movmi	r0, #1
 800c7e8:	600b      	strmi	r3, [r1, #0]
 800c7ea:	bf5c      	itt	pl
 800c7ec:	600b      	strpl	r3, [r1, #0]
 800c7ee:	2002      	movpl	r0, #2
 800c7f0:	4770      	bx	lr
 800c7f2:	b298      	uxth	r0, r3
 800c7f4:	b9b0      	cbnz	r0, 800c824 <__lo0bits+0x54>
 800c7f6:	0c1b      	lsrs	r3, r3, #16
 800c7f8:	2010      	movs	r0, #16
 800c7fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7fe:	bf04      	itt	eq
 800c800:	0a1b      	lsreq	r3, r3, #8
 800c802:	3008      	addeq	r0, #8
 800c804:	071a      	lsls	r2, r3, #28
 800c806:	bf04      	itt	eq
 800c808:	091b      	lsreq	r3, r3, #4
 800c80a:	3004      	addeq	r0, #4
 800c80c:	079a      	lsls	r2, r3, #30
 800c80e:	bf04      	itt	eq
 800c810:	089b      	lsreq	r3, r3, #2
 800c812:	3002      	addeq	r0, #2
 800c814:	07da      	lsls	r2, r3, #31
 800c816:	d403      	bmi.n	800c820 <__lo0bits+0x50>
 800c818:	085b      	lsrs	r3, r3, #1
 800c81a:	f100 0001 	add.w	r0, r0, #1
 800c81e:	d005      	beq.n	800c82c <__lo0bits+0x5c>
 800c820:	600b      	str	r3, [r1, #0]
 800c822:	4770      	bx	lr
 800c824:	4610      	mov	r0, r2
 800c826:	e7e8      	b.n	800c7fa <__lo0bits+0x2a>
 800c828:	2000      	movs	r0, #0
 800c82a:	4770      	bx	lr
 800c82c:	2020      	movs	r0, #32
 800c82e:	4770      	bx	lr

0800c830 <__i2b>:
 800c830:	b510      	push	{r4, lr}
 800c832:	460c      	mov	r4, r1
 800c834:	2101      	movs	r1, #1
 800c836:	f7ff feff 	bl	800c638 <_Balloc>
 800c83a:	4602      	mov	r2, r0
 800c83c:	b928      	cbnz	r0, 800c84a <__i2b+0x1a>
 800c83e:	4b05      	ldr	r3, [pc, #20]	; (800c854 <__i2b+0x24>)
 800c840:	4805      	ldr	r0, [pc, #20]	; (800c858 <__i2b+0x28>)
 800c842:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c846:	f000 fb3f 	bl	800cec8 <__assert_func>
 800c84a:	2301      	movs	r3, #1
 800c84c:	6144      	str	r4, [r0, #20]
 800c84e:	6103      	str	r3, [r0, #16]
 800c850:	bd10      	pop	{r4, pc}
 800c852:	bf00      	nop
 800c854:	0800ebff 	.word	0x0800ebff
 800c858:	0800ec10 	.word	0x0800ec10

0800c85c <__multiply>:
 800c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	4614      	mov	r4, r2
 800c862:	690a      	ldr	r2, [r1, #16]
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	429a      	cmp	r2, r3
 800c868:	bfb8      	it	lt
 800c86a:	460b      	movlt	r3, r1
 800c86c:	460d      	mov	r5, r1
 800c86e:	bfbc      	itt	lt
 800c870:	4625      	movlt	r5, r4
 800c872:	461c      	movlt	r4, r3
 800c874:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c878:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c87c:	68ab      	ldr	r3, [r5, #8]
 800c87e:	6869      	ldr	r1, [r5, #4]
 800c880:	eb0a 0709 	add.w	r7, sl, r9
 800c884:	42bb      	cmp	r3, r7
 800c886:	b085      	sub	sp, #20
 800c888:	bfb8      	it	lt
 800c88a:	3101      	addlt	r1, #1
 800c88c:	f7ff fed4 	bl	800c638 <_Balloc>
 800c890:	b930      	cbnz	r0, 800c8a0 <__multiply+0x44>
 800c892:	4602      	mov	r2, r0
 800c894:	4b42      	ldr	r3, [pc, #264]	; (800c9a0 <__multiply+0x144>)
 800c896:	4843      	ldr	r0, [pc, #268]	; (800c9a4 <__multiply+0x148>)
 800c898:	f240 115d 	movw	r1, #349	; 0x15d
 800c89c:	f000 fb14 	bl	800cec8 <__assert_func>
 800c8a0:	f100 0614 	add.w	r6, r0, #20
 800c8a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c8a8:	4633      	mov	r3, r6
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	4543      	cmp	r3, r8
 800c8ae:	d31e      	bcc.n	800c8ee <__multiply+0x92>
 800c8b0:	f105 0c14 	add.w	ip, r5, #20
 800c8b4:	f104 0314 	add.w	r3, r4, #20
 800c8b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c8bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c8c0:	9202      	str	r2, [sp, #8]
 800c8c2:	ebac 0205 	sub.w	r2, ip, r5
 800c8c6:	3a15      	subs	r2, #21
 800c8c8:	f022 0203 	bic.w	r2, r2, #3
 800c8cc:	3204      	adds	r2, #4
 800c8ce:	f105 0115 	add.w	r1, r5, #21
 800c8d2:	458c      	cmp	ip, r1
 800c8d4:	bf38      	it	cc
 800c8d6:	2204      	movcc	r2, #4
 800c8d8:	9201      	str	r2, [sp, #4]
 800c8da:	9a02      	ldr	r2, [sp, #8]
 800c8dc:	9303      	str	r3, [sp, #12]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d808      	bhi.n	800c8f4 <__multiply+0x98>
 800c8e2:	2f00      	cmp	r7, #0
 800c8e4:	dc55      	bgt.n	800c992 <__multiply+0x136>
 800c8e6:	6107      	str	r7, [r0, #16]
 800c8e8:	b005      	add	sp, #20
 800c8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ee:	f843 2b04 	str.w	r2, [r3], #4
 800c8f2:	e7db      	b.n	800c8ac <__multiply+0x50>
 800c8f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8f8:	f1ba 0f00 	cmp.w	sl, #0
 800c8fc:	d020      	beq.n	800c940 <__multiply+0xe4>
 800c8fe:	f105 0e14 	add.w	lr, r5, #20
 800c902:	46b1      	mov	r9, r6
 800c904:	2200      	movs	r2, #0
 800c906:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c90a:	f8d9 b000 	ldr.w	fp, [r9]
 800c90e:	b2a1      	uxth	r1, r4
 800c910:	fa1f fb8b 	uxth.w	fp, fp
 800c914:	fb0a b101 	mla	r1, sl, r1, fp
 800c918:	4411      	add	r1, r2
 800c91a:	f8d9 2000 	ldr.w	r2, [r9]
 800c91e:	0c24      	lsrs	r4, r4, #16
 800c920:	0c12      	lsrs	r2, r2, #16
 800c922:	fb0a 2404 	mla	r4, sl, r4, r2
 800c926:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c92a:	b289      	uxth	r1, r1
 800c92c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c930:	45f4      	cmp	ip, lr
 800c932:	f849 1b04 	str.w	r1, [r9], #4
 800c936:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c93a:	d8e4      	bhi.n	800c906 <__multiply+0xaa>
 800c93c:	9901      	ldr	r1, [sp, #4]
 800c93e:	5072      	str	r2, [r6, r1]
 800c940:	9a03      	ldr	r2, [sp, #12]
 800c942:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c946:	3304      	adds	r3, #4
 800c948:	f1b9 0f00 	cmp.w	r9, #0
 800c94c:	d01f      	beq.n	800c98e <__multiply+0x132>
 800c94e:	6834      	ldr	r4, [r6, #0]
 800c950:	f105 0114 	add.w	r1, r5, #20
 800c954:	46b6      	mov	lr, r6
 800c956:	f04f 0a00 	mov.w	sl, #0
 800c95a:	880a      	ldrh	r2, [r1, #0]
 800c95c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c960:	fb09 b202 	mla	r2, r9, r2, fp
 800c964:	4492      	add	sl, r2
 800c966:	b2a4      	uxth	r4, r4
 800c968:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c96c:	f84e 4b04 	str.w	r4, [lr], #4
 800c970:	f851 4b04 	ldr.w	r4, [r1], #4
 800c974:	f8be 2000 	ldrh.w	r2, [lr]
 800c978:	0c24      	lsrs	r4, r4, #16
 800c97a:	fb09 2404 	mla	r4, r9, r4, r2
 800c97e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c982:	458c      	cmp	ip, r1
 800c984:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c988:	d8e7      	bhi.n	800c95a <__multiply+0xfe>
 800c98a:	9a01      	ldr	r2, [sp, #4]
 800c98c:	50b4      	str	r4, [r6, r2]
 800c98e:	3604      	adds	r6, #4
 800c990:	e7a3      	b.n	800c8da <__multiply+0x7e>
 800c992:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1a5      	bne.n	800c8e6 <__multiply+0x8a>
 800c99a:	3f01      	subs	r7, #1
 800c99c:	e7a1      	b.n	800c8e2 <__multiply+0x86>
 800c99e:	bf00      	nop
 800c9a0:	0800ebff 	.word	0x0800ebff
 800c9a4:	0800ec10 	.word	0x0800ec10

0800c9a8 <__pow5mult>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	4615      	mov	r5, r2
 800c9ae:	f012 0203 	ands.w	r2, r2, #3
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460f      	mov	r7, r1
 800c9b6:	d007      	beq.n	800c9c8 <__pow5mult+0x20>
 800c9b8:	4c25      	ldr	r4, [pc, #148]	; (800ca50 <__pow5mult+0xa8>)
 800c9ba:	3a01      	subs	r2, #1
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9c2:	f7ff fe9b 	bl	800c6fc <__multadd>
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	10ad      	asrs	r5, r5, #2
 800c9ca:	d03d      	beq.n	800ca48 <__pow5mult+0xa0>
 800c9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9ce:	b97c      	cbnz	r4, 800c9f0 <__pow5mult+0x48>
 800c9d0:	2010      	movs	r0, #16
 800c9d2:	f7ff fe29 	bl	800c628 <malloc>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	6270      	str	r0, [r6, #36]	; 0x24
 800c9da:	b928      	cbnz	r0, 800c9e8 <__pow5mult+0x40>
 800c9dc:	4b1d      	ldr	r3, [pc, #116]	; (800ca54 <__pow5mult+0xac>)
 800c9de:	481e      	ldr	r0, [pc, #120]	; (800ca58 <__pow5mult+0xb0>)
 800c9e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9e4:	f000 fa70 	bl	800cec8 <__assert_func>
 800c9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9ec:	6004      	str	r4, [r0, #0]
 800c9ee:	60c4      	str	r4, [r0, #12]
 800c9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9f8:	b94c      	cbnz	r4, 800ca0e <__pow5mult+0x66>
 800c9fa:	f240 2171 	movw	r1, #625	; 0x271
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff ff16 	bl	800c830 <__i2b>
 800ca04:	2300      	movs	r3, #0
 800ca06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	6003      	str	r3, [r0, #0]
 800ca0e:	f04f 0900 	mov.w	r9, #0
 800ca12:	07eb      	lsls	r3, r5, #31
 800ca14:	d50a      	bpl.n	800ca2c <__pow5mult+0x84>
 800ca16:	4639      	mov	r1, r7
 800ca18:	4622      	mov	r2, r4
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f7ff ff1e 	bl	800c85c <__multiply>
 800ca20:	4639      	mov	r1, r7
 800ca22:	4680      	mov	r8, r0
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7ff fe47 	bl	800c6b8 <_Bfree>
 800ca2a:	4647      	mov	r7, r8
 800ca2c:	106d      	asrs	r5, r5, #1
 800ca2e:	d00b      	beq.n	800ca48 <__pow5mult+0xa0>
 800ca30:	6820      	ldr	r0, [r4, #0]
 800ca32:	b938      	cbnz	r0, 800ca44 <__pow5mult+0x9c>
 800ca34:	4622      	mov	r2, r4
 800ca36:	4621      	mov	r1, r4
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f7ff ff0f 	bl	800c85c <__multiply>
 800ca3e:	6020      	str	r0, [r4, #0]
 800ca40:	f8c0 9000 	str.w	r9, [r0]
 800ca44:	4604      	mov	r4, r0
 800ca46:	e7e4      	b.n	800ca12 <__pow5mult+0x6a>
 800ca48:	4638      	mov	r0, r7
 800ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	bf00      	nop
 800ca50:	0800ed60 	.word	0x0800ed60
 800ca54:	0800eb89 	.word	0x0800eb89
 800ca58:	0800ec10 	.word	0x0800ec10

0800ca5c <__lshift>:
 800ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca60:	460c      	mov	r4, r1
 800ca62:	6849      	ldr	r1, [r1, #4]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca6a:	68a3      	ldr	r3, [r4, #8]
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	4691      	mov	r9, r2
 800ca70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca74:	f108 0601 	add.w	r6, r8, #1
 800ca78:	42b3      	cmp	r3, r6
 800ca7a:	db0b      	blt.n	800ca94 <__lshift+0x38>
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	f7ff fddb 	bl	800c638 <_Balloc>
 800ca82:	4605      	mov	r5, r0
 800ca84:	b948      	cbnz	r0, 800ca9a <__lshift+0x3e>
 800ca86:	4602      	mov	r2, r0
 800ca88:	4b28      	ldr	r3, [pc, #160]	; (800cb2c <__lshift+0xd0>)
 800ca8a:	4829      	ldr	r0, [pc, #164]	; (800cb30 <__lshift+0xd4>)
 800ca8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca90:	f000 fa1a 	bl	800cec8 <__assert_func>
 800ca94:	3101      	adds	r1, #1
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	e7ee      	b.n	800ca78 <__lshift+0x1c>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	f100 0114 	add.w	r1, r0, #20
 800caa0:	f100 0210 	add.w	r2, r0, #16
 800caa4:	4618      	mov	r0, r3
 800caa6:	4553      	cmp	r3, sl
 800caa8:	db33      	blt.n	800cb12 <__lshift+0xb6>
 800caaa:	6920      	ldr	r0, [r4, #16]
 800caac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cab0:	f104 0314 	add.w	r3, r4, #20
 800cab4:	f019 091f 	ands.w	r9, r9, #31
 800cab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cabc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cac0:	d02b      	beq.n	800cb1a <__lshift+0xbe>
 800cac2:	f1c9 0e20 	rsb	lr, r9, #32
 800cac6:	468a      	mov	sl, r1
 800cac8:	2200      	movs	r2, #0
 800caca:	6818      	ldr	r0, [r3, #0]
 800cacc:	fa00 f009 	lsl.w	r0, r0, r9
 800cad0:	4302      	orrs	r2, r0
 800cad2:	f84a 2b04 	str.w	r2, [sl], #4
 800cad6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cada:	459c      	cmp	ip, r3
 800cadc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cae0:	d8f3      	bhi.n	800caca <__lshift+0x6e>
 800cae2:	ebac 0304 	sub.w	r3, ip, r4
 800cae6:	3b15      	subs	r3, #21
 800cae8:	f023 0303 	bic.w	r3, r3, #3
 800caec:	3304      	adds	r3, #4
 800caee:	f104 0015 	add.w	r0, r4, #21
 800caf2:	4584      	cmp	ip, r0
 800caf4:	bf38      	it	cc
 800caf6:	2304      	movcc	r3, #4
 800caf8:	50ca      	str	r2, [r1, r3]
 800cafa:	b10a      	cbz	r2, 800cb00 <__lshift+0xa4>
 800cafc:	f108 0602 	add.w	r6, r8, #2
 800cb00:	3e01      	subs	r6, #1
 800cb02:	4638      	mov	r0, r7
 800cb04:	612e      	str	r6, [r5, #16]
 800cb06:	4621      	mov	r1, r4
 800cb08:	f7ff fdd6 	bl	800c6b8 <_Bfree>
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb12:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb16:	3301      	adds	r3, #1
 800cb18:	e7c5      	b.n	800caa6 <__lshift+0x4a>
 800cb1a:	3904      	subs	r1, #4
 800cb1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb20:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb24:	459c      	cmp	ip, r3
 800cb26:	d8f9      	bhi.n	800cb1c <__lshift+0xc0>
 800cb28:	e7ea      	b.n	800cb00 <__lshift+0xa4>
 800cb2a:	bf00      	nop
 800cb2c:	0800ebff 	.word	0x0800ebff
 800cb30:	0800ec10 	.word	0x0800ec10

0800cb34 <__mcmp>:
 800cb34:	b530      	push	{r4, r5, lr}
 800cb36:	6902      	ldr	r2, [r0, #16]
 800cb38:	690c      	ldr	r4, [r1, #16]
 800cb3a:	1b12      	subs	r2, r2, r4
 800cb3c:	d10e      	bne.n	800cb5c <__mcmp+0x28>
 800cb3e:	f100 0314 	add.w	r3, r0, #20
 800cb42:	3114      	adds	r1, #20
 800cb44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb54:	42a5      	cmp	r5, r4
 800cb56:	d003      	beq.n	800cb60 <__mcmp+0x2c>
 800cb58:	d305      	bcc.n	800cb66 <__mcmp+0x32>
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	bd30      	pop	{r4, r5, pc}
 800cb60:	4283      	cmp	r3, r0
 800cb62:	d3f3      	bcc.n	800cb4c <__mcmp+0x18>
 800cb64:	e7fa      	b.n	800cb5c <__mcmp+0x28>
 800cb66:	f04f 32ff 	mov.w	r2, #4294967295
 800cb6a:	e7f7      	b.n	800cb5c <__mcmp+0x28>

0800cb6c <__mdiff>:
 800cb6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb70:	460c      	mov	r4, r1
 800cb72:	4606      	mov	r6, r0
 800cb74:	4611      	mov	r1, r2
 800cb76:	4620      	mov	r0, r4
 800cb78:	4617      	mov	r7, r2
 800cb7a:	f7ff ffdb 	bl	800cb34 <__mcmp>
 800cb7e:	1e05      	subs	r5, r0, #0
 800cb80:	d110      	bne.n	800cba4 <__mdiff+0x38>
 800cb82:	4629      	mov	r1, r5
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7ff fd57 	bl	800c638 <_Balloc>
 800cb8a:	b930      	cbnz	r0, 800cb9a <__mdiff+0x2e>
 800cb8c:	4b39      	ldr	r3, [pc, #228]	; (800cc74 <__mdiff+0x108>)
 800cb8e:	4602      	mov	r2, r0
 800cb90:	f240 2132 	movw	r1, #562	; 0x232
 800cb94:	4838      	ldr	r0, [pc, #224]	; (800cc78 <__mdiff+0x10c>)
 800cb96:	f000 f997 	bl	800cec8 <__assert_func>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	bfa4      	itt	ge
 800cba6:	463b      	movge	r3, r7
 800cba8:	4627      	movge	r7, r4
 800cbaa:	4630      	mov	r0, r6
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	bfa6      	itte	ge
 800cbb0:	461c      	movge	r4, r3
 800cbb2:	2500      	movge	r5, #0
 800cbb4:	2501      	movlt	r5, #1
 800cbb6:	f7ff fd3f 	bl	800c638 <_Balloc>
 800cbba:	b920      	cbnz	r0, 800cbc6 <__mdiff+0x5a>
 800cbbc:	4b2d      	ldr	r3, [pc, #180]	; (800cc74 <__mdiff+0x108>)
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbc4:	e7e6      	b.n	800cb94 <__mdiff+0x28>
 800cbc6:	693e      	ldr	r6, [r7, #16]
 800cbc8:	60c5      	str	r5, [r0, #12]
 800cbca:	6925      	ldr	r5, [r4, #16]
 800cbcc:	f107 0114 	add.w	r1, r7, #20
 800cbd0:	f104 0914 	add.w	r9, r4, #20
 800cbd4:	f100 0e14 	add.w	lr, r0, #20
 800cbd8:	f107 0210 	add.w	r2, r7, #16
 800cbdc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cbe0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cbe4:	46f2      	mov	sl, lr
 800cbe6:	2700      	movs	r7, #0
 800cbe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbf0:	fa1f f883 	uxth.w	r8, r3
 800cbf4:	fa17 f78b 	uxtah	r7, r7, fp
 800cbf8:	0c1b      	lsrs	r3, r3, #16
 800cbfa:	eba7 0808 	sub.w	r8, r7, r8
 800cbfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc06:	fa1f f888 	uxth.w	r8, r8
 800cc0a:	141f      	asrs	r7, r3, #16
 800cc0c:	454d      	cmp	r5, r9
 800cc0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc12:	f84a 3b04 	str.w	r3, [sl], #4
 800cc16:	d8e7      	bhi.n	800cbe8 <__mdiff+0x7c>
 800cc18:	1b2b      	subs	r3, r5, r4
 800cc1a:	3b15      	subs	r3, #21
 800cc1c:	f023 0303 	bic.w	r3, r3, #3
 800cc20:	3304      	adds	r3, #4
 800cc22:	3415      	adds	r4, #21
 800cc24:	42a5      	cmp	r5, r4
 800cc26:	bf38      	it	cc
 800cc28:	2304      	movcc	r3, #4
 800cc2a:	4419      	add	r1, r3
 800cc2c:	4473      	add	r3, lr
 800cc2e:	469e      	mov	lr, r3
 800cc30:	460d      	mov	r5, r1
 800cc32:	4565      	cmp	r5, ip
 800cc34:	d30e      	bcc.n	800cc54 <__mdiff+0xe8>
 800cc36:	f10c 0203 	add.w	r2, ip, #3
 800cc3a:	1a52      	subs	r2, r2, r1
 800cc3c:	f022 0203 	bic.w	r2, r2, #3
 800cc40:	3903      	subs	r1, #3
 800cc42:	458c      	cmp	ip, r1
 800cc44:	bf38      	it	cc
 800cc46:	2200      	movcc	r2, #0
 800cc48:	441a      	add	r2, r3
 800cc4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc4e:	b17b      	cbz	r3, 800cc70 <__mdiff+0x104>
 800cc50:	6106      	str	r6, [r0, #16]
 800cc52:	e7a5      	b.n	800cba0 <__mdiff+0x34>
 800cc54:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc58:	fa17 f488 	uxtah	r4, r7, r8
 800cc5c:	1422      	asrs	r2, r4, #16
 800cc5e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cc62:	b2a4      	uxth	r4, r4
 800cc64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cc68:	f84e 4b04 	str.w	r4, [lr], #4
 800cc6c:	1417      	asrs	r7, r2, #16
 800cc6e:	e7e0      	b.n	800cc32 <__mdiff+0xc6>
 800cc70:	3e01      	subs	r6, #1
 800cc72:	e7ea      	b.n	800cc4a <__mdiff+0xde>
 800cc74:	0800ebff 	.word	0x0800ebff
 800cc78:	0800ec10 	.word	0x0800ec10

0800cc7c <__d2b>:
 800cc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc80:	4689      	mov	r9, r1
 800cc82:	2101      	movs	r1, #1
 800cc84:	ec57 6b10 	vmov	r6, r7, d0
 800cc88:	4690      	mov	r8, r2
 800cc8a:	f7ff fcd5 	bl	800c638 <_Balloc>
 800cc8e:	4604      	mov	r4, r0
 800cc90:	b930      	cbnz	r0, 800cca0 <__d2b+0x24>
 800cc92:	4602      	mov	r2, r0
 800cc94:	4b25      	ldr	r3, [pc, #148]	; (800cd2c <__d2b+0xb0>)
 800cc96:	4826      	ldr	r0, [pc, #152]	; (800cd30 <__d2b+0xb4>)
 800cc98:	f240 310a 	movw	r1, #778	; 0x30a
 800cc9c:	f000 f914 	bl	800cec8 <__assert_func>
 800cca0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cca4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cca8:	bb35      	cbnz	r5, 800ccf8 <__d2b+0x7c>
 800ccaa:	2e00      	cmp	r6, #0
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	d028      	beq.n	800cd02 <__d2b+0x86>
 800ccb0:	4668      	mov	r0, sp
 800ccb2:	9600      	str	r6, [sp, #0]
 800ccb4:	f7ff fd8c 	bl	800c7d0 <__lo0bits>
 800ccb8:	9900      	ldr	r1, [sp, #0]
 800ccba:	b300      	cbz	r0, 800ccfe <__d2b+0x82>
 800ccbc:	9a01      	ldr	r2, [sp, #4]
 800ccbe:	f1c0 0320 	rsb	r3, r0, #32
 800ccc2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc6:	430b      	orrs	r3, r1
 800ccc8:	40c2      	lsrs	r2, r0
 800ccca:	6163      	str	r3, [r4, #20]
 800cccc:	9201      	str	r2, [sp, #4]
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	61a3      	str	r3, [r4, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bf14      	ite	ne
 800ccd6:	2202      	movne	r2, #2
 800ccd8:	2201      	moveq	r2, #1
 800ccda:	6122      	str	r2, [r4, #16]
 800ccdc:	b1d5      	cbz	r5, 800cd14 <__d2b+0x98>
 800ccde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cce2:	4405      	add	r5, r0
 800cce4:	f8c9 5000 	str.w	r5, [r9]
 800cce8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccec:	f8c8 0000 	str.w	r0, [r8]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	b003      	add	sp, #12
 800ccf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccfc:	e7d5      	b.n	800ccaa <__d2b+0x2e>
 800ccfe:	6161      	str	r1, [r4, #20]
 800cd00:	e7e5      	b.n	800ccce <__d2b+0x52>
 800cd02:	a801      	add	r0, sp, #4
 800cd04:	f7ff fd64 	bl	800c7d0 <__lo0bits>
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	6163      	str	r3, [r4, #20]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	6122      	str	r2, [r4, #16]
 800cd10:	3020      	adds	r0, #32
 800cd12:	e7e3      	b.n	800ccdc <__d2b+0x60>
 800cd14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd1c:	f8c9 0000 	str.w	r0, [r9]
 800cd20:	6918      	ldr	r0, [r3, #16]
 800cd22:	f7ff fd35 	bl	800c790 <__hi0bits>
 800cd26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd2a:	e7df      	b.n	800ccec <__d2b+0x70>
 800cd2c:	0800ebff 	.word	0x0800ebff
 800cd30:	0800ec10 	.word	0x0800ec10

0800cd34 <_calloc_r>:
 800cd34:	b513      	push	{r0, r1, r4, lr}
 800cd36:	434a      	muls	r2, r1
 800cd38:	4611      	mov	r1, r2
 800cd3a:	9201      	str	r2, [sp, #4]
 800cd3c:	f000 f85a 	bl	800cdf4 <_malloc_r>
 800cd40:	4604      	mov	r4, r0
 800cd42:	b118      	cbz	r0, 800cd4c <_calloc_r+0x18>
 800cd44:	9a01      	ldr	r2, [sp, #4]
 800cd46:	2100      	movs	r1, #0
 800cd48:	f7fe f980 	bl	800b04c <memset>
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	b002      	add	sp, #8
 800cd50:	bd10      	pop	{r4, pc}
	...

0800cd54 <_free_r>:
 800cd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd56:	2900      	cmp	r1, #0
 800cd58:	d048      	beq.n	800cdec <_free_r+0x98>
 800cd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5e:	9001      	str	r0, [sp, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	f1a1 0404 	sub.w	r4, r1, #4
 800cd66:	bfb8      	it	lt
 800cd68:	18e4      	addlt	r4, r4, r3
 800cd6a:	f000 f8ef 	bl	800cf4c <__malloc_lock>
 800cd6e:	4a20      	ldr	r2, [pc, #128]	; (800cdf0 <_free_r+0x9c>)
 800cd70:	9801      	ldr	r0, [sp, #4]
 800cd72:	6813      	ldr	r3, [r2, #0]
 800cd74:	4615      	mov	r5, r2
 800cd76:	b933      	cbnz	r3, 800cd86 <_free_r+0x32>
 800cd78:	6063      	str	r3, [r4, #4]
 800cd7a:	6014      	str	r4, [r2, #0]
 800cd7c:	b003      	add	sp, #12
 800cd7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd82:	f000 b8e9 	b.w	800cf58 <__malloc_unlock>
 800cd86:	42a3      	cmp	r3, r4
 800cd88:	d90b      	bls.n	800cda2 <_free_r+0x4e>
 800cd8a:	6821      	ldr	r1, [r4, #0]
 800cd8c:	1862      	adds	r2, r4, r1
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	bf04      	itt	eq
 800cd92:	681a      	ldreq	r2, [r3, #0]
 800cd94:	685b      	ldreq	r3, [r3, #4]
 800cd96:	6063      	str	r3, [r4, #4]
 800cd98:	bf04      	itt	eq
 800cd9a:	1852      	addeq	r2, r2, r1
 800cd9c:	6022      	streq	r2, [r4, #0]
 800cd9e:	602c      	str	r4, [r5, #0]
 800cda0:	e7ec      	b.n	800cd7c <_free_r+0x28>
 800cda2:	461a      	mov	r2, r3
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	b10b      	cbz	r3, 800cdac <_free_r+0x58>
 800cda8:	42a3      	cmp	r3, r4
 800cdaa:	d9fa      	bls.n	800cda2 <_free_r+0x4e>
 800cdac:	6811      	ldr	r1, [r2, #0]
 800cdae:	1855      	adds	r5, r2, r1
 800cdb0:	42a5      	cmp	r5, r4
 800cdb2:	d10b      	bne.n	800cdcc <_free_r+0x78>
 800cdb4:	6824      	ldr	r4, [r4, #0]
 800cdb6:	4421      	add	r1, r4
 800cdb8:	1854      	adds	r4, r2, r1
 800cdba:	42a3      	cmp	r3, r4
 800cdbc:	6011      	str	r1, [r2, #0]
 800cdbe:	d1dd      	bne.n	800cd7c <_free_r+0x28>
 800cdc0:	681c      	ldr	r4, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	6053      	str	r3, [r2, #4]
 800cdc6:	4421      	add	r1, r4
 800cdc8:	6011      	str	r1, [r2, #0]
 800cdca:	e7d7      	b.n	800cd7c <_free_r+0x28>
 800cdcc:	d902      	bls.n	800cdd4 <_free_r+0x80>
 800cdce:	230c      	movs	r3, #12
 800cdd0:	6003      	str	r3, [r0, #0]
 800cdd2:	e7d3      	b.n	800cd7c <_free_r+0x28>
 800cdd4:	6825      	ldr	r5, [r4, #0]
 800cdd6:	1961      	adds	r1, r4, r5
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	bf04      	itt	eq
 800cddc:	6819      	ldreq	r1, [r3, #0]
 800cdde:	685b      	ldreq	r3, [r3, #4]
 800cde0:	6063      	str	r3, [r4, #4]
 800cde2:	bf04      	itt	eq
 800cde4:	1949      	addeq	r1, r1, r5
 800cde6:	6021      	streq	r1, [r4, #0]
 800cde8:	6054      	str	r4, [r2, #4]
 800cdea:	e7c7      	b.n	800cd7c <_free_r+0x28>
 800cdec:	b003      	add	sp, #12
 800cdee:	bd30      	pop	{r4, r5, pc}
 800cdf0:	20002720 	.word	0x20002720

0800cdf4 <_malloc_r>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	1ccd      	adds	r5, r1, #3
 800cdf8:	f025 0503 	bic.w	r5, r5, #3
 800cdfc:	3508      	adds	r5, #8
 800cdfe:	2d0c      	cmp	r5, #12
 800ce00:	bf38      	it	cc
 800ce02:	250c      	movcc	r5, #12
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	4606      	mov	r6, r0
 800ce08:	db01      	blt.n	800ce0e <_malloc_r+0x1a>
 800ce0a:	42a9      	cmp	r1, r5
 800ce0c:	d903      	bls.n	800ce16 <_malloc_r+0x22>
 800ce0e:	230c      	movs	r3, #12
 800ce10:	6033      	str	r3, [r6, #0]
 800ce12:	2000      	movs	r0, #0
 800ce14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce16:	f000 f899 	bl	800cf4c <__malloc_lock>
 800ce1a:	4921      	ldr	r1, [pc, #132]	; (800cea0 <_malloc_r+0xac>)
 800ce1c:	680a      	ldr	r2, [r1, #0]
 800ce1e:	4614      	mov	r4, r2
 800ce20:	b99c      	cbnz	r4, 800ce4a <_malloc_r+0x56>
 800ce22:	4f20      	ldr	r7, [pc, #128]	; (800cea4 <_malloc_r+0xb0>)
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	b923      	cbnz	r3, 800ce32 <_malloc_r+0x3e>
 800ce28:	4621      	mov	r1, r4
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f000 f83c 	bl	800cea8 <_sbrk_r>
 800ce30:	6038      	str	r0, [r7, #0]
 800ce32:	4629      	mov	r1, r5
 800ce34:	4630      	mov	r0, r6
 800ce36:	f000 f837 	bl	800cea8 <_sbrk_r>
 800ce3a:	1c43      	adds	r3, r0, #1
 800ce3c:	d123      	bne.n	800ce86 <_malloc_r+0x92>
 800ce3e:	230c      	movs	r3, #12
 800ce40:	6033      	str	r3, [r6, #0]
 800ce42:	4630      	mov	r0, r6
 800ce44:	f000 f888 	bl	800cf58 <__malloc_unlock>
 800ce48:	e7e3      	b.n	800ce12 <_malloc_r+0x1e>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	1b5b      	subs	r3, r3, r5
 800ce4e:	d417      	bmi.n	800ce80 <_malloc_r+0x8c>
 800ce50:	2b0b      	cmp	r3, #11
 800ce52:	d903      	bls.n	800ce5c <_malloc_r+0x68>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	441c      	add	r4, r3
 800ce58:	6025      	str	r5, [r4, #0]
 800ce5a:	e004      	b.n	800ce66 <_malloc_r+0x72>
 800ce5c:	6863      	ldr	r3, [r4, #4]
 800ce5e:	42a2      	cmp	r2, r4
 800ce60:	bf0c      	ite	eq
 800ce62:	600b      	streq	r3, [r1, #0]
 800ce64:	6053      	strne	r3, [r2, #4]
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 f876 	bl	800cf58 <__malloc_unlock>
 800ce6c:	f104 000b 	add.w	r0, r4, #11
 800ce70:	1d23      	adds	r3, r4, #4
 800ce72:	f020 0007 	bic.w	r0, r0, #7
 800ce76:	1ac2      	subs	r2, r0, r3
 800ce78:	d0cc      	beq.n	800ce14 <_malloc_r+0x20>
 800ce7a:	1a1b      	subs	r3, r3, r0
 800ce7c:	50a3      	str	r3, [r4, r2]
 800ce7e:	e7c9      	b.n	800ce14 <_malloc_r+0x20>
 800ce80:	4622      	mov	r2, r4
 800ce82:	6864      	ldr	r4, [r4, #4]
 800ce84:	e7cc      	b.n	800ce20 <_malloc_r+0x2c>
 800ce86:	1cc4      	adds	r4, r0, #3
 800ce88:	f024 0403 	bic.w	r4, r4, #3
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d0e3      	beq.n	800ce58 <_malloc_r+0x64>
 800ce90:	1a21      	subs	r1, r4, r0
 800ce92:	4630      	mov	r0, r6
 800ce94:	f000 f808 	bl	800cea8 <_sbrk_r>
 800ce98:	3001      	adds	r0, #1
 800ce9a:	d1dd      	bne.n	800ce58 <_malloc_r+0x64>
 800ce9c:	e7cf      	b.n	800ce3e <_malloc_r+0x4a>
 800ce9e:	bf00      	nop
 800cea0:	20002720 	.word	0x20002720
 800cea4:	20002724 	.word	0x20002724

0800cea8 <_sbrk_r>:
 800cea8:	b538      	push	{r3, r4, r5, lr}
 800ceaa:	4d06      	ldr	r5, [pc, #24]	; (800cec4 <_sbrk_r+0x1c>)
 800ceac:	2300      	movs	r3, #0
 800ceae:	4604      	mov	r4, r0
 800ceb0:	4608      	mov	r0, r1
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	f7f4 ff44 	bl	8001d40 <_sbrk>
 800ceb8:	1c43      	adds	r3, r0, #1
 800ceba:	d102      	bne.n	800cec2 <_sbrk_r+0x1a>
 800cebc:	682b      	ldr	r3, [r5, #0]
 800cebe:	b103      	cbz	r3, 800cec2 <_sbrk_r+0x1a>
 800cec0:	6023      	str	r3, [r4, #0]
 800cec2:	bd38      	pop	{r3, r4, r5, pc}
 800cec4:	20003054 	.word	0x20003054

0800cec8 <__assert_func>:
 800cec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceca:	4614      	mov	r4, r2
 800cecc:	461a      	mov	r2, r3
 800cece:	4b09      	ldr	r3, [pc, #36]	; (800cef4 <__assert_func+0x2c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4605      	mov	r5, r0
 800ced4:	68d8      	ldr	r0, [r3, #12]
 800ced6:	b14c      	cbz	r4, 800ceec <__assert_func+0x24>
 800ced8:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <__assert_func+0x30>)
 800ceda:	9100      	str	r1, [sp, #0]
 800cedc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cee0:	4906      	ldr	r1, [pc, #24]	; (800cefc <__assert_func+0x34>)
 800cee2:	462b      	mov	r3, r5
 800cee4:	f000 f80e 	bl	800cf04 <fiprintf>
 800cee8:	f000 fa64 	bl	800d3b4 <abort>
 800ceec:	4b04      	ldr	r3, [pc, #16]	; (800cf00 <__assert_func+0x38>)
 800ceee:	461c      	mov	r4, r3
 800cef0:	e7f3      	b.n	800ceda <__assert_func+0x12>
 800cef2:	bf00      	nop
 800cef4:	20000010 	.word	0x20000010
 800cef8:	0800ed6c 	.word	0x0800ed6c
 800cefc:	0800ed79 	.word	0x0800ed79
 800cf00:	0800eda7 	.word	0x0800eda7

0800cf04 <fiprintf>:
 800cf04:	b40e      	push	{r1, r2, r3}
 800cf06:	b503      	push	{r0, r1, lr}
 800cf08:	4601      	mov	r1, r0
 800cf0a:	ab03      	add	r3, sp, #12
 800cf0c:	4805      	ldr	r0, [pc, #20]	; (800cf24 <fiprintf+0x20>)
 800cf0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf12:	6800      	ldr	r0, [r0, #0]
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	f000 f84f 	bl	800cfb8 <_vfiprintf_r>
 800cf1a:	b002      	add	sp, #8
 800cf1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf20:	b003      	add	sp, #12
 800cf22:	4770      	bx	lr
 800cf24:	20000010 	.word	0x20000010

0800cf28 <__ascii_mbtowc>:
 800cf28:	b082      	sub	sp, #8
 800cf2a:	b901      	cbnz	r1, 800cf2e <__ascii_mbtowc+0x6>
 800cf2c:	a901      	add	r1, sp, #4
 800cf2e:	b142      	cbz	r2, 800cf42 <__ascii_mbtowc+0x1a>
 800cf30:	b14b      	cbz	r3, 800cf46 <__ascii_mbtowc+0x1e>
 800cf32:	7813      	ldrb	r3, [r2, #0]
 800cf34:	600b      	str	r3, [r1, #0]
 800cf36:	7812      	ldrb	r2, [r2, #0]
 800cf38:	1e10      	subs	r0, r2, #0
 800cf3a:	bf18      	it	ne
 800cf3c:	2001      	movne	r0, #1
 800cf3e:	b002      	add	sp, #8
 800cf40:	4770      	bx	lr
 800cf42:	4610      	mov	r0, r2
 800cf44:	e7fb      	b.n	800cf3e <__ascii_mbtowc+0x16>
 800cf46:	f06f 0001 	mvn.w	r0, #1
 800cf4a:	e7f8      	b.n	800cf3e <__ascii_mbtowc+0x16>

0800cf4c <__malloc_lock>:
 800cf4c:	4801      	ldr	r0, [pc, #4]	; (800cf54 <__malloc_lock+0x8>)
 800cf4e:	f000 bbf1 	b.w	800d734 <__retarget_lock_acquire_recursive>
 800cf52:	bf00      	nop
 800cf54:	2000305c 	.word	0x2000305c

0800cf58 <__malloc_unlock>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__malloc_unlock+0x8>)
 800cf5a:	f000 bbec 	b.w	800d736 <__retarget_lock_release_recursive>
 800cf5e:	bf00      	nop
 800cf60:	2000305c 	.word	0x2000305c

0800cf64 <__sfputc_r>:
 800cf64:	6893      	ldr	r3, [r2, #8]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	b410      	push	{r4}
 800cf6c:	6093      	str	r3, [r2, #8]
 800cf6e:	da08      	bge.n	800cf82 <__sfputc_r+0x1e>
 800cf70:	6994      	ldr	r4, [r2, #24]
 800cf72:	42a3      	cmp	r3, r4
 800cf74:	db01      	blt.n	800cf7a <__sfputc_r+0x16>
 800cf76:	290a      	cmp	r1, #10
 800cf78:	d103      	bne.n	800cf82 <__sfputc_r+0x1e>
 800cf7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf7e:	f000 b94b 	b.w	800d218 <__swbuf_r>
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	1c58      	adds	r0, r3, #1
 800cf86:	6010      	str	r0, [r2, #0]
 800cf88:	7019      	strb	r1, [r3, #0]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <__sfputs_r>:
 800cf92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf94:	4606      	mov	r6, r0
 800cf96:	460f      	mov	r7, r1
 800cf98:	4614      	mov	r4, r2
 800cf9a:	18d5      	adds	r5, r2, r3
 800cf9c:	42ac      	cmp	r4, r5
 800cf9e:	d101      	bne.n	800cfa4 <__sfputs_r+0x12>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e007      	b.n	800cfb4 <__sfputs_r+0x22>
 800cfa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfa8:	463a      	mov	r2, r7
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7ff ffda 	bl	800cf64 <__sfputc_r>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d1f3      	bne.n	800cf9c <__sfputs_r+0xa>
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfb8 <_vfiprintf_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	460d      	mov	r5, r1
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	4614      	mov	r4, r2
 800cfc2:	4698      	mov	r8, r3
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	b118      	cbz	r0, 800cfd0 <_vfiprintf_r+0x18>
 800cfc8:	6983      	ldr	r3, [r0, #24]
 800cfca:	b90b      	cbnz	r3, 800cfd0 <_vfiprintf_r+0x18>
 800cfcc:	f000 fb14 	bl	800d5f8 <__sinit>
 800cfd0:	4b89      	ldr	r3, [pc, #548]	; (800d1f8 <_vfiprintf_r+0x240>)
 800cfd2:	429d      	cmp	r5, r3
 800cfd4:	d11b      	bne.n	800d00e <_vfiprintf_r+0x56>
 800cfd6:	6875      	ldr	r5, [r6, #4]
 800cfd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfda:	07d9      	lsls	r1, r3, #31
 800cfdc:	d405      	bmi.n	800cfea <_vfiprintf_r+0x32>
 800cfde:	89ab      	ldrh	r3, [r5, #12]
 800cfe0:	059a      	lsls	r2, r3, #22
 800cfe2:	d402      	bmi.n	800cfea <_vfiprintf_r+0x32>
 800cfe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfe6:	f000 fba5 	bl	800d734 <__retarget_lock_acquire_recursive>
 800cfea:	89ab      	ldrh	r3, [r5, #12]
 800cfec:	071b      	lsls	r3, r3, #28
 800cfee:	d501      	bpl.n	800cff4 <_vfiprintf_r+0x3c>
 800cff0:	692b      	ldr	r3, [r5, #16]
 800cff2:	b9eb      	cbnz	r3, 800d030 <_vfiprintf_r+0x78>
 800cff4:	4629      	mov	r1, r5
 800cff6:	4630      	mov	r0, r6
 800cff8:	f000 f96e 	bl	800d2d8 <__swsetup_r>
 800cffc:	b1c0      	cbz	r0, 800d030 <_vfiprintf_r+0x78>
 800cffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d000:	07dc      	lsls	r4, r3, #31
 800d002:	d50e      	bpl.n	800d022 <_vfiprintf_r+0x6a>
 800d004:	f04f 30ff 	mov.w	r0, #4294967295
 800d008:	b01d      	add	sp, #116	; 0x74
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	4b7b      	ldr	r3, [pc, #492]	; (800d1fc <_vfiprintf_r+0x244>)
 800d010:	429d      	cmp	r5, r3
 800d012:	d101      	bne.n	800d018 <_vfiprintf_r+0x60>
 800d014:	68b5      	ldr	r5, [r6, #8]
 800d016:	e7df      	b.n	800cfd8 <_vfiprintf_r+0x20>
 800d018:	4b79      	ldr	r3, [pc, #484]	; (800d200 <_vfiprintf_r+0x248>)
 800d01a:	429d      	cmp	r5, r3
 800d01c:	bf08      	it	eq
 800d01e:	68f5      	ldreq	r5, [r6, #12]
 800d020:	e7da      	b.n	800cfd8 <_vfiprintf_r+0x20>
 800d022:	89ab      	ldrh	r3, [r5, #12]
 800d024:	0598      	lsls	r0, r3, #22
 800d026:	d4ed      	bmi.n	800d004 <_vfiprintf_r+0x4c>
 800d028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d02a:	f000 fb84 	bl	800d736 <__retarget_lock_release_recursive>
 800d02e:	e7e9      	b.n	800d004 <_vfiprintf_r+0x4c>
 800d030:	2300      	movs	r3, #0
 800d032:	9309      	str	r3, [sp, #36]	; 0x24
 800d034:	2320      	movs	r3, #32
 800d036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d03a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d03e:	2330      	movs	r3, #48	; 0x30
 800d040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d204 <_vfiprintf_r+0x24c>
 800d044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d048:	f04f 0901 	mov.w	r9, #1
 800d04c:	4623      	mov	r3, r4
 800d04e:	469a      	mov	sl, r3
 800d050:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d054:	b10a      	cbz	r2, 800d05a <_vfiprintf_r+0xa2>
 800d056:	2a25      	cmp	r2, #37	; 0x25
 800d058:	d1f9      	bne.n	800d04e <_vfiprintf_r+0x96>
 800d05a:	ebba 0b04 	subs.w	fp, sl, r4
 800d05e:	d00b      	beq.n	800d078 <_vfiprintf_r+0xc0>
 800d060:	465b      	mov	r3, fp
 800d062:	4622      	mov	r2, r4
 800d064:	4629      	mov	r1, r5
 800d066:	4630      	mov	r0, r6
 800d068:	f7ff ff93 	bl	800cf92 <__sfputs_r>
 800d06c:	3001      	adds	r0, #1
 800d06e:	f000 80aa 	beq.w	800d1c6 <_vfiprintf_r+0x20e>
 800d072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d074:	445a      	add	r2, fp
 800d076:	9209      	str	r2, [sp, #36]	; 0x24
 800d078:	f89a 3000 	ldrb.w	r3, [sl]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 80a2 	beq.w	800d1c6 <_vfiprintf_r+0x20e>
 800d082:	2300      	movs	r3, #0
 800d084:	f04f 32ff 	mov.w	r2, #4294967295
 800d088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d08c:	f10a 0a01 	add.w	sl, sl, #1
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	9307      	str	r3, [sp, #28]
 800d094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d098:	931a      	str	r3, [sp, #104]	; 0x68
 800d09a:	4654      	mov	r4, sl
 800d09c:	2205      	movs	r2, #5
 800d09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a2:	4858      	ldr	r0, [pc, #352]	; (800d204 <_vfiprintf_r+0x24c>)
 800d0a4:	f7f3 f8c4 	bl	8000230 <memchr>
 800d0a8:	9a04      	ldr	r2, [sp, #16]
 800d0aa:	b9d8      	cbnz	r0, 800d0e4 <_vfiprintf_r+0x12c>
 800d0ac:	06d1      	lsls	r1, r2, #27
 800d0ae:	bf44      	itt	mi
 800d0b0:	2320      	movmi	r3, #32
 800d0b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b6:	0713      	lsls	r3, r2, #28
 800d0b8:	bf44      	itt	mi
 800d0ba:	232b      	movmi	r3, #43	; 0x2b
 800d0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c6:	d015      	beq.n	800d0f4 <_vfiprintf_r+0x13c>
 800d0c8:	9a07      	ldr	r2, [sp, #28]
 800d0ca:	4654      	mov	r4, sl
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	f04f 0c0a 	mov.w	ip, #10
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0d8:	3b30      	subs	r3, #48	; 0x30
 800d0da:	2b09      	cmp	r3, #9
 800d0dc:	d94e      	bls.n	800d17c <_vfiprintf_r+0x1c4>
 800d0de:	b1b0      	cbz	r0, 800d10e <_vfiprintf_r+0x156>
 800d0e0:	9207      	str	r2, [sp, #28]
 800d0e2:	e014      	b.n	800d10e <_vfiprintf_r+0x156>
 800d0e4:	eba0 0308 	sub.w	r3, r0, r8
 800d0e8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ec:	4313      	orrs	r3, r2
 800d0ee:	9304      	str	r3, [sp, #16]
 800d0f0:	46a2      	mov	sl, r4
 800d0f2:	e7d2      	b.n	800d09a <_vfiprintf_r+0xe2>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	1d19      	adds	r1, r3, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	9103      	str	r1, [sp, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfbb      	ittet	lt
 800d100:	425b      	neglt	r3, r3
 800d102:	f042 0202 	orrlt.w	r2, r2, #2
 800d106:	9307      	strge	r3, [sp, #28]
 800d108:	9307      	strlt	r3, [sp, #28]
 800d10a:	bfb8      	it	lt
 800d10c:	9204      	strlt	r2, [sp, #16]
 800d10e:	7823      	ldrb	r3, [r4, #0]
 800d110:	2b2e      	cmp	r3, #46	; 0x2e
 800d112:	d10c      	bne.n	800d12e <_vfiprintf_r+0x176>
 800d114:	7863      	ldrb	r3, [r4, #1]
 800d116:	2b2a      	cmp	r3, #42	; 0x2a
 800d118:	d135      	bne.n	800d186 <_vfiprintf_r+0x1ce>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	1d1a      	adds	r2, r3, #4
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	9203      	str	r2, [sp, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	bfb8      	it	lt
 800d126:	f04f 33ff 	movlt.w	r3, #4294967295
 800d12a:	3402      	adds	r4, #2
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d214 <_vfiprintf_r+0x25c>
 800d132:	7821      	ldrb	r1, [r4, #0]
 800d134:	2203      	movs	r2, #3
 800d136:	4650      	mov	r0, sl
 800d138:	f7f3 f87a 	bl	8000230 <memchr>
 800d13c:	b140      	cbz	r0, 800d150 <_vfiprintf_r+0x198>
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	eba0 000a 	sub.w	r0, r0, sl
 800d144:	fa03 f000 	lsl.w	r0, r3, r0
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	4303      	orrs	r3, r0
 800d14c:	3401      	adds	r4, #1
 800d14e:	9304      	str	r3, [sp, #16]
 800d150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d154:	482c      	ldr	r0, [pc, #176]	; (800d208 <_vfiprintf_r+0x250>)
 800d156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d15a:	2206      	movs	r2, #6
 800d15c:	f7f3 f868 	bl	8000230 <memchr>
 800d160:	2800      	cmp	r0, #0
 800d162:	d03f      	beq.n	800d1e4 <_vfiprintf_r+0x22c>
 800d164:	4b29      	ldr	r3, [pc, #164]	; (800d20c <_vfiprintf_r+0x254>)
 800d166:	bb1b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x1f8>
 800d168:	9b03      	ldr	r3, [sp, #12]
 800d16a:	3307      	adds	r3, #7
 800d16c:	f023 0307 	bic.w	r3, r3, #7
 800d170:	3308      	adds	r3, #8
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d176:	443b      	add	r3, r7
 800d178:	9309      	str	r3, [sp, #36]	; 0x24
 800d17a:	e767      	b.n	800d04c <_vfiprintf_r+0x94>
 800d17c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d180:	460c      	mov	r4, r1
 800d182:	2001      	movs	r0, #1
 800d184:	e7a5      	b.n	800d0d2 <_vfiprintf_r+0x11a>
 800d186:	2300      	movs	r3, #0
 800d188:	3401      	adds	r4, #1
 800d18a:	9305      	str	r3, [sp, #20]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f04f 0c0a 	mov.w	ip, #10
 800d192:	4620      	mov	r0, r4
 800d194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d198:	3a30      	subs	r2, #48	; 0x30
 800d19a:	2a09      	cmp	r2, #9
 800d19c:	d903      	bls.n	800d1a6 <_vfiprintf_r+0x1ee>
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0c5      	beq.n	800d12e <_vfiprintf_r+0x176>
 800d1a2:	9105      	str	r1, [sp, #20]
 800d1a4:	e7c3      	b.n	800d12e <_vfiprintf_r+0x176>
 800d1a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e7f0      	b.n	800d192 <_vfiprintf_r+0x1da>
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	4b16      	ldr	r3, [pc, #88]	; (800d210 <_vfiprintf_r+0x258>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f7fd ffee 	bl	800b19c <_printf_float>
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	1c78      	adds	r0, r7, #1
 800d1c4:	d1d6      	bne.n	800d174 <_vfiprintf_r+0x1bc>
 800d1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c8:	07d9      	lsls	r1, r3, #31
 800d1ca:	d405      	bmi.n	800d1d8 <_vfiprintf_r+0x220>
 800d1cc:	89ab      	ldrh	r3, [r5, #12]
 800d1ce:	059a      	lsls	r2, r3, #22
 800d1d0:	d402      	bmi.n	800d1d8 <_vfiprintf_r+0x220>
 800d1d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d4:	f000 faaf 	bl	800d736 <__retarget_lock_release_recursive>
 800d1d8:	89ab      	ldrh	r3, [r5, #12]
 800d1da:	065b      	lsls	r3, r3, #25
 800d1dc:	f53f af12 	bmi.w	800d004 <_vfiprintf_r+0x4c>
 800d1e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e2:	e711      	b.n	800d008 <_vfiprintf_r+0x50>
 800d1e4:	ab03      	add	r3, sp, #12
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4b09      	ldr	r3, [pc, #36]	; (800d210 <_vfiprintf_r+0x258>)
 800d1ec:	a904      	add	r1, sp, #16
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f7fe fa78 	bl	800b6e4 <_printf_i>
 800d1f4:	e7e4      	b.n	800d1c0 <_vfiprintf_r+0x208>
 800d1f6:	bf00      	nop
 800d1f8:	0800eee4 	.word	0x0800eee4
 800d1fc:	0800ef04 	.word	0x0800ef04
 800d200:	0800eec4 	.word	0x0800eec4
 800d204:	0800edb2 	.word	0x0800edb2
 800d208:	0800edbc 	.word	0x0800edbc
 800d20c:	0800b19d 	.word	0x0800b19d
 800d210:	0800cf93 	.word	0x0800cf93
 800d214:	0800edb8 	.word	0x0800edb8

0800d218 <__swbuf_r>:
 800d218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21a:	460e      	mov	r6, r1
 800d21c:	4614      	mov	r4, r2
 800d21e:	4605      	mov	r5, r0
 800d220:	b118      	cbz	r0, 800d22a <__swbuf_r+0x12>
 800d222:	6983      	ldr	r3, [r0, #24]
 800d224:	b90b      	cbnz	r3, 800d22a <__swbuf_r+0x12>
 800d226:	f000 f9e7 	bl	800d5f8 <__sinit>
 800d22a:	4b21      	ldr	r3, [pc, #132]	; (800d2b0 <__swbuf_r+0x98>)
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d12b      	bne.n	800d288 <__swbuf_r+0x70>
 800d230:	686c      	ldr	r4, [r5, #4]
 800d232:	69a3      	ldr	r3, [r4, #24]
 800d234:	60a3      	str	r3, [r4, #8]
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	071a      	lsls	r2, r3, #28
 800d23a:	d52f      	bpl.n	800d29c <__swbuf_r+0x84>
 800d23c:	6923      	ldr	r3, [r4, #16]
 800d23e:	b36b      	cbz	r3, 800d29c <__swbuf_r+0x84>
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	6820      	ldr	r0, [r4, #0]
 800d244:	1ac0      	subs	r0, r0, r3
 800d246:	6963      	ldr	r3, [r4, #20]
 800d248:	b2f6      	uxtb	r6, r6
 800d24a:	4283      	cmp	r3, r0
 800d24c:	4637      	mov	r7, r6
 800d24e:	dc04      	bgt.n	800d25a <__swbuf_r+0x42>
 800d250:	4621      	mov	r1, r4
 800d252:	4628      	mov	r0, r5
 800d254:	f000 f93c 	bl	800d4d0 <_fflush_r>
 800d258:	bb30      	cbnz	r0, 800d2a8 <__swbuf_r+0x90>
 800d25a:	68a3      	ldr	r3, [r4, #8]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	60a3      	str	r3, [r4, #8]
 800d260:	6823      	ldr	r3, [r4, #0]
 800d262:	1c5a      	adds	r2, r3, #1
 800d264:	6022      	str	r2, [r4, #0]
 800d266:	701e      	strb	r6, [r3, #0]
 800d268:	6963      	ldr	r3, [r4, #20]
 800d26a:	3001      	adds	r0, #1
 800d26c:	4283      	cmp	r3, r0
 800d26e:	d004      	beq.n	800d27a <__swbuf_r+0x62>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	07db      	lsls	r3, r3, #31
 800d274:	d506      	bpl.n	800d284 <__swbuf_r+0x6c>
 800d276:	2e0a      	cmp	r6, #10
 800d278:	d104      	bne.n	800d284 <__swbuf_r+0x6c>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4628      	mov	r0, r5
 800d27e:	f000 f927 	bl	800d4d0 <_fflush_r>
 800d282:	b988      	cbnz	r0, 800d2a8 <__swbuf_r+0x90>
 800d284:	4638      	mov	r0, r7
 800d286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <__swbuf_r+0x9c>)
 800d28a:	429c      	cmp	r4, r3
 800d28c:	d101      	bne.n	800d292 <__swbuf_r+0x7a>
 800d28e:	68ac      	ldr	r4, [r5, #8]
 800d290:	e7cf      	b.n	800d232 <__swbuf_r+0x1a>
 800d292:	4b09      	ldr	r3, [pc, #36]	; (800d2b8 <__swbuf_r+0xa0>)
 800d294:	429c      	cmp	r4, r3
 800d296:	bf08      	it	eq
 800d298:	68ec      	ldreq	r4, [r5, #12]
 800d29a:	e7ca      	b.n	800d232 <__swbuf_r+0x1a>
 800d29c:	4621      	mov	r1, r4
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f000 f81a 	bl	800d2d8 <__swsetup_r>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d0cb      	beq.n	800d240 <__swbuf_r+0x28>
 800d2a8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2ac:	e7ea      	b.n	800d284 <__swbuf_r+0x6c>
 800d2ae:	bf00      	nop
 800d2b0:	0800eee4 	.word	0x0800eee4
 800d2b4:	0800ef04 	.word	0x0800ef04
 800d2b8:	0800eec4 	.word	0x0800eec4

0800d2bc <__ascii_wctomb>:
 800d2bc:	b149      	cbz	r1, 800d2d2 <__ascii_wctomb+0x16>
 800d2be:	2aff      	cmp	r2, #255	; 0xff
 800d2c0:	bf85      	ittet	hi
 800d2c2:	238a      	movhi	r3, #138	; 0x8a
 800d2c4:	6003      	strhi	r3, [r0, #0]
 800d2c6:	700a      	strbls	r2, [r1, #0]
 800d2c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2cc:	bf98      	it	ls
 800d2ce:	2001      	movls	r0, #1
 800d2d0:	4770      	bx	lr
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <__swsetup_r>:
 800d2d8:	4b32      	ldr	r3, [pc, #200]	; (800d3a4 <__swsetup_r+0xcc>)
 800d2da:	b570      	push	{r4, r5, r6, lr}
 800d2dc:	681d      	ldr	r5, [r3, #0]
 800d2de:	4606      	mov	r6, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	b125      	cbz	r5, 800d2ee <__swsetup_r+0x16>
 800d2e4:	69ab      	ldr	r3, [r5, #24]
 800d2e6:	b913      	cbnz	r3, 800d2ee <__swsetup_r+0x16>
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f000 f985 	bl	800d5f8 <__sinit>
 800d2ee:	4b2e      	ldr	r3, [pc, #184]	; (800d3a8 <__swsetup_r+0xd0>)
 800d2f0:	429c      	cmp	r4, r3
 800d2f2:	d10f      	bne.n	800d314 <__swsetup_r+0x3c>
 800d2f4:	686c      	ldr	r4, [r5, #4]
 800d2f6:	89a3      	ldrh	r3, [r4, #12]
 800d2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2fc:	0719      	lsls	r1, r3, #28
 800d2fe:	d42c      	bmi.n	800d35a <__swsetup_r+0x82>
 800d300:	06dd      	lsls	r5, r3, #27
 800d302:	d411      	bmi.n	800d328 <__swsetup_r+0x50>
 800d304:	2309      	movs	r3, #9
 800d306:	6033      	str	r3, [r6, #0]
 800d308:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d30c:	81a3      	strh	r3, [r4, #12]
 800d30e:	f04f 30ff 	mov.w	r0, #4294967295
 800d312:	e03e      	b.n	800d392 <__swsetup_r+0xba>
 800d314:	4b25      	ldr	r3, [pc, #148]	; (800d3ac <__swsetup_r+0xd4>)
 800d316:	429c      	cmp	r4, r3
 800d318:	d101      	bne.n	800d31e <__swsetup_r+0x46>
 800d31a:	68ac      	ldr	r4, [r5, #8]
 800d31c:	e7eb      	b.n	800d2f6 <__swsetup_r+0x1e>
 800d31e:	4b24      	ldr	r3, [pc, #144]	; (800d3b0 <__swsetup_r+0xd8>)
 800d320:	429c      	cmp	r4, r3
 800d322:	bf08      	it	eq
 800d324:	68ec      	ldreq	r4, [r5, #12]
 800d326:	e7e6      	b.n	800d2f6 <__swsetup_r+0x1e>
 800d328:	0758      	lsls	r0, r3, #29
 800d32a:	d512      	bpl.n	800d352 <__swsetup_r+0x7a>
 800d32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d32e:	b141      	cbz	r1, 800d342 <__swsetup_r+0x6a>
 800d330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d334:	4299      	cmp	r1, r3
 800d336:	d002      	beq.n	800d33e <__swsetup_r+0x66>
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff fd0b 	bl	800cd54 <_free_r>
 800d33e:	2300      	movs	r3, #0
 800d340:	6363      	str	r3, [r4, #52]	; 0x34
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d348:	81a3      	strh	r3, [r4, #12]
 800d34a:	2300      	movs	r3, #0
 800d34c:	6063      	str	r3, [r4, #4]
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	f043 0308 	orr.w	r3, r3, #8
 800d358:	81a3      	strh	r3, [r4, #12]
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	b94b      	cbnz	r3, 800d372 <__swsetup_r+0x9a>
 800d35e:	89a3      	ldrh	r3, [r4, #12]
 800d360:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d368:	d003      	beq.n	800d372 <__swsetup_r+0x9a>
 800d36a:	4621      	mov	r1, r4
 800d36c:	4630      	mov	r0, r6
 800d36e:	f000 fa07 	bl	800d780 <__smakebuf_r>
 800d372:	89a0      	ldrh	r0, [r4, #12]
 800d374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d378:	f010 0301 	ands.w	r3, r0, #1
 800d37c:	d00a      	beq.n	800d394 <__swsetup_r+0xbc>
 800d37e:	2300      	movs	r3, #0
 800d380:	60a3      	str	r3, [r4, #8]
 800d382:	6963      	ldr	r3, [r4, #20]
 800d384:	425b      	negs	r3, r3
 800d386:	61a3      	str	r3, [r4, #24]
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	b943      	cbnz	r3, 800d39e <__swsetup_r+0xc6>
 800d38c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d390:	d1ba      	bne.n	800d308 <__swsetup_r+0x30>
 800d392:	bd70      	pop	{r4, r5, r6, pc}
 800d394:	0781      	lsls	r1, r0, #30
 800d396:	bf58      	it	pl
 800d398:	6963      	ldrpl	r3, [r4, #20]
 800d39a:	60a3      	str	r3, [r4, #8]
 800d39c:	e7f4      	b.n	800d388 <__swsetup_r+0xb0>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e7f7      	b.n	800d392 <__swsetup_r+0xba>
 800d3a2:	bf00      	nop
 800d3a4:	20000010 	.word	0x20000010
 800d3a8:	0800eee4 	.word	0x0800eee4
 800d3ac:	0800ef04 	.word	0x0800ef04
 800d3b0:	0800eec4 	.word	0x0800eec4

0800d3b4 <abort>:
 800d3b4:	b508      	push	{r3, lr}
 800d3b6:	2006      	movs	r0, #6
 800d3b8:	f000 fa4a 	bl	800d850 <raise>
 800d3bc:	2001      	movs	r0, #1
 800d3be:	f7f4 fc47 	bl	8001c50 <_exit>
	...

0800d3c4 <__sflush_r>:
 800d3c4:	898a      	ldrh	r2, [r1, #12]
 800d3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	0710      	lsls	r0, r2, #28
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	d458      	bmi.n	800d484 <__sflush_r+0xc0>
 800d3d2:	684b      	ldr	r3, [r1, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dc05      	bgt.n	800d3e4 <__sflush_r+0x20>
 800d3d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	dc02      	bgt.n	800d3e4 <__sflush_r+0x20>
 800d3de:	2000      	movs	r0, #0
 800d3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3e6:	2e00      	cmp	r6, #0
 800d3e8:	d0f9      	beq.n	800d3de <__sflush_r+0x1a>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3f0:	682f      	ldr	r7, [r5, #0]
 800d3f2:	602b      	str	r3, [r5, #0]
 800d3f4:	d032      	beq.n	800d45c <__sflush_r+0x98>
 800d3f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	075a      	lsls	r2, r3, #29
 800d3fc:	d505      	bpl.n	800d40a <__sflush_r+0x46>
 800d3fe:	6863      	ldr	r3, [r4, #4]
 800d400:	1ac0      	subs	r0, r0, r3
 800d402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d404:	b10b      	cbz	r3, 800d40a <__sflush_r+0x46>
 800d406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d408:	1ac0      	subs	r0, r0, r3
 800d40a:	2300      	movs	r3, #0
 800d40c:	4602      	mov	r2, r0
 800d40e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d410:	6a21      	ldr	r1, [r4, #32]
 800d412:	4628      	mov	r0, r5
 800d414:	47b0      	blx	r6
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	d106      	bne.n	800d42a <__sflush_r+0x66>
 800d41c:	6829      	ldr	r1, [r5, #0]
 800d41e:	291d      	cmp	r1, #29
 800d420:	d82c      	bhi.n	800d47c <__sflush_r+0xb8>
 800d422:	4a2a      	ldr	r2, [pc, #168]	; (800d4cc <__sflush_r+0x108>)
 800d424:	40ca      	lsrs	r2, r1
 800d426:	07d6      	lsls	r6, r2, #31
 800d428:	d528      	bpl.n	800d47c <__sflush_r+0xb8>
 800d42a:	2200      	movs	r2, #0
 800d42c:	6062      	str	r2, [r4, #4]
 800d42e:	04d9      	lsls	r1, r3, #19
 800d430:	6922      	ldr	r2, [r4, #16]
 800d432:	6022      	str	r2, [r4, #0]
 800d434:	d504      	bpl.n	800d440 <__sflush_r+0x7c>
 800d436:	1c42      	adds	r2, r0, #1
 800d438:	d101      	bne.n	800d43e <__sflush_r+0x7a>
 800d43a:	682b      	ldr	r3, [r5, #0]
 800d43c:	b903      	cbnz	r3, 800d440 <__sflush_r+0x7c>
 800d43e:	6560      	str	r0, [r4, #84]	; 0x54
 800d440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d442:	602f      	str	r7, [r5, #0]
 800d444:	2900      	cmp	r1, #0
 800d446:	d0ca      	beq.n	800d3de <__sflush_r+0x1a>
 800d448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d44c:	4299      	cmp	r1, r3
 800d44e:	d002      	beq.n	800d456 <__sflush_r+0x92>
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fc7f 	bl	800cd54 <_free_r>
 800d456:	2000      	movs	r0, #0
 800d458:	6360      	str	r0, [r4, #52]	; 0x34
 800d45a:	e7c1      	b.n	800d3e0 <__sflush_r+0x1c>
 800d45c:	6a21      	ldr	r1, [r4, #32]
 800d45e:	2301      	movs	r3, #1
 800d460:	4628      	mov	r0, r5
 800d462:	47b0      	blx	r6
 800d464:	1c41      	adds	r1, r0, #1
 800d466:	d1c7      	bne.n	800d3f8 <__sflush_r+0x34>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0c4      	beq.n	800d3f8 <__sflush_r+0x34>
 800d46e:	2b1d      	cmp	r3, #29
 800d470:	d001      	beq.n	800d476 <__sflush_r+0xb2>
 800d472:	2b16      	cmp	r3, #22
 800d474:	d101      	bne.n	800d47a <__sflush_r+0xb6>
 800d476:	602f      	str	r7, [r5, #0]
 800d478:	e7b1      	b.n	800d3de <__sflush_r+0x1a>
 800d47a:	89a3      	ldrh	r3, [r4, #12]
 800d47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d480:	81a3      	strh	r3, [r4, #12]
 800d482:	e7ad      	b.n	800d3e0 <__sflush_r+0x1c>
 800d484:	690f      	ldr	r7, [r1, #16]
 800d486:	2f00      	cmp	r7, #0
 800d488:	d0a9      	beq.n	800d3de <__sflush_r+0x1a>
 800d48a:	0793      	lsls	r3, r2, #30
 800d48c:	680e      	ldr	r6, [r1, #0]
 800d48e:	bf08      	it	eq
 800d490:	694b      	ldreq	r3, [r1, #20]
 800d492:	600f      	str	r7, [r1, #0]
 800d494:	bf18      	it	ne
 800d496:	2300      	movne	r3, #0
 800d498:	eba6 0807 	sub.w	r8, r6, r7
 800d49c:	608b      	str	r3, [r1, #8]
 800d49e:	f1b8 0f00 	cmp.w	r8, #0
 800d4a2:	dd9c      	ble.n	800d3de <__sflush_r+0x1a>
 800d4a4:	6a21      	ldr	r1, [r4, #32]
 800d4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4a8:	4643      	mov	r3, r8
 800d4aa:	463a      	mov	r2, r7
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	47b0      	blx	r6
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	dc06      	bgt.n	800d4c2 <__sflush_r+0xfe>
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ba:	81a3      	strh	r3, [r4, #12]
 800d4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c0:	e78e      	b.n	800d3e0 <__sflush_r+0x1c>
 800d4c2:	4407      	add	r7, r0
 800d4c4:	eba8 0800 	sub.w	r8, r8, r0
 800d4c8:	e7e9      	b.n	800d49e <__sflush_r+0xda>
 800d4ca:	bf00      	nop
 800d4cc:	20400001 	.word	0x20400001

0800d4d0 <_fflush_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	690b      	ldr	r3, [r1, #16]
 800d4d4:	4605      	mov	r5, r0
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	b913      	cbnz	r3, 800d4e0 <_fflush_r+0x10>
 800d4da:	2500      	movs	r5, #0
 800d4dc:	4628      	mov	r0, r5
 800d4de:	bd38      	pop	{r3, r4, r5, pc}
 800d4e0:	b118      	cbz	r0, 800d4ea <_fflush_r+0x1a>
 800d4e2:	6983      	ldr	r3, [r0, #24]
 800d4e4:	b90b      	cbnz	r3, 800d4ea <_fflush_r+0x1a>
 800d4e6:	f000 f887 	bl	800d5f8 <__sinit>
 800d4ea:	4b14      	ldr	r3, [pc, #80]	; (800d53c <_fflush_r+0x6c>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	d11b      	bne.n	800d528 <_fflush_r+0x58>
 800d4f0:	686c      	ldr	r4, [r5, #4]
 800d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0ef      	beq.n	800d4da <_fflush_r+0xa>
 800d4fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4fc:	07d0      	lsls	r0, r2, #31
 800d4fe:	d404      	bmi.n	800d50a <_fflush_r+0x3a>
 800d500:	0599      	lsls	r1, r3, #22
 800d502:	d402      	bmi.n	800d50a <_fflush_r+0x3a>
 800d504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d506:	f000 f915 	bl	800d734 <__retarget_lock_acquire_recursive>
 800d50a:	4628      	mov	r0, r5
 800d50c:	4621      	mov	r1, r4
 800d50e:	f7ff ff59 	bl	800d3c4 <__sflush_r>
 800d512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d514:	07da      	lsls	r2, r3, #31
 800d516:	4605      	mov	r5, r0
 800d518:	d4e0      	bmi.n	800d4dc <_fflush_r+0xc>
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	059b      	lsls	r3, r3, #22
 800d51e:	d4dd      	bmi.n	800d4dc <_fflush_r+0xc>
 800d520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d522:	f000 f908 	bl	800d736 <__retarget_lock_release_recursive>
 800d526:	e7d9      	b.n	800d4dc <_fflush_r+0xc>
 800d528:	4b05      	ldr	r3, [pc, #20]	; (800d540 <_fflush_r+0x70>)
 800d52a:	429c      	cmp	r4, r3
 800d52c:	d101      	bne.n	800d532 <_fflush_r+0x62>
 800d52e:	68ac      	ldr	r4, [r5, #8]
 800d530:	e7df      	b.n	800d4f2 <_fflush_r+0x22>
 800d532:	4b04      	ldr	r3, [pc, #16]	; (800d544 <_fflush_r+0x74>)
 800d534:	429c      	cmp	r4, r3
 800d536:	bf08      	it	eq
 800d538:	68ec      	ldreq	r4, [r5, #12]
 800d53a:	e7da      	b.n	800d4f2 <_fflush_r+0x22>
 800d53c:	0800eee4 	.word	0x0800eee4
 800d540:	0800ef04 	.word	0x0800ef04
 800d544:	0800eec4 	.word	0x0800eec4

0800d548 <std>:
 800d548:	2300      	movs	r3, #0
 800d54a:	b510      	push	{r4, lr}
 800d54c:	4604      	mov	r4, r0
 800d54e:	e9c0 3300 	strd	r3, r3, [r0]
 800d552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d556:	6083      	str	r3, [r0, #8]
 800d558:	8181      	strh	r1, [r0, #12]
 800d55a:	6643      	str	r3, [r0, #100]	; 0x64
 800d55c:	81c2      	strh	r2, [r0, #14]
 800d55e:	6183      	str	r3, [r0, #24]
 800d560:	4619      	mov	r1, r3
 800d562:	2208      	movs	r2, #8
 800d564:	305c      	adds	r0, #92	; 0x5c
 800d566:	f7fd fd71 	bl	800b04c <memset>
 800d56a:	4b05      	ldr	r3, [pc, #20]	; (800d580 <std+0x38>)
 800d56c:	6263      	str	r3, [r4, #36]	; 0x24
 800d56e:	4b05      	ldr	r3, [pc, #20]	; (800d584 <std+0x3c>)
 800d570:	62a3      	str	r3, [r4, #40]	; 0x28
 800d572:	4b05      	ldr	r3, [pc, #20]	; (800d588 <std+0x40>)
 800d574:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d576:	4b05      	ldr	r3, [pc, #20]	; (800d58c <std+0x44>)
 800d578:	6224      	str	r4, [r4, #32]
 800d57a:	6323      	str	r3, [r4, #48]	; 0x30
 800d57c:	bd10      	pop	{r4, pc}
 800d57e:	bf00      	nop
 800d580:	0800d889 	.word	0x0800d889
 800d584:	0800d8ab 	.word	0x0800d8ab
 800d588:	0800d8e3 	.word	0x0800d8e3
 800d58c:	0800d907 	.word	0x0800d907

0800d590 <_cleanup_r>:
 800d590:	4901      	ldr	r1, [pc, #4]	; (800d598 <_cleanup_r+0x8>)
 800d592:	f000 b8af 	b.w	800d6f4 <_fwalk_reent>
 800d596:	bf00      	nop
 800d598:	0800d4d1 	.word	0x0800d4d1

0800d59c <__sfmoreglue>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	1e4a      	subs	r2, r1, #1
 800d5a0:	2568      	movs	r5, #104	; 0x68
 800d5a2:	4355      	muls	r5, r2
 800d5a4:	460e      	mov	r6, r1
 800d5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5aa:	f7ff fc23 	bl	800cdf4 <_malloc_r>
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	b140      	cbz	r0, 800d5c4 <__sfmoreglue+0x28>
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	e9c0 1600 	strd	r1, r6, [r0]
 800d5b8:	300c      	adds	r0, #12
 800d5ba:	60a0      	str	r0, [r4, #8]
 800d5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5c0:	f7fd fd44 	bl	800b04c <memset>
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	bd70      	pop	{r4, r5, r6, pc}

0800d5c8 <__sfp_lock_acquire>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__sfp_lock_acquire+0x8>)
 800d5ca:	f000 b8b3 	b.w	800d734 <__retarget_lock_acquire_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20003060 	.word	0x20003060

0800d5d4 <__sfp_lock_release>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__sfp_lock_release+0x8>)
 800d5d6:	f000 b8ae 	b.w	800d736 <__retarget_lock_release_recursive>
 800d5da:	bf00      	nop
 800d5dc:	20003060 	.word	0x20003060

0800d5e0 <__sinit_lock_acquire>:
 800d5e0:	4801      	ldr	r0, [pc, #4]	; (800d5e8 <__sinit_lock_acquire+0x8>)
 800d5e2:	f000 b8a7 	b.w	800d734 <__retarget_lock_acquire_recursive>
 800d5e6:	bf00      	nop
 800d5e8:	2000305b 	.word	0x2000305b

0800d5ec <__sinit_lock_release>:
 800d5ec:	4801      	ldr	r0, [pc, #4]	; (800d5f4 <__sinit_lock_release+0x8>)
 800d5ee:	f000 b8a2 	b.w	800d736 <__retarget_lock_release_recursive>
 800d5f2:	bf00      	nop
 800d5f4:	2000305b 	.word	0x2000305b

0800d5f8 <__sinit>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	f7ff fff0 	bl	800d5e0 <__sinit_lock_acquire>
 800d600:	69a3      	ldr	r3, [r4, #24]
 800d602:	b11b      	cbz	r3, 800d60c <__sinit+0x14>
 800d604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d608:	f7ff bff0 	b.w	800d5ec <__sinit_lock_release>
 800d60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d610:	6523      	str	r3, [r4, #80]	; 0x50
 800d612:	4b13      	ldr	r3, [pc, #76]	; (800d660 <__sinit+0x68>)
 800d614:	4a13      	ldr	r2, [pc, #76]	; (800d664 <__sinit+0x6c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	62a2      	str	r2, [r4, #40]	; 0x28
 800d61a:	42a3      	cmp	r3, r4
 800d61c:	bf04      	itt	eq
 800d61e:	2301      	moveq	r3, #1
 800d620:	61a3      	streq	r3, [r4, #24]
 800d622:	4620      	mov	r0, r4
 800d624:	f000 f820 	bl	800d668 <__sfp>
 800d628:	6060      	str	r0, [r4, #4]
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 f81c 	bl	800d668 <__sfp>
 800d630:	60a0      	str	r0, [r4, #8]
 800d632:	4620      	mov	r0, r4
 800d634:	f000 f818 	bl	800d668 <__sfp>
 800d638:	2200      	movs	r2, #0
 800d63a:	60e0      	str	r0, [r4, #12]
 800d63c:	2104      	movs	r1, #4
 800d63e:	6860      	ldr	r0, [r4, #4]
 800d640:	f7ff ff82 	bl	800d548 <std>
 800d644:	68a0      	ldr	r0, [r4, #8]
 800d646:	2201      	movs	r2, #1
 800d648:	2109      	movs	r1, #9
 800d64a:	f7ff ff7d 	bl	800d548 <std>
 800d64e:	68e0      	ldr	r0, [r4, #12]
 800d650:	2202      	movs	r2, #2
 800d652:	2112      	movs	r1, #18
 800d654:	f7ff ff78 	bl	800d548 <std>
 800d658:	2301      	movs	r3, #1
 800d65a:	61a3      	str	r3, [r4, #24]
 800d65c:	e7d2      	b.n	800d604 <__sinit+0xc>
 800d65e:	bf00      	nop
 800d660:	0800eb44 	.word	0x0800eb44
 800d664:	0800d591 	.word	0x0800d591

0800d668 <__sfp>:
 800d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66a:	4607      	mov	r7, r0
 800d66c:	f7ff ffac 	bl	800d5c8 <__sfp_lock_acquire>
 800d670:	4b1e      	ldr	r3, [pc, #120]	; (800d6ec <__sfp+0x84>)
 800d672:	681e      	ldr	r6, [r3, #0]
 800d674:	69b3      	ldr	r3, [r6, #24]
 800d676:	b913      	cbnz	r3, 800d67e <__sfp+0x16>
 800d678:	4630      	mov	r0, r6
 800d67a:	f7ff ffbd 	bl	800d5f8 <__sinit>
 800d67e:	3648      	adds	r6, #72	; 0x48
 800d680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d684:	3b01      	subs	r3, #1
 800d686:	d503      	bpl.n	800d690 <__sfp+0x28>
 800d688:	6833      	ldr	r3, [r6, #0]
 800d68a:	b30b      	cbz	r3, 800d6d0 <__sfp+0x68>
 800d68c:	6836      	ldr	r6, [r6, #0]
 800d68e:	e7f7      	b.n	800d680 <__sfp+0x18>
 800d690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d694:	b9d5      	cbnz	r5, 800d6cc <__sfp+0x64>
 800d696:	4b16      	ldr	r3, [pc, #88]	; (800d6f0 <__sfp+0x88>)
 800d698:	60e3      	str	r3, [r4, #12]
 800d69a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d69e:	6665      	str	r5, [r4, #100]	; 0x64
 800d6a0:	f000 f847 	bl	800d732 <__retarget_lock_init_recursive>
 800d6a4:	f7ff ff96 	bl	800d5d4 <__sfp_lock_release>
 800d6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6b0:	6025      	str	r5, [r4, #0]
 800d6b2:	61a5      	str	r5, [r4, #24]
 800d6b4:	2208      	movs	r2, #8
 800d6b6:	4629      	mov	r1, r5
 800d6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6bc:	f7fd fcc6 	bl	800b04c <memset>
 800d6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6cc:	3468      	adds	r4, #104	; 0x68
 800d6ce:	e7d9      	b.n	800d684 <__sfp+0x1c>
 800d6d0:	2104      	movs	r1, #4
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	f7ff ff62 	bl	800d59c <__sfmoreglue>
 800d6d8:	4604      	mov	r4, r0
 800d6da:	6030      	str	r0, [r6, #0]
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d1d5      	bne.n	800d68c <__sfp+0x24>
 800d6e0:	f7ff ff78 	bl	800d5d4 <__sfp_lock_release>
 800d6e4:	230c      	movs	r3, #12
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	e7ee      	b.n	800d6c8 <__sfp+0x60>
 800d6ea:	bf00      	nop
 800d6ec:	0800eb44 	.word	0x0800eb44
 800d6f0:	ffff0001 	.word	0xffff0001

0800d6f4 <_fwalk_reent>:
 800d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	4606      	mov	r6, r0
 800d6fa:	4688      	mov	r8, r1
 800d6fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d700:	2700      	movs	r7, #0
 800d702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d706:	f1b9 0901 	subs.w	r9, r9, #1
 800d70a:	d505      	bpl.n	800d718 <_fwalk_reent+0x24>
 800d70c:	6824      	ldr	r4, [r4, #0]
 800d70e:	2c00      	cmp	r4, #0
 800d710:	d1f7      	bne.n	800d702 <_fwalk_reent+0xe>
 800d712:	4638      	mov	r0, r7
 800d714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d718:	89ab      	ldrh	r3, [r5, #12]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d907      	bls.n	800d72e <_fwalk_reent+0x3a>
 800d71e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d722:	3301      	adds	r3, #1
 800d724:	d003      	beq.n	800d72e <_fwalk_reent+0x3a>
 800d726:	4629      	mov	r1, r5
 800d728:	4630      	mov	r0, r6
 800d72a:	47c0      	blx	r8
 800d72c:	4307      	orrs	r7, r0
 800d72e:	3568      	adds	r5, #104	; 0x68
 800d730:	e7e9      	b.n	800d706 <_fwalk_reent+0x12>

0800d732 <__retarget_lock_init_recursive>:
 800d732:	4770      	bx	lr

0800d734 <__retarget_lock_acquire_recursive>:
 800d734:	4770      	bx	lr

0800d736 <__retarget_lock_release_recursive>:
 800d736:	4770      	bx	lr

0800d738 <__swhatbuf_r>:
 800d738:	b570      	push	{r4, r5, r6, lr}
 800d73a:	460e      	mov	r6, r1
 800d73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d740:	2900      	cmp	r1, #0
 800d742:	b096      	sub	sp, #88	; 0x58
 800d744:	4614      	mov	r4, r2
 800d746:	461d      	mov	r5, r3
 800d748:	da07      	bge.n	800d75a <__swhatbuf_r+0x22>
 800d74a:	2300      	movs	r3, #0
 800d74c:	602b      	str	r3, [r5, #0]
 800d74e:	89b3      	ldrh	r3, [r6, #12]
 800d750:	061a      	lsls	r2, r3, #24
 800d752:	d410      	bmi.n	800d776 <__swhatbuf_r+0x3e>
 800d754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d758:	e00e      	b.n	800d778 <__swhatbuf_r+0x40>
 800d75a:	466a      	mov	r2, sp
 800d75c:	f000 f8fa 	bl	800d954 <_fstat_r>
 800d760:	2800      	cmp	r0, #0
 800d762:	dbf2      	blt.n	800d74a <__swhatbuf_r+0x12>
 800d764:	9a01      	ldr	r2, [sp, #4]
 800d766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d76a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d76e:	425a      	negs	r2, r3
 800d770:	415a      	adcs	r2, r3
 800d772:	602a      	str	r2, [r5, #0]
 800d774:	e7ee      	b.n	800d754 <__swhatbuf_r+0x1c>
 800d776:	2340      	movs	r3, #64	; 0x40
 800d778:	2000      	movs	r0, #0
 800d77a:	6023      	str	r3, [r4, #0]
 800d77c:	b016      	add	sp, #88	; 0x58
 800d77e:	bd70      	pop	{r4, r5, r6, pc}

0800d780 <__smakebuf_r>:
 800d780:	898b      	ldrh	r3, [r1, #12]
 800d782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d784:	079d      	lsls	r5, r3, #30
 800d786:	4606      	mov	r6, r0
 800d788:	460c      	mov	r4, r1
 800d78a:	d507      	bpl.n	800d79c <__smakebuf_r+0x1c>
 800d78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d790:	6023      	str	r3, [r4, #0]
 800d792:	6123      	str	r3, [r4, #16]
 800d794:	2301      	movs	r3, #1
 800d796:	6163      	str	r3, [r4, #20]
 800d798:	b002      	add	sp, #8
 800d79a:	bd70      	pop	{r4, r5, r6, pc}
 800d79c:	ab01      	add	r3, sp, #4
 800d79e:	466a      	mov	r2, sp
 800d7a0:	f7ff ffca 	bl	800d738 <__swhatbuf_r>
 800d7a4:	9900      	ldr	r1, [sp, #0]
 800d7a6:	4605      	mov	r5, r0
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f7ff fb23 	bl	800cdf4 <_malloc_r>
 800d7ae:	b948      	cbnz	r0, 800d7c4 <__smakebuf_r+0x44>
 800d7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b4:	059a      	lsls	r2, r3, #22
 800d7b6:	d4ef      	bmi.n	800d798 <__smakebuf_r+0x18>
 800d7b8:	f023 0303 	bic.w	r3, r3, #3
 800d7bc:	f043 0302 	orr.w	r3, r3, #2
 800d7c0:	81a3      	strh	r3, [r4, #12]
 800d7c2:	e7e3      	b.n	800d78c <__smakebuf_r+0xc>
 800d7c4:	4b0d      	ldr	r3, [pc, #52]	; (800d7fc <__smakebuf_r+0x7c>)
 800d7c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	6020      	str	r0, [r4, #0]
 800d7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7d0:	81a3      	strh	r3, [r4, #12]
 800d7d2:	9b00      	ldr	r3, [sp, #0]
 800d7d4:	6163      	str	r3, [r4, #20]
 800d7d6:	9b01      	ldr	r3, [sp, #4]
 800d7d8:	6120      	str	r0, [r4, #16]
 800d7da:	b15b      	cbz	r3, 800d7f4 <__smakebuf_r+0x74>
 800d7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7e0:	4630      	mov	r0, r6
 800d7e2:	f000 f8c9 	bl	800d978 <_isatty_r>
 800d7e6:	b128      	cbz	r0, 800d7f4 <__smakebuf_r+0x74>
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	f023 0303 	bic.w	r3, r3, #3
 800d7ee:	f043 0301 	orr.w	r3, r3, #1
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	89a0      	ldrh	r0, [r4, #12]
 800d7f6:	4305      	orrs	r5, r0
 800d7f8:	81a5      	strh	r5, [r4, #12]
 800d7fa:	e7cd      	b.n	800d798 <__smakebuf_r+0x18>
 800d7fc:	0800d591 	.word	0x0800d591

0800d800 <_raise_r>:
 800d800:	291f      	cmp	r1, #31
 800d802:	b538      	push	{r3, r4, r5, lr}
 800d804:	4604      	mov	r4, r0
 800d806:	460d      	mov	r5, r1
 800d808:	d904      	bls.n	800d814 <_raise_r+0x14>
 800d80a:	2316      	movs	r3, #22
 800d80c:	6003      	str	r3, [r0, #0]
 800d80e:	f04f 30ff 	mov.w	r0, #4294967295
 800d812:	bd38      	pop	{r3, r4, r5, pc}
 800d814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d816:	b112      	cbz	r2, 800d81e <_raise_r+0x1e>
 800d818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d81c:	b94b      	cbnz	r3, 800d832 <_raise_r+0x32>
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 f830 	bl	800d884 <_getpid_r>
 800d824:	462a      	mov	r2, r5
 800d826:	4601      	mov	r1, r0
 800d828:	4620      	mov	r0, r4
 800d82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d82e:	f000 b817 	b.w	800d860 <_kill_r>
 800d832:	2b01      	cmp	r3, #1
 800d834:	d00a      	beq.n	800d84c <_raise_r+0x4c>
 800d836:	1c59      	adds	r1, r3, #1
 800d838:	d103      	bne.n	800d842 <_raise_r+0x42>
 800d83a:	2316      	movs	r3, #22
 800d83c:	6003      	str	r3, [r0, #0]
 800d83e:	2001      	movs	r0, #1
 800d840:	e7e7      	b.n	800d812 <_raise_r+0x12>
 800d842:	2400      	movs	r4, #0
 800d844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d848:	4628      	mov	r0, r5
 800d84a:	4798      	blx	r3
 800d84c:	2000      	movs	r0, #0
 800d84e:	e7e0      	b.n	800d812 <_raise_r+0x12>

0800d850 <raise>:
 800d850:	4b02      	ldr	r3, [pc, #8]	; (800d85c <raise+0xc>)
 800d852:	4601      	mov	r1, r0
 800d854:	6818      	ldr	r0, [r3, #0]
 800d856:	f7ff bfd3 	b.w	800d800 <_raise_r>
 800d85a:	bf00      	nop
 800d85c:	20000010 	.word	0x20000010

0800d860 <_kill_r>:
 800d860:	b538      	push	{r3, r4, r5, lr}
 800d862:	4d07      	ldr	r5, [pc, #28]	; (800d880 <_kill_r+0x20>)
 800d864:	2300      	movs	r3, #0
 800d866:	4604      	mov	r4, r0
 800d868:	4608      	mov	r0, r1
 800d86a:	4611      	mov	r1, r2
 800d86c:	602b      	str	r3, [r5, #0]
 800d86e:	f7f4 f9df 	bl	8001c30 <_kill>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	d102      	bne.n	800d87c <_kill_r+0x1c>
 800d876:	682b      	ldr	r3, [r5, #0]
 800d878:	b103      	cbz	r3, 800d87c <_kill_r+0x1c>
 800d87a:	6023      	str	r3, [r4, #0]
 800d87c:	bd38      	pop	{r3, r4, r5, pc}
 800d87e:	bf00      	nop
 800d880:	20003054 	.word	0x20003054

0800d884 <_getpid_r>:
 800d884:	f7f4 b9cc 	b.w	8001c20 <_getpid>

0800d888 <__sread>:
 800d888:	b510      	push	{r4, lr}
 800d88a:	460c      	mov	r4, r1
 800d88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d890:	f000 f894 	bl	800d9bc <_read_r>
 800d894:	2800      	cmp	r0, #0
 800d896:	bfab      	itete	ge
 800d898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d89a:	89a3      	ldrhlt	r3, [r4, #12]
 800d89c:	181b      	addge	r3, r3, r0
 800d89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8a2:	bfac      	ite	ge
 800d8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8a6:	81a3      	strhlt	r3, [r4, #12]
 800d8a8:	bd10      	pop	{r4, pc}

0800d8aa <__swrite>:
 800d8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ae:	461f      	mov	r7, r3
 800d8b0:	898b      	ldrh	r3, [r1, #12]
 800d8b2:	05db      	lsls	r3, r3, #23
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	4616      	mov	r6, r2
 800d8ba:	d505      	bpl.n	800d8c8 <__swrite+0x1e>
 800d8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f000 f868 	bl	800d998 <_lseek_r>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8d2:	81a3      	strh	r3, [r4, #12]
 800d8d4:	4632      	mov	r2, r6
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	4628      	mov	r0, r5
 800d8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8de:	f000 b817 	b.w	800d910 <_write_r>

0800d8e2 <__sseek>:
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ea:	f000 f855 	bl	800d998 <_lseek_r>
 800d8ee:	1c43      	adds	r3, r0, #1
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	bf15      	itete	ne
 800d8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8fe:	81a3      	strheq	r3, [r4, #12]
 800d900:	bf18      	it	ne
 800d902:	81a3      	strhne	r3, [r4, #12]
 800d904:	bd10      	pop	{r4, pc}

0800d906 <__sclose>:
 800d906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90a:	f000 b813 	b.w	800d934 <_close_r>
	...

0800d910 <_write_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4d07      	ldr	r5, [pc, #28]	; (800d930 <_write_r+0x20>)
 800d914:	4604      	mov	r4, r0
 800d916:	4608      	mov	r0, r1
 800d918:	4611      	mov	r1, r2
 800d91a:	2200      	movs	r2, #0
 800d91c:	602a      	str	r2, [r5, #0]
 800d91e:	461a      	mov	r2, r3
 800d920:	f7f4 f9bd 	bl	8001c9e <_write>
 800d924:	1c43      	adds	r3, r0, #1
 800d926:	d102      	bne.n	800d92e <_write_r+0x1e>
 800d928:	682b      	ldr	r3, [r5, #0]
 800d92a:	b103      	cbz	r3, 800d92e <_write_r+0x1e>
 800d92c:	6023      	str	r3, [r4, #0]
 800d92e:	bd38      	pop	{r3, r4, r5, pc}
 800d930:	20003054 	.word	0x20003054

0800d934 <_close_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d06      	ldr	r5, [pc, #24]	; (800d950 <_close_r+0x1c>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	f7f4 f9c9 	bl	8001cd6 <_close>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d102      	bne.n	800d94e <_close_r+0x1a>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	b103      	cbz	r3, 800d94e <_close_r+0x1a>
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	20003054 	.word	0x20003054

0800d954 <_fstat_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d07      	ldr	r5, [pc, #28]	; (800d974 <_fstat_r+0x20>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	4611      	mov	r1, r2
 800d960:	602b      	str	r3, [r5, #0]
 800d962:	f7f4 f9c4 	bl	8001cee <_fstat>
 800d966:	1c43      	adds	r3, r0, #1
 800d968:	d102      	bne.n	800d970 <_fstat_r+0x1c>
 800d96a:	682b      	ldr	r3, [r5, #0]
 800d96c:	b103      	cbz	r3, 800d970 <_fstat_r+0x1c>
 800d96e:	6023      	str	r3, [r4, #0]
 800d970:	bd38      	pop	{r3, r4, r5, pc}
 800d972:	bf00      	nop
 800d974:	20003054 	.word	0x20003054

0800d978 <_isatty_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d06      	ldr	r5, [pc, #24]	; (800d994 <_isatty_r+0x1c>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	f7f4 f9c3 	bl	8001d0e <_isatty>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_isatty_r+0x1a>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_isatty_r+0x1a>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	20003054 	.word	0x20003054

0800d998 <_lseek_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d07      	ldr	r5, [pc, #28]	; (800d9b8 <_lseek_r+0x20>)
 800d99c:	4604      	mov	r4, r0
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	602a      	str	r2, [r5, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f7f4 f9bc 	bl	8001d24 <_lseek>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_lseek_r+0x1e>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_lseek_r+0x1e>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20003054 	.word	0x20003054

0800d9bc <_read_r>:
 800d9bc:	b538      	push	{r3, r4, r5, lr}
 800d9be:	4d07      	ldr	r5, [pc, #28]	; (800d9dc <_read_r+0x20>)
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	4608      	mov	r0, r1
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	602a      	str	r2, [r5, #0]
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f7f4 f94a 	bl	8001c64 <_read>
 800d9d0:	1c43      	adds	r3, r0, #1
 800d9d2:	d102      	bne.n	800d9da <_read_r+0x1e>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	b103      	cbz	r3, 800d9da <_read_r+0x1e>
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	20003054 	.word	0x20003054

0800d9e0 <sin>:
 800d9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9e2:	ec53 2b10 	vmov	r2, r3, d0
 800d9e6:	4826      	ldr	r0, [pc, #152]	; (800da80 <sin+0xa0>)
 800d9e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d9ec:	4281      	cmp	r1, r0
 800d9ee:	dc07      	bgt.n	800da00 <sin+0x20>
 800d9f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800da78 <sin+0x98>
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	f000 fe5b 	bl	800e6b0 <__kernel_sin>
 800d9fa:	ec51 0b10 	vmov	r0, r1, d0
 800d9fe:	e007      	b.n	800da10 <sin+0x30>
 800da00:	4820      	ldr	r0, [pc, #128]	; (800da84 <sin+0xa4>)
 800da02:	4281      	cmp	r1, r0
 800da04:	dd09      	ble.n	800da1a <sin+0x3a>
 800da06:	ee10 0a10 	vmov	r0, s0
 800da0a:	4619      	mov	r1, r3
 800da0c:	f7f2 fc64 	bl	80002d8 <__aeabi_dsub>
 800da10:	ec41 0b10 	vmov	d0, r0, r1
 800da14:	b005      	add	sp, #20
 800da16:	f85d fb04 	ldr.w	pc, [sp], #4
 800da1a:	4668      	mov	r0, sp
 800da1c:	f000 f834 	bl	800da88 <__ieee754_rem_pio2>
 800da20:	f000 0003 	and.w	r0, r0, #3
 800da24:	2801      	cmp	r0, #1
 800da26:	d008      	beq.n	800da3a <sin+0x5a>
 800da28:	2802      	cmp	r0, #2
 800da2a:	d00d      	beq.n	800da48 <sin+0x68>
 800da2c:	b9d0      	cbnz	r0, 800da64 <sin+0x84>
 800da2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da32:	ed9d 0b00 	vldr	d0, [sp]
 800da36:	2001      	movs	r0, #1
 800da38:	e7dd      	b.n	800d9f6 <sin+0x16>
 800da3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da3e:	ed9d 0b00 	vldr	d0, [sp]
 800da42:	f000 fa2d 	bl	800dea0 <__kernel_cos>
 800da46:	e7d8      	b.n	800d9fa <sin+0x1a>
 800da48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da4c:	ed9d 0b00 	vldr	d0, [sp]
 800da50:	2001      	movs	r0, #1
 800da52:	f000 fe2d 	bl	800e6b0 <__kernel_sin>
 800da56:	ec53 2b10 	vmov	r2, r3, d0
 800da5a:	ee10 0a10 	vmov	r0, s0
 800da5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800da62:	e7d5      	b.n	800da10 <sin+0x30>
 800da64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da68:	ed9d 0b00 	vldr	d0, [sp]
 800da6c:	f000 fa18 	bl	800dea0 <__kernel_cos>
 800da70:	e7f1      	b.n	800da56 <sin+0x76>
 800da72:	bf00      	nop
 800da74:	f3af 8000 	nop.w
	...
 800da80:	3fe921fb 	.word	0x3fe921fb
 800da84:	7fefffff 	.word	0x7fefffff

0800da88 <__ieee754_rem_pio2>:
 800da88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8c:	ed2d 8b02 	vpush	{d8}
 800da90:	ec55 4b10 	vmov	r4, r5, d0
 800da94:	4bca      	ldr	r3, [pc, #808]	; (800ddc0 <__ieee754_rem_pio2+0x338>)
 800da96:	b08b      	sub	sp, #44	; 0x2c
 800da98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800da9c:	4598      	cmp	r8, r3
 800da9e:	4682      	mov	sl, r0
 800daa0:	9502      	str	r5, [sp, #8]
 800daa2:	dc08      	bgt.n	800dab6 <__ieee754_rem_pio2+0x2e>
 800daa4:	2200      	movs	r2, #0
 800daa6:	2300      	movs	r3, #0
 800daa8:	ed80 0b00 	vstr	d0, [r0]
 800daac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dab0:	f04f 0b00 	mov.w	fp, #0
 800dab4:	e028      	b.n	800db08 <__ieee754_rem_pio2+0x80>
 800dab6:	4bc3      	ldr	r3, [pc, #780]	; (800ddc4 <__ieee754_rem_pio2+0x33c>)
 800dab8:	4598      	cmp	r8, r3
 800daba:	dc78      	bgt.n	800dbae <__ieee754_rem_pio2+0x126>
 800dabc:	9b02      	ldr	r3, [sp, #8]
 800dabe:	4ec2      	ldr	r6, [pc, #776]	; (800ddc8 <__ieee754_rem_pio2+0x340>)
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	ee10 0a10 	vmov	r0, s0
 800dac6:	a3b0      	add	r3, pc, #704	; (adr r3, 800dd88 <__ieee754_rem_pio2+0x300>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	4629      	mov	r1, r5
 800dace:	dd39      	ble.n	800db44 <__ieee754_rem_pio2+0xbc>
 800dad0:	f7f2 fc02 	bl	80002d8 <__aeabi_dsub>
 800dad4:	45b0      	cmp	r8, r6
 800dad6:	4604      	mov	r4, r0
 800dad8:	460d      	mov	r5, r1
 800dada:	d01b      	beq.n	800db14 <__ieee754_rem_pio2+0x8c>
 800dadc:	a3ac      	add	r3, pc, #688	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x308>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fbf9 	bl	80002d8 <__aeabi_dsub>
 800dae6:	4602      	mov	r2, r0
 800dae8:	460b      	mov	r3, r1
 800daea:	e9ca 2300 	strd	r2, r3, [sl]
 800daee:	4620      	mov	r0, r4
 800daf0:	4629      	mov	r1, r5
 800daf2:	f7f2 fbf1 	bl	80002d8 <__aeabi_dsub>
 800daf6:	a3a6      	add	r3, pc, #664	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x308>)
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f7f2 fbec 	bl	80002d8 <__aeabi_dsub>
 800db00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db04:	f04f 0b01 	mov.w	fp, #1
 800db08:	4658      	mov	r0, fp
 800db0a:	b00b      	add	sp, #44	; 0x2c
 800db0c:	ecbd 8b02 	vpop	{d8}
 800db10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db14:	a3a0      	add	r3, pc, #640	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x310>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fbdd 	bl	80002d8 <__aeabi_dsub>
 800db1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x318>)
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	4604      	mov	r4, r0
 800db26:	460d      	mov	r5, r1
 800db28:	f7f2 fbd6 	bl	80002d8 <__aeabi_dsub>
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	e9ca 2300 	strd	r2, r3, [sl]
 800db34:	4620      	mov	r0, r4
 800db36:	4629      	mov	r1, r5
 800db38:	f7f2 fbce 	bl	80002d8 <__aeabi_dsub>
 800db3c:	a398      	add	r3, pc, #608	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x318>)
 800db3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db42:	e7db      	b.n	800dafc <__ieee754_rem_pio2+0x74>
 800db44:	f7f2 fbca 	bl	80002dc <__adddf3>
 800db48:	45b0      	cmp	r8, r6
 800db4a:	4604      	mov	r4, r0
 800db4c:	460d      	mov	r5, r1
 800db4e:	d016      	beq.n	800db7e <__ieee754_rem_pio2+0xf6>
 800db50:	a38f      	add	r3, pc, #572	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x308>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	f7f2 fbc1 	bl	80002dc <__adddf3>
 800db5a:	4602      	mov	r2, r0
 800db5c:	460b      	mov	r3, r1
 800db5e:	e9ca 2300 	strd	r2, r3, [sl]
 800db62:	4620      	mov	r0, r4
 800db64:	4629      	mov	r1, r5
 800db66:	f7f2 fbb7 	bl	80002d8 <__aeabi_dsub>
 800db6a:	a389      	add	r3, pc, #548	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x308>)
 800db6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db70:	f7f2 fbb4 	bl	80002dc <__adddf3>
 800db74:	f04f 3bff 	mov.w	fp, #4294967295
 800db78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db7c:	e7c4      	b.n	800db08 <__ieee754_rem_pio2+0x80>
 800db7e:	a386      	add	r3, pc, #536	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x310>)
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	f7f2 fbaa 	bl	80002dc <__adddf3>
 800db88:	a385      	add	r3, pc, #532	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x318>)
 800db8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8e:	4604      	mov	r4, r0
 800db90:	460d      	mov	r5, r1
 800db92:	f7f2 fba3 	bl	80002dc <__adddf3>
 800db96:	4602      	mov	r2, r0
 800db98:	460b      	mov	r3, r1
 800db9a:	e9ca 2300 	strd	r2, r3, [sl]
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	f7f2 fb99 	bl	80002d8 <__aeabi_dsub>
 800dba6:	a37e      	add	r3, pc, #504	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x318>)
 800dba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbac:	e7e0      	b.n	800db70 <__ieee754_rem_pio2+0xe8>
 800dbae:	4b87      	ldr	r3, [pc, #540]	; (800ddcc <__ieee754_rem_pio2+0x344>)
 800dbb0:	4598      	cmp	r8, r3
 800dbb2:	f300 80d9 	bgt.w	800dd68 <__ieee754_rem_pio2+0x2e0>
 800dbb6:	f000 fe39 	bl	800e82c <fabs>
 800dbba:	ec55 4b10 	vmov	r4, r5, d0
 800dbbe:	ee10 0a10 	vmov	r0, s0
 800dbc2:	a379      	add	r3, pc, #484	; (adr r3, 800dda8 <__ieee754_rem_pio2+0x320>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	4629      	mov	r1, r5
 800dbca:	f7f2 fd3d 	bl	8000648 <__aeabi_dmul>
 800dbce:	4b80      	ldr	r3, [pc, #512]	; (800ddd0 <__ieee754_rem_pio2+0x348>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f7f2 fb83 	bl	80002dc <__adddf3>
 800dbd6:	f7f2 ffe7 	bl	8000ba8 <__aeabi_d2iz>
 800dbda:	4683      	mov	fp, r0
 800dbdc:	f7f2 fcca 	bl	8000574 <__aeabi_i2d>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	ec43 2b18 	vmov	d8, r2, r3
 800dbe8:	a367      	add	r3, pc, #412	; (adr r3, 800dd88 <__ieee754_rem_pio2+0x300>)
 800dbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbee:	f7f2 fd2b 	bl	8000648 <__aeabi_dmul>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	f7f2 fb6d 	bl	80002d8 <__aeabi_dsub>
 800dbfe:	a364      	add	r3, pc, #400	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x308>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	4606      	mov	r6, r0
 800dc06:	460f      	mov	r7, r1
 800dc08:	ec51 0b18 	vmov	r0, r1, d8
 800dc0c:	f7f2 fd1c 	bl	8000648 <__aeabi_dmul>
 800dc10:	f1bb 0f1f 	cmp.w	fp, #31
 800dc14:	4604      	mov	r4, r0
 800dc16:	460d      	mov	r5, r1
 800dc18:	dc0d      	bgt.n	800dc36 <__ieee754_rem_pio2+0x1ae>
 800dc1a:	4b6e      	ldr	r3, [pc, #440]	; (800ddd4 <__ieee754_rem_pio2+0x34c>)
 800dc1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc24:	4543      	cmp	r3, r8
 800dc26:	d006      	beq.n	800dc36 <__ieee754_rem_pio2+0x1ae>
 800dc28:	4622      	mov	r2, r4
 800dc2a:	462b      	mov	r3, r5
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	4639      	mov	r1, r7
 800dc30:	f7f2 fb52 	bl	80002d8 <__aeabi_dsub>
 800dc34:	e00f      	b.n	800dc56 <__ieee754_rem_pio2+0x1ce>
 800dc36:	462b      	mov	r3, r5
 800dc38:	4622      	mov	r2, r4
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	f7f2 fb4b 	bl	80002d8 <__aeabi_dsub>
 800dc42:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dc50:	f1b8 0f10 	cmp.w	r8, #16
 800dc54:	dc02      	bgt.n	800dc5c <__ieee754_rem_pio2+0x1d4>
 800dc56:	e9ca 0100 	strd	r0, r1, [sl]
 800dc5a:	e039      	b.n	800dcd0 <__ieee754_rem_pio2+0x248>
 800dc5c:	a34e      	add	r3, pc, #312	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x310>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	ec51 0b18 	vmov	r0, r1, d8
 800dc66:	f7f2 fcef 	bl	8000648 <__aeabi_dmul>
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	460d      	mov	r5, r1
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4630      	mov	r0, r6
 800dc74:	4639      	mov	r1, r7
 800dc76:	f7f2 fb2f 	bl	80002d8 <__aeabi_dsub>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	4680      	mov	r8, r0
 800dc80:	4689      	mov	r9, r1
 800dc82:	4630      	mov	r0, r6
 800dc84:	4639      	mov	r1, r7
 800dc86:	f7f2 fb27 	bl	80002d8 <__aeabi_dsub>
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	462b      	mov	r3, r5
 800dc8e:	f7f2 fb23 	bl	80002d8 <__aeabi_dsub>
 800dc92:	a343      	add	r3, pc, #268	; (adr r3, 800dda0 <__ieee754_rem_pio2+0x318>)
 800dc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc98:	4604      	mov	r4, r0
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	ec51 0b18 	vmov	r0, r1, d8
 800dca0:	f7f2 fcd2 	bl	8000648 <__aeabi_dmul>
 800dca4:	4622      	mov	r2, r4
 800dca6:	462b      	mov	r3, r5
 800dca8:	f7f2 fb16 	bl	80002d8 <__aeabi_dsub>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	f7f2 fb0e 	bl	80002d8 <__aeabi_dsub>
 800dcbc:	9a03      	ldr	r2, [sp, #12]
 800dcbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dcc2:	1ad3      	subs	r3, r2, r3
 800dcc4:	2b31      	cmp	r3, #49	; 0x31
 800dcc6:	dc24      	bgt.n	800dd12 <__ieee754_rem_pio2+0x28a>
 800dcc8:	e9ca 0100 	strd	r0, r1, [sl]
 800dccc:	4646      	mov	r6, r8
 800dcce:	464f      	mov	r7, r9
 800dcd0:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	4642      	mov	r2, r8
 800dcd8:	464b      	mov	r3, r9
 800dcda:	4639      	mov	r1, r7
 800dcdc:	f7f2 fafc 	bl	80002d8 <__aeabi_dsub>
 800dce0:	462b      	mov	r3, r5
 800dce2:	4622      	mov	r2, r4
 800dce4:	f7f2 faf8 	bl	80002d8 <__aeabi_dsub>
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcf0:	f6bf af0a 	bge.w	800db08 <__ieee754_rem_pio2+0x80>
 800dcf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dcf8:	f8ca 3004 	str.w	r3, [sl, #4]
 800dcfc:	f8ca 8000 	str.w	r8, [sl]
 800dd00:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd08:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd0c:	f1cb 0b00 	rsb	fp, fp, #0
 800dd10:	e6fa      	b.n	800db08 <__ieee754_rem_pio2+0x80>
 800dd12:	a327      	add	r3, pc, #156	; (adr r3, 800ddb0 <__ieee754_rem_pio2+0x328>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	ec51 0b18 	vmov	r0, r1, d8
 800dd1c:	f7f2 fc94 	bl	8000648 <__aeabi_dmul>
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	4640      	mov	r0, r8
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	f7f2 fad4 	bl	80002d8 <__aeabi_dsub>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	4640      	mov	r0, r8
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	f7f2 facc 	bl	80002d8 <__aeabi_dsub>
 800dd40:	4622      	mov	r2, r4
 800dd42:	462b      	mov	r3, r5
 800dd44:	f7f2 fac8 	bl	80002d8 <__aeabi_dsub>
 800dd48:	a31b      	add	r3, pc, #108	; (adr r3, 800ddb8 <__ieee754_rem_pio2+0x330>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	4604      	mov	r4, r0
 800dd50:	460d      	mov	r5, r1
 800dd52:	ec51 0b18 	vmov	r0, r1, d8
 800dd56:	f7f2 fc77 	bl	8000648 <__aeabi_dmul>
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	f7f2 fabb 	bl	80002d8 <__aeabi_dsub>
 800dd62:	4604      	mov	r4, r0
 800dd64:	460d      	mov	r5, r1
 800dd66:	e75f      	b.n	800dc28 <__ieee754_rem_pio2+0x1a0>
 800dd68:	4b1b      	ldr	r3, [pc, #108]	; (800ddd8 <__ieee754_rem_pio2+0x350>)
 800dd6a:	4598      	cmp	r8, r3
 800dd6c:	dd36      	ble.n	800dddc <__ieee754_rem_pio2+0x354>
 800dd6e:	ee10 2a10 	vmov	r2, s0
 800dd72:	462b      	mov	r3, r5
 800dd74:	4620      	mov	r0, r4
 800dd76:	4629      	mov	r1, r5
 800dd78:	f7f2 faae 	bl	80002d8 <__aeabi_dsub>
 800dd7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd80:	e9ca 0100 	strd	r0, r1, [sl]
 800dd84:	e694      	b.n	800dab0 <__ieee754_rem_pio2+0x28>
 800dd86:	bf00      	nop
 800dd88:	54400000 	.word	0x54400000
 800dd8c:	3ff921fb 	.word	0x3ff921fb
 800dd90:	1a626331 	.word	0x1a626331
 800dd94:	3dd0b461 	.word	0x3dd0b461
 800dd98:	1a600000 	.word	0x1a600000
 800dd9c:	3dd0b461 	.word	0x3dd0b461
 800dda0:	2e037073 	.word	0x2e037073
 800dda4:	3ba3198a 	.word	0x3ba3198a
 800dda8:	6dc9c883 	.word	0x6dc9c883
 800ddac:	3fe45f30 	.word	0x3fe45f30
 800ddb0:	2e000000 	.word	0x2e000000
 800ddb4:	3ba3198a 	.word	0x3ba3198a
 800ddb8:	252049c1 	.word	0x252049c1
 800ddbc:	397b839a 	.word	0x397b839a
 800ddc0:	3fe921fb 	.word	0x3fe921fb
 800ddc4:	4002d97b 	.word	0x4002d97b
 800ddc8:	3ff921fb 	.word	0x3ff921fb
 800ddcc:	413921fb 	.word	0x413921fb
 800ddd0:	3fe00000 	.word	0x3fe00000
 800ddd4:	0800ef24 	.word	0x0800ef24
 800ddd8:	7fefffff 	.word	0x7fefffff
 800dddc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dde0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dde4:	ee10 0a10 	vmov	r0, s0
 800dde8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ddec:	ee10 6a10 	vmov	r6, s0
 800ddf0:	460f      	mov	r7, r1
 800ddf2:	f7f2 fed9 	bl	8000ba8 <__aeabi_d2iz>
 800ddf6:	f7f2 fbbd 	bl	8000574 <__aeabi_i2d>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de06:	f7f2 fa67 	bl	80002d8 <__aeabi_dsub>
 800de0a:	4b22      	ldr	r3, [pc, #136]	; (800de94 <__ieee754_rem_pio2+0x40c>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	f7f2 fc1b 	bl	8000648 <__aeabi_dmul>
 800de12:	460f      	mov	r7, r1
 800de14:	4606      	mov	r6, r0
 800de16:	f7f2 fec7 	bl	8000ba8 <__aeabi_d2iz>
 800de1a:	f7f2 fbab 	bl	8000574 <__aeabi_i2d>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4630      	mov	r0, r6
 800de24:	4639      	mov	r1, r7
 800de26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de2a:	f7f2 fa55 	bl	80002d8 <__aeabi_dsub>
 800de2e:	4b19      	ldr	r3, [pc, #100]	; (800de94 <__ieee754_rem_pio2+0x40c>)
 800de30:	2200      	movs	r2, #0
 800de32:	f7f2 fc09 	bl	8000648 <__aeabi_dmul>
 800de36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de3a:	ad04      	add	r5, sp, #16
 800de3c:	f04f 0803 	mov.w	r8, #3
 800de40:	46a9      	mov	r9, r5
 800de42:	2600      	movs	r6, #0
 800de44:	2700      	movs	r7, #0
 800de46:	4632      	mov	r2, r6
 800de48:	463b      	mov	r3, r7
 800de4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800de4e:	46c3      	mov	fp, r8
 800de50:	3d08      	subs	r5, #8
 800de52:	f108 38ff 	add.w	r8, r8, #4294967295
 800de56:	f7f2 fe5f 	bl	8000b18 <__aeabi_dcmpeq>
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d1f3      	bne.n	800de46 <__ieee754_rem_pio2+0x3be>
 800de5e:	4b0e      	ldr	r3, [pc, #56]	; (800de98 <__ieee754_rem_pio2+0x410>)
 800de60:	9301      	str	r3, [sp, #4]
 800de62:	2302      	movs	r3, #2
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	4622      	mov	r2, r4
 800de68:	465b      	mov	r3, fp
 800de6a:	4651      	mov	r1, sl
 800de6c:	4648      	mov	r0, r9
 800de6e:	f000 f8df 	bl	800e030 <__kernel_rem_pio2>
 800de72:	9b02      	ldr	r3, [sp, #8]
 800de74:	2b00      	cmp	r3, #0
 800de76:	4683      	mov	fp, r0
 800de78:	f6bf ae46 	bge.w	800db08 <__ieee754_rem_pio2+0x80>
 800de7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800de80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de84:	f8ca 3004 	str.w	r3, [sl, #4]
 800de88:	f8da 300c 	ldr.w	r3, [sl, #12]
 800de8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de90:	e73a      	b.n	800dd08 <__ieee754_rem_pio2+0x280>
 800de92:	bf00      	nop
 800de94:	41700000 	.word	0x41700000
 800de98:	0800efa4 	.word	0x0800efa4
 800de9c:	00000000 	.word	0x00000000

0800dea0 <__kernel_cos>:
 800dea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	ec57 6b10 	vmov	r6, r7, d0
 800dea8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800deac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800deb0:	ed8d 1b00 	vstr	d1, [sp]
 800deb4:	da07      	bge.n	800dec6 <__kernel_cos+0x26>
 800deb6:	ee10 0a10 	vmov	r0, s0
 800deba:	4639      	mov	r1, r7
 800debc:	f7f2 fe74 	bl	8000ba8 <__aeabi_d2iz>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	f000 8088 	beq.w	800dfd6 <__kernel_cos+0x136>
 800dec6:	4632      	mov	r2, r6
 800dec8:	463b      	mov	r3, r7
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	f7f2 fbbb 	bl	8000648 <__aeabi_dmul>
 800ded2:	4b51      	ldr	r3, [pc, #324]	; (800e018 <__kernel_cos+0x178>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	4604      	mov	r4, r0
 800ded8:	460d      	mov	r5, r1
 800deda:	f7f2 fbb5 	bl	8000648 <__aeabi_dmul>
 800dede:	a340      	add	r3, pc, #256	; (adr r3, 800dfe0 <__kernel_cos+0x140>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	4682      	mov	sl, r0
 800dee6:	468b      	mov	fp, r1
 800dee8:	4620      	mov	r0, r4
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 fbac 	bl	8000648 <__aeabi_dmul>
 800def0:	a33d      	add	r3, pc, #244	; (adr r3, 800dfe8 <__kernel_cos+0x148>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 f9f1 	bl	80002dc <__adddf3>
 800defa:	4622      	mov	r2, r4
 800defc:	462b      	mov	r3, r5
 800defe:	f7f2 fba3 	bl	8000648 <__aeabi_dmul>
 800df02:	a33b      	add	r3, pc, #236	; (adr r3, 800dff0 <__kernel_cos+0x150>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f7f2 f9e6 	bl	80002d8 <__aeabi_dsub>
 800df0c:	4622      	mov	r2, r4
 800df0e:	462b      	mov	r3, r5
 800df10:	f7f2 fb9a 	bl	8000648 <__aeabi_dmul>
 800df14:	a338      	add	r3, pc, #224	; (adr r3, 800dff8 <__kernel_cos+0x158>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 f9df 	bl	80002dc <__adddf3>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	f7f2 fb91 	bl	8000648 <__aeabi_dmul>
 800df26:	a336      	add	r3, pc, #216	; (adr r3, 800e000 <__kernel_cos+0x160>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9d4 	bl	80002d8 <__aeabi_dsub>
 800df30:	4622      	mov	r2, r4
 800df32:	462b      	mov	r3, r5
 800df34:	f7f2 fb88 	bl	8000648 <__aeabi_dmul>
 800df38:	a333      	add	r3, pc, #204	; (adr r3, 800e008 <__kernel_cos+0x168>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f9cd 	bl	80002dc <__adddf3>
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	f7f2 fb7f 	bl	8000648 <__aeabi_dmul>
 800df4a:	4622      	mov	r2, r4
 800df4c:	462b      	mov	r3, r5
 800df4e:	f7f2 fb7b 	bl	8000648 <__aeabi_dmul>
 800df52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df56:	4604      	mov	r4, r0
 800df58:	460d      	mov	r5, r1
 800df5a:	4630      	mov	r0, r6
 800df5c:	4639      	mov	r1, r7
 800df5e:	f7f2 fb73 	bl	8000648 <__aeabi_dmul>
 800df62:	460b      	mov	r3, r1
 800df64:	4602      	mov	r2, r0
 800df66:	4629      	mov	r1, r5
 800df68:	4620      	mov	r0, r4
 800df6a:	f7f2 f9b5 	bl	80002d8 <__aeabi_dsub>
 800df6e:	4b2b      	ldr	r3, [pc, #172]	; (800e01c <__kernel_cos+0x17c>)
 800df70:	4598      	cmp	r8, r3
 800df72:	4606      	mov	r6, r0
 800df74:	460f      	mov	r7, r1
 800df76:	dc10      	bgt.n	800df9a <__kernel_cos+0xfa>
 800df78:	4602      	mov	r2, r0
 800df7a:	460b      	mov	r3, r1
 800df7c:	4650      	mov	r0, sl
 800df7e:	4659      	mov	r1, fp
 800df80:	f7f2 f9aa 	bl	80002d8 <__aeabi_dsub>
 800df84:	460b      	mov	r3, r1
 800df86:	4926      	ldr	r1, [pc, #152]	; (800e020 <__kernel_cos+0x180>)
 800df88:	4602      	mov	r2, r0
 800df8a:	2000      	movs	r0, #0
 800df8c:	f7f2 f9a4 	bl	80002d8 <__aeabi_dsub>
 800df90:	ec41 0b10 	vmov	d0, r0, r1
 800df94:	b003      	add	sp, #12
 800df96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9a:	4b22      	ldr	r3, [pc, #136]	; (800e024 <__kernel_cos+0x184>)
 800df9c:	4920      	ldr	r1, [pc, #128]	; (800e020 <__kernel_cos+0x180>)
 800df9e:	4598      	cmp	r8, r3
 800dfa0:	bfcc      	ite	gt
 800dfa2:	4d21      	ldrgt	r5, [pc, #132]	; (800e028 <__kernel_cos+0x188>)
 800dfa4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dfa8:	2400      	movs	r4, #0
 800dfaa:	4622      	mov	r2, r4
 800dfac:	462b      	mov	r3, r5
 800dfae:	2000      	movs	r0, #0
 800dfb0:	f7f2 f992 	bl	80002d8 <__aeabi_dsub>
 800dfb4:	4622      	mov	r2, r4
 800dfb6:	4680      	mov	r8, r0
 800dfb8:	4689      	mov	r9, r1
 800dfba:	462b      	mov	r3, r5
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	4659      	mov	r1, fp
 800dfc0:	f7f2 f98a 	bl	80002d8 <__aeabi_dsub>
 800dfc4:	4632      	mov	r2, r6
 800dfc6:	463b      	mov	r3, r7
 800dfc8:	f7f2 f986 	bl	80002d8 <__aeabi_dsub>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	e7da      	b.n	800df8c <__kernel_cos+0xec>
 800dfd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e010 <__kernel_cos+0x170>
 800dfda:	e7db      	b.n	800df94 <__kernel_cos+0xf4>
 800dfdc:	f3af 8000 	nop.w
 800dfe0:	be8838d4 	.word	0xbe8838d4
 800dfe4:	bda8fae9 	.word	0xbda8fae9
 800dfe8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dfec:	3e21ee9e 	.word	0x3e21ee9e
 800dff0:	809c52ad 	.word	0x809c52ad
 800dff4:	3e927e4f 	.word	0x3e927e4f
 800dff8:	19cb1590 	.word	0x19cb1590
 800dffc:	3efa01a0 	.word	0x3efa01a0
 800e000:	16c15177 	.word	0x16c15177
 800e004:	3f56c16c 	.word	0x3f56c16c
 800e008:	5555554c 	.word	0x5555554c
 800e00c:	3fa55555 	.word	0x3fa55555
 800e010:	00000000 	.word	0x00000000
 800e014:	3ff00000 	.word	0x3ff00000
 800e018:	3fe00000 	.word	0x3fe00000
 800e01c:	3fd33332 	.word	0x3fd33332
 800e020:	3ff00000 	.word	0x3ff00000
 800e024:	3fe90000 	.word	0x3fe90000
 800e028:	3fd20000 	.word	0x3fd20000
 800e02c:	00000000 	.word	0x00000000

0800e030 <__kernel_rem_pio2>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	ed2d 8b02 	vpush	{d8}
 800e038:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e03c:	f112 0f14 	cmn.w	r2, #20
 800e040:	9308      	str	r3, [sp, #32]
 800e042:	9101      	str	r1, [sp, #4]
 800e044:	4bc6      	ldr	r3, [pc, #792]	; (800e360 <__kernel_rem_pio2+0x330>)
 800e046:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e048:	9009      	str	r0, [sp, #36]	; 0x24
 800e04a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e04e:	9304      	str	r3, [sp, #16]
 800e050:	9b08      	ldr	r3, [sp, #32]
 800e052:	f103 33ff 	add.w	r3, r3, #4294967295
 800e056:	bfa8      	it	ge
 800e058:	1ed4      	subge	r4, r2, #3
 800e05a:	9306      	str	r3, [sp, #24]
 800e05c:	bfb2      	itee	lt
 800e05e:	2400      	movlt	r4, #0
 800e060:	2318      	movge	r3, #24
 800e062:	fb94 f4f3 	sdivge	r4, r4, r3
 800e066:	f06f 0317 	mvn.w	r3, #23
 800e06a:	fb04 3303 	mla	r3, r4, r3, r3
 800e06e:	eb03 0a02 	add.w	sl, r3, r2
 800e072:	9b04      	ldr	r3, [sp, #16]
 800e074:	9a06      	ldr	r2, [sp, #24]
 800e076:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e350 <__kernel_rem_pio2+0x320>
 800e07a:	eb03 0802 	add.w	r8, r3, r2
 800e07e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e080:	1aa7      	subs	r7, r4, r2
 800e082:	ae20      	add	r6, sp, #128	; 0x80
 800e084:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e088:	2500      	movs	r5, #0
 800e08a:	4545      	cmp	r5, r8
 800e08c:	dd18      	ble.n	800e0c0 <__kernel_rem_pio2+0x90>
 800e08e:	9b08      	ldr	r3, [sp, #32]
 800e090:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e094:	aa20      	add	r2, sp, #128	; 0x80
 800e096:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e350 <__kernel_rem_pio2+0x320>
 800e09a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e09e:	f1c3 0301 	rsb	r3, r3, #1
 800e0a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e0a6:	9307      	str	r3, [sp, #28]
 800e0a8:	9b07      	ldr	r3, [sp, #28]
 800e0aa:	9a04      	ldr	r2, [sp, #16]
 800e0ac:	4443      	add	r3, r8
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	db2f      	blt.n	800e112 <__kernel_rem_pio2+0xe2>
 800e0b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e0ba:	462f      	mov	r7, r5
 800e0bc:	2600      	movs	r6, #0
 800e0be:	e01b      	b.n	800e0f8 <__kernel_rem_pio2+0xc8>
 800e0c0:	42ef      	cmn	r7, r5
 800e0c2:	d407      	bmi.n	800e0d4 <__kernel_rem_pio2+0xa4>
 800e0c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0c8:	f7f2 fa54 	bl	8000574 <__aeabi_i2d>
 800e0cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0d0:	3501      	adds	r5, #1
 800e0d2:	e7da      	b.n	800e08a <__kernel_rem_pio2+0x5a>
 800e0d4:	ec51 0b18 	vmov	r0, r1, d8
 800e0d8:	e7f8      	b.n	800e0cc <__kernel_rem_pio2+0x9c>
 800e0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e0e2:	f7f2 fab1 	bl	8000648 <__aeabi_dmul>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ee:	f7f2 f8f5 	bl	80002dc <__adddf3>
 800e0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0f6:	3601      	adds	r6, #1
 800e0f8:	9b06      	ldr	r3, [sp, #24]
 800e0fa:	429e      	cmp	r6, r3
 800e0fc:	f1a7 0708 	sub.w	r7, r7, #8
 800e100:	ddeb      	ble.n	800e0da <__kernel_rem_pio2+0xaa>
 800e102:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e106:	3508      	adds	r5, #8
 800e108:	ecab 7b02 	vstmia	fp!, {d7}
 800e10c:	f108 0801 	add.w	r8, r8, #1
 800e110:	e7ca      	b.n	800e0a8 <__kernel_rem_pio2+0x78>
 800e112:	9b04      	ldr	r3, [sp, #16]
 800e114:	aa0c      	add	r2, sp, #48	; 0x30
 800e116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e11a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e11c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e11e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e122:	9c04      	ldr	r4, [sp, #16]
 800e124:	930a      	str	r3, [sp, #40]	; 0x28
 800e126:	ab98      	add	r3, sp, #608	; 0x260
 800e128:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e12c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e130:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e134:	f8cd b008 	str.w	fp, [sp, #8]
 800e138:	4625      	mov	r5, r4
 800e13a:	2d00      	cmp	r5, #0
 800e13c:	dc78      	bgt.n	800e230 <__kernel_rem_pio2+0x200>
 800e13e:	ec47 6b10 	vmov	d0, r6, r7
 800e142:	4650      	mov	r0, sl
 800e144:	f000 fbfc 	bl	800e940 <scalbn>
 800e148:	ec57 6b10 	vmov	r6, r7, d0
 800e14c:	2200      	movs	r2, #0
 800e14e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e152:	ee10 0a10 	vmov	r0, s0
 800e156:	4639      	mov	r1, r7
 800e158:	f7f2 fa76 	bl	8000648 <__aeabi_dmul>
 800e15c:	ec41 0b10 	vmov	d0, r0, r1
 800e160:	f000 fb6e 	bl	800e840 <floor>
 800e164:	4b7f      	ldr	r3, [pc, #508]	; (800e364 <__kernel_rem_pio2+0x334>)
 800e166:	ec51 0b10 	vmov	r0, r1, d0
 800e16a:	2200      	movs	r2, #0
 800e16c:	f7f2 fa6c 	bl	8000648 <__aeabi_dmul>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 f8ae 	bl	80002d8 <__aeabi_dsub>
 800e17c:	460f      	mov	r7, r1
 800e17e:	4606      	mov	r6, r0
 800e180:	f7f2 fd12 	bl	8000ba8 <__aeabi_d2iz>
 800e184:	9007      	str	r0, [sp, #28]
 800e186:	f7f2 f9f5 	bl	8000574 <__aeabi_i2d>
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	4630      	mov	r0, r6
 800e190:	4639      	mov	r1, r7
 800e192:	f7f2 f8a1 	bl	80002d8 <__aeabi_dsub>
 800e196:	f1ba 0f00 	cmp.w	sl, #0
 800e19a:	4606      	mov	r6, r0
 800e19c:	460f      	mov	r7, r1
 800e19e:	dd70      	ble.n	800e282 <__kernel_rem_pio2+0x252>
 800e1a0:	1e62      	subs	r2, r4, #1
 800e1a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e1a4:	9d07      	ldr	r5, [sp, #28]
 800e1a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1aa:	f1ca 0118 	rsb	r1, sl, #24
 800e1ae:	fa40 f301 	asr.w	r3, r0, r1
 800e1b2:	441d      	add	r5, r3
 800e1b4:	408b      	lsls	r3, r1
 800e1b6:	1ac0      	subs	r0, r0, r3
 800e1b8:	ab0c      	add	r3, sp, #48	; 0x30
 800e1ba:	9507      	str	r5, [sp, #28]
 800e1bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e1c0:	f1ca 0317 	rsb	r3, sl, #23
 800e1c4:	fa40 f303 	asr.w	r3, r0, r3
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	9b02      	ldr	r3, [sp, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	dd66      	ble.n	800e29e <__kernel_rem_pio2+0x26e>
 800e1d0:	9b07      	ldr	r3, [sp, #28]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	9307      	str	r3, [sp, #28]
 800e1d8:	4615      	mov	r5, r2
 800e1da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1de:	4294      	cmp	r4, r2
 800e1e0:	f300 8099 	bgt.w	800e316 <__kernel_rem_pio2+0x2e6>
 800e1e4:	f1ba 0f00 	cmp.w	sl, #0
 800e1e8:	dd07      	ble.n	800e1fa <__kernel_rem_pio2+0x1ca>
 800e1ea:	f1ba 0f01 	cmp.w	sl, #1
 800e1ee:	f000 80a5 	beq.w	800e33c <__kernel_rem_pio2+0x30c>
 800e1f2:	f1ba 0f02 	cmp.w	sl, #2
 800e1f6:	f000 80c1 	beq.w	800e37c <__kernel_rem_pio2+0x34c>
 800e1fa:	9b02      	ldr	r3, [sp, #8]
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d14e      	bne.n	800e29e <__kernel_rem_pio2+0x26e>
 800e200:	4632      	mov	r2, r6
 800e202:	463b      	mov	r3, r7
 800e204:	4958      	ldr	r1, [pc, #352]	; (800e368 <__kernel_rem_pio2+0x338>)
 800e206:	2000      	movs	r0, #0
 800e208:	f7f2 f866 	bl	80002d8 <__aeabi_dsub>
 800e20c:	4606      	mov	r6, r0
 800e20e:	460f      	mov	r7, r1
 800e210:	2d00      	cmp	r5, #0
 800e212:	d044      	beq.n	800e29e <__kernel_rem_pio2+0x26e>
 800e214:	4650      	mov	r0, sl
 800e216:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e358 <__kernel_rem_pio2+0x328>
 800e21a:	f000 fb91 	bl	800e940 <scalbn>
 800e21e:	4630      	mov	r0, r6
 800e220:	4639      	mov	r1, r7
 800e222:	ec53 2b10 	vmov	r2, r3, d0
 800e226:	f7f2 f857 	bl	80002d8 <__aeabi_dsub>
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	e036      	b.n	800e29e <__kernel_rem_pio2+0x26e>
 800e230:	4b4e      	ldr	r3, [pc, #312]	; (800e36c <__kernel_rem_pio2+0x33c>)
 800e232:	2200      	movs	r2, #0
 800e234:	4630      	mov	r0, r6
 800e236:	4639      	mov	r1, r7
 800e238:	f7f2 fa06 	bl	8000648 <__aeabi_dmul>
 800e23c:	f7f2 fcb4 	bl	8000ba8 <__aeabi_d2iz>
 800e240:	f7f2 f998 	bl	8000574 <__aeabi_i2d>
 800e244:	4b4a      	ldr	r3, [pc, #296]	; (800e370 <__kernel_rem_pio2+0x340>)
 800e246:	2200      	movs	r2, #0
 800e248:	4680      	mov	r8, r0
 800e24a:	4689      	mov	r9, r1
 800e24c:	f7f2 f9fc 	bl	8000648 <__aeabi_dmul>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4630      	mov	r0, r6
 800e256:	4639      	mov	r1, r7
 800e258:	f7f2 f83e 	bl	80002d8 <__aeabi_dsub>
 800e25c:	f7f2 fca4 	bl	8000ba8 <__aeabi_d2iz>
 800e260:	9b02      	ldr	r3, [sp, #8]
 800e262:	f843 0b04 	str.w	r0, [r3], #4
 800e266:	3d01      	subs	r5, #1
 800e268:	9302      	str	r3, [sp, #8]
 800e26a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e26c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	4640      	mov	r0, r8
 800e276:	4649      	mov	r1, r9
 800e278:	f7f2 f830 	bl	80002dc <__adddf3>
 800e27c:	4606      	mov	r6, r0
 800e27e:	460f      	mov	r7, r1
 800e280:	e75b      	b.n	800e13a <__kernel_rem_pio2+0x10a>
 800e282:	d105      	bne.n	800e290 <__kernel_rem_pio2+0x260>
 800e284:	1e63      	subs	r3, r4, #1
 800e286:	aa0c      	add	r2, sp, #48	; 0x30
 800e288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e28c:	15c3      	asrs	r3, r0, #23
 800e28e:	e79b      	b.n	800e1c8 <__kernel_rem_pio2+0x198>
 800e290:	4b38      	ldr	r3, [pc, #224]	; (800e374 <__kernel_rem_pio2+0x344>)
 800e292:	2200      	movs	r2, #0
 800e294:	f7f2 fc5e 	bl	8000b54 <__aeabi_dcmpge>
 800e298:	2800      	cmp	r0, #0
 800e29a:	d139      	bne.n	800e310 <__kernel_rem_pio2+0x2e0>
 800e29c:	9002      	str	r0, [sp, #8]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f2 fc37 	bl	8000b18 <__aeabi_dcmpeq>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	f000 80b4 	beq.w	800e418 <__kernel_rem_pio2+0x3e8>
 800e2b0:	f104 3bff 	add.w	fp, r4, #4294967295
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	9904      	ldr	r1, [sp, #16]
 800e2ba:	428b      	cmp	r3, r1
 800e2bc:	da65      	bge.n	800e38a <__kernel_rem_pio2+0x35a>
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	d07b      	beq.n	800e3ba <__kernel_rem_pio2+0x38a>
 800e2c2:	ab0c      	add	r3, sp, #48	; 0x30
 800e2c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e2c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f000 80a0 	beq.w	800e412 <__kernel_rem_pio2+0x3e2>
 800e2d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e358 <__kernel_rem_pio2+0x328>
 800e2d6:	4650      	mov	r0, sl
 800e2d8:	f000 fb32 	bl	800e940 <scalbn>
 800e2dc:	4f23      	ldr	r7, [pc, #140]	; (800e36c <__kernel_rem_pio2+0x33c>)
 800e2de:	ec55 4b10 	vmov	r4, r5, d0
 800e2e2:	46d8      	mov	r8, fp
 800e2e4:	2600      	movs	r6, #0
 800e2e6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ea:	f280 80cf 	bge.w	800e48c <__kernel_rem_pio2+0x45c>
 800e2ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e350 <__kernel_rem_pio2+0x320>
 800e2f2:	465f      	mov	r7, fp
 800e2f4:	f04f 0800 	mov.w	r8, #0
 800e2f8:	2f00      	cmp	r7, #0
 800e2fa:	f2c0 80fd 	blt.w	800e4f8 <__kernel_rem_pio2+0x4c8>
 800e2fe:	ab70      	add	r3, sp, #448	; 0x1c0
 800e300:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e378 <__kernel_rem_pio2+0x348>
 800e304:	ec55 4b18 	vmov	r4, r5, d8
 800e308:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e30c:	2600      	movs	r6, #0
 800e30e:	e0e5      	b.n	800e4dc <__kernel_rem_pio2+0x4ac>
 800e310:	2302      	movs	r3, #2
 800e312:	9302      	str	r3, [sp, #8]
 800e314:	e75c      	b.n	800e1d0 <__kernel_rem_pio2+0x1a0>
 800e316:	f8db 3000 	ldr.w	r3, [fp]
 800e31a:	b955      	cbnz	r5, 800e332 <__kernel_rem_pio2+0x302>
 800e31c:	b123      	cbz	r3, 800e328 <__kernel_rem_pio2+0x2f8>
 800e31e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e322:	f8cb 3000 	str.w	r3, [fp]
 800e326:	2301      	movs	r3, #1
 800e328:	3201      	adds	r2, #1
 800e32a:	f10b 0b04 	add.w	fp, fp, #4
 800e32e:	461d      	mov	r5, r3
 800e330:	e755      	b.n	800e1de <__kernel_rem_pio2+0x1ae>
 800e332:	1acb      	subs	r3, r1, r3
 800e334:	f8cb 3000 	str.w	r3, [fp]
 800e338:	462b      	mov	r3, r5
 800e33a:	e7f5      	b.n	800e328 <__kernel_rem_pio2+0x2f8>
 800e33c:	1e62      	subs	r2, r4, #1
 800e33e:	ab0c      	add	r3, sp, #48	; 0x30
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e348:	a90c      	add	r1, sp, #48	; 0x30
 800e34a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e34e:	e754      	b.n	800e1fa <__kernel_rem_pio2+0x1ca>
	...
 800e35c:	3ff00000 	.word	0x3ff00000
 800e360:	0800f0f0 	.word	0x0800f0f0
 800e364:	40200000 	.word	0x40200000
 800e368:	3ff00000 	.word	0x3ff00000
 800e36c:	3e700000 	.word	0x3e700000
 800e370:	41700000 	.word	0x41700000
 800e374:	3fe00000 	.word	0x3fe00000
 800e378:	0800f0b0 	.word	0x0800f0b0
 800e37c:	1e62      	subs	r2, r4, #1
 800e37e:	ab0c      	add	r3, sp, #48	; 0x30
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e388:	e7de      	b.n	800e348 <__kernel_rem_pio2+0x318>
 800e38a:	a90c      	add	r1, sp, #48	; 0x30
 800e38c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e390:	3b01      	subs	r3, #1
 800e392:	430a      	orrs	r2, r1
 800e394:	e790      	b.n	800e2b8 <__kernel_rem_pio2+0x288>
 800e396:	3301      	adds	r3, #1
 800e398:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e39c:	2900      	cmp	r1, #0
 800e39e:	d0fa      	beq.n	800e396 <__kernel_rem_pio2+0x366>
 800e3a0:	9a08      	ldr	r2, [sp, #32]
 800e3a2:	18e3      	adds	r3, r4, r3
 800e3a4:	18a6      	adds	r6, r4, r2
 800e3a6:	aa20      	add	r2, sp, #128	; 0x80
 800e3a8:	1c65      	adds	r5, r4, #1
 800e3aa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e3ae:	9302      	str	r3, [sp, #8]
 800e3b0:	9b02      	ldr	r3, [sp, #8]
 800e3b2:	42ab      	cmp	r3, r5
 800e3b4:	da04      	bge.n	800e3c0 <__kernel_rem_pio2+0x390>
 800e3b6:	461c      	mov	r4, r3
 800e3b8:	e6b5      	b.n	800e126 <__kernel_rem_pio2+0xf6>
 800e3ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e7eb      	b.n	800e398 <__kernel_rem_pio2+0x368>
 800e3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3c6:	f7f2 f8d5 	bl	8000574 <__aeabi_i2d>
 800e3ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3d0:	46b3      	mov	fp, r6
 800e3d2:	461c      	mov	r4, r3
 800e3d4:	2700      	movs	r7, #0
 800e3d6:	f04f 0800 	mov.w	r8, #0
 800e3da:	f04f 0900 	mov.w	r9, #0
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	429f      	cmp	r7, r3
 800e3e2:	dd06      	ble.n	800e3f2 <__kernel_rem_pio2+0x3c2>
 800e3e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800e3e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e3ea:	e9c3 8900 	strd	r8, r9, [r3]
 800e3ee:	3501      	adds	r5, #1
 800e3f0:	e7de      	b.n	800e3b0 <__kernel_rem_pio2+0x380>
 800e3f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e3f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e3fa:	f7f2 f925 	bl	8000648 <__aeabi_dmul>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	4640      	mov	r0, r8
 800e404:	4649      	mov	r1, r9
 800e406:	f7f1 ff69 	bl	80002dc <__adddf3>
 800e40a:	3701      	adds	r7, #1
 800e40c:	4680      	mov	r8, r0
 800e40e:	4689      	mov	r9, r1
 800e410:	e7e5      	b.n	800e3de <__kernel_rem_pio2+0x3ae>
 800e412:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e416:	e754      	b.n	800e2c2 <__kernel_rem_pio2+0x292>
 800e418:	ec47 6b10 	vmov	d0, r6, r7
 800e41c:	f1ca 0000 	rsb	r0, sl, #0
 800e420:	f000 fa8e 	bl	800e940 <scalbn>
 800e424:	ec57 6b10 	vmov	r6, r7, d0
 800e428:	4b9f      	ldr	r3, [pc, #636]	; (800e6a8 <__kernel_rem_pio2+0x678>)
 800e42a:	ee10 0a10 	vmov	r0, s0
 800e42e:	2200      	movs	r2, #0
 800e430:	4639      	mov	r1, r7
 800e432:	f7f2 fb8f 	bl	8000b54 <__aeabi_dcmpge>
 800e436:	b300      	cbz	r0, 800e47a <__kernel_rem_pio2+0x44a>
 800e438:	4b9c      	ldr	r3, [pc, #624]	; (800e6ac <__kernel_rem_pio2+0x67c>)
 800e43a:	2200      	movs	r2, #0
 800e43c:	4630      	mov	r0, r6
 800e43e:	4639      	mov	r1, r7
 800e440:	f7f2 f902 	bl	8000648 <__aeabi_dmul>
 800e444:	f7f2 fbb0 	bl	8000ba8 <__aeabi_d2iz>
 800e448:	4605      	mov	r5, r0
 800e44a:	f7f2 f893 	bl	8000574 <__aeabi_i2d>
 800e44e:	4b96      	ldr	r3, [pc, #600]	; (800e6a8 <__kernel_rem_pio2+0x678>)
 800e450:	2200      	movs	r2, #0
 800e452:	f7f2 f8f9 	bl	8000648 <__aeabi_dmul>
 800e456:	460b      	mov	r3, r1
 800e458:	4602      	mov	r2, r0
 800e45a:	4639      	mov	r1, r7
 800e45c:	4630      	mov	r0, r6
 800e45e:	f7f1 ff3b 	bl	80002d8 <__aeabi_dsub>
 800e462:	f7f2 fba1 	bl	8000ba8 <__aeabi_d2iz>
 800e466:	f104 0b01 	add.w	fp, r4, #1
 800e46a:	ab0c      	add	r3, sp, #48	; 0x30
 800e46c:	f10a 0a18 	add.w	sl, sl, #24
 800e470:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e474:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e478:	e72b      	b.n	800e2d2 <__kernel_rem_pio2+0x2a2>
 800e47a:	4630      	mov	r0, r6
 800e47c:	4639      	mov	r1, r7
 800e47e:	f7f2 fb93 	bl	8000ba8 <__aeabi_d2iz>
 800e482:	ab0c      	add	r3, sp, #48	; 0x30
 800e484:	46a3      	mov	fp, r4
 800e486:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e48a:	e722      	b.n	800e2d2 <__kernel_rem_pio2+0x2a2>
 800e48c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e48e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e492:	ab0c      	add	r3, sp, #48	; 0x30
 800e494:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e498:	f7f2 f86c 	bl	8000574 <__aeabi_i2d>
 800e49c:	4622      	mov	r2, r4
 800e49e:	462b      	mov	r3, r5
 800e4a0:	f7f2 f8d2 	bl	8000648 <__aeabi_dmul>
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	e9c9 0100 	strd	r0, r1, [r9]
 800e4aa:	463b      	mov	r3, r7
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f2 f8ca 	bl	8000648 <__aeabi_dmul>
 800e4b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	e713      	b.n	800e2e6 <__kernel_rem_pio2+0x2b6>
 800e4be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e4c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e4c6:	f7f2 f8bf 	bl	8000648 <__aeabi_dmul>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4620      	mov	r0, r4
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	f7f1 ff03 	bl	80002dc <__adddf3>
 800e4d6:	3601      	adds	r6, #1
 800e4d8:	4604      	mov	r4, r0
 800e4da:	460d      	mov	r5, r1
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	429e      	cmp	r6, r3
 800e4e0:	dc01      	bgt.n	800e4e6 <__kernel_rem_pio2+0x4b6>
 800e4e2:	45b0      	cmp	r8, r6
 800e4e4:	daeb      	bge.n	800e4be <__kernel_rem_pio2+0x48e>
 800e4e6:	ab48      	add	r3, sp, #288	; 0x120
 800e4e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e4ec:	e9c3 4500 	strd	r4, r5, [r3]
 800e4f0:	3f01      	subs	r7, #1
 800e4f2:	f108 0801 	add.w	r8, r8, #1
 800e4f6:	e6ff      	b.n	800e2f8 <__kernel_rem_pio2+0x2c8>
 800e4f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e4fa:	2b02      	cmp	r3, #2
 800e4fc:	dc0b      	bgt.n	800e516 <__kernel_rem_pio2+0x4e6>
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dc6e      	bgt.n	800e5e0 <__kernel_rem_pio2+0x5b0>
 800e502:	d045      	beq.n	800e590 <__kernel_rem_pio2+0x560>
 800e504:	9b07      	ldr	r3, [sp, #28]
 800e506:	f003 0007 	and.w	r0, r3, #7
 800e50a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e50e:	ecbd 8b02 	vpop	{d8}
 800e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e516:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e518:	2b03      	cmp	r3, #3
 800e51a:	d1f3      	bne.n	800e504 <__kernel_rem_pio2+0x4d4>
 800e51c:	ab48      	add	r3, sp, #288	; 0x120
 800e51e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e522:	46d0      	mov	r8, sl
 800e524:	46d9      	mov	r9, fp
 800e526:	f1b9 0f00 	cmp.w	r9, #0
 800e52a:	f1a8 0808 	sub.w	r8, r8, #8
 800e52e:	dc64      	bgt.n	800e5fa <__kernel_rem_pio2+0x5ca>
 800e530:	465c      	mov	r4, fp
 800e532:	2c01      	cmp	r4, #1
 800e534:	f1aa 0a08 	sub.w	sl, sl, #8
 800e538:	dc7e      	bgt.n	800e638 <__kernel_rem_pio2+0x608>
 800e53a:	2000      	movs	r0, #0
 800e53c:	2100      	movs	r1, #0
 800e53e:	f1bb 0f01 	cmp.w	fp, #1
 800e542:	f300 8097 	bgt.w	800e674 <__kernel_rem_pio2+0x644>
 800e546:	9b02      	ldr	r3, [sp, #8]
 800e548:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e54c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e550:	2b00      	cmp	r3, #0
 800e552:	f040 8099 	bne.w	800e688 <__kernel_rem_pio2+0x658>
 800e556:	9b01      	ldr	r3, [sp, #4]
 800e558:	e9c3 5600 	strd	r5, r6, [r3]
 800e55c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e560:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e564:	e7ce      	b.n	800e504 <__kernel_rem_pio2+0x4d4>
 800e566:	ab48      	add	r3, sp, #288	; 0x120
 800e568:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	f7f1 feb4 	bl	80002dc <__adddf3>
 800e574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e578:	f1bb 0f00 	cmp.w	fp, #0
 800e57c:	daf3      	bge.n	800e566 <__kernel_rem_pio2+0x536>
 800e57e:	9b02      	ldr	r3, [sp, #8]
 800e580:	b113      	cbz	r3, 800e588 <__kernel_rem_pio2+0x558>
 800e582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e586:	4619      	mov	r1, r3
 800e588:	9b01      	ldr	r3, [sp, #4]
 800e58a:	e9c3 0100 	strd	r0, r1, [r3]
 800e58e:	e7b9      	b.n	800e504 <__kernel_rem_pio2+0x4d4>
 800e590:	2000      	movs	r0, #0
 800e592:	2100      	movs	r1, #0
 800e594:	e7f0      	b.n	800e578 <__kernel_rem_pio2+0x548>
 800e596:	ab48      	add	r3, sp, #288	; 0x120
 800e598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	f7f1 fe9c 	bl	80002dc <__adddf3>
 800e5a4:	3c01      	subs	r4, #1
 800e5a6:	2c00      	cmp	r4, #0
 800e5a8:	daf5      	bge.n	800e596 <__kernel_rem_pio2+0x566>
 800e5aa:	9b02      	ldr	r3, [sp, #8]
 800e5ac:	b1e3      	cbz	r3, 800e5e8 <__kernel_rem_pio2+0x5b8>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5b4:	9c01      	ldr	r4, [sp, #4]
 800e5b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e5c2:	f7f1 fe89 	bl	80002d8 <__aeabi_dsub>
 800e5c6:	ad4a      	add	r5, sp, #296	; 0x128
 800e5c8:	2401      	movs	r4, #1
 800e5ca:	45a3      	cmp	fp, r4
 800e5cc:	da0f      	bge.n	800e5ee <__kernel_rem_pio2+0x5be>
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	b113      	cbz	r3, 800e5d8 <__kernel_rem_pio2+0x5a8>
 800e5d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	9b01      	ldr	r3, [sp, #4]
 800e5da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5de:	e791      	b.n	800e504 <__kernel_rem_pio2+0x4d4>
 800e5e0:	465c      	mov	r4, fp
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	e7de      	b.n	800e5a6 <__kernel_rem_pio2+0x576>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	e7e2      	b.n	800e5b4 <__kernel_rem_pio2+0x584>
 800e5ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e5f2:	f7f1 fe73 	bl	80002dc <__adddf3>
 800e5f6:	3401      	adds	r4, #1
 800e5f8:	e7e7      	b.n	800e5ca <__kernel_rem_pio2+0x59a>
 800e5fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e5fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e602:	4620      	mov	r0, r4
 800e604:	4632      	mov	r2, r6
 800e606:	463b      	mov	r3, r7
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f1 fe67 	bl	80002dc <__adddf3>
 800e60e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4620      	mov	r0, r4
 800e618:	4629      	mov	r1, r5
 800e61a:	f7f1 fe5d 	bl	80002d8 <__aeabi_dsub>
 800e61e:	4632      	mov	r2, r6
 800e620:	463b      	mov	r3, r7
 800e622:	f7f1 fe5b 	bl	80002dc <__adddf3>
 800e626:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e62a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e62e:	ed88 7b00 	vstr	d7, [r8]
 800e632:	f109 39ff 	add.w	r9, r9, #4294967295
 800e636:	e776      	b.n	800e526 <__kernel_rem_pio2+0x4f6>
 800e638:	e9da 8900 	ldrd	r8, r9, [sl]
 800e63c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e640:	4640      	mov	r0, r8
 800e642:	4632      	mov	r2, r6
 800e644:	463b      	mov	r3, r7
 800e646:	4649      	mov	r1, r9
 800e648:	f7f1 fe48 	bl	80002dc <__adddf3>
 800e64c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	4640      	mov	r0, r8
 800e656:	4649      	mov	r1, r9
 800e658:	f7f1 fe3e 	bl	80002d8 <__aeabi_dsub>
 800e65c:	4632      	mov	r2, r6
 800e65e:	463b      	mov	r3, r7
 800e660:	f7f1 fe3c 	bl	80002dc <__adddf3>
 800e664:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e66c:	ed8a 7b00 	vstr	d7, [sl]
 800e670:	3c01      	subs	r4, #1
 800e672:	e75e      	b.n	800e532 <__kernel_rem_pio2+0x502>
 800e674:	ab48      	add	r3, sp, #288	; 0x120
 800e676:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67e:	f7f1 fe2d 	bl	80002dc <__adddf3>
 800e682:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e686:	e75a      	b.n	800e53e <__kernel_rem_pio2+0x50e>
 800e688:	9b01      	ldr	r3, [sp, #4]
 800e68a:	9a01      	ldr	r2, [sp, #4]
 800e68c:	601d      	str	r5, [r3, #0]
 800e68e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e692:	605c      	str	r4, [r3, #4]
 800e694:	609f      	str	r7, [r3, #8]
 800e696:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e69a:	60d3      	str	r3, [r2, #12]
 800e69c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6a0:	6110      	str	r0, [r2, #16]
 800e6a2:	6153      	str	r3, [r2, #20]
 800e6a4:	e72e      	b.n	800e504 <__kernel_rem_pio2+0x4d4>
 800e6a6:	bf00      	nop
 800e6a8:	41700000 	.word	0x41700000
 800e6ac:	3e700000 	.word	0x3e700000

0800e6b0 <__kernel_sin>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	ed2d 8b04 	vpush	{d8-d9}
 800e6b8:	eeb0 8a41 	vmov.f32	s16, s2
 800e6bc:	eef0 8a61 	vmov.f32	s17, s3
 800e6c0:	ec55 4b10 	vmov	r4, r5, d0
 800e6c4:	b083      	sub	sp, #12
 800e6c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e6ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e6ce:	9001      	str	r0, [sp, #4]
 800e6d0:	da06      	bge.n	800e6e0 <__kernel_sin+0x30>
 800e6d2:	ee10 0a10 	vmov	r0, s0
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7f2 fa66 	bl	8000ba8 <__aeabi_d2iz>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d051      	beq.n	800e784 <__kernel_sin+0xd4>
 800e6e0:	4622      	mov	r2, r4
 800e6e2:	462b      	mov	r3, r5
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f1 ffae 	bl	8000648 <__aeabi_dmul>
 800e6ec:	4682      	mov	sl, r0
 800e6ee:	468b      	mov	fp, r1
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	f7f1 ffa6 	bl	8000648 <__aeabi_dmul>
 800e6fc:	a341      	add	r3, pc, #260	; (adr r3, 800e804 <__kernel_sin+0x154>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	4680      	mov	r8, r0
 800e704:	4689      	mov	r9, r1
 800e706:	4650      	mov	r0, sl
 800e708:	4659      	mov	r1, fp
 800e70a:	f7f1 ff9d 	bl	8000648 <__aeabi_dmul>
 800e70e:	a33f      	add	r3, pc, #252	; (adr r3, 800e80c <__kernel_sin+0x15c>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	f7f1 fde0 	bl	80002d8 <__aeabi_dsub>
 800e718:	4652      	mov	r2, sl
 800e71a:	465b      	mov	r3, fp
 800e71c:	f7f1 ff94 	bl	8000648 <__aeabi_dmul>
 800e720:	a33c      	add	r3, pc, #240	; (adr r3, 800e814 <__kernel_sin+0x164>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	f7f1 fdd9 	bl	80002dc <__adddf3>
 800e72a:	4652      	mov	r2, sl
 800e72c:	465b      	mov	r3, fp
 800e72e:	f7f1 ff8b 	bl	8000648 <__aeabi_dmul>
 800e732:	a33a      	add	r3, pc, #232	; (adr r3, 800e81c <__kernel_sin+0x16c>)
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f7f1 fdce 	bl	80002d8 <__aeabi_dsub>
 800e73c:	4652      	mov	r2, sl
 800e73e:	465b      	mov	r3, fp
 800e740:	f7f1 ff82 	bl	8000648 <__aeabi_dmul>
 800e744:	a337      	add	r3, pc, #220	; (adr r3, 800e824 <__kernel_sin+0x174>)
 800e746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74a:	f7f1 fdc7 	bl	80002dc <__adddf3>
 800e74e:	9b01      	ldr	r3, [sp, #4]
 800e750:	4606      	mov	r6, r0
 800e752:	460f      	mov	r7, r1
 800e754:	b9eb      	cbnz	r3, 800e792 <__kernel_sin+0xe2>
 800e756:	4602      	mov	r2, r0
 800e758:	460b      	mov	r3, r1
 800e75a:	4650      	mov	r0, sl
 800e75c:	4659      	mov	r1, fp
 800e75e:	f7f1 ff73 	bl	8000648 <__aeabi_dmul>
 800e762:	a325      	add	r3, pc, #148	; (adr r3, 800e7f8 <__kernel_sin+0x148>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 fdb6 	bl	80002d8 <__aeabi_dsub>
 800e76c:	4642      	mov	r2, r8
 800e76e:	464b      	mov	r3, r9
 800e770:	f7f1 ff6a 	bl	8000648 <__aeabi_dmul>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	4620      	mov	r0, r4
 800e77a:	4629      	mov	r1, r5
 800e77c:	f7f1 fdae 	bl	80002dc <__adddf3>
 800e780:	4604      	mov	r4, r0
 800e782:	460d      	mov	r5, r1
 800e784:	ec45 4b10 	vmov	d0, r4, r5
 800e788:	b003      	add	sp, #12
 800e78a:	ecbd 8b04 	vpop	{d8-d9}
 800e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e792:	4b1b      	ldr	r3, [pc, #108]	; (800e800 <__kernel_sin+0x150>)
 800e794:	ec51 0b18 	vmov	r0, r1, d8
 800e798:	2200      	movs	r2, #0
 800e79a:	f7f1 ff55 	bl	8000648 <__aeabi_dmul>
 800e79e:	4632      	mov	r2, r6
 800e7a0:	ec41 0b19 	vmov	d9, r0, r1
 800e7a4:	463b      	mov	r3, r7
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	4649      	mov	r1, r9
 800e7aa:	f7f1 ff4d 	bl	8000648 <__aeabi_dmul>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	ec51 0b19 	vmov	r0, r1, d9
 800e7b6:	f7f1 fd8f 	bl	80002d8 <__aeabi_dsub>
 800e7ba:	4652      	mov	r2, sl
 800e7bc:	465b      	mov	r3, fp
 800e7be:	f7f1 ff43 	bl	8000648 <__aeabi_dmul>
 800e7c2:	ec53 2b18 	vmov	r2, r3, d8
 800e7c6:	f7f1 fd87 	bl	80002d8 <__aeabi_dsub>
 800e7ca:	a30b      	add	r3, pc, #44	; (adr r3, 800e7f8 <__kernel_sin+0x148>)
 800e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d0:	4606      	mov	r6, r0
 800e7d2:	460f      	mov	r7, r1
 800e7d4:	4640      	mov	r0, r8
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	f7f1 ff36 	bl	8000648 <__aeabi_dmul>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	460b      	mov	r3, r1
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	f7f1 fd7a 	bl	80002dc <__adddf3>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	f7f1 fd72 	bl	80002d8 <__aeabi_dsub>
 800e7f4:	e7c4      	b.n	800e780 <__kernel_sin+0xd0>
 800e7f6:	bf00      	nop
 800e7f8:	55555549 	.word	0x55555549
 800e7fc:	3fc55555 	.word	0x3fc55555
 800e800:	3fe00000 	.word	0x3fe00000
 800e804:	5acfd57c 	.word	0x5acfd57c
 800e808:	3de5d93a 	.word	0x3de5d93a
 800e80c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e810:	3e5ae5e6 	.word	0x3e5ae5e6
 800e814:	57b1fe7d 	.word	0x57b1fe7d
 800e818:	3ec71de3 	.word	0x3ec71de3
 800e81c:	19c161d5 	.word	0x19c161d5
 800e820:	3f2a01a0 	.word	0x3f2a01a0
 800e824:	1110f8a6 	.word	0x1110f8a6
 800e828:	3f811111 	.word	0x3f811111

0800e82c <fabs>:
 800e82c:	ec51 0b10 	vmov	r0, r1, d0
 800e830:	ee10 2a10 	vmov	r2, s0
 800e834:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e838:	ec43 2b10 	vmov	d0, r2, r3
 800e83c:	4770      	bx	lr
	...

0800e840 <floor>:
 800e840:	ec51 0b10 	vmov	r0, r1, d0
 800e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e848:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e84c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e850:	2e13      	cmp	r6, #19
 800e852:	ee10 5a10 	vmov	r5, s0
 800e856:	ee10 8a10 	vmov	r8, s0
 800e85a:	460c      	mov	r4, r1
 800e85c:	dc32      	bgt.n	800e8c4 <floor+0x84>
 800e85e:	2e00      	cmp	r6, #0
 800e860:	da14      	bge.n	800e88c <floor+0x4c>
 800e862:	a333      	add	r3, pc, #204	; (adr r3, 800e930 <floor+0xf0>)
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	f7f1 fd38 	bl	80002dc <__adddf3>
 800e86c:	2200      	movs	r2, #0
 800e86e:	2300      	movs	r3, #0
 800e870:	f7f2 f97a 	bl	8000b68 <__aeabi_dcmpgt>
 800e874:	b138      	cbz	r0, 800e886 <floor+0x46>
 800e876:	2c00      	cmp	r4, #0
 800e878:	da57      	bge.n	800e92a <floor+0xea>
 800e87a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e87e:	431d      	orrs	r5, r3
 800e880:	d001      	beq.n	800e886 <floor+0x46>
 800e882:	4c2d      	ldr	r4, [pc, #180]	; (800e938 <floor+0xf8>)
 800e884:	2500      	movs	r5, #0
 800e886:	4621      	mov	r1, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	e025      	b.n	800e8d8 <floor+0x98>
 800e88c:	4f2b      	ldr	r7, [pc, #172]	; (800e93c <floor+0xfc>)
 800e88e:	4137      	asrs	r7, r6
 800e890:	ea01 0307 	and.w	r3, r1, r7
 800e894:	4303      	orrs	r3, r0
 800e896:	d01f      	beq.n	800e8d8 <floor+0x98>
 800e898:	a325      	add	r3, pc, #148	; (adr r3, 800e930 <floor+0xf0>)
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	f7f1 fd1d 	bl	80002dc <__adddf3>
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f7f2 f95f 	bl	8000b68 <__aeabi_dcmpgt>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d0eb      	beq.n	800e886 <floor+0x46>
 800e8ae:	2c00      	cmp	r4, #0
 800e8b0:	bfbe      	ittt	lt
 800e8b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e8b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800e8ba:	19a4      	addlt	r4, r4, r6
 800e8bc:	ea24 0407 	bic.w	r4, r4, r7
 800e8c0:	2500      	movs	r5, #0
 800e8c2:	e7e0      	b.n	800e886 <floor+0x46>
 800e8c4:	2e33      	cmp	r6, #51	; 0x33
 800e8c6:	dd0b      	ble.n	800e8e0 <floor+0xa0>
 800e8c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e8cc:	d104      	bne.n	800e8d8 <floor+0x98>
 800e8ce:	ee10 2a10 	vmov	r2, s0
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	f7f1 fd02 	bl	80002dc <__adddf3>
 800e8d8:	ec41 0b10 	vmov	d0, r0, r1
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e8:	fa23 f707 	lsr.w	r7, r3, r7
 800e8ec:	4207      	tst	r7, r0
 800e8ee:	d0f3      	beq.n	800e8d8 <floor+0x98>
 800e8f0:	a30f      	add	r3, pc, #60	; (adr r3, 800e930 <floor+0xf0>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	f7f1 fcf1 	bl	80002dc <__adddf3>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f7f2 f933 	bl	8000b68 <__aeabi_dcmpgt>
 800e902:	2800      	cmp	r0, #0
 800e904:	d0bf      	beq.n	800e886 <floor+0x46>
 800e906:	2c00      	cmp	r4, #0
 800e908:	da02      	bge.n	800e910 <floor+0xd0>
 800e90a:	2e14      	cmp	r6, #20
 800e90c:	d103      	bne.n	800e916 <floor+0xd6>
 800e90e:	3401      	adds	r4, #1
 800e910:	ea25 0507 	bic.w	r5, r5, r7
 800e914:	e7b7      	b.n	800e886 <floor+0x46>
 800e916:	2301      	movs	r3, #1
 800e918:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e91c:	fa03 f606 	lsl.w	r6, r3, r6
 800e920:	4435      	add	r5, r6
 800e922:	4545      	cmp	r5, r8
 800e924:	bf38      	it	cc
 800e926:	18e4      	addcc	r4, r4, r3
 800e928:	e7f2      	b.n	800e910 <floor+0xd0>
 800e92a:	2500      	movs	r5, #0
 800e92c:	462c      	mov	r4, r5
 800e92e:	e7aa      	b.n	800e886 <floor+0x46>
 800e930:	8800759c 	.word	0x8800759c
 800e934:	7e37e43c 	.word	0x7e37e43c
 800e938:	bff00000 	.word	0xbff00000
 800e93c:	000fffff 	.word	0x000fffff

0800e940 <scalbn>:
 800e940:	b570      	push	{r4, r5, r6, lr}
 800e942:	ec55 4b10 	vmov	r4, r5, d0
 800e946:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e94a:	4606      	mov	r6, r0
 800e94c:	462b      	mov	r3, r5
 800e94e:	b99a      	cbnz	r2, 800e978 <scalbn+0x38>
 800e950:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e954:	4323      	orrs	r3, r4
 800e956:	d036      	beq.n	800e9c6 <scalbn+0x86>
 800e958:	4b39      	ldr	r3, [pc, #228]	; (800ea40 <scalbn+0x100>)
 800e95a:	4629      	mov	r1, r5
 800e95c:	ee10 0a10 	vmov	r0, s0
 800e960:	2200      	movs	r2, #0
 800e962:	f7f1 fe71 	bl	8000648 <__aeabi_dmul>
 800e966:	4b37      	ldr	r3, [pc, #220]	; (800ea44 <scalbn+0x104>)
 800e968:	429e      	cmp	r6, r3
 800e96a:	4604      	mov	r4, r0
 800e96c:	460d      	mov	r5, r1
 800e96e:	da10      	bge.n	800e992 <scalbn+0x52>
 800e970:	a32b      	add	r3, pc, #172	; (adr r3, 800ea20 <scalbn+0xe0>)
 800e972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e976:	e03a      	b.n	800e9ee <scalbn+0xae>
 800e978:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e97c:	428a      	cmp	r2, r1
 800e97e:	d10c      	bne.n	800e99a <scalbn+0x5a>
 800e980:	ee10 2a10 	vmov	r2, s0
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fca8 	bl	80002dc <__adddf3>
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	e019      	b.n	800e9c6 <scalbn+0x86>
 800e992:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e996:	460b      	mov	r3, r1
 800e998:	3a36      	subs	r2, #54	; 0x36
 800e99a:	4432      	add	r2, r6
 800e99c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e9a0:	428a      	cmp	r2, r1
 800e9a2:	dd08      	ble.n	800e9b6 <scalbn+0x76>
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	a120      	add	r1, pc, #128	; (adr r1, 800ea28 <scalbn+0xe8>)
 800e9a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ac:	da1c      	bge.n	800e9e8 <scalbn+0xa8>
 800e9ae:	a120      	add	r1, pc, #128	; (adr r1, 800ea30 <scalbn+0xf0>)
 800e9b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9b4:	e018      	b.n	800e9e8 <scalbn+0xa8>
 800e9b6:	2a00      	cmp	r2, #0
 800e9b8:	dd08      	ble.n	800e9cc <scalbn+0x8c>
 800e9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9c6:	ec45 4b10 	vmov	d0, r4, r5
 800e9ca:	bd70      	pop	{r4, r5, r6, pc}
 800e9cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e9d0:	da19      	bge.n	800ea06 <scalbn+0xc6>
 800e9d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e9d6:	429e      	cmp	r6, r3
 800e9d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e9dc:	dd0a      	ble.n	800e9f4 <scalbn+0xb4>
 800e9de:	a112      	add	r1, pc, #72	; (adr r1, 800ea28 <scalbn+0xe8>)
 800e9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e2      	bne.n	800e9ae <scalbn+0x6e>
 800e9e8:	a30f      	add	r3, pc, #60	; (adr r3, 800ea28 <scalbn+0xe8>)
 800e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ee:	f7f1 fe2b 	bl	8000648 <__aeabi_dmul>
 800e9f2:	e7cb      	b.n	800e98c <scalbn+0x4c>
 800e9f4:	a10a      	add	r1, pc, #40	; (adr r1, 800ea20 <scalbn+0xe0>)
 800e9f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d0b8      	beq.n	800e970 <scalbn+0x30>
 800e9fe:	a10e      	add	r1, pc, #56	; (adr r1, 800ea38 <scalbn+0xf8>)
 800ea00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea04:	e7b4      	b.n	800e970 <scalbn+0x30>
 800ea06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea0a:	3236      	adds	r2, #54	; 0x36
 800ea0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ea14:	4620      	mov	r0, r4
 800ea16:	4b0c      	ldr	r3, [pc, #48]	; (800ea48 <scalbn+0x108>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	e7e8      	b.n	800e9ee <scalbn+0xae>
 800ea1c:	f3af 8000 	nop.w
 800ea20:	c2f8f359 	.word	0xc2f8f359
 800ea24:	01a56e1f 	.word	0x01a56e1f
 800ea28:	8800759c 	.word	0x8800759c
 800ea2c:	7e37e43c 	.word	0x7e37e43c
 800ea30:	8800759c 	.word	0x8800759c
 800ea34:	fe37e43c 	.word	0xfe37e43c
 800ea38:	c2f8f359 	.word	0xc2f8f359
 800ea3c:	81a56e1f 	.word	0x81a56e1f
 800ea40:	43500000 	.word	0x43500000
 800ea44:	ffff3cb0 	.word	0xffff3cb0
 800ea48:	3c900000 	.word	0x3c900000

0800ea4c <_init>:
 800ea4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea4e:	bf00      	nop
 800ea50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea52:	bc08      	pop	{r3}
 800ea54:	469e      	mov	lr, r3
 800ea56:	4770      	bx	lr

0800ea58 <_fini>:
 800ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea5a:	bf00      	nop
 800ea5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5e:	bc08      	pop	{r3}
 800ea60:	469e      	mov	lr, r3
 800ea62:	4770      	bx	lr
